"name"	"package"	"summary"	"Description"	"Usage"	"Arguments"	"error"
"stats-package"	"stats"	"The R Stats Package"	"<p>R statistical functions </p>"	NA	NA	FALSE
"acf"	"stats"	"Auto- and Cross- Covariance and -Correlation Function Estimation"	"<p>The function <code>acf</code> computes (and by default plots) estimates of the autocovariance or autocorrelation function.  Function <code>pacf</code> is the function used for the partial autocorrelations.  Function <code>ccf</code> computes the cross-correlation or cross-covariance of two univariate series. </p>"	"<pre>acf(x, lag.max = NULL,<br />     type = c('correlation', 'covariance', 'partial'),<br />     plot = TRUE, na.action = na.fail, demean = TRUE, ...)<br />pacf(x, lag.max, plot, na.action, ...)<br />## Default S3 method: pacf(x, lag.max = NULL, plot = TRUE, na.action = na.fail,<br />     ...)<br />ccf(x, y, lag.max = NULL, type = c('correlation', 'covariance'),<br />     plot = TRUE, na.action = na.fail, ...)<br />## S3 method for class 'acf' x[i, j] </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>a univariate or multivariate (not <code>ccf</code>) numeric time series object or a numeric vector or matrix, or an <code>'acf'</code> object.</p> </td> </tr> <tr valign='top'> <td><code>lag.max</code></td> <td> <p>maximum lag at which to calculate the acf. Default is <i>10*log10(N/m)</i> where <i>N</i> is the number of observations and <i>m</i> the number of series.  Will be automatically limited to one less than the number of observations in the series.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string giving the type of acf to be computed. Allowed values are <code>'correlation'</code> (the default), <code>'covariance'</code> or <code>'partial'</code>.  Will be partially matched.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>logical. If <code>TRUE</code> (the default) the acf is plotted.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>function to be called to handle missing values. <code>na.pass</code> can be used.</p> </td> </tr> <tr valign='top'> <td><code>demean</code></td> <td> <p>logical.  Should the covariances be about the sample means?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to <code>plot.acf</code>.</p> </td> </tr> <tr valign='top'> <td><code>i</code></td> <td> <p>a set of lags (time differences) to retain.</p> </td> </tr> <tr valign='top'> <td><code>j</code></td> <td> <p>a set of series (names or numbers) to retain.</p> </td> </tr> </table> "	FALSE
"acf2AR"	"stats"	"Compute an AR Process Exactly Fitting an ACF"	"<p>Compute an AR process exactly fitting an autocorrelation function. </p>"	"<pre>acf2AR(acf) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>acf</code></td> <td> <p>An autocorrelation or autocovariance sequence.</p> </td> </tr></table> "	FALSE
"factor.scope"	"stats"	"Compute Allowed Changes in Adding to or Dropping from a Formula"	"<p><code>add.scope</code> and <code>drop.scope</code> compute those terms that can be individually added to or dropped from a model while respecting the hierarchy of terms. </p>"	"<pre>add.scope(terms1, terms2)<br />drop.scope(terms1, terms2)<br />factor.scope(factor, scope) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>terms1</code></td> <td> <p>the terms or formula for the base model.</p> </td> </tr> <tr valign='top'> <td><code>terms2</code></td> <td> <p>the terms or formula for the upper (<code>add.scope</code>) or lower (<code>drop.scope</code>) scope. If missing for <code>drop.scope</code> it is taken to be the null formula, so all terms (except any intercept) are candidates to be dropped.</p> </td> </tr> <tr valign='top'> <td><code>factor</code></td> <td> <p>the <code>'factor'</code> attribute of the terms of the base object.</p> </td> </tr> <tr valign='top'> <td><code>scope</code></td> <td> <p>a list with one or both components <code>drop</code> and <code>add</code> giving the <code>'factor'</code> attribute of the lower and upper scopes respectively.</p> </td> </tr> </table> "	FALSE
"add1"	"stats"	"Add or Drop All Possible Single Terms to a Model"	"<p>Compute all the single terms in the <code>scope</code> argument that can be added to or dropped from the model, fit those models and compute a table of the changes in fit. </p>"	"<pre>add1(object, scope, ...)<br />## Default S3 method: add1(object, scope, scale = 0, test = c('none', 'Chisq'),<br />      k = 2, trace = FALSE, ...)<br />## S3 method for class 'lm' add1(object, scope, scale = 0, test = c('none', 'Chisq', 'F'),<br />      x = NULL, k = 2, ...)<br />## S3 method for class 'glm' add1(object, scope, scale = 0,<br />      test = c('none', 'Rao', 'LRT', 'Chisq', 'F'),<br />      x = NULL, k = 2, ...)<br />drop1(object, scope, ...)<br />## Default S3 method: drop1(object, scope, scale = 0, test = c('none', 'Chisq'),<br />       k = 2, trace = FALSE, ...)<br />## S3 method for class 'lm' drop1(object, scope, scale = 0, all.cols = TRUE,<br />       test = c('none', 'Chisq', 'F'), k = 2, ...)<br />## S3 method for class 'glm' drop1(object, scope, scale = 0,<br />       test = c('none', 'Rao', 'LRT', 'Chisq', 'F'),<br />       k = 2, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a fitted model object.</p> </td> </tr> <tr valign='top'> <td><code>scope</code></td> <td> <p>a formula giving the terms to be considered for adding or dropping.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>an estimate of the residual mean square to be used in computing <i>Cp</i>. Ignored if <code>0</code> or <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>test</code></td> <td> <p>should the results include a test statistic relative to the original model?  The F test is only appropriate for <code>lm</code> and <code>aov</code> models or perhaps for <code>glm</code> fits with estimated dispersion. The <i>Chisq</i> test can be an exact test (<code>lm</code> models with known scale) or a likelihood-ratio test or a test of the reduction in scaled deviance depending on the method. For <code>glm</code> fits, you can also choose <code>'LRT'</code> and <code>'Rao'</code> for likelihood ratio tests and Rao's efficient score test. The former is synonymous with <code>'Chisq'</code> (although both have an asymptotic chi-square distribution). Values can be abbreviated. </p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>the penalty constant in AIC / <i>Cp</i>.</p> </td> </tr> <tr valign='top'> <td><code>trace</code></td> <td> <p>if <code>TRUE</code>, print out progress reports.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a model matrix containing columns for the fitted model and all terms in the upper scope.  Useful if <code>add1</code> is to be called repeatedly.  <b>Warning:</b> no checks are done on its validity.</p> </td> </tr> <tr valign='top'> <td><code>all.cols</code></td> <td> <p>(Provided for compatibility with S.)  Logical to specify whether all columns of the design matrix should be used.  If <code>FALSE</code> then non-estimable columns are dropped, but the result is not usually statistically meaningful.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"addmargins"	"stats"	"Puts Arbitrary Margins on Multidimensional Tables or Arrays"	"<p>For a given table one can specify which of the classifying factors to expand by one or more levels to hold margins to be calculated.  One may for example form sums and means over the first dimension and medians over the second.  The resulting table will then have two extra levels for the first dimension and one extra level for the second.  The default is to sum over all margins in the table.  Other possibilities may give results that depend on the order in which the margins are computed.  This is flagged in the printed output from the function. </p>"	"<pre>addmargins(A, margin = seq_along(dim(A)), FUN = sum, quiet = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>A</code></td> <td> <p>table or array.  The function uses the presence of the <code>'dim'</code> and <code>'dimnames'</code> attributes of <code>A</code>.</p> </td> </tr> <tr valign='top'> <td><code>margin</code></td> <td> <p>vector of dimensions over which to form margins.  Margins are formed in the order in which dimensions are specified in <code>margin</code>.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>list of the same length as <code>margin</code>, each element of the list being either a function or a list of functions.  Names of the list elements will appear as levels in dimnames of the result. Unnamed list elements will have names constructed:  the name of a function or a constructed name based on the position in the table.</p> </td> </tr> <tr valign='top'> <td><code>quiet</code></td> <td> <p>logical which suppresses the message telling the order in which the margins were computed.</p> </td> </tr> </table> "	FALSE
"aggregate"	"stats"	"Compute Summary Statistics of Data Subsets"	"<p>Splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form. </p>"	"<pre>aggregate(x, ...)<br />## Default S3 method: aggregate(x, ...)<br />## S3 method for class 'data.frame' aggregate(x, by, FUN, ..., simplify = TRUE, drop = TRUE)<br />## S3 method for class 'formula' aggregate(formula, data, FUN, ...,<br />           subset, na.action = na.omit)<br />## S3 method for class 'ts' aggregate(x, nfrequency = 1, FUN = sum, ndeltat = 1,<br />           ts.eps = getOption('ts.eps'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an R object.</p> </td> </tr> <tr valign='top'> <td><code>by</code></td> <td> <p>a list of grouping elements, each as long as the variables in the data frame <code>x</code>.  The elements are coerced to factors before use.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>a function to compute the summary statistics which can be applied to all data subsets.</p> </td> </tr> <tr valign='top'> <td><code>simplify</code></td> <td> <p>a logical indicating whether results should be simplified to a vector or matrix if possible.</p> </td> </tr> <tr valign='top'> <td><code>drop</code></td> <td> <p>a logical indicating whether to drop unused combinations of grouping values.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula, such as <code>y ~ x</code> or <code>cbind(y1, y2) ~ x1 + x2</code>, where the <code>y</code> variables are numeric data to be split into groups according to the grouping <code>x</code> variables (usually factors).</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data frame (or list) from which the variables in formula should be taken.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code> values. The default is to ignore missing values in the given variables.</p> </td> </tr> <tr valign='top'> <td><code>nfrequency</code></td> <td> <p>new number of observations per unit of time; must be a divisor of the frequency of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>ndeltat</code></td> <td> <p>new fraction of the sampling period between successive observations; must be a divisor of the sampling interval of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>ts.eps</code></td> <td> <p>tolerance used to decide if <code>nfrequency</code> is a sub-multiple of the original frequency.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or used by methods.</p> </td> </tr> </table> "	FALSE
"AIC"	"stats"	"Akaike's An Information Criterion"	"<p>Generic function calculating Akaike's ‘An Information Criterion’ for one or several fitted model objects for which a log-likelihood value can be obtained, according to the formula <i>-2*log-likelihood + k*npar</i>, where <i>npar</i> represents the number of parameters in the fitted model, and <i>k = 2</i> for the usual AIC, or <i>k = log(n)</i> (<i>n</i> being the number of observations) for the so-called BIC or SBC (Schwarz's Bayesian criterion). </p>"	"<pre>AIC(object, ..., k = 2)<br />BIC(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a fitted model object for which there exists a <code>logLik</code> method to extract the corresponding log-likelihood, or an object inheriting from class <code>logLik</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optionally more fitted model objects.</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>numeric, the <em>penalty</em> per parameter to be used; the default <code>k = 2</code> is the classical AIC.</p> </td> </tr> </table> "	FALSE
"alias"	"stats"	"Find Aliases (Dependencies) in a Model"	"<p>Find aliases (linearly dependent terms) in a linear model specified by a formula. </p>"	"<pre>alias(object, ...)<br />## S3 method for class 'formula' alias(object, data, ...)<br />## S3 method for class 'lm' alias(object, complete = TRUE, partial = FALSE,<br />       partial.pattern = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>A fitted model object, for example from <code>lm</code> or <code>aov</code>, or a formula for <code>alias.formula</code>.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>Optionally, a data frame to search for the objects in the formula.</p> </td> </tr> <tr valign='top'> <td><code>complete</code></td> <td> <p>Should information on complete aliasing be included?</p> </td> </tr> <tr valign='top'> <td><code>partial</code></td> <td> <p>Should information on partial aliasing be included?</p> </td> </tr> <tr valign='top'> <td><code>partial.pattern</code></td> <td> <p>Should partial aliasing be presented in a schematic way? If this is done, the results are presented in a more compact way, usually giving the deciles of the coefficients.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"anova"	"stats"	"Anova Tables"	"<p>Compute analysis of variance (or deviance) tables for one or more fitted model objects. </p>"	"<pre>anova(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object containing the results returned by a model fitting function (e.g., <code>lm</code> or <code>glm</code>).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional objects of the same type.</p> </td> </tr> </table> "	FALSE
"anova.glm"	"stats"	"Analysis of Deviance for Generalized Linear Model Fits"	"<p>Compute an analysis of deviance table for one or more generalized linear model fits. </p>"	"<pre>## S3 method for class 'glm' anova(object, ..., dispersion = NULL, test = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object, ...</code></td> <td> <p>objects of class <code>glm</code>, typically the result of a call to <code>glm</code>, or a list of <code>objects</code> for the <code>'glmlist'</code> method.</p> </td> </tr> <tr valign='top'> <td><code>dispersion</code></td> <td> <p>the dispersion parameter for the fitting family. By default it is obtained from the object(s).</p> </td> </tr> <tr valign='top'> <td><code>test</code></td> <td> <p>a character string, (partially) matching one of <code>'Chisq'</code>, <code>'LRT'</code>, <code>'Rao'</code>, <code>'F'</code> or <code>'Cp'</code>. See <code>stat.anova</code>.</p> </td> </tr> </table> "	FALSE
"anova.lm"	"stats"	"ANOVA for Linear Model Fits"	"<p>Compute an analysis of variance table for one or more linear model fits. </p>"	"<pre>## S3 method for class 'lm' anova(object, ...)<br />## S3 method for class 'lmlist' anova(object, ..., scale = 0, test = 'F') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object, ...</code></td> <td> <p>objects of class <code>lm</code>, usually, a result of a call to <code>lm</code>.</p> </td> </tr> <tr valign='top'> <td><code>test</code></td> <td> <p>a character string specifying the test statistic to be used. Can be one of <code>'F'</code>, <code>'Chisq'</code> or <code>'Cp'</code>, with partial matching allowed, or <code>NULL</code> for no test.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>numeric. An estimate of the noise variance <i>σ^2</i>. If zero this will be estimated from the largest model considered. </p> </td> </tr> </table> "	FALSE
"anova.mlm"	"stats"	"Comparisons between Multivariate Linear Models"	"<p>Compute a (generalized) analysis of variance table for one or more multivariate linear models. </p>"	"<pre>## S3 method for class 'mlm' anova(object, ...,<br />       test = c('Pillai', 'Wilks', 'Hotelling-Lawley', 'Roy',<br />                'Spherical'),<br />       Sigma = diag(nrow = p), T = Thin.row(proj(M) - proj(X)),<br />       M = diag(nrow = p), X = ~0,<br />       idata = data.frame(index = seq_len(p)), tol = 1e-7) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object of class <code>'mlm'</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further objects of class <code>'mlm'</code>.</p> </td> </tr> <tr valign='top'> <td><code>test</code></td> <td> <p>choice of test statistic (see below).  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>Sigma</code></td> <td> <p>(only relevant if  <code>test == 'Spherical'</code>).  Covariance matrix assumed proportional to <code>Sigma</code>.</p> </td> </tr> <tr valign='top'> <td><code>T</code></td> <td> <p>transformation matrix.  By default computed from <code>M</code> and <code>X</code>.</p> </td> </tr> <tr valign='top'> <td><code>M</code></td> <td> <p>formula or matrix describing the outer projection (see below).</p> </td> </tr> <tr valign='top'> <td><code>X</code></td> <td> <p>formula or matrix describing the inner projection (see below).</p> </td> </tr> <tr valign='top'> <td><code>idata</code></td> <td> <p>data frame describing intra-block design.</p> </td> </tr> </table>  <table summary='R argblock'><tr valign='top'> <td><code>tol</code></td> <td> <p>tolerance to be used in deciding if the residuals are rank-deficient: see <code>qr</code>.</p> </td> </tr></table> "	FALSE
"ansari.test"	"stats"	"Ansari-Bradley Test"	"<p>Performs the Ansari-Bradley two-sample test for a difference in scale parameters. </p>"	"<pre>ansari.test(x, ...)<br />## Default S3 method: ansari.test(x, y,<br />             alternative = c('two.sided', 'less', 'greater'),<br />             exact = NULL, conf.int = FALSE, conf.level = 0.95,<br />             ...)<br />## S3 method for class 'formula' ansari.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric vector of data values.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>numeric vector of data values.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>indicates the alternative hypothesis and must be one of <code>'two.sided'</code>, <code>'greater'</code> or <code>'less'</code>.  You can specify just the initial letter.</p> </td> </tr> <tr valign='top'> <td><code>exact</code></td> <td> <p>a logical indicating whether an exact p-value should be computed.</p> </td> </tr> <tr valign='top'> <td><code>conf.int</code></td> <td> <p>a logical,indicating whether a confidence interval should be computed.</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level of the interval.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>lhs ~ rhs</code> where <code>lhs</code> is a numeric variable giving the data values and <code>rhs</code> a factor with two levels giving the corresponding groups.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"aov"	"stats"	"Fit an Analysis of Variance Model"	"<p>Fit an analysis of variance model by a call to <code>lm</code> for each stratum. </p>"	"<pre>aov(formula, data = NULL, projections = FALSE, qr = TRUE,<br />     contrasts = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>A formula specifying the model.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>A data frame in which the variables specified in the formula will be found. If missing, the variables are searched for in the standard way.</p> </td> </tr> <tr valign='top'> <td><code>projections</code></td> <td> <p>Logical flag: should the projections be returned?</p> </td> </tr> <tr valign='top'> <td><code>qr</code></td> <td> <p>Logical flag: should the QR decomposition be returned?</p> </td> </tr> <tr valign='top'> <td><code>contrasts</code></td> <td> <p>A list of contrasts to be used for some of the factors in the formula. These are not used for any <code>Error</code> term, and supplying contrasts for factors only in the <code>Error</code> term will give a warning.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Arguments to be passed to <code>lm</code>, such as <code>subset</code> or <code>na.action</code>.  See ‘Details’ about <code>weights</code>.</p> </td> </tr> </table> "	FALSE
"approxfun"	"stats"	"Interpolation Functions"	"<p>Return a list of points which linearly interpolate given data points, or a function performing the linear (or constant) interpolation. </p>"	"<pre>approx<br />   (x, y = NULL, xout, method = 'linear', n = 50,<br />           yleft, yright, rule = 1, f = 0, ties = mean)<br />approxfun(x, y = NULL,<br />       method = 'linear',<br />           yleft, yright, rule = 1, f = 0, ties = mean) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric vectors giving the coordinates of the points to be interpolated.  Alternatively a single plotting structure can be specified: see <code>xy.coords</code>.</p> </td> </tr> <tr valign='top'> <td><code>xout</code></td> <td> <p>an optional set of numeric values specifying where interpolation is to take place.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>specifies the interpolation method to be used.  Choices are <code>'linear'</code> or <code>'constant'</code>.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>If <code>xout</code> is not specified, interpolation takes place at <code>n</code> equally spaced points spanning the interval [<code>min(x)</code>, <code>max(x)</code>].</p> </td> </tr> <tr valign='top'> <td><code>yleft</code></td> <td> <p>the value to be returned when input <code>x</code> values are less than <code>min(x)</code>. The default is defined by the value of <code>rule</code> given below.</p> </td> </tr> <tr valign='top'> <td><code>yright</code></td> <td> <p>the value to be returned when input <code>x</code> values are greater than <code>max(x)</code>. The default is defined by the value of <code>rule</code> given below.</p> </td> </tr> <tr valign='top'> <td><code>rule</code></td> <td> <p>an integer (of length 1 or 2) describing how interpolation is to take place outside the interval [<code>min(x)</code>, <code>max(x)</code>]. If <code>rule</code> is <code>1</code> then <code>NA</code>s are returned for such points and if it is <code>2</code>, the value at the closest data extreme is used.  Use, e.g., <code>rule = 2:1</code>, if the left and right side extrapolation should differ.</p> </td> </tr> <tr valign='top'> <td><code>f</code></td> <td> <p>for <code>method = 'constant'</code> a number between 0 and 1 inclusive, indicating a compromise between left- and  right-continuous step functions. If <code>y0</code> and <code>y1</code> are the values to the left and right of the point then the value is <code>y0</code> if <code>f == 0</code>, <code>y1</code> if <code>f == 1</code>, and <code> y0*(1-f)+y1*f</code> for intermediate values. In this way the result is right-continuous for <code>f == 0</code> and left-continuous for <code>f<br />     == 1</code>, even for non-finite <code>y</code> values.</p> </td> </tr> <tr valign='top'> <td><code>ties</code></td> <td> <p>Handling of tied <code>x</code> values.  Either a function with a single vector argument returning a single number result or the string <code>'ordered'</code>.</p> </td> </tr> </table> "	FALSE
"ar"	"stats"	"Fit Autoregressive Models to Time Series"	"<p>Fit an autoregressive time series model to the data, by default selecting the complexity by AIC. </p>"	"<pre>ar(x, aic = TRUE, order.max = NULL,<br />    method = c('yule-walker', 'burg', 'ols', 'mle', 'yw'),<br />    na.action, series, ...)<br />ar.burg(x, ...) ## Default S3 method: ar.burg(x, aic = TRUE, order.max = NULL,<br />         na.action = na.fail, demean = TRUE, series,<br />         var.method = 1, ...) ## S3 method for class 'mts' ar.burg(x, aic = TRUE, order.max = NULL,<br />         na.action = na.fail, demean = TRUE, series,<br />         var.method = 1, ...)<br />ar.yw(x, ...) ## Default S3 method: ar.yw(x, aic = TRUE, order.max = NULL,<br />       na.action = na.fail, demean = TRUE, series, ...) ## S3 method for class 'mts' ar.yw(x, aic = TRUE, order.max = NULL,<br />       na.action = na.fail, demean = TRUE, series,<br />       var.method = 1, ...)<br />ar.mle(x, aic = TRUE, order.max = NULL, na.action = na.fail,<br />        demean = TRUE, series, ...)<br />## S3 method for class 'ar' predict(object, newdata, n.ahead = 1, se.fit = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A univariate or multivariate time series.</p> </td> </tr> <tr valign='top'> <td><code>aic</code></td> <td> <p>Logical flag.  If <code>TRUE</code> then the Akaike Information Criterion is used to choose the order of the autoregressive model. If <code>FALSE</code>, the model of order <code>order.max</code> is fitted.</p> </td> </tr> <tr valign='top'> <td><code>order.max</code></td> <td> <p>Maximum order (or order) of model to fit. Defaults to the smaller of <i>N-1</i> and <i>10*log10(N)</i> where <i>N</i> is the number of observations except for <code>method = 'mle'</code> where it is the minimum of this quantity and 12.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>Character string giving the method used to fit the model.  Must be one of the strings in the default argument (the first few characters are sufficient).  Defaults to <code>'yule-walker'</code>.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>function to be called to handle missing values.</p> </td> </tr> <tr valign='top'> <td><code>demean</code></td> <td> <p>should a mean be estimated during fitting?</p> </td> </tr> <tr valign='top'> <td><code>series</code></td> <td> <p>names for the series.  Defaults to <code>deparse(substitute(x))</code>.</p> </td> </tr> <tr valign='top'> <td><code>var.method</code></td> <td> <p>the method to estimate the innovations variance (see ‘Details’).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments for specific methods.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>a fit from <code>ar</code>.</p> </td> </tr> <tr valign='top'> <td><code>newdata</code></td> <td> <p>data to which to apply the prediction.</p> </td> </tr> <tr valign='top'> <td><code>n.ahead</code></td> <td> <p>number of steps ahead at which to predict.</p> </td> </tr> <tr valign='top'> <td><code>se.fit</code></td> <td> <p>logical: return estimated standard errors of the prediction error?</p> </td> </tr> </table> "	FALSE
"ar.ols"	"stats"	"Fit Autoregressive Models to Time Series by OLS"	"<p>Fit an autoregressive time series model to the data by ordinary least squares, by default selecting the complexity by AIC. </p>"	"<pre>ar.ols(x, aic = TRUE, order.max = NULL, na.action = na.fail,<br />        demean = TRUE, intercept = demean, series, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A univariate or multivariate time series.</p> </td> </tr> <tr valign='top'> <td><code>aic</code></td> <td> <p>Logical flag.  If <code>TRUE</code> then the Akaike Information Criterion is used to choose the order of the autoregressive model. If <code>FALSE</code>, the model of order <code>order.max</code> is fitted.</p> </td> </tr> <tr valign='top'> <td><code>order.max</code></td> <td> <p>Maximum order (or order) of model to fit. Defaults to <i>10*log10(N)</i> where <i>N</i> is the number of observations.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>function to be called to handle missing values.</p> </td> </tr> <tr valign='top'> <td><code>demean</code></td> <td> <p>should the AR model be for <code>x</code> minus its mean?</p> </td> </tr> <tr valign='top'> <td><code>intercept</code></td> <td> <p>should a separate intercept term be fitted?</p> </td> </tr> <tr valign='top'> <td><code>series</code></td> <td> <p>names for the series.  Defaults to <code>deparse(substitute(x))</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"arima"	"stats"	"ARIMA Modelling of Time Series"	"<p>Fit an ARIMA model to a univariate time series. </p>"	"<pre>arima(x, order = c(0L, 0L, 0L),<br />       seasonal = list(order = c(0L, 0L, 0L), period = NA),<br />       xreg = NULL, include.mean = TRUE,<br />       transform.pars = TRUE,<br />       fixed = NULL, init = NULL,<br />       method = c('CSS-ML', 'ML', 'CSS'), n.cond,<br />       SSinit = c('Gardner1980', 'Rossignol2011'),<br />       optim.method = 'BFGS',<br />       optim.control = list(), kappa = 1e6) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a univariate time series</p> </td> </tr> <tr valign='top'> <td><code>order</code></td> <td> <p>A specification of the non-seasonal part of the ARIMA model: the three integer components <i>(p, d, q)</i> are the AR order, the degree of differencing, and the MA order.</p> </td> </tr> <tr valign='top'> <td><code>seasonal</code></td> <td> <p>A specification of the seasonal part of the ARIMA model, plus the period (which defaults to <code>frequency(x)</code>). This should be a list with components <code>order</code> and <code>period</code>, but a specification of just a numeric vector of length 3 will be turned into a suitable list with the specification as the <code>order</code>.</p> </td> </tr> <tr valign='top'> <td><code>xreg</code></td> <td> <p>Optionally, a vector or matrix of external regressors, which must have the same number of rows as <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>include.mean</code></td> <td> <p>Should the ARMA model include a mean/intercept term?  The default is <code>TRUE</code> for undifferenced series, and it is ignored for ARIMA models with differencing.</p> </td> </tr> <tr valign='top'> <td><code>transform.pars</code></td> <td> <p>logical; if true, the AR parameters are transformed to ensure that they remain in the region of stationarity.  Not used for <code>method = 'CSS'</code>.  For <code>method = 'ML'</code>, it has been advantageous to set <code>transform.pars = FALSE</code> in some cases, see also <code>fixed</code>.</p> </td> </tr> <tr valign='top'> <td><code>fixed</code></td> <td> <p>optional numeric vector of the same length as the total number of parameters.  If supplied, only <code>NA</code> entries in <code>fixed</code> will be varied.  <code>transform.pars = TRUE</code> will be overridden (with a warning) if any AR parameters are fixed. It may be wise to set <code>transform.pars = FALSE</code> when fixing MA parameters, especially near non-invertibility. </p> </td> </tr> <tr valign='top'> <td><code>init</code></td> <td> <p>optional numeric vector of initial parameter values.  Missing values will be filled in, by zeroes except for regression coefficients.  Values already specified in <code>fixed</code> will be ignored.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>fitting method: maximum likelihood or minimize conditional sum-of-squares.  The default (unless there are missing values) is to use conditional-sum-of-squares to find starting values, then maximum likelihood.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>n.cond</code></td> <td> <p>only used if fitting by conditional-sum-of-squares: the number of initial observations to ignore.  It will be ignored if less than the maximum lag of an AR term.</p> </td> </tr> <tr valign='top'> <td><code>SSinit</code></td> <td> <p>a string specifying the algorithm to compute the state-space initialization of the likelihood; see <code>KalmanLike</code> for details.<br />   Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>optim.method</code></td> <td> <p>The value passed as the <code>method</code> argument to <code>optim</code>.</p> </td> </tr> <tr valign='top'> <td><code>optim.control</code></td> <td> <p>List of control parameters for <code>optim</code>.</p> </td> </tr> <tr valign='top'> <td><code>kappa</code></td> <td> <p>the prior variance (as a multiple of the innovations variance) for the past observations in a differenced model.  Do not reduce this.</p> </td> </tr> </table> "	FALSE
"arima.sim"	"stats"	"Simulate from an ARIMA Model"	"<p>Simulate from an ARIMA model. </p>"	"<pre>arima.sim(model, n, rand.gen = rnorm, innov = rand.gen(n, ...),<br />           n.start = NA, start.innov = rand.gen(n.start, ...),<br />           ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>model</code></td> <td> <p>A list with component <code>ar</code> and/or <code>ma</code> giving the AR and MA coefficients respectively.  Optionally a component <code>order</code> can be used.  An empty list gives an ARIMA(0, 0, 0) model, that is white noise.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>length of output series, before un-differencing.  A strictly positive integer.</p> </td> </tr> <tr valign='top'> <td><code>rand.gen</code></td> <td> <p>optional: a function to generate the innovations.</p> </td> </tr> <tr valign='top'> <td><code>innov</code></td> <td> <p>an optional times series of innovations.  If not provided, <code>rand.gen</code> is used.</p> </td> </tr> <tr valign='top'> <td><code>n.start</code></td> <td> <p>length of ‘burn-in’ period.  If <code>NA</code>, the default, a reasonable value is computed.</p> </td> </tr> <tr valign='top'> <td><code>start.innov</code></td> <td> <p>an optional times series of innovations to be used for the burn-in period.  If supplied there must be at least <code>n.start</code> values (and <code>n.start</code> is by default computed inside the function).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments for <code>rand.gen</code>.  Most usefully, the standard deviation of the innovations generated by <code>rnorm</code> can be specified by <code>sd</code>.</p> </td> </tr> </table> "	FALSE
"arima0"	"stats"	"ARIMA Modelling of Time Series – Preliminary Version"	"<p>Fit an ARIMA model to a univariate time series, and forecast from the fitted model. </p>"	"<pre>arima0(x, order = c(0, 0, 0),<br />        seasonal = list(order = c(0, 0, 0), period = NA),<br />        xreg = NULL, include.mean = TRUE, delta = 0.01,<br />        transform.pars = TRUE, fixed = NULL, init = NULL,<br />        method = c('ML', 'CSS'), n.cond, optim.control = list())<br />## S3 method for class 'arima0' predict(object, n.ahead = 1, newxreg, se.fit = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a univariate time series</p> </td> </tr> <tr valign='top'> <td><code>order</code></td> <td> <p>A specification of the non-seasonal part of the ARIMA model: the three components <i>(p, d, q)</i> are the AR order, the degree of differencing, and the MA order.</p> </td> </tr> <tr valign='top'> <td><code>seasonal</code></td> <td> <p>A specification of the seasonal part of the ARIMA model, plus the period (which defaults to <code>frequency(x)</code>). This should be a list with components <code>order</code> and <code>period</code>, but a specification of just a numeric vector of length 3 will be turned into a suitable list with the specification as the <code>order</code>.</p> </td> </tr> <tr valign='top'> <td><code>xreg</code></td> <td> <p>Optionally, a vector or matrix of external regressors, which must have the same number of rows as <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>include.mean</code></td> <td> <p>Should the ARIMA model include a mean term? The default is <code>TRUE</code> for undifferenced series, <code>FALSE</code> for differenced ones (where a mean would not affect the fit nor predictions).</p> </td> </tr> <tr valign='top'> <td><code>delta</code></td> <td> <p>A value to indicate at which point ‘fast recursions’ should be used.  See the ‘Details’ section.</p> </td> </tr> <tr valign='top'> <td><code>transform.pars</code></td> <td> <p>Logical.  If true, the AR parameters are transformed to ensure that they remain in the region of stationarity.  Not used for <code>method = 'CSS'</code>.</p> </td> </tr> <tr valign='top'> <td><code>fixed</code></td> <td> <p>optional numeric vector of the same length as the total number of parameters.  If supplied, only <code>NA</code> entries in <code>fixed</code> will be varied.  <code>transform.pars = TRUE</code> will be overridden (with a warning) if any ARMA parameters are fixed.</p> </td> </tr> <tr valign='top'> <td><code>init</code></td> <td> <p>optional numeric vector of initial parameter values.  Missing values will be filled in, by zeroes except for regression coefficients.  Values already specified in <code>fixed</code> will be ignored.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>Fitting method: maximum likelihood or minimize conditional sum-of-squares.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>n.cond</code></td> <td> <p>Only used if fitting by conditional-sum-of-squares: the number of initial observations to ignore.  It will be ignored if less than the maximum lag of an AR term.</p> </td> </tr> <tr valign='top'> <td><code>optim.control</code></td> <td> <p>List of control parameters for <code>optim</code>.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>The result of an <code>arima0</code> fit.</p> </td> </tr> <tr valign='top'> <td><code>newxreg</code></td> <td> <p>New values of <code>xreg</code> to be used for prediction. Must have at least <code>n.ahead</code> rows.</p> </td> </tr> <tr valign='top'> <td><code>n.ahead</code></td> <td> <p>The number of steps ahead for which prediction is required.</p> </td> </tr> <tr valign='top'> <td><code>se.fit</code></td> <td> <p>Logical: should standard errors of prediction be returned?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"ARMAacf"	"stats"	"Compute Theoretical ACF for an ARMA Process"	"<p>Compute the theoretical autocorrelation function or partial autocorrelation function for an ARMA process. </p>"	"<pre>ARMAacf(ar = numeric(), ma = numeric(), lag.max = r, pacf = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>ar</code></td> <td> <p>numeric vector of AR coefficients</p> </td> </tr> <tr valign='top'> <td><code>ma</code></td> <td> <p>numeric vector of MA coefficients</p> </td> </tr> <tr valign='top'> <td><code>lag.max</code></td> <td> <p>integer.  Maximum lag required.  Defaults to <code>max(p, q+1)</code>, where <code>p, q</code> are the numbers of AR and MA terms respectively.</p> </td> </tr> <tr valign='top'> <td><code>pacf</code></td> <td> <p>logical.  Should the partial autocorrelations be returned?</p> </td> </tr> </table> "	FALSE
"ARMAtoMA"	"stats"	"Convert ARMA Process to Infinite MA Process"	"<p>Convert ARMA process to infinite MA process. </p>"	"<pre>ARMAtoMA(ar = numeric(), ma = numeric(), lag.max) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>ar</code></td> <td> <p>numeric vector of AR coefficients</p> </td> </tr> <tr valign='top'> <td><code>ma</code></td> <td> <p>numeric vector of MA coefficients</p> </td> </tr> <tr valign='top'> <td><code>lag.max</code></td> <td> <p>Largest MA(Inf) coefficient required.</p> </td> </tr> </table> "	FALSE
"dendrogram"	"stats"	"General Tree Structures"	"<p>Class <code>'dendrogram'</code> provides general functions for handling tree-like structures.  It is intended as a replacement for similar functions in hierarchical clustering and classification/regression trees, such that all of these can use the same engine for plotting or cutting trees. </p>"	"<pre>as.dendrogram(object, ...) ## S3 method for class 'hclust' as.dendrogram(object, hang = -1, check = TRUE, ...)<br />## S3 method for class 'dendrogram' as.hclust(x, ...)<br />## S3 method for class 'dendrogram' plot(x, type = c('rectangle', 'triangle'),<br />       center = FALSE,<br />       edge.root = is.leaf(x) || !is.null(attr(x,'edgetext')),<br />       nodePar = NULL, edgePar = list(),<br />       leaflab = c('perpendicular', 'textlike', 'none'),<br />       dLeaf = NULL, xlab = '', ylab = '', xaxt = 'n', yaxt = 's',<br />       horiz = FALSE, frame.plot = FALSE, xlim, ylim, ...)<br />## S3 method for class 'dendrogram' cut(x, h, ...)<br />## S3 method for class 'dendrogram' merge(x, y, ..., height,<br />       adjust = c('auto', 'add.max', 'none'))<br />## S3 method for class 'dendrogram' nobs(object, ...)<br />## S3 method for class 'dendrogram' print(x, digits, ...)<br />## S3 method for class 'dendrogram' rev(x)<br />## S3 method for class 'dendrogram' str(object, max.level = NA, digits.d = 3,<br />     give.attr = FALSE, wid = getOption('width'),<br />     nest.lev = 0, indent.str = '',<br />     last.str = getOption('str.dendrogram.last'), stem = '--',<br />     ...)<br />is.leaf(object) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object that can be made into one of class <code>'dendrogram'</code>.</p> </td> </tr> <tr valign='top'> <td><code>x, y</code></td> <td> <p>object(s) of class <code>'dendrogram'</code>.</p> </td> </tr> <tr valign='top'> <td><code>hang</code></td> <td> <p>numeric scalar indicating how the <em>height</em> of leaves should be computed from the heights of their parents; see <code>plot.hclust</code>.</p> </td> </tr> <tr valign='top'> <td><code>check</code></td> <td> <p>logical indicating if <code>object</code> should be checked for validity.  This check is not necessary when <code>x</code> is known to be valid such as when it is the direct result of <code>hclust()</code>.  The default is <code>check=TRUE</code>, e.g. for protecting against memory explosion with invalid inputs.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>type of plot.</p> </td> </tr> <tr valign='top'> <td><code>center</code></td> <td> <p>logical; if <code>TRUE</code>, nodes are plotted centered with respect to the leaves in the branch.  Otherwise (default), plot them in the middle of all direct child nodes.</p> </td> </tr> <tr valign='top'> <td><code>edge.root</code></td> <td> <p>logical; if true, draw an edge to the root node.</p> </td> </tr> <tr valign='top'> <td><code>nodePar</code></td> <td> <p>a <code>list</code> of plotting parameters to use for the nodes (see <code>points</code>) or <code>NULL</code> by default which does not draw symbols at the nodes.  The list may contain components named <code>pch</code>, <code>cex</code>, <code>col</code>, <code>xpd</code>, and/or <code>bg</code> each of which can have length two for specifying separate attributes for <em>inner</em> nodes and <em>leaves</em>.  Note that the default of <code>pch</code> is <code>1:2</code>, so you may want to use <code>pch = NA</code> if you specify <code>nodePar</code>.</p> </td> </tr> <tr valign='top'> <td><code>edgePar</code></td> <td> <p>a <code>list</code> of plotting parameters to use for the edge <code>segments</code> and labels (if there's an <code>edgetext</code>).  The list may contain components named <code>col</code>, <code>lty</code> and <code>lwd</code> (for the segments), <code>p.col</code>, <code>p.lwd</code>, and <code>p.lty</code> (for the <code>polygon</code> around the text) and <code>t.col</code> for the text color.  As with <code>nodePar</code>, each can have length two for differentiating leaves and inner nodes. </p> </td> </tr> <tr valign='top'> <td><code>leaflab</code></td> <td> <p>a string specifying how leaves are labeled.  The default <code>'perpendicular'</code> write text vertically (by default).<br><code>'textlike'</code> writes text horizontally (in a rectangle), and <br><code>'none'</code> suppresses leaf labels.</p> </td> </tr> <tr valign='top'> <td><code>dLeaf</code></td> <td> <p>a number specifying the <b>d</b>istance in user coordinates between the tip of a leaf and its label.  If <code>NULL</code> as per default, 3/4 of a letter width or height is used.</p> </td> </tr> <tr valign='top'> <td><code>horiz</code></td> <td> <p>logical indicating if the dendrogram should be drawn <em>horizontally</em> or not.</p> </td> </tr> <tr valign='top'> <td><code>frame.plot</code></td> <td> <p>logical indicating if a box around the plot should be drawn, see <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>h</code></td> <td> <p>height at which the tree is cut.</p> </td> </tr> <tr valign='top'> <td><code>height</code></td> <td> <p>height at which the two dendrograms should be merged.  If not specified (or <code>NULL</code>), the default is ten percent larger than the (larger of the) two component heights.</p> </td> </tr> <tr valign='top'> <td><code>adjust</code></td> <td> <p>a string determining if the leaf values should be adjusted.  The default, <code>'auto'</code>, checks if the (first) two dendrograms both start at <code>1</code>; if they do, code'add.max' is chosen, which adds the maximum of the previous dendrogram leaf values to each leaf of the “next” dendrogram.  Specifying <code>adjust</code> to another value skips the check and hence is a tad more efficient.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>optional x- and y-limits of the plot, passed to <code>plot.default</code>.  The defaults for these show the full dendrogram.</p> </td> </tr> <tr valign='top'> <td><code>..., xlab, ylab, xaxt, yaxt</code></td> <td> <p>graphical parameters, or arguments for other methods.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>integer specifying the precision for printing, see <code>print.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>max.level, digits.d, give.attr, wid, nest.lev, indent.str</code></td> <td> <p>arguments to <code>str</code>, see <code>str.default()</code>.  Note that <code>give.attr = FALSE</code> still shows <code>height</code> and <code>members</code> attributes for each node.</p> </td> </tr> <tr valign='top'> <td><code>last.str, stem</code></td> <td> <p>strings used for <code>str()</code> specifying how the last branch (at each level) should start and the <em>stem</em> to use for each dendrogram branch.  In some environments, using <code>last.str = '''</code> will provide much nicer looking output, than the historical default <code>last.str = '`'</code>.</p> </td> </tr> </table> "	FALSE
"dist"	"stats"	"Distance Matrix Computation"	"<p>This function computes and returns the distance matrix computed by using the specified distance measure to compute the distances between the rows of a data matrix. </p>"	"<pre>dist(x, method = 'euclidean', diag = FALSE, upper = FALSE, p = 2)<br />as.dist(m, diag = FALSE, upper = FALSE) ## Default S3 method: as.dist(m, diag = FALSE, upper = FALSE)<br />## S3 method for class 'dist' print(x, diag = NULL, upper = NULL,<br />       digits = getOption('digits'), justify = 'none',<br />       right = TRUE, ...)<br />## S3 method for class 'dist' as.matrix(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric matrix, data frame or <code>'dist'</code> object.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>the distance measure to be used. This must be one of <code>'euclidean'</code>, <code>'maximum'</code>, <code>'manhattan'</code>, <code>'canberra'</code>, <code>'binary'</code> or <code>'minkowski'</code>. Any unambiguous substring can be given.</p> </td> </tr> <tr valign='top'> <td><code>diag</code></td> <td> <p>logical value indicating whether the diagonal of the distance matrix should be printed by <code>print.dist</code>.</p> </td> </tr> <tr valign='top'> <td><code>upper</code></td> <td> <p>logical value indicating whether the upper triangle of the distance matrix should be printed by <code>print.dist</code>.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>The power of the Minkowski distance.</p> </td> </tr> <tr valign='top'> <td><code>m</code></td> <td> <p>An object with distance information to be converted to a <code>'dist'</code> object.  For the default method, a <code>'dist'</code> object, or a matrix (of distances) or an object which can be coerced to such a matrix using <code>as.matrix()</code>.  (Only the lower triangle of the matrix is used, the rest is ignored).</p> </td> </tr> <tr valign='top'> <td><code>digits, justify</code></td> <td> <p>passed to <code>format</code> inside of <code>print()</code>.</p> </td> </tr> <tr valign='top'> <td><code>right, ...</code></td> <td> <p>further arguments, passed to other methods.</p> </td> </tr> </table> "	FALSE
"formula"	"stats"	"Model Formulae"	"<p>The generic function <code>formula</code> and its specific methods provide a way of extracting formulae which have been included in other objects. </p> <p><code>as.formula</code> is almost identical, additionally preserving attributes when <code>object</code> already inherits from <code>'formula'</code>. </p>"	"<pre>formula(x, ...) as.formula(object, env = parent.frame())<br />## S3 method for class 'formula' print(x, showEnv = !identical(e, .GlobalEnv), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, object</code></td> <td> <p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> <tr valign='top'> <td><code>env</code></td> <td> <p>the environment to associate with the result, if not already a formula.</p> </td> </tr> <tr valign='top'> <td><code>showEnv</code></td> <td> <p>logical indicating if the environment should be printed as well.</p> </td> </tr> </table> "	FALSE
"as.hclust"	"stats"	"Convert Objects to Class hclust"	"<p>Converts objects from other hierarchical clustering functions to class <code>'hclust'</code>. </p>"	"<pre>as.hclust(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>Hierarchical clustering object</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"stepfun"	"stats"	"Step Functions - Creation and Class"	"<p>Given the vectors <i>(x[1], …, x[n])</i> and <i>(y[0], y[1], …, y[n])</i> (one value more!), <code>stepfun(x, y, ...)</code> returns an interpolating ‘step’ function, say <code>fn</code>. I.e., <i>fn(t) =<br />     c</i><i>[i]</i> (constant) for <i>t in (<br />     x[i], x[i+1])</i> and at the abscissa values, if (by default) <code>right = FALSE</code>, <i>fn(x[i]) = y[i]</i> and for <code>right = TRUE</code>, <i>fn(x[i]) = y[i-1]</i>, for <i>i=1, …, n</i>. </p> <p>The value of the constant <i>c[i]</i> above depends on the ‘continuity’ parameter <code>f</code>. For the default, <code>right = FALSE, f = 0</code>, <code>fn</code> is a <em>cadlag</em> function, i.e., continuous from the right, limits from the left, so that the function is piecewise constant on intervals that include their <em>left</em> endpoint. In general, <i>c[i]</i> is interpolated in between the neighbouring <i>y</i> values, <i>c[i] = (1-f)*y[i] + f*y[i+1]</i>. Therefore, for non-0 values of <code>f</code>, <code>fn</code> may no longer be a proper step function, since it can be discontinuous from both sides, unless <code>right = TRUE, f = 1</code> which is left-continuous (i.e., constant pieces contain their right endpoint). </p>"	"<pre>stepfun(x, y, f = as.numeric(right), ties = 'ordered',<br />         right = FALSE)<br />is.stepfun(x) knots(Fn, ...) as.stepfun(x, ...)<br />## S3 method for class 'stepfun' print(x, digits = getOption('digits') - 2, ...)<br />## S3 method for class 'stepfun' summary(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric vector giving the knots or jump locations of the step function for <code>stepfun()</code>.  For the other functions, <code>x</code> is as <code>object</code> below.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>numeric vector one longer than <code>x</code>, giving the heights of the function values <em>between</em> the x values.</p> </td> </tr> <tr valign='top'> <td><code>f</code></td> <td> <p>a number between 0 and 1, indicating how interpolation outside the given x values should happen.  See <code>approxfun</code>.</p> </td> </tr> <tr valign='top'> <td><code>ties</code></td> <td> <p>Handling of tied <code>x</code> values. Either a function or the string <code>'ordered'</code>.  See  <code>approxfun</code>.</p> </td> </tr> <tr valign='top'> <td><code>right</code></td> <td> <p>logical, indicating if the intervals should be closed on the right (and open on the left) or vice versa.</p> </td> </tr> <tr valign='top'> <td><code>Fn, object</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object inheriting from <code>'stepfun'</code>.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>number of significant digits to use, see <code>print</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>potentially further arguments (required by the generic).</p> </td> </tr> </table> "	FALSE
"ts"	"stats"	"Time-Series Objects"	"<p>The function <code>ts</code> is used to create time-series objects. </p> <p><code>as.ts</code> and <code>is.ts</code> coerce an object to a time-series and test whether an object is a time series. </p>"	"<pre>ts(data = NA, start = 1, end = numeric(), frequency = 1,<br />    deltat = 1, ts.eps = getOption('ts.eps'), class = , names = ) as.ts(x, ...) is.ts(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>data</code></td> <td> <p>a vector or matrix of the observed time-series values. A data frame will be coerced to a numeric matrix via <code>data.matrix</code>.  (See also ‘Details’.)</p> </td> </tr> <tr valign='top'> <td><code>start</code></td> <td> <p>the time of the first observation.  Either a single number or a vector of two integers, which specify a natural time unit and a (1-based) number of samples into the time unit.  See the examples for the use of the second form.</p> </td> </tr> <tr valign='top'> <td><code>end</code></td> <td> <p>the time of the last observation, specified in the same way as <code>start</code>.</p> </td> </tr> <tr valign='top'> <td><code>frequency</code></td> <td> <p>the number of observations per unit of time.</p> </td> </tr> <tr valign='top'> <td><code>deltat</code></td> <td> <p>the fraction of the sampling period between successive observations; e.g., 1/12 for monthly data.  Only one of <code>frequency</code> or <code>deltat</code> should be provided.</p> </td> </tr> <tr valign='top'> <td><code>ts.eps</code></td> <td> <p>time series comparison tolerance.  Frequencies are considered equal if their absolute difference is less than <code>ts.eps</code>.</p> </td> </tr> <tr valign='top'> <td><code>class</code></td> <td> <p>class to be given to the result, or none if <code>NULL</code> or <code>'none'</code>.  The default is <code>'ts'</code> for a single series, <code>c('mts', 'ts', 'matrix')</code> for multiple series.</p> </td> </tr> <tr valign='top'> <td><code>names</code></td> <td> <p>a character vector of names for the series in a multiple series: defaults to the colnames of <code>data</code>, or <code>Series 1</code>, <code>Series 2</code>, ....</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an arbitrary <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to methods (unused for the default method).</p> </td> </tr> </table> "	FALSE
"asOneSidedFormula"	"stats"	"Convert to One-Sided Formula"	"<p>Names, expressions, numeric values, and character strings are converted to one-sided formulae. If <code>object</code> is a formula, it must be one-sided, in which case it is returned unaltered. </p>"	"<pre>asOneSidedFormula(object) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>object</code></td> <td> <p>a one-sided formula, an expression, a numeric value, or a character string.</p> </td> </tr></table> "	FALSE
"ave"	"stats"	"Group Averages Over Level Combinations of Factors"	"<p>Subsets of <code>x[]</code> are averaged, where each subset consist of those observations with the same factor levels. </p>"	"<pre>ave(x, ..., FUN = mean) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A numeric.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Grouping variables, typically factors, all of the same <code>length</code> as <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>Function to apply for each factor level combination.</p> </td> </tr> </table> "	FALSE
"kernel"	"stats"	"Smoothing Kernel Objects"	"<p>The <code>'tskernel'</code> class is designed to represent discrete symmetric normalized smoothing kernels.  These kernels can be used to smooth vectors, matrices, or time series objects. </p> <p>There are <code>print</code>, <code>plot</code> and <code>[</code> methods for these kernel objects. </p>"	"<pre>kernel(coef, m = 2, r, name)<br />df.kernel(k) bandwidth.kernel(k) is.tskernel(k)<br />## S3 method for class 'tskernel' plot(x, type = 'h', xlab = 'k', ylab = 'W[k]',<br />      main = attr(x,'name'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>coef</code></td> <td> <p>the upper half of the smoothing kernel coefficients (including coefficient zero) <em>or</em> the name of a kernel (currently <code>'daniell'</code>, <code>'dirichlet'</code>, <code>'fejer'</code> or <code>'modified.daniell'</code>.</p> </td> </tr> <tr valign='top'> <td><code>m</code></td> <td> <p>the kernel dimension(s) if <code>coef</code> is a name.  When <code>m</code> has length larger than one, it means the convolution of kernels of dimension <code>m[j]</code>, for <code>j in 1:length(m)</code>. Currently this is supported only for the named '*daniell' kernels.</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>the name the kernel will be called.</p> </td> </tr> <tr valign='top'> <td><code>r</code></td> <td> <p>the kernel order for a Fejer kernel.</p> </td> </tr> <tr valign='top'> <td><code>k, x</code></td> <td> <p>a <code>'tskernel'</code> object.</p> </td> </tr> <tr valign='top'> <td><code>type, xlab, ylab, main, ...</code></td> <td> <p>arguments passed to <code>plot.default</code>.</p> </td> </tr> </table> "	FALSE
"bartlett.test"	"stats"	"Bartlett Test of Homogeneity of Variances"	"<p>Performs Bartlett's test of the null that the variances in each of the groups (samples) are the same. </p>"	"<pre>bartlett.test(x, ...)<br />## Default S3 method: bartlett.test(x, g, ...)<br />## S3 method for class 'formula' bartlett.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector of data values, or a list of numeric data vectors representing the respective samples, or fitted linear model objects (inheriting from class <code>'lm'</code>).</p> </td> </tr> <tr valign='top'> <td><code>g</code></td> <td> <p>a vector or factor object giving the group for the corresponding elements of <code>x</code>. Ignored if <code>x</code> is a list.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>lhs ~ rhs</code> where <code>lhs</code> gives the data values and <code>rhs</code> the corresponding groups.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"Beta"	"stats"	"The Beta Distribution"	"<p>Density, distribution function, quantile function and random generation for the Beta distribution with parameters <code>shape1</code> and <code>shape2</code> (and optional non-centrality parameter <code>ncp</code>). </p>"	"<pre>dbeta(x, shape1, shape2, ncp = 0, log = FALSE) pbeta(q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE) qbeta(p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE) rbeta(n, shape1, shape2, ncp = 0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>shape1, shape2</code></td> <td> <p>non-negative parameters of the Beta distribution.</p> </td> </tr> <tr valign='top'> <td><code>ncp</code></td> <td> <p>non-centrality parameter.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"binom.test"	"stats"	"Exact Binomial Test"	"<p>Performs an exact test of a simple null hypothesis about the probability of success in a Bernoulli experiment. </p>"	"<pre>binom.test(x, n, p = 0.5,<br />            alternative = c('two.sided', 'less', 'greater'),<br />            conf.level = 0.95) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>number of successes, or a vector of length 2 giving the numbers of successes and failures, respectively.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of trials; ignored if <code>x</code> has length 2.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>hypothesized probability of success.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>indicates the alternative hypothesis and must be one of <code>'two.sided'</code>, <code>'greater'</code> or <code>'less'</code>. You can specify just the initial letter.</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level for the returned confidence interval.</p> </td> </tr> </table> "	FALSE
"Binomial"	"stats"	"The Binomial Distribution"	"<p>Density, distribution function, quantile function and random generation for the binomial distribution with parameters <code>size</code> and <code>prob</code>. </p> <p>This is conventionally interpreted as the number of ‘successes’ in <code>size</code> trials. </p>"	"<pre>dbinom(x, size, prob, log = FALSE) pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE) qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE) rbinom(n, size, prob) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>size</code></td> <td> <p>number of trials (zero or more).</p> </td> </tr> <tr valign='top'> <td><code>prob</code></td> <td> <p>probability of success on each trial.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"family"	"stats"	"Family Objects for Models"	"<p>Family objects provide a convenient way to specify the details of the models used by functions such as <code>glm</code>.  See the documentation for <code>glm</code> for the details on how such model fitting takes place. </p>"	"<pre>family(object, ...)<br />binomial(link = 'logit') gaussian(link = 'identity') Gamma(link = 'inverse') inverse.gaussian(link = '1/mu^2') poisson(link = 'log') quasi(link = 'identity', variance = 'constant') quasibinomial(link = 'logit') quasipoisson(link = 'log') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>link</code></td> <td> <p>a specification for the model link function.  This can be a name/expression, a literal character string, a length-one character vector or an object of class <code>'link-glm'</code> (such as generated by <code>make.link</code>) provided it is not specified <em>via</em> one of the standard names given next. </p> <p>The <code>gaussian</code> family accepts the links (as names) <code>identity</code>, <code>log</code> and <code>inverse</code>; the <code>binomial</code> family the links <code>logit</code>, <code>probit</code>, <code>cauchit</code>, (corresponding to logistic, normal and Cauchy CDFs respectively) <code>log</code> and <code>cloglog</code> (complementary log-log); the <code>Gamma</code> family the links <code>inverse</code>, <code>identity</code> and <code>log</code>; the <code>poisson</code> family the links <code>log</code>, <code>identity</code>, and <code>sqrt</code> and the <code>inverse.gaussian</code> family the links <code>1/mu^2</code>, <code>inverse</code>, <code>identity</code> and <code>log</code>. </p> <p>The <code>quasi</code> family accepts the links <code>logit</code>, <code>probit</code>, <code>cloglog</code>,  <code>identity</code>, <code>inverse</code>, <code>log</code>, <code>1/mu^2</code> and <code>sqrt</code>, and the function <code>power</code> can be used to create a power link function. </p> </td> </tr> <tr valign='top'> <td><code>variance</code></td> <td> <p>for all families other than <code>quasi</code>, the variance function is determined by the family.  The <code>quasi</code> family will accept the literal character string (or unquoted as a name/expression) specifications <code>'constant'</code>, <code>'mu(1-mu)'</code>, <code>'mu'</code>, <code>'mu^2'</code> and <code>'mu^3'</code>, a length-one character vector taking one of those values, or a list containing components <code>varfun</code>, <code>validmu</code>, <code>dev.resids</code>, <code>initialize</code> and <code>name</code>. </p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>the function <code>family</code> accesses the <code>family</code> objects which are stored within objects created by modelling functions (e.g., <code>glm</code>).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to methods.</p> </td> </tr> </table> "	FALSE
"biplot"	"stats"	"Biplot of Multivariate Data"	"<p>Plot a biplot on the current graphics device. </p>"	"<pre>biplot(x, ...)<br />## Default S3 method: biplot(x, y, var.axes = TRUE, col, cex = rep(par('cex'), 2),<br />        xlabs = NULL, ylabs = NULL, expand = 1,<br />        xlim  = NULL, ylim  = NULL, arrow.len = 0.1,<br />        main = NULL, sub = NULL, xlab = NULL, ylab = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>The <code>biplot</code>, a fitted object. For <code>biplot.default</code>, the first set of points (a two-column matrix), usually associated with observations.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>The second set of points (a two-column matrix), usually associated with variables.</p> </td> </tr> <tr valign='top'> <td><code>var.axes</code></td> <td> <p>If <code>TRUE</code> the second set of points have arrows representing them as (unscaled) axes.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>A vector of length 2 giving the colours for the first and second set of points respectively (and the corresponding axes). If a single colour is specified it will be used for both sets.  If missing the default colour is looked for in the <code>palette</code>: if there it and the next colour as used, otherwise the first two colours of the palette are used.</p> </td> </tr> <tr valign='top'> <td><code>cex</code></td> <td> <p>The character expansion factor used for labelling the points. The labels can be of different sizes for the two sets by supplying a vector of length two.</p> </td> </tr> <tr valign='top'> <td><code>xlabs</code></td> <td> <p>A vector of character strings to label the first set of points: the default is to use the row dimname of <code>x</code>, or <code>1:n</code> if the dimname is <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>ylabs</code></td> <td> <p>A vector of character strings to label the second set of points: the default is to use the row dimname of <code>y</code>, or <code>1:n</code> if the dimname is <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>expand</code></td> <td> <p>An expansion factor to apply when plotting the second set of points relative to the first. This can be used to tweak the scaling of the two sets to a physically comparable scale.</p> </td> </tr> <tr valign='top'> <td><code>arrow.len</code></td> <td> <p>The length of the arrow heads on the axes plotted in <code>var.axes</code> is true. The arrow head can be suppressed by <code>arrow.len = 0</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>Limits for the x and y axes in the units of the first set of variables.</p> </td> </tr> <tr valign='top'> <td><code>main, sub, xlab, ylab, ...</code></td> <td> <p>graphical parameters.</p> </td> </tr> </table> "	FALSE
"biplot.princomp"	"stats"	"Biplot for Principal Components"	"<p>Produces a biplot (in the strict sense) from the output of <code>princomp</code> or <code>prcomp</code> </p>"	"<pre>## S3 method for class 'prcomp' biplot(x, choices = 1:2, scale = 1, pc.biplot = FALSE, ...)<br />## S3 method for class 'princomp' biplot(x, choices = 1:2, scale = 1, pc.biplot = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'princomp'</code>.</p> </td> </tr> <tr valign='top'> <td><code>choices</code></td> <td><br /><p>length 2 vector specifying the components to plot. Only the default is a biplot in the strict sense. </p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td><br /><p>The variables are scaled by <code>lambda ^ scale</code> and the observations are scaled by <code>lambda ^ (1-scale)</code> where <code>lambda</code> are the singular values as computed by <code>princomp</code>. Normally <code>0 &lt;= scale &lt;= 1</code>, and a warning will be issued if the specified <code>scale</code> is outside this range. </p> </td> </tr> <tr valign='top'> <td><code>pc.biplot</code></td> <td><br /><p>If true, use what Gabriel (1971) refers to as a 'principal component biplot', with <code>lambda = 1</code> and observations scaled up by sqrt(n) and variables scaled down by sqrt(n).  Then inner products between variables approximate covariances and distances between observations approximate Mahalanobis distance. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional arguments to be passed to <code>biplot.default</code>.</p> </td> </tr> </table> "	FALSE
"box.test"	"stats"	"Box-Pierce and Ljung-Box Tests"	"<p>Compute the Box–Pierce or Ljung–Box test statistic for examining the null hypothesis of independence in a given time series.  These are sometimes known as ‘portmanteau’ tests. </p>"	"<pre>Box.test(x, lag = 1, type = c('Box-Pierce', 'Ljung-Box'), fitdf = 0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector or univariate time series.</p> </td> </tr> <tr valign='top'> <td><code>lag</code></td> <td> <p>the statistic will be based on <code>lag</code> autocorrelation coefficients.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>test to be performed: partial matching is used.</p> </td> </tr> <tr valign='top'> <td><code>fitdf</code></td> <td> <p>number of degrees of freedom to be subtracted if <code>x</code> is a series of residuals.</p> </td> </tr> </table> "	FALSE
"bandwidth"	"stats"	"Bandwidth Selectors for Kernel Density Estimation"	"<p>Bandwidth selectors for Gaussian kernels in <code>density</code>. </p>"	"<pre>bw.nrd0(x)<br />bw.nrd(x)<br />bw.ucv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,<br />        tol = 0.1 * lower)<br />bw.bcv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,<br />        tol = 0.1 * lower)<br />bw.SJ(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,<br />       method = c('ste', 'dpi'), tol = 0.1 * lower) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>nb</code></td> <td> <p>number of bins to use.</p> </td> </tr> <tr valign='top'> <td><code>lower, upper</code></td> <td> <p>range over which to minimize.  The default is almost always satisfactory.  <code>hmax</code> is calculated internally from a normal reference bandwidth.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>either <code>'ste'</code> ('solve-the-equation') or <code>'dpi'</code> ('direct plug-in').<br />   Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>for method <code>'ste'</code>, the convergence tolerance for <code>uniroot</code>.  The default leads to bandwidth estimates with only slightly more than one digit accuracy, which is sufficient for practical density estimation, but possibly not for theoretical simulation studies.</p> </td> </tr> </table> "	FALSE
"zC"	"stats"	"Sets Contrasts for a Factor"	"<p>Sets the <code>'contrasts'</code> attribute for the factor. </p>"	"<pre>C(object, contr, how.many, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a factor or ordered factor</p> </td> </tr> <tr valign='top'> <td><code>contr</code></td> <td> <p>which contrasts to use. Can be a matrix with one row for each level of the factor or a suitable function like <code>contr.poly</code> or a character string giving the name of the function</p> </td> </tr> <tr valign='top'> <td><code>how.many</code></td> <td> <p>the number of contrasts to set, by default one less than <code>nlevels(object)</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments for the function <code>contr</code>.</p> </td> </tr> </table> "	FALSE
"cancor"	"stats"	"Canonical Correlations"	"<p>Compute the canonical correlations between two data matrices. </p>"	"<pre>cancor(x, y, xcenter = TRUE, ycenter = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric matrix (<i>n * p1</i>), containing the x coordinates.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>numeric matrix (<i>n * p2</i>), containing the y coordinates.</p> </td> </tr> <tr valign='top'> <td><code>xcenter</code></td> <td> <p>logical or numeric vector of length <i>p1</i>, describing any centering to be done on the x values before the analysis.  If <code>TRUE</code> (default), subtract the column means. If <code>FALSE</code>, do not adjust the columns.  Otherwise, a vector of values to be subtracted from the columns.</p> </td> </tr> <tr valign='top'> <td><code>ycenter</code></td> <td> <p>analogous to <code>xcenter</code>, but for the y values.</p> </td> </tr> </table> "	FALSE
"case.names"	"stats"	"Case and Variable Names of Fitted Models"	"<p>Simple utilities returning (non-missing) case names, and (non-eliminated) variable names. </p>"	"<pre>case.names(object, ...) ## S3 method for class 'lm' case.names(object, full = FALSE, ...)<br />variable.names(object, ...) ## S3 method for class 'lm' variable.names(object, full = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically a fitted model.</p> </td> </tr> <tr valign='top'> <td><code>full</code></td> <td> <p>logical; if <code>TRUE</code>, all names (including zero weights, ...) are returned.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"Cauchy"	"stats"	"The Cauchy Distribution"	"<p>Density, distribution function, quantile function and random generation for the Cauchy distribution with location parameter <code>location</code> and scale parameter <code>scale</code>. </p>"	"<pre>dcauchy(x, location = 0, scale = 1, log = FALSE) pcauchy(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) qcauchy(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) rcauchy(n, location = 0, scale = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>location, scale</code></td> <td> <p>location and scale parameters.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"chisq.test"	"stats"	"Pearson's Chi-squared Test for Count Data"	"<p><code>chisq.test</code> performs chi-squared contingency table tests and goodness-of-fit tests. </p>"	"<pre>chisq.test(x, y = NULL, correct = TRUE,<br />            p = rep(1/length(x), length(x)), rescale.p = FALSE,<br />            simulate.p.value = FALSE, B = 2000) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector or matrix. <code>x</code> and <code>y</code> can also both be factors.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>a numeric vector; ignored if <code>x</code> is a matrix.  If <code>x</code> is a factor, <code>y</code> should be a factor of the same length.</p> </td> </tr> <tr valign='top'> <td><code>correct</code></td> <td> <p>a logical indicating whether to apply continuity correction when computing the test statistic for 2 by 2 tables: one half is subtracted from all <i>|O - E|</i> differences; however, the correction will not be bigger than the differences themselves.  No correction is done if <code>simulate.p.value = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>a vector of probabilities of the same length of <code>x</code>. An error is given if any entry of <code>p</code> is negative.</p> </td> </tr> <tr valign='top'> <td><code>rescale.p</code></td> <td> <p>a logical scalar; if TRUE then <code>p</code> is rescaled (if necessary) to sum to 1.  If <code>rescale.p</code> is FALSE, and <code>p</code> does not sum to 1, an error is given.</p> </td> </tr> <tr valign='top'> <td><code>simulate.p.value</code></td> <td> <p>a logical indicating whether to compute p-values by Monte Carlo simulation.</p> </td> </tr> <tr valign='top'> <td><code>B</code></td> <td> <p>an integer specifying the number of replicates used in the Monte Carlo test.</p> </td> </tr> </table> "	FALSE
"Chisquare"	"stats"	"The (non-central) Chi-Squared Distribution"	"<p>Density, distribution function, quantile function and random generation for the chi-squared (<i>chi^2</i>) distribution with <code>df</code> degrees of freedom and optional non-centrality parameter <code>ncp</code>. </p>"	"<pre>dchisq(x, df, ncp = 0, log = FALSE) pchisq(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE) qchisq(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE) rchisq(n, df, ncp = 0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>df</code></td> <td> <p>degrees of freedom (non-negative, but can be non-integer).</p> </td> </tr> <tr valign='top'> <td><code>ncp</code></td> <td> <p>non-centrality parameter (non-negative).</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"cmdscale"	"stats"	"Classical (Metric) Multidimensional Scaling"	"<p>Classical multidimensional scaling (MDS) of a data matrix. Also known as <em>principal coordinates analysis</em> (Gower, 1966). </p>"	"<pre>cmdscale(d, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE,<br />          list. = eig || add || x.ret) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>d</code></td> <td> <p>a distance structure such as that returned by <code>dist</code> or a full symmetric matrix containing the dissimilarities.</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>the maximum dimension of the space which the data are to be represented in; must be in <i>{1, 2, …, n-1}</i>.</p> </td> </tr> <tr valign='top'> <td><code>eig</code></td> <td> <p>indicates whether eigenvalues should be returned.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical indicating if an additive constant <i>c*</i> should be computed, and added to the non-diagonal dissimilarities such that the modified dissimilarities are Euclidean.</p> </td> </tr> <tr valign='top'> <td><code>x.ret</code></td> <td> <p>indicates whether the doubly centred symmetric distance matrix should be returned.</p> </td> </tr> <tr valign='top'> <td><code>list.</code></td> <td> <p>logical indicating if a <code>list</code> should be returned or just the <i>n * k</i> matrix, see ‘Value:’.</p> </td> </tr> </table> "	FALSE
"coef"	"stats"	"Extract Model Coefficients"	"<p><code>coef</code> is a generic function which extracts model coefficients from objects returned by modeling functions.  <code>coefficients</code> is an <em>alias</em> for it. </p>"	"<pre>coef(object, ...) coefficients(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object for which the extraction of model coefficients is meaningful.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other arguments.</p> </td> </tr> </table> "	FALSE
"complete.cases"	"stats"	"Find Complete Cases"	"<p>Return a logical vector indicating which cases are complete, i.e., have no missing values. </p>"	"<pre>complete.cases(...) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>...</code></td> <td> <p>a sequence of vectors, matrices and data frames.</p> </td> </tr></table> "	FALSE
"confint"	"stats"	"Confidence Intervals for Model Parameters"	"<p>Computes confidence intervals for one or more parameters in a fitted model.  There is a default and a method for objects inheriting from class <code>'lm'</code>. </p>"	"<pre>confint(object, parm, level = 0.95, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a fitted model object.</p> </td> </tr> <tr valign='top'> <td><code>parm</code></td> <td> <p>a specification of which parameters are to be given confidence intervals, either a vector of numbers or a vector of names.  If missing, all parameters are considered.</p> </td> </tr> <tr valign='top'> <td><code>level</code></td> <td> <p>the confidence level required.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional argument(s) for methods.</p> </td> </tr> </table> "	FALSE
"constrOptim"	"stats"	"Linearly Constrained Optimization"	"<p>Minimise a function subject to linear inequality constraints using an adaptive barrier algorithm. </p>"	"<pre>constrOptim(theta, f, grad, ui, ci, mu = 1e-04, control = list(),<br />             method = if(is.null(grad)) 'Nelder-Mead' else 'BFGS',<br />             outer.iterations = 100, outer.eps = 1e-05, ...,<br />             hessian = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>theta</code></td> <td> <p>numeric (vector) starting value (of length <i>p</i>): must be in the feasible region.</p> </td> </tr> <tr valign='top'> <td><code>f</code></td> <td> <p>function to minimise (see below).</p> </td> </tr> <tr valign='top'> <td><code>grad</code></td> <td> <p>gradient of <code>f</code> (a <code>function</code> as well), or <code>NULL</code> (see below).</p> </td> </tr> <tr valign='top'> <td><code>ui</code></td> <td> <p>constraint matrix (<i>k x p</i>), see below.</p> </td> </tr> <tr valign='top'> <td><code>ci</code></td> <td> <p>constraint vector of length <i>k</i> (see below).</p> </td> </tr> <tr valign='top'> <td><code>mu</code></td> <td> <p>(Small) tuning parameter.</p> </td> </tr> <tr valign='top'> <td><code>control, method, hessian</code></td> <td> <p>passed to <code>optim</code>.</p> </td> </tr> <tr valign='top'> <td><code>outer.iterations</code></td> <td> <p>iterations of the barrier algorithm.</p> </td> </tr> <tr valign='top'> <td><code>outer.eps</code></td> <td> <p>non-negative number; the relative convergence tolerance of the barrier algorithm.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Other named arguments to be passed to <code>f</code> and <code>grad</code>: needs to be passed through <code>optim</code> so should not match its argument names.</p> </td> </tr> </table> "	FALSE
"contrast"	"stats"	"(Possibly Sparse) Contrast Matrices"	"<p>Return a matrix of contrasts. </p>"	"<pre>contr.helmert(n, contrasts = TRUE, sparse = FALSE) contr.poly(n, scores = 1:n, contrasts = TRUE, sparse = FALSE) contr.sum(n, contrasts = TRUE, sparse = FALSE) contr.treatment(n, base = 1, contrasts = TRUE, sparse = FALSE) contr.SAS(n, contrasts = TRUE, sparse = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>a vector of levels for a factor, or the number of levels.</p> </td> </tr> <tr valign='top'> <td><code>contrasts</code></td> <td> <p>a logical indicating whether contrasts should be computed.</p> </td> </tr> <tr valign='top'> <td><code>sparse</code></td> <td> <p>logical indicating if the result should be sparse (of class <code>dgCMatrix</code>), using package <a href='https://CRAN.R-project.org/package=Matrix'><span class='pkg'>Matrix</span></a>.</p> </td> </tr> <tr valign='top'> <td><code>scores</code></td> <td> <p>the set of values over which orthogonal polynomials are to be computed.</p> </td> </tr> <tr valign='top'> <td><code>base</code></td> <td> <p>an integer specifying which group is considered the baseline group. Ignored if <code>contrasts</code> is <code>FALSE</code>.</p> </td> </tr> </table> "	FALSE
"contrasts"	"stats"	"Get and Set Contrast Matrices"	"<p>Set and view the contrasts associated with a factor. </p>"	"<pre>contrasts(x, contrasts = TRUE, sparse = FALSE) contrasts(x, how.many) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a factor or a logical variable.</p> </td> </tr> <tr valign='top'> <td><code>contrasts</code></td> <td> <p>logical.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>sparse</code></td> <td> <p>logical indicating if the result should be sparse (of class <code>dgCMatrix</code>), using package <a href='https://CRAN.R-project.org/package=Matrix'><span class='pkg'>Matrix</span></a>.</p> </td> </tr> <tr valign='top'> <td><code>how.many</code></td> <td> <p>How many contrasts should be made. Defaults to one less than the number of levels of <code>x</code>.  This need not be the same as the number of columns of <code>value</code>.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>either a numeric matrix (or a sparse or dense matrix of a class extending <code>dMatrix</code> from package <a href='https://CRAN.R-project.org/package=Matrix'><span class='pkg'>Matrix</span></a>)  whose columns give coefficients for contrasts in the levels of <code>x</code>, or the (quoted) name of a function which computes such matrices.</p> </td> </tr> </table> "	FALSE
"convolve"	"stats"	"Convolution of Sequences via FFT"	"<p>Use the Fast Fourier Transform to compute the several kinds of convolutions of two sequences. </p>"	"<pre>convolve(x, y, conj = TRUE, type = c('circular', 'open', 'filter')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric sequences <em>of the same length</em> to be convolved.</p> </td> </tr> <tr valign='top'> <td><code>conj</code></td> <td> <p>logical; if <code>TRUE</code>, take the complex <em>conjugate</em> before back-transforming (default, and used for usual convolution).</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character; partially matched to <code>'circular'</code>, <code>'open'</code>, <code>'filter'</code>.  For <code>'circular'</code>, the two sequences are treated as <em>circular</em>, i.e., periodic. </p> <p>For <code>'open'</code> and <code>'filter'</code>, the sequences are padded with <code>0</code>s (from left and right) first; <code>'filter'</code> returns the middle sub-vector of <code>'open'</code>, namely, the result of running a weighted mean of <code>x</code> with weights <code>y</code>.</p> </td> </tr> </table> "	FALSE
"influence.measures"	"stats"	"Regression Deletion Diagnostics"	"<p>This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc. </p>"	"<pre>influence.measures(model)<br />rstandard(model, ...) ## S3 method for class 'lm' rstandard(model, infl = lm.influence(model, do.coef = FALSE),<br />           sd = sqrt(deviance(model)/df.residual(model)), ...) ## S3 method for class 'glm' rstandard(model, infl = influence(model, do.coef = FALSE),<br />           type = c('deviance', 'pearson'), ...)<br />rstudent(model, ...) ## S3 method for class 'lm' rstudent(model, infl = lm.influence(model, do.coef = FALSE),<br />          res = infl$wt.res, ...) ## S3 method for class 'glm' rstudent(model, infl = influence(model, do.coef = FALSE), ...)<br />dffits(model, infl = , res = )<br />dfbeta(model, ...) ## S3 method for class 'lm' dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)<br />dfbetas(model, ...) ## S3 method for class 'lm' dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)<br />covratio(model, infl = lm.influence(model, do.coef = FALSE),<br />          res = weighted.residuals(model))<br />cooks.distance(model, ...) ## S3 method for class 'lm' cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),<br />                res = weighted.residuals(model),<br />                sd = sqrt(deviance(model)/df.residual(model)),<br />                hat = infl$hat, ...) ## S3 method for class 'glm' cooks.distance(model, infl = influence(model, do.coef = FALSE),<br />                res = infl$pear.res,<br />                dispersion = summary(model)$dispersion,<br />                hat = infl$hat, ...)<br />hatvalues(model, ...) ## S3 method for class 'lm' hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)<br />hat(x, intercept = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>model</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically returned by <code>lm</code> or <code>glm</code>.</p> </td> </tr> <tr valign='top'> <td><code>infl</code></td> <td> <p>influence structure as returned by <code>lm.influence</code> or <code>influence</code> (the latter only for the <code>glm</code> method of <code>rstudent</code> and <code>cooks.distance</code>).</p> </td> </tr> <tr valign='top'> <td><code>res</code></td> <td> <p>(possibly weighted) residuals, with proper default.</p> </td> </tr> <tr valign='top'> <td><code>sd</code></td> <td> <p>standard deviation to use, see default.</p> </td> </tr> <tr valign='top'> <td><code>dispersion</code></td> <td> <p>dispersion (for <code>glm</code> objects) to use, see default.</p> </td> </tr> <tr valign='top'> <td><code>hat</code></td> <td> <p>hat values <i>H[i,i]</i>, see default.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>type of residuals for <code>glm</code> method for <code>rstandard</code>. Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>the <i>X</i> or design matrix.</p> </td> </tr> <tr valign='top'> <td><code>intercept</code></td> <td> <p>should an intercept column be prepended to <code>x</code>?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"cophenetic"	"stats"	"Cophenetic Distances for a Hierarchical Clustering"	"<p>Computes the cophenetic distances for a hierarchical clustering. </p>"	"<pre>cophenetic(x) ## Default S3 method: cophenetic(x) ## S3 method for class 'dendrogram' cophenetic(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an R object representing a hierarchical clustering. For the default method, an object of class <code>'hclust'</code> or with a method for <code>as.hclust()</code> such as <code>'agnes'</code> in package <a href='https://CRAN.R-project.org/package=cluster'><span class='pkg'>cluster</span></a>.</p> </td> </tr></table> "	FALSE
"cor"	"stats"	"Correlation, Variance and Covariance (Matrices)"	"<p><code>var</code>, <code>cov</code> and <code>cor</code> compute the variance of <code>x</code> and the covariance or correlation of <code>x</code> and <code>y</code> if these are vectors.<br />   If <code>x</code> and <code>y</code> are matrices then the covariances (or correlations) between the columns of <code>x</code> and the columns of <code>y</code> are computed. </p> <p><code>cov2cor</code> scales a covariance matrix into the corresponding correlation matrix <em>efficiently</em>. </p>"	"<pre>var(x, y = NULL, na.rm = FALSE, use)<br />cov(x, y = NULL, use = 'everything',<br />     method = c('pearson', 'kendall', 'spearman'))<br />cor(x, y = NULL, use = 'everything',<br />     method = c('pearson', 'kendall', 'spearman'))<br />cov2cor(V) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector, matrix or data frame.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p><code>NULL</code> (default) or a vector, matrix or data frame with compatible dimensions to <code>x</code>.<br />   The default is equivalent to <code>y = x</code> (but more efficient).</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical. Should missing values be removed?</p> </td> </tr> <tr valign='top'> <td><code>use</code></td> <td> <p>an optional character string giving a method for computing covariances in the presence of missing values.  This must be (an abbreviation of) one of the strings <code>'everything'</code>, <code>'all.obs'</code>, <code>'complete.obs'</code>, <code>'na.or.complete'</code>, or <code>'pairwise.complete.obs'</code>.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>a character string indicating which correlation coefficient (or covariance) is to be computed.  One of <code>'pearson'</code> (default), <code>'kendall'</code>, or <code>'spearman'</code>: can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>V</code></td> <td> <p>symmetric numeric matrix, usually positive definite such as a covariance matrix.</p> </td> </tr> </table> "	FALSE
"cor.test"	"stats"	"Test for Association/Correlation Between Paired Samples"	"<p>Test for association between paired samples, using one of Pearson's product moment correlation coefficient, Kendall's <i>tau</i> or Spearman's <i>rho</i>. </p>"	"<pre>cor.test(x, ...)<br />## Default S3 method: cor.test(x, y,<br />          alternative = c('two.sided', 'less', 'greater'),<br />          method = c('pearson', 'kendall', 'spearman'),<br />          exact = NULL, conf.level = 0.95, continuity = FALSE, ...)<br />## S3 method for class 'formula' cor.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric vectors of data values.  <code>x</code> and <code>y</code> must have the same length.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>indicates the alternative hypothesis and must be one of <code>'two.sided'</code>, <code>'greater'</code> or <code>'less'</code>.  You can specify just the initial letter.  <code>'greater'</code> corresponds to positive association, <code>'less'</code> to negative association.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>a character string indicating which correlation coefficient is to be  used for the test.  One of <code>'pearson'</code>, <code>'kendall'</code>, or <code>'spearman'</code>, can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>exact</code></td> <td> <p>a logical indicating whether an exact p-value should be computed.  Used for Kendall's <i>tau</i> and Spearman's <i>rho</i>. See ‘Details’ for the meaning of <code>NULL</code> (the default).</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level for the returned confidence interval.  Currently only used for the Pearson product moment correlation coefficient if there are at least 4 complete pairs of observations.</p> </td> </tr> <tr valign='top'> <td><code>continuity</code></td> <td> <p>logical: if true, a continuity correction is used for Kendall's <i>tau</i> and Spearman's <i>rho</i> when not computed exactly.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>~ u + v</code>, where each of <code>u</code> and <code>v</code> are numeric variables giving the data values for one sample.  The samples must be of the same length.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"cov.wt"	"stats"	"Weighted Covariance Matrices"	"<p>Returns a list containing estimates of the weighted covariance matrix and the mean of the data, and optionally of the (weighted) correlation matrix.</p>"	"<pre>cov.wt(x, wt = rep(1/nrow(x), nrow(x)), cor = FALSE, center = TRUE,<br />        method = c('unbiased', 'ML')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a matrix or data frame.  As usual, rows are observations and columns are variables.</p> </td> </tr> <tr valign='top'> <td><code>wt</code></td> <td> <p>a non-negative and non-zero vector of weights for each observation.  Its length must equal the number of rows of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>cor</code></td> <td> <p>a logical indicating whether the estimated correlation weighted matrix will be returned as well.</p> </td> </tr> <tr valign='top'> <td><code>center</code></td> <td> <p>either a logical or a numeric vector specifying the centers to be used when computing covariances.  If <code>TRUE</code>, the (weighted) mean of each variable is used, if <code>FALSE</code>, zero is used.  If <code>center</code> is numeric, its length must equal the number of columns of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>string specifying how the result is scaled, see ‘Details’ below.  Can be abbreviated.</p> </td> </tr> </table> "	FALSE
"cpgram"	"stats"	"Plot Cumulative Periodogram"	"<p>Plots a cumulative periodogram. </p>"	"<pre>cpgram(ts, taper = 0.1,<br />        main = paste('Series: ', deparse(substitute(ts))),<br />        ci.col = 'blue') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>ts</code></td> <td> <p>a univariate time series</p> </td> </tr> <tr valign='top'> <td><code>taper</code></td> <td> <p>proportion tapered in forming the periodogram</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>main title</p> </td> </tr> <tr valign='top'> <td><code>ci.col</code></td> <td> <p>colour for confidence band.</p> </td> </tr> </table> "	FALSE
"cutree"	"stats"	"Cut a Tree into Groups of Data"	"<p>Cuts a tree, e.g., as resulting from <code>hclust</code>, into several groups either by specifying the desired number(s) of groups or the cut height(s). </p>"	"<pre>cutree(tree, k = NULL, h = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>tree</code></td> <td> <p>a tree as produced by <code>hclust</code>. <code>cutree()</code> only expects a list with components <code>merge</code>, <code>height</code>, and <code>labels</code>, of appropriate content each.</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>an integer scalar or vector with the desired number of groups</p> </td> </tr> <tr valign='top'> <td><code>h</code></td> <td> <p>numeric scalar or vector with heights where the tree should be cut.</p> </td> </tr> </table>  <p>At least one of <code>k</code> or <code>h</code> must be specified, <code>k</code> overrides <code>h</code> if both are given. </p>"	FALSE
"time"	"stats"	"Sampling Times of Time Series"	"<p><code>time</code> creates the vector of times at which a time series was sampled. </p> <p><code>cycle</code> gives the positions in the cycle of each observation. </p> <p><code>frequency</code> returns the number of samples per unit time and <code>deltat</code> the time interval between observations (see <code>ts</code>). </p>"	"<pre>time(x, ...) ## Default S3 method: time(x, offset = 0, ...)<br />cycle(x, ...) frequency(x, ...) deltat(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a univariate or multivariate time-series, or a vector or matrix.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td> <p>can be used to indicate when sampling took place in the time unit. <code>0</code> (the default) indicates the start of the unit, <code>0.5</code> the middle and <code>1</code> the end of the interval.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>extra arguments for future methods.</p> </td> </tr> </table> "	FALSE
"deriv"	"stats"	"Symbolic and Algorithmic Derivatives of Simple Expressions"	"<p>Compute derivatives of simple expressions, symbolically and algorithmically. </p>"	"<pre><br />     D (expr, name)  deriv(expr, ...) deriv3(expr, ...)<br /> ## Default S3 method: deriv(expr, namevec, function.arg = NULL, tag = '.expr',<br />        hessian = FALSE, ...)  ## S3 method for class 'formula' deriv(expr, namevec, function.arg = NULL, tag = '.expr',<br />        hessian = FALSE, ...)<br />## Default S3 method: deriv3(expr, namevec, function.arg = NULL, tag = '.expr',<br />        hessian = TRUE, ...) ## S3 method for class 'formula' deriv3(expr, namevec, function.arg = NULL, tag = '.expr',<br />        hessian = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>a <code>expression</code> or <code>call</code> or (except <code>D</code>) a formula with no lhs.</p> </td> </tr> <tr valign='top'> <td><code>name,namevec</code></td> <td> <p>character vector, giving the variable names (only one for <code>D()</code>) with respect to which derivatives will be computed.</p> </td> </tr> <tr valign='top'> <td><code>function.arg</code></td> <td> <p>if specified and non-<code>NULL</code>, a character vector of arguments for a function return, or a function (with empty body) or <code>TRUE</code>, the latter indicating that a function with argument names <code>namevec</code> should be used.</p> </td> </tr> <tr valign='top'> <td><code>tag</code></td> <td> <p>character; the prefix to be used for the locally created variables in result.</p> </td> </tr> <tr valign='top'> <td><code>hessian</code></td> <td> <p>a logical value indicating whether the second derivatives should be calculated and incorporated in the return value.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"decompose"	"stats"	"Classical Seasonal Decomposition by Moving Averages"	"<p>Decompose a time series into seasonal, trend and irregular components using moving averages.  Deals with additive or multiplicative seasonal component. </p>"	"<pre>decompose(x, type = c('additive', 'multiplicative'), filter = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A time series.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>The type of seasonal component. Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>filter</code></td> <td> <p>A vector of filter coefficients in reverse time order (as for AR or MA coefficients), used for filtering out the seasonal component.  If <code>NULL</code>, a moving average with symmetric window is performed.</p> </td> </tr> </table> "	FALSE
"delete.response"	"stats"	"Modify Terms Objects"	"<p><code>delete.response</code> returns a <code>terms</code> object for the same model but with no response variable. </p> <p><code>drop.terms</code> removes variables from the right-hand side of the model. There is also a <code>'[.terms'</code> method to perform the same function (with <code>keep.response = TRUE</code>). </p> <p><code>reformulate</code> creates a formula from a character vector. </p>"	"<pre>delete.response(termobj)<br />reformulate(termlabels, response = NULL, intercept = TRUE)<br />drop.terms(termobj, dropx = NULL, keep.response = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>termobj</code></td> <td> <p>A <code>terms</code> object</p> </td> </tr> <tr valign='top'> <td><code>termlabels</code></td> <td> <p>character vector giving the right-hand side of a model formula.  Cannot be zero-length.</p> </td> </tr> <tr valign='top'> <td><code>response</code></td> <td> <p>character string, symbol or call giving the left-hand side of a model formula, or <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>intercept</code></td> <td> <p>logical: should the formula have an intercept?</p> </td> </tr> <tr valign='top'> <td><code>dropx</code></td> <td> <p>vector of positions of variables to drop from the right-hand side of the model.</p> </td> </tr> <tr valign='top'> <td><code>keep.response</code></td> <td> <p>Keep the response in the resulting object?</p> </td> </tr> </table> "	FALSE
"dendrapply"	"stats"	"Apply a Function to All Nodes of a Dendrogram"	"<p>Apply function <code>FUN</code> to each node of a <code>dendrogram</code> recursively.  When  <code>y &lt;- dendrapply(x, fn)</code>, then <code>y</code> is a dendrogram of the same graph structure as <code>x</code> and for each node, <code>y.node[j] &lt;- FUN( x.node[j], ...)</code> (where <code>y.node[j]</code> is an (invalid!) notation for the j-th node of y. </p>"	"<pre>dendrapply(X, FUN, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>X</code></td> <td> <p>an object of class <code>'dendrogram'</code>.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> function to be applied to each dendrogram node, typically working on its <code>attributes</code> alone, returning an altered version of the same node.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>potential further arguments passed to <code>FUN</code>.</p> </td> </tr> </table> "	FALSE
"density"	"stats"	"Kernel Density Estimation"	"<p>The (S3) generic function <code>density</code> computes kernel density estimates.  Its default method does so with the given kernel and bandwidth for univariate observations. </p>"	"<pre>density(x, ...) ## Default S3 method: density(x, bw = 'nrd0', adjust = 1,<br />         kernel = c('gaussian', 'epanechnikov', 'rectangular',<br />                    'triangular', 'biweight',<br />                    'cosine', 'optcosine'),<br />         weights = NULL, window = kernel, width,<br />         give.Rkern = FALSE,<br />         n = 512, from, to, cut = 3, na.rm = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the data from which the estimate is to be computed.</p> </td> </tr> <tr valign='top'> <td><code>bw</code></td> <td> <p>the smoothing bandwidth to be used.  The kernels are scaled such that this is the standard deviation of the smoothing kernel. (Note this differs from the reference books cited below, and from S-PLUS.) </p> <p><code>bw</code> can also be a character string giving a rule to choose the bandwidth.  See <code>bw.nrd</code>. <br> The default, <code>'nrd0'</code>, has remained the default for historical and compatibility reasons, rather than as a general recommendation, where e.g., <code>'SJ'</code> would rather fit, see also Venables and Ripley (2002). </p> <p>The specified (or computed) value of <code>bw</code> is multiplied by <code>adjust</code>. </p> </td> </tr> <tr valign='top'> <td><code>adjust</code></td> <td> <p>the bandwidth used is actually <code>adjust*bw</code>. This makes it easy to specify values like ‘half the default’ bandwidth.</p> </td> </tr> <tr valign='top'> <td><code>kernel, window</code></td> <td> <p>a character string giving the smoothing kernel to be used. This must partially match one of <code>'gaussian'</code>, <code>'rectangular'</code>, <code>'triangular'</code>, <code>'epanechnikov'</code>, <code>'biweight'</code>, <code>'cosine'</code> or <code>'optcosine'</code>, with default <code>'gaussian'</code>, and may be abbreviated to a unique prefix (single letter). </p> <p><code>'cosine'</code> is smoother than <code>'optcosine'</code>, which is the usual ‘cosine’ kernel in the literature and almost MSE-efficient. However, <code>'cosine'</code> is the version used by S. </p> </td> </tr> <tr valign='top'> <td><code>weights</code></td> <td> <p>numeric vector of non-negative observation weights, hence of same length as <code>x</code>. The default <code>NULL</code> is equivalent to <code>weights = rep(1/nx, nx)</code> where <code>nx</code> is the length of (the finite entries of) <code>x[]</code>.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>this exists for compatibility with S; if given, and <code>bw</code> is not, will set <code>bw</code> to <code>width</code> if this is a character string, or to a kernel-dependent multiple of <code>width</code> if this is numeric.</p> </td> </tr> <tr valign='top'> <td><code>give.Rkern</code></td> <td> <p>logical; if true, <em>no</em> density is estimated, and the ‘canonical bandwidth’ of the chosen <code>kernel</code> is returned instead.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>the number of equally spaced points at which the density is to be estimated.  When <code>n &gt; 512</code>, it is rounded up to a power of 2 during the calculations (as <code>fft</code> is used) and the final result is interpolated by <code>approx</code>.  So it almost always makes sense to specify <code>n</code> as a power of two. </p> </td> </tr> <tr valign='top'> <td><code>from,to</code></td> <td> <p>the left and right-most points of the grid at which the density is to be estimated; the defaults are <code>cut * bw</code> outside of <code>range(x)</code>.</p> </td> </tr> <tr valign='top'> <td><code>cut</code></td> <td> <p>by default, the values of <code>from</code> and <code>to</code> are <code>cut</code> bandwidths beyond the extremes of the data.  This allows the estimated density to drop to approximately zero at the extremes.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical; if <code>TRUE</code>, missing values are removed from <code>x</code>. If <code>FALSE</code> any missing values cause an error.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments for (non-default) methods.</p> </td> </tr> </table> "	FALSE
"deviance"	"stats"	"Model Deviance"	"<p>Returns the deviance of a fitted model object. </p>"	"<pre>deviance(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object for which the deviance is desired.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional optional argument.</p> </td> </tr> </table> "	FALSE
"Exponential"	"stats"	"The Exponential Distribution"	"<p>Density, distribution function, quantile function and random generation for the exponential distribution with rate <code>rate</code> (i.e., mean <code>1/rate</code>). </p>"	"<pre>dexp(x, rate = 1, log = FALSE) pexp(q, rate = 1, lower.tail = TRUE, log.p = FALSE) qexp(p, rate = 1, lower.tail = TRUE, log.p = FALSE) rexp(n, rate = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>rate</code></td> <td> <p>vector of rates.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"Fdist"	"stats"	"The F Distribution"	"<p>Density, distribution function, quantile function and random generation for the F distribution with <code>df1</code> and <code>df2</code> degrees of freedom (and optional non-centrality parameter <code>ncp</code>). </p>"	"<pre>df(x, df1, df2, ncp, log = FALSE) pf(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE) qf(p, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE) rf(n, df1, df2, ncp) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>df1, df2</code></td> <td> <p>degrees of freedom.  <code>Inf</code> is allowed.</p> </td> </tr> <tr valign='top'> <td><code>ncp</code></td> <td> <p>non-centrality parameter. If omitted the central F is assumed.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"df.residual"	"stats"	"Residual Degrees-of-Freedom"	"<p>Returns the residual degrees-of-freedom extracted from a fitted model object. </p>"	"<pre>df.residual(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object for which the degrees-of-freedom are desired.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional optional arguments.</p> </td> </tr> </table> "	FALSE
"GammaDist"	"stats"	"The Gamma Distribution"	"<p>Density, distribution function, quantile function and random generation for the Gamma distribution with parameters <code>shape</code> and <code>scale</code>. </p>"	"<pre>dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE) pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,<br />        log.p = FALSE) qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,<br />        log.p = FALSE) rgamma(n, shape, rate = 1, scale = 1/rate) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>rate</code></td> <td> <p>an alternative way to specify the scale.</p> </td> </tr> <tr valign='top'> <td><code>shape, scale</code></td> <td> <p>shape and scale parameters.  Must be positive, <code>scale</code> strictly.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if <code>TRUE</code>, probabilities/densities <i>p</i> are returned as <i>log(p)</i>.</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"Geometric"	"stats"	"The Geometric Distribution"	"<p>Density, distribution function, quantile function and random generation for the geometric distribution with parameter <code>prob</code>. </p>"	"<pre>dgeom(x, prob, log = FALSE) pgeom(q, prob, lower.tail = TRUE, log.p = FALSE) qgeom(p, prob, lower.tail = TRUE, log.p = FALSE) rgeom(n, prob) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles representing the number of failures in a sequence of Bernoulli trials before success occurs.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>prob</code></td> <td> <p>probability of success in each trial. <code>0 &lt; prob &lt;= 1</code>.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"Hypergeometric"	"stats"	"The Hypergeometric Distribution"	"<p>Density, distribution function, quantile function and random generation for the hypergeometric distribution. </p>"	"<pre>dhyper(x, m, n, k, log = FALSE) phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE) qhyper(p, m, n, k, lower.tail = TRUE, log.p = FALSE) rhyper(nn, m, n, k) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles representing the number of white balls drawn without replacement from an urn which contains both black and white balls.</p> </td> </tr> <tr valign='top'> <td><code>m</code></td> <td> <p>the number of white balls in the urn.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>the number of black balls in the urn.</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>the number of balls drawn from the urn.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>probability, it must be between 0 and 1.</p> </td> </tr> <tr valign='top'> <td><code>nn</code></td> <td> <p>number of observations.  If <code>length(nn) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"ts-methods"	"stats"	"Methods for Time Series Objects"	"<p>Methods for objects of class <code>'ts'</code>, typically the result of <code>ts</code>. </p>"	"<pre>## S3 method for class 'ts' diff(x, lag = 1, differences = 1, ...)<br />## S3 method for class 'ts' na.omit(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'ts'</code> containing the values to be differenced.</p> </td> </tr> <tr valign='top'> <td><code>lag</code></td> <td> <p>an integer indicating which lag to use.</p> </td> </tr> <tr valign='top'> <td><code>differences</code></td> <td> <p>an integer indicating the order of the difference.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>a univariate or multivariate time series.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"diffinv"	"stats"	"Discrete Integration: Inverse of Differencing"	"<p>Computes the inverse function of the lagged differences function <code>diff</code>. </p>"	"<pre>diffinv(x, ...)<br />## Default S3 method: diffinv(x, lag = 1, differences = 1, xi, ...) ## S3 method for class 'ts' diffinv(x, lag = 1, differences = 1, xi, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector, matrix, or time series.</p> </td> </tr> <tr valign='top'> <td><code>lag</code></td> <td> <p>a scalar lag parameter.</p> </td> </tr> <tr valign='top'> <td><code>differences</code></td> <td> <p>an integer representing the order of the difference.</p> </td> </tr> <tr valign='top'> <td><code>xi</code></td> <td> <p>a numeric vector, matrix, or time series containing the initial values for the integrals.  If missing, zeros are used.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"Distributions"	"stats"	"Distributions in the stats package"	"<p>Density, cumulative distribution function, quantile function and random variate generation for many standard probability distributions are available in the <span class='pkg'>stats</span> package. </p>"	NA	NA	FALSE
"Lognormal"	"stats"	"The Log Normal Distribution"	"<p>Density, distribution function, quantile function and random generation for the log normal distribution whose logarithm has mean equal to <code>meanlog</code> and standard deviation equal to <code>sdlog</code>. </p>"	"<pre>dlnorm(x, meanlog = 0, sdlog = 1, log = FALSE) plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE) qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE) rlnorm(n, meanlog = 0, sdlog = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>meanlog, sdlog</code></td> <td> <p>mean and standard deviation of the distribution on the log scale with default values of <code>0</code> and <code>1</code> respectively.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"Logistic"	"stats"	"The Logistic Distribution"	"<p>Density, distribution function, quantile function and random generation for the logistic distribution with parameters <code>location</code> and <code>scale</code>. </p>"	"<pre>dlogis(x, location = 0, scale = 1, log = FALSE) plogis(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) qlogis(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) rlogis(n, location = 0, scale = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>location, scale</code></td> <td> <p>location and scale parameters.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"Multinom"	"stats"	"The Multinomial Distribution"	"<p>Generate multinomially distributed random number vectors and compute multinomial probabilities. </p>"	"<pre>rmultinom(n, size, prob) dmultinom(x, size = NULL, prob, log = FALSE) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>vector of length <i>K</i> of integers in <code>0:size</code>.</p> </td> </tr></table>  <table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>number of random vectors to draw.</p> </td> </tr> <tr valign='top'> <td><code>size</code></td> <td> <p>integer, say <i>N</i>, specifying the total number of objects that are put into <i>K</i> boxes in the typical multinomial experiment. For <code>dmultinom</code>, it defaults to <code>sum(x)</code>.</p> </td> </tr> <tr valign='top'> <td><code>prob</code></td> <td> <p>numeric non-negative vector of length <i>K</i>, specifying the probability for the <i>K</i> classes; is internally normalized to sum 1. Infinite and missing values are not allowed.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>logical; if TRUE, log probabilities are computed.</p> </td> </tr> </table> "	FALSE
"NegBinomial"	"stats"	"The Negative Binomial Distribution"	"<p>Density, distribution function, quantile function and random generation for the negative binomial distribution with parameters <code>size</code> and <code>prob</code>. </p>"	"<pre>dnbinom(x, size, prob, mu, log = FALSE) pnbinom(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE) qnbinom(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE) rnbinom(n, size, prob, mu) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>vector of (non-negative integer) quantiles.</p> </td> </tr> <tr valign='top'> <td><code>q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations.  If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>size</code></td> <td> <p>target for number of successful trials, or dispersion parameter (the shape parameter of the gamma mixing distribution). Must be strictly positive, need not be integer.</p> </td> </tr> <tr valign='top'> <td><code>prob</code></td> <td> <p>probability of success in each trial. <code>0 &lt; prob &lt;= 1</code>.</p> </td> </tr> <tr valign='top'> <td><code>mu</code></td> <td> <p>alternative parametrization via mean: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"Normal"	"stats"	"The Normal Distribution"	"<p>Density, distribution function, quantile function and random generation for the normal distribution with mean equal to <code>mean</code> and standard deviation equal to <code>sd</code>. </p>"	"<pre>dnorm(x, mean = 0, sd = 1, log = FALSE) pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) rnorm(n, mean = 0, sd = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>mean</code></td> <td> <p>vector of means.</p> </td> </tr> <tr valign='top'> <td><code>sd</code></td> <td> <p>vector of standard deviations.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i> otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"Poisson"	"stats"	"The Poisson Distribution"	"<p>Density, distribution function, quantile function and random generation for the Poisson distribution with parameter <code>lambda</code>. </p>"	"<pre>dpois(x, lambda, log = FALSE) ppois(q, lambda, lower.tail = TRUE, log.p = FALSE) qpois(p, lambda, lower.tail = TRUE, log.p = FALSE) rpois(n, lambda) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>vector of (non-negative integer) quantiles.</p> </td> </tr> <tr valign='top'> <td><code>q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of random values to return.</p> </td> </tr> <tr valign='top'> <td><code>lambda</code></td> <td> <p>vector of (non-negative) means.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"SignRank"	"stats"	"Distribution of the Wilcoxon Signed Rank Statistic"	"<p>Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon Signed Rank statistic obtained from a sample with size <code>n</code>. </p>"	"<pre>dsignrank(x, n, log = FALSE) psignrank(q, n, lower.tail = TRUE, log.p = FALSE) qsignrank(p, n, lower.tail = TRUE, log.p = FALSE) rsignrank(nn, n) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>nn</code></td> <td> <p>number of observations. If <code>length(nn) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number(s) of observations in the sample(s).  A positive integer, or a vector of such integers.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"TDist"	"stats"	"The Student t Distribution"	"<p>Density, distribution function, quantile function and random generation for the t distribution with <code>df</code> degrees of freedom (and optional non-centrality parameter <code>ncp</code>). </p>"	"<pre>dt(x, df, ncp, log = FALSE) pt(q, df, ncp, lower.tail = TRUE, log.p = FALSE) qt(p, df, ncp, lower.tail = TRUE, log.p = FALSE) rt(n, df, ncp) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>df</code></td> <td> <p>degrees of freedom (<i>&gt; 0</i>, maybe non-integer).  <code>df<br />       = Inf</code> is allowed.</p> </td> </tr> <tr valign='top'> <td><code>ncp</code></td> <td> <p>non-centrality parameter <i>delta</i>; currently except for <code>rt()</code>, only for <code>abs(ncp) &lt;= 37.62</code>. If omitted, use the central t distribution.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"dummy.coef"	"stats"	"Extract Coefficients in Original Coding"	"<p>This extracts coefficients in terms of the original levels of the coefficients rather than the coded variables. </p>"	"<pre>dummy.coef(object, ...)<br />## S3 method for class 'lm' dummy.coef(object, use.na = FALSE, ...)<br />## S3 method for class 'aovlist' dummy.coef(object, use.na = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a linear model fit.</p> </td> </tr> <tr valign='top'> <td><code>use.na</code></td> <td> <p>logical flag for coefficients in a singular model. If <code>use.na</code> is true, undetermined coefficients will be missing; if false they will get one possible value.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"Uniform"	"stats"	"The Uniform Distribution"	"<p>These functions provide information about the uniform distribution on the interval from <code>min</code> to <code>max</code>.  <code>dunif</code> gives the density, <code>punif</code> gives the distribution function <code>qunif</code> gives the quantile function and <code>runif</code> generates random deviates. </p>"	"<pre>dunif(x, min = 0, max = 1, log = FALSE) punif(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE) qunif(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE) runif(n, min = 0, max = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>min, max</code></td> <td> <p>lower and upper limits of the distribution.  Must be finite.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"Weibull"	"stats"	"The Weibull Distribution"	"<p>Density, distribution function, quantile function and random generation for the Weibull distribution with parameters <code>shape</code> and <code>scale</code>. </p>"	"<pre>dweibull(x, shape, scale = 1, log = FALSE) pweibull(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE) qweibull(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE) rweibull(n, shape, scale = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations. If <code>length(n) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>shape, scale</code></td> <td> <p>shape and scale parameters, the latter defaulting to 1.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"Wilcoxon"	"stats"	"Distribution of the Wilcoxon Rank Sum Statistic"	"<p>Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon rank sum statistic obtained from samples with size <code>m</code> and <code>n</code>, respectively. </p>"	"<pre>dwilcox(x, m, n, log = FALSE) pwilcox(q, m, n, lower.tail = TRUE, log.p = FALSE) qwilcox(p, m, n, lower.tail = TRUE, log.p = FALSE) rwilcox(nn, m, n) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>nn</code></td> <td> <p>number of observations. If <code>length(nn) &gt; 1</code>, the length is taken to be the number required.</p> </td> </tr> <tr valign='top'> <td><code>m, n</code></td> <td> <p>numbers of observations in the first and second sample, respectively.  Can be vectors of positive integers.</p> </td> </tr> <tr valign='top'> <td><code>log, log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"ecdf"	"stats"	"Empirical Cumulative Distribution Function"	"<p>Compute an empirical cumulative distribution function, with several methods for plotting, printing and computing with such an “ecdf” object. </p>"	"<pre>ecdf(x)<br />## S3 method for class 'ecdf' plot(x, ..., ylab='Fn(x)', verticals = FALSE,<br />      col.01line = 'gray70', pch = 19)<br />## S3 method for class 'ecdf' print(x, digits= getOption('digits') - 2, ...)<br />## S3 method for class 'ecdf' summary(object, ...) ## S3 method for class 'ecdf' quantile(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, object</code></td> <td> <p>numeric vector of the observations for <code>ecdf</code>;  for the methods, an object inheriting from class <code>'ecdf'</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to subsequent methods, e.g., <code>plot.stepfun</code> for the <code>plot</code> method.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>label for the y-axis.</p> </td> </tr> <tr valign='top'> <td><code>verticals</code></td> <td> <p>see <code>plot.stepfun</code>.</p> </td> </tr> <tr valign='top'> <td><code>col.01line</code></td> <td> <p>numeric or character specifying the color of the horizontal lines at y = 0 and 1, see <code>colors</code>.</p> </td> </tr> <tr valign='top'> <td><code>pch</code></td> <td> <p>plotting character.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>number of significant digits to use, see <code>print</code>.</p> </td> </tr> </table> "	FALSE
"eff.aovlist"	"stats"	"Compute Efficiencies of Multistratum Analysis of Variance"	"<p>Computes the efficiencies of fixed-effect terms in an analysis of variance model with multiple strata. </p>"	"<pre>eff.aovlist(aovlist) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>aovlist</code></td> <td><br /><p>The result of a call to <code>aov</code> with an <code>Error</code> term. </p> </td> </tr></table> "	FALSE
"effects"	"stats"	"Effects from Fitted Model"	"<p>Returns (orthogonal) effects from a fitted model, usually a linear model. This is a generic function, but currently only has a methods for objects inheriting from classes <code>'lm'</code> and <code>'glm'</code>. </p>"	"<pre>effects(object, ...)<br />## S3 method for class 'lm' effects(object, set.sign = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object; typically, the result of a model fitting function such as <code>lm</code>.</p> </td> </tr> <tr valign='top'> <td><code>set.sign</code></td> <td> <p>logical. If <code>TRUE</code>, the sign of the effects corresponding to coefficients in the model will be set to agree with the signs of the corresponding coefficients, otherwise the sign is arbitrary.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"embed"	"stats"	"Embedding a Time Series"	"<p>Embeds the time series <code>x</code> into a low-dimensional Euclidean space. </p>"	"<pre>embed (x, dimension = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector, matrix, or time series.</p> </td> </tr> <tr valign='top'> <td><code>dimension</code></td> <td> <p>a scalar representing the embedding dimension.</p> </td> </tr> </table> "	FALSE
"start"	"stats"	"Encode the Terminal Times of Time Series"	"<p>Extract and encode the times the first and last observations were taken. Provided only for compatibility with S version 2. </p>"	"<pre>start(x, ...) end(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a univariate or multivariate time-series, or a vector or matrix.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>extra arguments for future methods.</p> </td> </tr> </table> "	FALSE
"SSD"	"stats"	"SSD Matrix and Estimated Variance Matrix in Multivariate Models"	"<p>Functions to compute matrix of residual sums of squares and products, or the estimated variance matrix for multivariate linear models. </p>"	"<pre><br /># S3 method for class 'mlm' SSD(object, ...)<br /># S3 methods for class 'SSD' and 'mlm' estVar(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p><code>object</code> of class <code>'mlm'</code>, or <code>'SSD'</code> in the case of <code>estVar</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Unused</p> </td> </tr> </table> "	FALSE
"expand.model.frame"	"stats"	"Add new variables to a model frame"	"<p>Evaluates new variables as if they had been part of the formula of the specified model.  This ensures that the same <code>na.action</code> and <code>subset</code> arguments are applied and allows, for example, <code>x</code> to be recovered for a model using <code>sin(x)</code> as a predictor. </p>"	"<pre>expand.model.frame(model, extras,<br />                    envir = environment(formula(model)),<br />                    na.expand = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>model</code></td> <td> <p>a fitted model</p> </td> </tr> <tr valign='top'> <td><code>extras</code></td> <td> <p>one-sided formula or vector of character strings describing new variables to be added</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>an environment to evaluate things in</p> </td> </tr> <tr valign='top'> <td><code>na.expand</code></td> <td> <p>logical; see below</p> </td> </tr> </table> "	FALSE
"extractAIC"	"stats"	"Extract AIC from a Fitted Model"	"<p>Computes the (generalized) Akaike <b>A</b>n <b>I</b>nformation <b>C</b>riterion for a fitted parametric model. </p>"	"<pre>extractAIC(fit, scale, k = 2, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>fit</code></td> <td> <p>fitted model, usually the result of a fitter like <code>lm</code>.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>optional numeric specifying the scale parameter of the model, see <code>scale</code> in <code>step</code>.  Currently only used in the <code>'lm'</code> method, where <code>scale</code> specifies the estimate of the error variance, and <code>scale = 0</code> indicates that it is to be estimated by maximum likelihood. </p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>numeric specifying the ‘weight’ of the <em>equivalent degrees of freedom</em> (<i>=:</i> <code>edf</code>) part in the AIC formula.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments (currently unused in base <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>).</p> </td> </tr> </table> "	FALSE
"factanal"	"stats"	"Factor Analysis"	"<p>Perform maximum-likelihood factor analysis on a covariance matrix or data matrix. </p>"	"<pre>factanal(x, factors, data = NULL, covmat = NULL, n.obs = NA,<br />          subset, na.action, start = NULL,<br />          scores = c('none', 'regression', 'Bartlett'),<br />          rotation = 'varimax', control = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A formula or a numeric matrix or an object that can be coerced to a numeric matrix.</p> </td> </tr> <tr valign='top'> <td><code>factors</code></td> <td> <p>The number of factors to be fitted.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>An optional data frame (or similar: see <code>model.frame</code>), used only if <code>x</code> is a formula.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>covmat</code></td> <td> <p>A covariance matrix, or a covariance list as returned by <code>cov.wt</code>.  Of course, correlation matrices are covariance matrices.</p> </td> </tr> <tr valign='top'> <td><code>n.obs</code></td> <td> <p>The number of observations, used if <code>covmat</code> is a covariance matrix.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>A specification of the cases to be used, if <code>x</code> is used as a matrix or formula.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>The <code>na.action</code> to be used if <code>x</code> is used as a formula.</p> </td> </tr> <tr valign='top'> <td><code>start</code></td> <td> <p><code>NULL</code> or a matrix of starting values, each column giving an initial set of uniquenesses.</p> </td> </tr> <tr valign='top'> <td><code>scores</code></td> <td> <p>Type of scores to produce, if any.  The default is none, <code>'regression'</code> gives Thompson's scores, <code>'Bartlett'</code> given Bartlett's weighted least-squares scores. Partial matching allows these names to be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>rotation</code></td> <td> <p>character. <code>'none'</code> or the name of a function to be used to rotate the factors: it will be called with first argument the loadings matrix, and should return a list with component <code>loadings</code> giving the rotated loadings, or just the rotated loadings.</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>A list of control values, </p><br /><dl> <dt>nstart</dt> <dd> <p>The number of starting values to be tried if <code>start = NULL</code>. Default 1.</p> </dd> <dt>trace</dt> <dd> <p>logical. Output tracing information? Default <code>FALSE</code>.</p> </dd> <dt>lower</dt> <dd> <p>The lower bound for uniquenesses during optimization. Should be &gt; 0. Default 0.005.</p> </dd> <dt>opt</dt> <dd> <p>A list of control values to be passed to <code>optim</code>'s <code>control</code> argument.</p> </dd> <dt>rotate</dt> <dd> <p>a list of additional arguments for the rotation function.</p> </dd> </dl> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Components of <code>control</code> can also be supplied as named arguments to <code>factanal</code>.</p> </td> </tr> </table> "	FALSE
"glm.summaries"	"stats"	"Accessing Generalized Linear Model Fits"	"<p>These functions are all <code>methods</code> for class <code>glm</code> or <code>summary.glm</code> objects. </p>"	"<pre>## S3 method for class 'glm' family(object, ...)<br />## S3 method for class 'glm' residuals(object, type = c('deviance', 'pearson', 'working',<br />                            'response', 'partial'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object of class <code>glm</code>, typically the result of a call to <code>glm</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the type of residuals which should be returned. The alternatives are: <code>'deviance'</code> (default), <code>'pearson'</code>, <code>'working'</code>, <code>'response'</code>, and <code>'partial'</code>. Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"lm.summaries"	"stats"	"Accessing Linear Model Fits"	"<p>All these functions are <code>methods</code> for class <code>'lm'</code>  objects. </p>"	"<pre>## S3 method for class 'lm' family(object, ...)<br />## S3 method for class 'lm' formula(x, ...)<br />## S3 method for class 'lm' residuals(object,<br />           type = c('working', 'response', 'deviance', 'pearson',<br />                    'partial'),<br />           ...)<br />## S3 method for class 'lm' labels(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object, x</code></td> <td> <p>an object inheriting from class <code>lm</code>, usually the result of a call to <code>lm</code> or <code>aov</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the type of residuals which should be returned.  Can be abbreviated.</p> </td> </tr> </table> "	FALSE
"fft"	"stats"	"Fast Discrete Fourier Transform (FFT)"	"<p>Computes the Discrete Fourier Transform (DFT) of an array with a fast algorithm, the “Fast Fourier Transform” (FFT). </p>"	"<pre>fft(z, inverse = FALSE) mvfft(z, inverse = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>z</code></td> <td> <p>a real or complex array containing the values to be transformed.</p> </td> </tr> <tr valign='top'> <td><code>inverse</code></td> <td> <p>if <code>TRUE</code>, the unnormalized inverse transform is computed (the inverse has a <code>+</code> in the exponent of <i>e</i>, but here, we do <em>not</em> divide by <code>1/length(x)</code>).</p> </td> </tr> </table> "	FALSE
"filter"	"stats"	"Linear Filtering on a Time Series"	"<p>Applies linear filtering to a univariate time series or to each series separately of a multivariate time series. </p>"	"<pre>filter(x, filter, method = c('convolution', 'recursive'),<br />        sides = 2, circular = FALSE, init) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a univariate or multivariate time series.</p> </td> </tr> <tr valign='top'> <td><code>filter</code></td> <td> <p>a vector of filter coefficients in reverse time order (as for AR or MA coefficients).</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>Either <code>'convolution'</code> or <code>'recursive'</code> (and can be abbreviated). If <code>'convolution'</code> a moving average is used: if <code>'recursive'</code> an autoregression is used.</p> </td> </tr> <tr valign='top'> <td><code>sides</code></td> <td> <p>for convolution filters only. If <code>sides = 1</code> the filter coefficients are for past values only; if <code>sides = 2</code> they are centred around lag 0.  In this case the length of the filter should be odd, but if it is even, more of the filter is forward in time than backward.</p> </td> </tr> <tr valign='top'> <td><code>circular</code></td> <td> <p>for convolution filters only.  If <code>TRUE</code>, wrap the filter around the ends of the series, otherwise assume external values are missing (<code>NA</code>).</p> </td> </tr> <tr valign='top'> <td><code>init</code></td> <td> <p>for recursive filters only. Specifies the initial values of the time series just prior to the start value, in reverse time order. The default is a set of zeros.</p> </td> </tr> </table> "	FALSE
"fisher.test"	"stats"	"Fisher's Exact Test for Count Data"	"<p>Performs Fisher's exact test for testing the null of independence of rows and columns in a contingency table with fixed marginals. </p>"	"<pre>fisher.test(x, y = NULL, workspace = 200000, hybrid = FALSE,<br />             control = list(), or = 1, alternative = 'two.sided',<br />             conf.int = TRUE, conf.level = 0.95,<br />             simulate.p.value = FALSE, B = 2000) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>either a two-dimensional contingency table in matrix form, or a factor object.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>a factor object; ignored if <code>x</code> is a matrix.</p> </td> </tr> <tr valign='top'> <td><code>workspace</code></td> <td> <p>an integer specifying the size of the workspace used in the network algorithm.  In units of 4 bytes.  Only used for non-simulated p-values larger than <i>2 by 2</i> tables.</p> </td> </tr> <tr valign='top'> <td><code>hybrid</code></td> <td> <p>a logical. Only used for larger than <i>2 by 2</i> tables, in which cases it indicates whether the exact probabilities (default) or a hybrid approximation thereof should be computed. See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>a list with named components for low level algorithm control.  At present the only one used is <code>'mult'</code>, a positive integer <i>≥ 2</i> with default 30 used only for larger than <i>2 by 2</i> tables.  This says how many times as much space should be allocated to paths as to keys: see file ‘<span class='file'>fexact.c</span>’ in the sources of this package.</p> </td> </tr> <tr valign='top'> <td><code>or</code></td> <td> <p>the hypothesized odds ratio.  Only used in the <i>2 by 2</i> case.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>indicates the alternative hypothesis and must be one of <code>'two.sided'</code>, <code>'greater'</code> or <code>'less'</code>. You can specify just the initial letter.  Only used in the <i>2 by 2</i> case.</p> </td> </tr> <tr valign='top'> <td><code>conf.int</code></td> <td> <p>logical indicating if a confidence interval for the odds ratio in a <i>2 by 2</i> table should be computed (and returned).</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level for the returned confidence interval.  Only used in the <i>2 by 2</i> case and if <code>conf.int = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>simulate.p.value</code></td> <td> <p>a logical indicating whether to compute p-values by Monte Carlo simulation, in larger than <i>2 by 2</i> tables.</p> </td> </tr> <tr valign='top'> <td><code>B</code></td> <td> <p>an integer specifying the number of replicates used in the Monte Carlo test.</p> </td> </tr> </table> "	FALSE
"kmeans"	"stats"	"K-Means Clustering"	"<p>Perform k-means clustering on a data matrix. </p>"	"<pre>kmeans(x, centers, iter.max = 10, nstart = 1,<br />        algorithm = c('Hartigan-Wong', 'Lloyd', 'Forgy',<br />                      'MacQueen'), trace=FALSE) ## S3 method for class 'kmeans' fitted(object, method = c('centers', 'classes'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric matrix of data, or an object that can be coerced to such a matrix (such as a numeric vector or a data frame with all numeric columns).</p> </td> </tr> <tr valign='top'> <td><code>centers</code></td> <td> <p>either the number of clusters, say <i>k</i>, or a set of initial (distinct) cluster centres.  If a number, a random set of (distinct) rows in <code>x</code> is chosen as the initial centres.</p> </td> </tr> <tr valign='top'> <td><code>iter.max</code></td> <td> <p>the maximum number of iterations allowed.</p> </td> </tr> <tr valign='top'> <td><code>nstart</code></td> <td> <p>if <code>centers</code> is a number, how many random sets should be chosen?</p> </td> </tr> <tr valign='top'> <td><code>algorithm</code></td> <td> <p>character: may be abbreviated.  Note that <code>'Lloyd'</code> and <code>'Forgy'</code> are alternative names for one algorithm.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object of class <code>'kmeans'</code>, typically the result <code>ob</code> of <code>ob &lt;- kmeans(..)</code>.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>character: may be abbreviated. <code>'centers'</code> causes <code>fitted</code> to return cluster centers (one for each input point) and <code>'classes'</code> causes <code>fitted</code> to return a vector of class assignments.</p> </td> </tr> <tr valign='top'> <td><code>trace</code></td> <td> <p>logical or integer number, currently only used in the default method (<code>'Hartigan-Wong'</code>): if positive (or true), tracing information on the progress of the algorithm is produced.  Higher values may produce more tracing information.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>not used.</p> </td> </tr> </table> "	FALSE
"fitted.values"	"stats"	"Extract Model Fitted Values"	"<p><code>fitted</code> is a generic function which extracts fitted values from objects returned by modeling functions.  <code>fitted.values</code> is an alias for it. </p> <p>All object classes which are returned by model fitting functions should provide a <code>fitted</code> method.  (Note that the generic is <code>fitted</code> and not <code>fitted.values</code>.) </p> <p>Methods can make use of <code>napredict</code> methods to compensate for the omission of missing values.  The default and <code>nls</code> methods do. </p>"	"<pre>fitted(object, ...) fitted.values(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object for which the extraction of model fitted values is meaningful.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other arguments.</p> </td> </tr> </table> "	FALSE
"fivenum"	"stats"	"Tukey Five-Number Summaries"	"<p>Returns Tukey's five number summary (minimum, lower-hinge, median, upper-hinge, maximum) for the input data. </p>"	"<pre>fivenum(x, na.rm = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric, maybe including <code>NA</code>s and <i>+/-</i><code>Inf</code>s.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical; if <code>TRUE</code>, all <code>NA</code> and <code>NaN</code>s are dropped, before the statistics are computed.</p> </td> </tr> </table> "	FALSE
"fligner.test"	"stats"	"Fligner-Killeen Test of Homogeneity of Variances"	"<p>Performs a Fligner-Killeen (median) test of the null that the variances in each of the groups (samples) are the same. </p>"	"<pre>fligner.test(x, ...)<br />## Default S3 method: fligner.test(x, g, ...)<br />## S3 method for class 'formula' fligner.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector of data values, or a list of numeric data vectors.</p> </td> </tr> <tr valign='top'> <td><code>g</code></td> <td> <p>a vector or factor object giving the group for the corresponding elements of <code>x</code>. Ignored if <code>x</code> is a list.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>lhs ~ rhs</code> where <code>lhs</code> gives the data values and <code>rhs</code> the corresponding groups.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"read.ftable"	"stats"	"Manipulate Flat Contingency Tables"	"<p>Read, write and coerce ‘flat’ contingency tables.</p>"	"<pre>read.ftable(file, sep = '', quote = '\'',<br />             row.var.names, col.vars, skip = 0)<br />write.ftable(x, file = '', quote = TRUE, append = FALSE,<br />              digits = getOption('digits'), ...)<br />## S3 method for class 'ftable' format(x, quote = TRUE, digits = getOption('digits'),<br />                         method = c('non.compact', 'row.compact',<br />                                   'col.compact', 'compact'),<br />                         lsep = ' | ', ...) ## S3 method for class 'ftable' print(x, digits = getOption('digits'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>either a character string naming a file or a connection which the data are to be read from or written to.  <code>''</code> indicates input from the console for reading and output to the console for writing.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>the field separator string.  Values on each line of the file are separated by this string.</p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>a character string giving the set of quoting characters for <code>read.ftable</code>; to disable quoting altogether, use <code>quote=''</code>.  For <code>write.table</code>, a logical indicating whether strings in the data will be surrounded by double quotes.</p> </td> </tr> <tr valign='top'> <td><code>row.var.names</code></td> <td> <p>a character vector with the names of the row variables, in case these cannot be determined automatically.</p> </td> </tr> <tr valign='top'> <td><code>col.vars</code></td> <td> <p>a list giving the names and levels of the column variables, in case these cannot be determined automatically.</p> </td> </tr> <tr valign='top'> <td><code>skip</code></td> <td> <p>the number of lines of the data file to skip before beginning to read data.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'ftable'</code>.</p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td> <p>logical.  If <code>TRUE</code> and <code>file</code> is the name of a file (and not a connection or <code>'|cmd'</code>), the output from <code>write.ftable</code> is appended to the file.  If <code>FALSE</code>, the contents of <code>file</code> will be overwritten.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>an integer giving the number of significant digits to use for (the cell entries of) <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>string specifying how the <code>'ftable'</code> object is formatted (and printed if used as in <code>write.ftable()</code> or the <code>print</code> method).  Can be abbreviated.  Available methods are (see the examples): </p><br /><dl> <dt>'non.compact'</dt> <dd> <p>the default representation of an <code>'ftable'</code> object.</p> </dd> <dt>'row.compact'</dt> <dd> <p>a row-compact version without empty cells below the column labels.</p> </dd> <dt>'col.compact'</dt> <dd> <p>a column-compact version without empty cells to the right of the row labels.</p> </dd> <dt>'compact'</dt> <dd> <p>a row- and column-compact version.  This may imply a row and a column label sharing the same cell.  They are then separated by the string <code>lsep</code>.</p> </dd> </dl> </td> </tr> <tr valign='top'> <td><code>lsep</code></td> <td> <p>only for <code>method = 'compact'</code>, the separation string for row and column labels.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods; for <code>write()</code> and <code>print()</code>, notably arguments such as <code>method</code>, passed to <code>format()</code>.</p> </td> </tr> </table> "	FALSE
"formula.nls"	"stats"	"Extract Model Formula from nls Object"	"<p>Returns the model used to fit <code>object</code>. </p>"	"<pre>## S3 method for class 'nls' formula(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object inheriting from class <code>'nls'</code>, representing a nonlinear least squares fit.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"friedman.test"	"stats"	"Friedman Rank Sum Test"	"<p>Performs a Friedman rank sum test with unreplicated blocked data. </p>"	"<pre>friedman.test(y, ...)<br />## Default S3 method: friedman.test(y, groups, blocks, ...)<br />## S3 method for class 'formula' friedman.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>y</code></td> <td> <p>either a numeric vector of data values, or a data matrix.</p> </td> </tr> <tr valign='top'> <td><code>groups</code></td> <td> <p>a vector giving the group for the corresponding elements of <code>y</code> if this is a vector;  ignored if <code>y</code> is a matrix.  If not a factor object, it is coerced to one.</p> </td> </tr> <tr valign='top'> <td><code>blocks</code></td> <td> <p>a vector giving the block for the corresponding elements of <code>y</code> if this is a vector;  ignored if <code>y</code> is a matrix.  If not a factor object, it is coerced to one.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>a ~ b | c</code>, where <code>a</code>, <code>b</code> and <code>c</code> give the data values and corresponding groups and blocks, respectively.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"ftable"	"stats"	"Flat Contingency Tables"	"<p>Create ‘flat’ contingency tables.</p>"	"<pre>ftable(x, ...)<br />## Default S3 method: ftable(..., exclude = c(NA, NaN), row.vars = NULL,<br />        col.vars = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, ...</code></td> <td> <p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects which can be interpreted as factors (including character strings), or a list (or data frame) whose components can be so interpreted, or a contingency table object of class <code>'table'</code> or <code>'ftable'</code>.</p> </td> </tr> <tr valign='top'> <td><code>exclude</code></td> <td> <p>values to use in the exclude argument of <code>factor</code> when interpreting non-factor objects.</p> </td> </tr> <tr valign='top'> <td><code>row.vars</code></td> <td> <p>a vector of integers giving the numbers of the variables, or a character vector giving the names of the variables to be used for the rows of the flat contingency table.</p> </td> </tr> <tr valign='top'> <td><code>col.vars</code></td> <td> <p>a vector of integers giving the numbers of the variables, or a character vector giving the names of the variables to be used for the columns of the flat contingency table.</p> </td> </tr> </table> "	FALSE
"ftable.formula"	"stats"	"Formula Notation for Flat Contingency Tables"	"<p>Produce or manipulate a flat contingency table using formula notation.</p>"	"<pre>## S3 method for class 'formula' ftable(formula, data = NULL, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula object with both left and right hand sides specifying the column and row variables of the flat table.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data frame, list or environment (or similar: see <code>model.frame</code>) containing the variables to be cross-tabulated, or a contingency table (see below).</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used. Ignored if <code>data</code> is a contingency table.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s. Ignored if <code>data</code> is a contingency table.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to the default ftable method may also be passed as arguments, see <code>ftable.default</code>.</p> </td> </tr> </table> "	FALSE
"update"	"stats"	"Update and Re-fit a Model Call"	"<p><code>update</code> will update and (by default) re-fit a model.  It does this by extracting the call stored in the object, updating the call and (by default) evaluating that call.  Sometimes it is useful to call <code>update</code> with only one argument, for example if the data frame has been corrected. </p> <p>“Extracting the call” in <code>update()</code> and similar functions uses <code>getCall()</code> which itself is a (S3) generic function with a default method that simply gets <code>x$call</code>. </p> <p>Because of this, <code>update()</code> will often work (via its default method) on new model classes, either automatically, or by providing a simple <code>getCall()</code> method for that class. </p>"	"<pre>update(object, ...) ## Default S3 method: update(object, formula., ..., evaluate = TRUE)<br />getCall(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object, x</code></td> <td> <p>An existing fit from a model function such as <code>lm</code>, <code>glm</code> and many others.</p> </td> </tr> <tr valign='top'> <td><code>formula.</code></td> <td> <p>Changes to the formula – see <code>update.formula</code> for details.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Additional arguments to the call, or arguments with changed values. Use <code>name = NULL</code> to remove the argument <code>name</code>.</p> </td> </tr> <tr valign='top'> <td><code>evaluate</code></td> <td> <p>If true evaluate the new call else return the call.</p> </td> </tr> </table> "	FALSE
"getInitial"	"stats"	"Get Initial Parameter Estimates"	"<p>This function evaluates initial parameter estimates for a nonlinear regression model.  If <code>data</code> is a parameterized data frame or <code>pframe</code> object, its <code>parameters</code> attribute is returned. Otherwise the object is examined to see if it contains a call to a <code>selfStart</code> object whose <code>initial</code> attribute can be evaluated. </p>"	"<pre>getInitial(object, data, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a formula or a <code>selfStart</code> model that defines a nonlinear regression model</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data frame in which the expressions in the formula or arguments to the <code>selfStart</code> model can be evaluated</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional additional arguments</p> </td> </tr> </table> "	FALSE
"model.frame"	"stats"	"Extracting the Model Frame from a Formula or Fit"	"<p><code>model.frame</code> (a generic function) and its methods return a <code>data.frame</code> with the variables needed to use <code>formula</code> and any <code>...</code> arguments. </p>"	"<pre>model.frame(formula, ...)<br />## Default S3 method: model.frame(formula, data = NULL,<br />             subset = NULL, na.action = na.fail,<br />             drop.unused.levels = FALSE, xlev = NULL, ...)<br />## S3 method for class 'aovlist' model.frame(formula, data = NULL, ...)<br />## S3 method for class 'glm' model.frame(formula, ...)<br />## S3 method for class 'lm' model.frame(formula, ...)<br />get_all_vars(formula, data, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a model <code>formula</code> or <code>terms</code> object or an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data.frame, list or environment (or object coercible by <code>as.data.frame</code> to a data.frame), containing the variables in <code>formula</code>.  Neither a matrix nor an array will be accepted.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>a specification of the rows to be used: defaults to all rows. This can be any valid indexing vector (see <code>[.data.frame</code>) for the rows of <code>data</code> or if that is not supplied, a data frame made up of the variables used in <code>formula</code>.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>how <code>NA</code>s are treated.  The default is first, any <code>na.action</code> attribute of <code>data</code>, second a <code>na.action</code> setting of <code>options</code>, and third <code>na.fail</code> if that is unset.  The ‘factory-fresh’ default is <code>na.omit</code>.  Another possible value is <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>drop.unused.levels</code></td> <td> <p>should factors have unused levels dropped? Defaults to <code>FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlev</code></td> <td> <p>a named list of character vectors giving the full set of levels to be assumed for each factor.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments such as <code>data</code>, <code>na.action</code>, <code>subset</code>.  Any additional arguments such as <code>offset</code> and <code>weights</code> which reach the default method are used to create further columns in the model frame, with parenthesised names such as <code>'(offset)'</code>.</p> </td> </tr> </table> "	FALSE
"glm"	"stats"	"Fitting Generalized Linear Models"	"<p><code>glm</code> is used to fit generalized linear models, specified by giving a symbolic description of the linear predictor and a description of the error distribution. </p>"	"<pre>glm(formula, family = gaussian, data, weights, subset,<br />     na.action, start = NULL, etastart, mustart, offset,<br />     control = list(...), model = TRUE, method = 'glm.fit',<br />     x = FALSE, y = TRUE, contrasts = NULL, ...)<br />glm.fit(x, y, weights = rep(1, nobs),<br />         start = NULL, etastart = NULL, mustart = NULL,<br />         offset = rep(0, nobs), family = gaussian(),<br />         control = list(), intercept = TRUE)<br />## S3 method for class 'glm' weights(object, type = c('prior', 'working'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>an object of class <code>'formula'</code> (or one that can be coerced to that class): a symbolic description of the model to be fitted.  The details of model specification are given under ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>family</code></td> <td> <p>a description of the error distribution and link function to be used in the model.  For <code>glm</code> this can be a character string naming a family function, a family function or the result of a call to a family function.  For <code>glm.fit</code> only the third option is supported.  (See <code>family</code> for details of family functions.)</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional data frame, list or environment (or object coercible by <code>as.data.frame</code> to a data frame) containing the variables in the model.  If not found in <code>data</code>, the variables are taken from <code>environment(formula)</code>, typically the environment from which <code>glm</code> is called.</p> </td> </tr> <tr valign='top'> <td><code>weights</code></td> <td> <p>an optional vector of ‘prior weights’ to be used in the fitting process.  Should be <code>NULL</code> or a numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used in the fitting process.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  The default is set by the <code>na.action</code> setting of <code>options</code>, and is <code>na.fail</code> if that is unset.  The ‘factory-fresh’ default is <code>na.omit</code>.  Another possible value is <code>NULL</code>, no action.  Value <code>na.exclude</code> can be useful.</p> </td> </tr> <tr valign='top'> <td><code>start</code></td> <td> <p>starting values for the parameters in the linear predictor.</p> </td> </tr> <tr valign='top'> <td><code>etastart</code></td> <td> <p>starting values for the linear predictor.</p> </td> </tr> <tr valign='top'> <td><code>mustart</code></td> <td> <p>starting values for the vector of means.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td> <p>this can be used to specify an <em>a priori</em> known component to be included in the linear predictor during fitting. This should be <code>NULL</code> or a numeric vector of length equal to the number of cases.  One or more <code>offset</code> terms can be included in the formula instead or as well, and if more than one is specified their sum is used.  See <code>model.offset</code>.</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>a list of parameters for controlling the fitting process.  For <code>glm.fit</code> this is passed to <code>glm.control</code>.</p> </td> </tr> <tr valign='top'> <td><code>model</code></td> <td> <p>a logical value indicating whether <em>model frame</em> should be included as a component of the returned value.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>the method to be used in fitting the model.  The default method <code>'glm.fit'</code> uses iteratively reweighted least squares (IWLS): the alternative <code>'model.frame'</code> returns the model frame and does no fitting. </p> <p>User-supplied fitting functions can be supplied either as a function or a character string naming a function, with a function which takes the same arguments as <code>glm.fit</code>.  If specified as a character string it is looked up from within the <span class='pkg'>stats</span> namespace. </p> </td> </tr> <tr valign='top'> <td><code>x, y</code></td> <td> <p>For <code>glm</code>: logical values indicating whether the response vector and model matrix used in the fitting process should be returned as components of the returned value. </p> <p>For <code>glm.fit</code>: <code>x</code> is a design matrix of dimension <code>n * p</code>, and <code>y</code> is a vector of observations of length <code>n</code>. </p> </td> </tr> <tr valign='top'> <td><code>contrasts</code></td> <td> <p>an optional list. See the <code>contrasts.arg</code> of <code>model.matrix.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>intercept</code></td> <td> <p>logical. Should an intercept be included in the <em>null</em> model?</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>an object inheriting from class <code>'glm'</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character, partial matching allowed.  Type of weights to extract from the fitted model object.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td><br /><p>For <code>glm</code>: arguments to be used to form the default <code>control</code> argument if it is not supplied directly. </p> <p>For <code>weights</code>: further arguments passed to or from other methods. </p> </td> </tr> </table> "	FALSE
"glm.control"	"stats"	"Auxiliary for Controlling GLM Fitting"	"<p>Auxiliary function for <code>glm</code> fitting. Typically only used internally by <code>glm.fit</code>, but may be used to construct a <code>control</code> argument to either function. </p>"	"<pre>glm.control(epsilon = 1e-8, maxit = 25, trace = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>epsilon</code></td> <td> <p>positive convergence tolerance <i>ε</i>; the iterations converge when <i>|dev - dev_{old}|/(|dev| + 0.1) &lt; ε</i>.</p> </td> </tr> <tr valign='top'> <td><code>maxit</code></td> <td> <p>integer giving the maximal number of IWLS iterations.</p> </td> </tr> <tr valign='top'> <td><code>trace</code></td> <td> <p>logical indicating if output should be produced for each iteration.</p> </td> </tr> </table> "	FALSE
"tsp"	"stats"	"Tsp Attribute of Time-Series-like Objects"	"<p><code>tsp</code> returns the <code>tsp</code> attribute (or <code>NULL</code>). It is included for compatibility with S version 2. <code>tsp&lt;-</code> sets the <code>tsp</code> attribute. <code>hasTsp</code> ensures <code>x</code> has a <code>tsp</code> attribute, by adding one if needed. </p>"	"<pre>tsp(x) tsp(x) &lt;- value hasTsp(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector or matrix or univariate or multivariate time-series.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a numeric vector of length 3 or <code>NULL</code>.</p> </td> </tr> </table> "	FALSE
"hclust"	"stats"	"Hierarchical Clustering"	"<p>Hierarchical cluster analysis on a set of dissimilarities and methods for analyzing it. </p>"	"<pre>hclust(d, method = 'complete', members = NULL)<br />## S3 method for class 'hclust' plot(x, labels = NULL, hang = 0.1, check = TRUE,<br />      axes = TRUE, frame.plot = FALSE, ann = TRUE,<br />      main = 'Cluster Dendrogram',<br />      sub = NULL, xlab = NULL, ylab = 'Height', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>d</code></td> <td> <p>a dissimilarity structure as produced by <code>dist</code>.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>the agglomeration method to be used.  This should be (an unambiguous abbreviation of) one of <code>'ward.D'</code>, <code>'ward.D2'</code>, <code>'single'</code>, <code>'complete'</code>, <code>'average'</code> (= UPGMA), <code>'mcquitty'</code> (= WPGMA), <code>'median'</code> (= WPGMC) or <code>'centroid'</code> (= UPGMC).</p> </td> </tr> <tr valign='top'> <td><code>members</code></td> <td> <p><code>NULL</code> or a vector with length size of <code>d</code>. See the ‘Details’ section.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of the type produced by <code>hclust</code>.</p> </td> </tr> <tr valign='top'> <td><code>hang</code></td> <td> <p>The fraction of the plot height by which labels should hang below the rest of the plot. A negative value will cause the labels to hang down from 0.</p> </td> </tr> <tr valign='top'> <td><code>check</code></td> <td> <p>logical indicating if the <code>x</code> object should be checked for validity.  This check is not necessary when <code>x</code> is known to be valid such as when it is the direct result of <code>hclust()</code>.  The default is <code>check=TRUE</code>, as invalid inputs may crash <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> due to memory violation in the internal C plotting code.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>A character vector of labels for the leaves of the tree.  By default the row names or row numbers of the original data are used.  If <code>labels = FALSE</code> no labels at all are plotted.</p> </td> </tr> <tr valign='top'> <td><code>axes, frame.plot, ann</code></td> <td> <p>logical flags as in <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>main, sub, xlab, ylab</code></td> <td> <p>character strings for <code>title</code>.  <code>sub</code> and <code>xlab</code> have a non-NULL default when there's a <code>tree$call</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further graphical arguments.  E.g., <code>cex</code> controls the size of the labels (if plotted) in the same way as <code>text</code>.</p> </td> </tr> </table> "	FALSE
"heatmap"	"stats"	" Draw a Heat Map "	"<p>A heat map is a false color image (basically <code>image(t(x))</code>) with a dendrogram added to the left side and to the top.  Typically, reordering of the rows and columns according to some set of values (row or column means) within the restrictions imposed by the dendrogram is carried out. </p>"	"<pre>heatmap(x, Rowv = NULL, Colv = if(symm)'Rowv' else NULL,<br />         distfun = dist, hclustfun = hclust,<br />         reorderfun = function(d, w) reorder(d, w),<br />         add.expr, symm = FALSE, revC = identical(Colv, 'Rowv'),<br />         scale = c('row', 'column', 'none'), na.rm = TRUE,<br />         margins = c(5, 5), ColSideColors, RowSideColors,<br />         cexRow = 0.2 + 1/log10(nr), cexCol = 0.2 + 1/log10(nc),<br />         labRow = NULL, labCol = NULL, main = NULL,<br />         xlab = NULL, ylab = NULL,<br />         keep.dendro = FALSE, verbose = getOption('verbose'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric matrix of the values to be plotted. </p> </td> </tr> <tr valign='top'> <td><code>Rowv</code></td> <td> <p>determines if and how the <em>row</em> dendrogram should be computed and reordered.  Either a <code>dendrogram</code> or a vector of values used to reorder the row dendrogram or <code>NA</code> to suppress any row dendrogram (and reordering) or by default, <code>NULL</code>, see ‘Details’ below.</p> </td> </tr> <tr valign='top'> <td><code>Colv</code></td> <td> <p>determines if and how the <em>column</em> dendrogram should be reordered.  Has the same options as the <code>Rowv</code> argument above and <em>additionally</em> when <code>x</code> is a square matrix, <code>Colv =<br />       'Rowv'</code> means that columns should be treated identically to the rows (and so if there is to be no row dendrogram there will not be a column one either).</p> </td> </tr> <tr valign='top'> <td><code>distfun</code></td> <td> <p>function used to compute the distance (dissimilarity) between both rows and columns.  Defaults to <code>dist</code>.</p> </td> </tr> <tr valign='top'> <td><code>hclustfun</code></td> <td> <p>function used to compute the hierarchical clustering when <code>Rowv</code> or <code>Colv</code> are not dendrograms.  Defaults to <code>hclust</code>. Should take as argument a result of <code>distfun</code> and return an object to which <code>as.dendrogram</code> can be applied.</p> </td> </tr> <tr valign='top'> <td><code>reorderfun</code></td> <td> <p><code>function(d, w)</code> of dendrogram and weights for reordering the row and column dendrograms.  The default uses <code>reorder.dendrogram</code>.</p> </td> </tr> <tr valign='top'> <td><code>add.expr</code></td> <td> <p>expression that will be evaluated after the call to <code>image</code>.  Can be used to add components to the plot.</p> </td> </tr> <tr valign='top'> <td><code>symm</code></td> <td> <p>logical indicating if <code>x</code> should be treated <b>symm</b>etrically; can only be true when <code>x</code> is a square matrix.</p> </td> </tr> <tr valign='top'> <td><code>revC</code></td> <td> <p>logical indicating if the column order should be <code>rev</code>ersed for plotting, such that e.g., for the symmetric case, the symmetry axis is as usual.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>character indicating if the values should be centered and scaled in either the row direction or the column direction, or none.  The default is <code>'row'</code> if <code>symm</code> false, and <code>'none'</code> otherwise.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical indicating whether <code>NA</code>'s should be removed.</p> </td> </tr> <tr valign='top'> <td><code>margins</code></td> <td> <p>numeric vector of length 2 containing the margins (see <code>par(mar = *)</code>) for column and row names, respectively.</p> </td> </tr> <tr valign='top'> <td><code>ColSideColors</code></td> <td> <p>(optional) character vector of length <code>ncol(x)</code> containing the color names for a horizontal side bar that may be used to annotate the columns of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>RowSideColors</code></td> <td> <p>(optional) character vector of length <code>nrow(x)</code> containing the color names for a vertical side bar that may be used to annotate the rows of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>cexRow, cexCol</code></td> <td> <p>positive numbers, used as <code>cex.axis</code> in for the row or column axis labeling.  The defaults currently only use number of rows or columns, respectively.</p> </td> </tr> <tr valign='top'> <td><code>labRow, labCol</code></td> <td> <p>character vectors with row and column labels to use; these default to <code>rownames(x)</code> or <code>colnames(x)</code>, respectively.</p> </td> </tr> <tr valign='top'> <td><code>main, xlab, ylab</code></td> <td> <p>main, x- and y-axis titles; defaults to none.</p> </td> </tr> <tr valign='top'> <td><code>keep.dendro</code></td> <td> <p>logical indicating if the dendrogram(s) should be kept as part of the result (when <code>Rowv</code> and/or <code>Colv</code> are not NA).</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>logical indicating if information should be printed.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments passed on to <code>image</code>, e.g., <code>col</code> specifying the colors.</p> </td> </tr> </table> "	FALSE
"HoltWinters"	"stats"	"Holt-Winters Filtering"	"<p>Computes Holt-Winters Filtering of a given time series. Unknown parameters are determined by minimizing the squared prediction error. </p>"	"<pre>HoltWinters(x, alpha = NULL, beta = NULL, gamma = NULL,<br />             seasonal = c('additive', 'multiplicative'),<br />             start.periods = 2, l.start = NULL, b.start = NULL,<br />             s.start = NULL,<br />             optim.start = c(alpha = 0.3, beta = 0.1, gamma = 0.1),<br />             optim.control = list()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>An object of class <code>ts</code></p> </td> </tr> <tr valign='top'> <td><code>alpha</code></td> <td> <p><i>alpha</i> parameter of Holt-Winters Filter.</p> </td> </tr> <tr valign='top'> <td><code>beta</code></td> <td> <p><i>beta</i> parameter of Holt-Winters Filter. If set to <code>FALSE</code>, the function will do exponential smoothing.</p> </td> </tr> <tr valign='top'> <td><code>gamma</code></td> <td> <p><i>gamma</i> parameter used for the seasonal component. If set to <code>FALSE</code>, an non-seasonal model is fitted.</p> </td> </tr> <tr valign='top'> <td><code>seasonal</code></td> <td> <p>Character string to select an <code>'additive'</code> (the default) or <code>'multiplicative'</code> seasonal model. The first few characters are sufficient. (Only takes effect if <code>gamma</code> is non-zero).</p> </td> </tr> <tr valign='top'> <td><code>start.periods</code></td> <td> <p>Start periods used in the autodetection of start values. Must be at least 2.</p> </td> </tr> <tr valign='top'> <td><code>l.start</code></td> <td> <p>Start value for level (a[0]).</p> </td> </tr> <tr valign='top'> <td><code>b.start</code></td> <td> <p>Start value for trend (b[0]).</p> </td> </tr> <tr valign='top'> <td><code>s.start</code></td> <td> <p>Vector of start values for the seasonal component (<i>s_1[0] … s_p[0]</i>)</p> </td> </tr> <tr valign='top'> <td><code>optim.start</code></td> <td> <p>Vector with named components <code>alpha</code>, <code>beta</code>, and <code>gamma</code> containing the starting values for the optimizer. Only the values needed must be specified.  Ignored in the one-parameter case.</p> </td> </tr> <tr valign='top'> <td><code>optim.control</code></td> <td> <p>Optional list with additional control parameters passed to <code>optim</code> if this is used.  Ignored in the one-parameter case.</p> </td> </tr> </table> "	FALSE
"identify.hclust"	"stats"	"Identify Clusters in a Dendrogram"	"<p><code>identify.hclust</code> reads the position of the graphics pointer when the (first) mouse button is pressed.  It then cuts the tree at the vertical position of the pointer and highlights the cluster containing the horizontal position of the pointer.  Optionally a function is applied to the index of data points contained in the cluster. </p>"	"<pre>## S3 method for class 'hclust' identify(x, FUN = NULL, N = 20, MAXCLUSTER = 20, DEV.FUN = NULL,<br />           ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of the type produced by <code>hclust</code>.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>(optional) function to be applied to the index numbers of the data points in a cluster (see ‘Details’ below).</p> </td> </tr> <tr valign='top'> <td><code>N</code></td> <td> <p>the maximum number of clusters to be identified.</p> </td> </tr> <tr valign='top'> <td><code>MAXCLUSTER</code></td> <td> <p>the maximum number of clusters that can be produced by a cut (limits the effective vertical range of the pointer). </p> </td> </tr> <tr valign='top'> <td><code>DEV.FUN</code></td> <td> <p>(optional) integer scalar. If specified, the corresponding graphics device is made active before <code>FUN</code> is applied.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to <code>FUN</code>.</p> </td> </tr> </table> "	FALSE
"lm.influence"	"stats"	"Regression Diagnostics"	"<p>This function provides the basic quantities which are used in forming a wide variety of diagnostics for checking the quality of regression fits. </p>"	"<pre>influence(model, ...) ## S3 method for class 'lm' influence(model, do.coef = TRUE, ...) ## S3 method for class 'glm' influence(model, do.coef = TRUE, ...)<br />lm.influence(model, do.coef = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>model</code></td> <td> <p>an object as returned by <code>lm</code> or <code>glm</code>.</p> </td> </tr> <tr valign='top'> <td><code>do.coef</code></td> <td> <p>logical indicating if the changed <code>coefficients</code> (see below) are desired.  These need <i>O(n^2 p)</i> computing time.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"integrate"	"stats"	"Integration of One-Dimensional Functions"	"<p>Adaptive quadrature of functions of one variable over a finite or infinite interval. </p>"	"<pre>integrate(f, lower, upper, ..., subdivisions = 100L,<br />           rel.tol = .Machine$double.eps^0.25, abs.tol = rel.tol,<br />           stop.on.error = TRUE, keep.xy = FALSE, aux = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> function taking a numeric first argument and returning a numeric vector of the same length.  Returning a non-finite element will generate an error.</p> </td> </tr> <tr valign='top'> <td><code>lower, upper</code></td> <td> <p>the limits of integration.  Can be infinite.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments to be passed to <code>f</code>.</p> </td> </tr> <tr valign='top'> <td><code>subdivisions</code></td> <td> <p>the maximum number of subintervals.</p> </td> </tr> <tr valign='top'> <td><code>rel.tol</code></td> <td> <p>relative accuracy requested.</p> </td> </tr> <tr valign='top'> <td><code>abs.tol</code></td> <td> <p>absolute accuracy requested.</p> </td> </tr> <tr valign='top'> <td><code>stop.on.error</code></td> <td> <p>logical. If true (the default) an error stops the function.  If false some errors will give a result with a warning in the <code>message</code> component.</p> </td> </tr> <tr valign='top'> <td><code>keep.xy</code></td> <td> <p>unused.  For compatibility with S.</p> </td> </tr> <tr valign='top'> <td><code>aux</code></td> <td> <p>unused.  For compatibility with S.</p> </td> </tr> </table> "	FALSE
"interaction.plot"	"stats"	"Two-way Interaction Plot"	"<p>Plots the mean (or other summary) of the response for two-way combinations of factors, thereby illustrating possible interactions. </p>"	"<pre>interaction.plot(x.factor, trace.factor, response, fun = mean,<br />                  type = c('l', 'p', 'b', 'o', 'c'), legend = TRUE,<br />                  trace.label = deparse(substitute(trace.factor)),<br />                  fixed = FALSE,<br />                  xlab = deparse(substitute(x.factor)),<br />                  ylab = ylabel,<br />                  ylim = range(cells, na.rm = TRUE),<br />                  lty = nc:1, col = 1, pch = c(1:9, 0, letters),<br />                  xpd = NULL, leg.bg = par('bg'), leg.bty = 'n',<br />                  xtick = FALSE, xaxt = par('xaxt'), axes = TRUE,<br />                  ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x.factor</code></td> <td> <p>a factor whose levels will form the x axis.</p> </td> </tr> <tr valign='top'> <td><code>trace.factor</code></td> <td> <p>another factor whose levels will form the traces.</p> </td> </tr> <tr valign='top'> <td><code>response</code></td> <td> <p>a numeric variable giving the response</p> </td> </tr> <tr valign='top'> <td><code>fun</code></td> <td> <p>the function to compute the summary. Should return a single real value.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the type of plot (see <code>plot.default</code>): lines or points or both.</p> </td> </tr> <tr valign='top'> <td><code>legend</code></td> <td> <p>logical. Should a legend be included?</p> </td> </tr> <tr valign='top'> <td><code>trace.label</code></td> <td> <p>overall label for the legend.</p> </td> </tr> <tr valign='top'> <td><code>fixed</code></td> <td> <p>logical.  Should the legend be in the order of the levels of <code>trace.factor</code> or in the order of the traces at their right-hand ends?</p> </td> </tr> <tr valign='top'> <td><code>xlab,ylab</code></td> <td> <p>the x and y label of the plot each with a sensible default.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>numeric of length 2 giving the y limits for the plot.</p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>line type for the lines drawn, with sensible default.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>the color to be used for plotting.</p> </td> </tr> <tr valign='top'> <td><code>pch</code></td> <td> <p>a vector of plotting symbols or characters, with sensible default.</p> </td> </tr> <tr valign='top'> <td><code>xpd</code></td> <td> <p>determines clipping behaviour for the <code>legend</code> used, see <code>par(xpd)</code>.  Per default, the legend is <em>not</em> clipped at the figure border.</p> </td> </tr> <tr valign='top'> <td><code>leg.bg, leg.bty</code></td> <td> <p>arguments passed to <code>legend()</code>.</p> </td> </tr> <tr valign='top'> <td><code>xtick</code></td> <td> <p>logical. Should tick marks be used on the x axis?</p> </td> </tr> <tr valign='top'> <td><code>xaxt, axes, ...</code></td> <td> <p>graphics parameters to be passed to the plotting routines.</p> </td> </tr> </table> "	FALSE
"IQR"	"stats"	"The Interquartile Range"	"<p>computes interquartile range of the <code>x</code> values.</p>"	"<pre>IQR(x, na.rm = FALSE, type = 7) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical. Should missing values be removed?</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>an integer selecting one of the many quantile algorithms, see <code>quantile</code>.</p> </td> </tr> </table> "	FALSE
"is.empty"	"stats"	"Test if a Model's Formula is Empty"	"<p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>'s formula notation allows models with no intercept and no predictors. These require special handling internally. <code>is.empty.model()</code> checks whether an object describes an empty model. </p>"	"<pre>is.empty.model(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>A <code>terms</code> object or an object with a <code>terms</code> method.</p> </td> </tr></table> "	FALSE
"isoreg"	"stats"	"Isotonic / Monotone Regression"	"<p>Compute the isotonic (monotonely increasing nonparametric) least squares regression which is piecewise constant. </p>"	"<pre>isoreg(x, y = NULL) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x, y</code></td> <td><br /><p>coordinate vectors of the regression points.  Alternatively a single plotting structure can be specified: see <code>xy.coords</code>. </p> </td> </tr></table> "	FALSE
"KalmanLike"	"stats"	"Kalman Filtering"	"<p>Use Kalman Filtering to find the (Gaussian) log-likelihood, or for forecasting or smoothing. </p>"	"<pre>KalmanLike(y, mod, nit = 0L, update = FALSE) KalmanRun(y, mod, nit = 0L, update = FALSE) KalmanSmooth(y, mod, nit = 0L) KalmanForecast(n.ahead = 10L, mod, update = FALSE)<br />makeARIMA(phi, theta, Delta, kappa = 1e6,<br />           SSinit = c('Gardner1980', 'Rossignol2011'),<br />           tol = .Machine$double.eps) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>y</code></td> <td> <p>a univariate time series.</p> </td> </tr> <tr valign='top'> <td><code>mod</code></td> <td> <p>a list describing the state-space model: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>nit</code></td> <td> <p>the time at which the initialization is computed. <code>nit = 0L</code> implies that the initialization is for a one-step prediction, so <code>Pn</code> should not be computed at the first step.</p> </td> </tr> <tr valign='top'> <td><code>update</code></td> <td> <p>if <code>TRUE</code> the update <code>mod</code> object will be returned as attribute <code>'mod'</code> of the result.</p> </td> </tr> <tr valign='top'> <td><code>n.ahead</code></td> <td> <p>the number of steps ahead for which prediction is required.</p> </td> </tr> <tr valign='top'> <td><code>phi, theta</code></td> <td> <p>numeric vectors of length <i>≥ 0</i> giving AR and MA parameters.</p> </td> </tr> <tr valign='top'> <td><code>Delta</code></td> <td> <p>vector of differencing coefficients, so an ARMA model is fitted to <code>y[t] - Delta[1]*y[t-1] - ...</code>.</p> </td> </tr> <tr valign='top'> <td><code>kappa</code></td> <td> <p>the prior variance (as a multiple of the innovations variance) for the past observations in a differenced model.</p> </td> </tr> <tr valign='top'> <td><code>SSinit</code></td> <td> <p>a string specifying the algorithm to compute the <code>Pn</code> part of the state-space initialization; see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>tolerance eventually passed to <code>solve.default</code> when <code>SSinit = 'Rossignol2011'</code>.</p> </td> </tr> </table> "	FALSE
"kernapply"	"stats"	"Apply Smoothing Kernel"	"<p><code>kernapply</code> computes the convolution between an input sequence and a specific kernel. </p>"	"<pre>kernapply(x, ...)<br />## Default S3 method: kernapply(x, k, circular = FALSE, ...) ## S3 method for class 'ts' kernapply(x, k, circular = FALSE, ...) ## S3 method for class 'vector' kernapply(x, k, circular = FALSE, ...)<br />## S3 method for class 'tskernel' kernapply(x, k, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an input vector, matrix, time series or kernel to be smoothed.</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>smoothing <code>'tskernel'</code> object.</p> </td> </tr> <tr valign='top'> <td><code>circular</code></td> <td> <p>a logical indicating whether the input sequence to be smoothed is treated as circular, i.e., periodic.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"kruskal.test"	"stats"	"Kruskal-Wallis Rank Sum Test"	"<p>Performs a Kruskal-Wallis rank sum test. </p>"	"<pre>kruskal.test(x, ...)<br />## Default S3 method: kruskal.test(x, g, ...)<br />## S3 method for class 'formula' kruskal.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector of data values, or a list of numeric data vectors.  Non-numeric elements of a list will be coerced, with a warning.</p> </td> </tr> <tr valign='top'> <td><code>g</code></td> <td> <p>a vector or factor object giving the group for the corresponding elements of <code>x</code>.  Ignored with a warning if <code>x</code> is a list.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>response ~ group</code> where <code>response</code> gives the data values and <code>group</code> a vector or factor of the corresponding groups.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"ks.test"	"stats"	"Kolmogorov-Smirnov Tests"	"<p>Perform a one- or two-sample Kolmogorov-Smirnov test. </p>"	"<pre>ks.test(x, y, ...,<br />         alternative = c('two.sided', 'less', 'greater'),<br />         exact = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector of data values.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>either a numeric vector of data values, or a character string naming a cumulative distribution function or an actual cumulative distribution function such as <code>pnorm</code>.  Only continuous CDFs are valid.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>parameters of the distribution specified (as a character string) by <code>y</code>.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>indicates the alternative hypothesis and must be one of <code>'two.sided'</code> (default), <code>'less'</code>, or <code>'greater'</code>.  You can specify just the initial letter of the value, but the argument name must be give in full. See ‘Details’ for the meanings of the possible values.</p> </td> </tr> <tr valign='top'> <td><code>exact</code></td> <td> <p><code>NULL</code> or a logical indicating whether an exact p-value should be computed.  See ‘Details’ for the meaning of <code>NULL</code>.  Not available in the two-sample case for a one-sided test or if ties are present.</p> </td> </tr> </table> "	FALSE
"ksmooth"	"stats"	"Kernel Regression Smoother"	"<p>The Nadaraya–Watson kernel regression estimate. </p>"	"<pre>ksmooth(x, y, kernel = c('box', 'normal'), bandwidth = 0.5,<br />         range.x = range(x),<br />         n.points = max(100L, length(x)), x.points) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>input x values.  Long vectors are supported.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>input y values.  Long vectors are supported.</p> </td> </tr> <tr valign='top'> <td><code>kernel</code></td> <td> <p>the kernel to be used.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>bandwidth</code></td> <td> <p>the bandwidth. The kernels are scaled so that their quartiles (viewed as probability densities) are at <i>+/-</i> <code>0.25*bandwidth</code>.</p> </td> </tr> <tr valign='top'> <td><code>range.x</code></td> <td> <p>the range of points to be covered in the output.</p> </td> </tr> <tr valign='top'> <td><code>n.points</code></td> <td> <p>the number of points at which to evaluate the fit.</p> </td> </tr> <tr valign='top'> <td><code>x.points</code></td> <td> <p>points at which to evaluate the smoothed fit.  If missing, <code>n.points</code> are chosen uniformly to cover <code>range.x</code>.  Long vectors are supported.</p> </td> </tr> </table> "	FALSE
"order.dendrogram"	"stats"	"Ordering or Labels of the Leaves in a Dendrogram"	"<p>Theses functions return the order (index) or the <code>'label'</code> attribute for the leaves in a dendrogram.  These indices can then be used to access the appropriate components of any additional data. </p>"	"<pre>order.dendrogram(x)<br />## S3 method for class 'dendrogram' labels(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, object</code></td> <td> <p>a dendrogram (see <code>as.dendrogram</code>).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments</p> </td> </tr> </table> "	FALSE
"terms"	"stats"	"Model Terms"	"<p>The function <code>terms</code> is a generic function which can be used to extract <em>terms</em> objects from various kinds of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> data objects. </p>"	"<pre>terms(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>object used to select a method to dispatch.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"lag"	"stats"	"Lag a Time Series"	"<p>Compute a lagged version of a time series, shifting the time base back by a given number of observations. </p> <p><code>lag</code> is a generic function; this page documents its default method. </p>"	"<pre>lag(x, ...)<br />## Default S3 method: lag(x, k = 1, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A vector or matrix or univariate or multivariate time series</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>The number of lags (in units of observations).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"lag.plot"	"stats"	"Time Series Lag Plots"	"<p>Plot time series against lagged versions of themselves. Helps visualizing ‘auto-dependence’ even when auto-correlations vanish. </p>"	"<pre>lag.plot(x, lags = 1, layout = NULL, set.lags = 1:lags,<br />          main = NULL, asp = 1,<br />          diag = TRUE, diag.col = 'gray', type = 'p', oma = NULL,<br />          ask = NULL, do.lines = (n &lt;= 150), labels = do.lines,<br />          ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>time-series (univariate or multivariate)</p> </td> </tr> <tr valign='top'> <td><code>lags</code></td> <td> <p>number of lag plots desired, see arg <code>set.lags</code>.</p> </td> </tr> <tr valign='top'> <td><code>layout</code></td> <td> <p>the layout of multiple plots, basically the <code>mfrow</code> <code>par()</code> argument.  The default uses about a square layout (see <code>n2mfrow</code> such that all plots are on one page.</p> </td> </tr> <tr valign='top'> <td><code>set.lags</code></td> <td> <p>vector of positive integers allowing specification of the set of lags used; defaults to <code>1:lags</code>.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>character with a main header title to be done on the top of each page.</p> </td> </tr> <tr valign='top'> <td><code>asp</code></td> <td> <p>Aspect ratio to be fixed, see <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>diag</code></td> <td> <p>logical indicating if the x=y diagonal should be drawn.</p> </td> </tr> <tr valign='top'> <td><code>diag.col</code></td> <td> <p>color to be used for the diagonal <code>if(diag)</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>plot type to be used, but see <code>plot.ts</code> about its restricted meaning.</p> </td> </tr> <tr valign='top'> <td><code>oma</code></td> <td> <p>outer margins, see <code>par</code>.</p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td> <p>logical or <code>NULL</code>; if true, the user is asked to confirm before a new page is started.</p> </td> </tr> <tr valign='top'> <td><code>do.lines</code></td> <td> <p>logical indicating if lines should be drawn.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>logical indicating if labels should be used.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to <code>plot.ts</code>.  Several graphical parameters are set in this function and so cannot be changed: these include <code>xlab</code>, <code>ylab</code>, <code>mgp</code>, <code>col.lab</code> and <code>font.lab</code>: this also applies to the arguments <code>xy.labels</code> and <code>xy.lines</code>.</p> </td> </tr> </table> "	FALSE
"line"	"stats"	"Robust Line Fitting"	"<p>Fit a line robustly as recommended in <em>Exploratory Data Analysis</em>. </p>"	"<pre>line(x, y) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x, y</code></td> <td> <p>the arguments can be any way of specifying x-y pairs.  See <code>xy.coords</code>.</p> </td> </tr></table> "	FALSE
"plot.isoreg"	"stats"	"Plot Method for isoreg Objects"	"<p>The <code>plot</code> and <code>lines</code> method for <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects of class <code>isoreg</code>. </p>"	"<pre>## S3 method for class 'isoreg' plot(x, plot.type = c('single', 'row.wise', 'col.wise'),<br />       main = paste('Isotonic regression', deparse(x$call)),<br />       main2 = 'Cumulative Data and Convex Minorant',<br />       xlab = 'x0', ylab = 'x$y',<br />       par.fit = list(col = 'red', cex = 1.5, pch = 13, lwd = 1.5),<br />       mar = if (both) 0.1 + c(3.5, 2.5, 1, 1) else par('mar'),<br />       mgp = if (both) c(1.6, 0.7, 0) else par('mgp'),<br />       grid = length(x$x) &lt; 12, ...)<br />## S3 method for class 'isoreg' lines(x, col = 'red', lwd = 1.5,<br />        do.points = FALSE, cex = 1.5, pch = 13, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <code>isoreg</code> object.</p> </td> </tr> <tr valign='top'> <td><code>plot.type</code></td> <td> <p>character indicating which type of plot is desired. The first (default) only draws the data and the fit, where the others add a plot of the cumulative data and fit.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>main title of plot, see <code>title</code>.</p> </td> </tr> <tr valign='top'> <td><code>main2</code></td> <td> <p>title for second (cumulative) plot.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab</code></td> <td> <p>x- and y- axis annotation.</p> </td> </tr> <tr valign='top'> <td><code>par.fit</code></td> <td> <p>a <code>list</code> of arguments (for <code>points</code> and <code>lines</code>) for drawing the fit.</p> </td> </tr> <tr valign='top'> <td><code>mar, mgp</code></td> <td> <p>graphical parameters, see <code>par</code>, mainly for the case of two plots.</p> </td> </tr> <tr valign='top'> <td><code>grid</code></td> <td> <p>logical indicating if grid lines should be drawn.  If true, <code>grid()</code> is used for the first plot, where as vertical lines are drawn at ‘touching’ points for the cumulative plot.</p> </td> </tr> <tr valign='top'> <td><code>do.points</code></td> <td> <p>for <code>lines()</code>: logical indicating if the step points should be drawn as well (and as they are drawn in <code>plot()</code>).</p> </td> </tr> <tr valign='top'> <td><code>col, lwd, cex, pch</code></td> <td> <p>graphical arguments for <code>lines()</code>, where <code>cex</code> and <code>pch</code> are only used when <code>do.points</code> is <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to and from methods.</p> </td> </tr> </table> "	FALSE
"plot.stepfun"	"stats"	"Plot Step Functions"	"<p>Method of the generic <code>plot</code> for <code>stepfun</code> objects and utility for plotting piecewise constant functions. </p>"	"<pre>## S3 method for class 'stepfun' plot(x, xval, xlim, ylim = range(c(y, Fn.kn)),<br />      xlab = 'x', ylab = 'f(x)', main = NULL,<br />      add = FALSE, verticals = TRUE, do.points = (n &lt; 1000),<br />      pch = par('pch'), col = par('col'),<br />      col.points = col, cex.points = par('cex'),<br />      col.hor = col, col.vert = col,<br />      lty = par('lty'), lwd = par('lwd'), ...)<br />## S3 method for class 'stepfun' lines(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object inheriting from <code>'stepfun'</code>.</p> </td> </tr> <tr valign='top'> <td><code>xval</code></td> <td> <p>numeric vector of abscissa values at which to evaluate <code>x</code>.  Defaults to <code>knots(x)</code> restricted to <code>xlim</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>limits for the plot region: see <code>plot.window</code>.  Both have sensible defaults if omitted.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab</code></td> <td> <p>labels for x and y axis.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>main title.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical; if <code>TRUE</code> only <em>add</em> to an existing plot.</p> </td> </tr> <tr valign='top'> <td><code>verticals</code></td> <td> <p>logical;  if <code>TRUE</code>, draw vertical lines at steps.</p> </td> </tr> <tr valign='top'> <td><code>do.points</code></td> <td> <p>logical;  if <code>TRUE</code>, also draw points at the (<code>xlim</code> restricted) knot locations.  Default is true, for sample size <i>&lt; 1000</i>.</p> </td> </tr> </table>  <table summary='R argblock'> <tr valign='top'> <td><code>pch</code></td> <td> <p>character; point character if <code>do.points</code>.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>default color of all points and lines.</p> </td> </tr> <tr valign='top'> <td><code>col.points</code></td> <td> <p>character or integer code; color of points if <code>do.points</code>.</p> </td> </tr> <tr valign='top'> <td><code>cex.points</code></td> <td> <p>numeric; character expansion factor if <code>do.points</code>.</p> </td> </tr> <tr valign='top'> <td><code>col.hor</code></td> <td> <p>color of horizontal lines.</p> </td> </tr> <tr valign='top'> <td><code>col.vert</code></td> <td> <p>color of vertical lines.</p> </td> </tr> <tr valign='top'> <td><code>lty, lwd</code></td> <td> <p>line type and thickness for all lines.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments of <code>plot(.)</code>, or if<code>(add)</code> <code>segments(.)</code>.</p> </td> </tr> </table> "	FALSE
"plot.ts"	"stats"	"Plotting Time-Series Objects"	"<p>Plotting method for objects inheriting from class <code>'ts'</code>. </p>"	"<pre>## S3 method for class 'ts' plot(x, y = NULL, plot.type = c('multiple', 'single'),<br />         xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,<br />         mar.multi = c(0, 5.1, 0, if(yax.flip) 5.1 else 2.1),<br />         oma.multi = c(6, 0, 5, 0), axes = TRUE, ...)<br />## S3 method for class 'ts' lines(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>time series objects, usually inheriting from class <code>'ts'</code>.</p> </td> </tr> <tr valign='top'> <td><code>plot.type</code></td> <td> <p>for multivariate time series, should the series by plotted separately (with a common time axis) or on a single plot? Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>xy.labels</code></td> <td> <p>logical, indicating if <code>text()</code> labels should be used for an x-y plot, <em>or</em> character, supplying a vector of labels to be used.  The default is to label for up to 150 points, and not for more.</p> </td> </tr> <tr valign='top'> <td><code>xy.lines</code></td> <td> <p>logical, indicating if <code>lines</code> should be drawn for an x-y plot.  Defaults to the value of <code>xy.labels</code> if that is logical, otherwise to <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>panel</code></td> <td> <p>a <code>function(x, col, bg, pch, type, ...)</code> which gives the action to be carried out in each panel of the display for <code>plot.type = 'multiple'</code>.  The default is <code>lines</code>.</p> </td> </tr> <tr valign='top'> <td><code>nc</code></td> <td> <p>the number of columns to use when <code>type = 'multiple'</code>. Defaults to 1 for up to 4 series, otherwise to 2.</p> </td> </tr> <tr valign='top'> <td><code>yax.flip</code></td> <td> <p>logical indicating if the y-axis (ticks and numbering) should flip from side 2 (left) to 4 (right) from series to series when <code>type = 'multiple'</code>.</p> </td> </tr> <tr valign='top'> <td><code>mar.multi, oma.multi</code></td> <td> <p>the (default) <code>par</code> settings for <code>plot.type = 'multiple'</code>.  Modify with care!</p> </td> </tr> <tr valign='top'> <td><code>axes</code></td> <td> <p>logical indicating if x- and y- axes should be drawn.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional graphical arguments, see <code>plot</code>, <code>plot.default</code> and <code>par</code>.</p> </td> </tr> </table> "	FALSE
"listof"	"stats"	"A Class for Lists of (Parts of) Model Fits"	"<p>Class <code>'listof'</code> is used by <code>aov</code> and the <code>'lm'</code> method of <code>alias</code> for lists of model fits or parts thereof.  It is simply a list with an assigned class to control the way methods, especially printing, act on it. </p> <p>It has a <code>coef</code> method in this package (which returns an object of this class), and <code>[</code> and <code>print</code> methods in package <span class='pkg'>base</span>. </p>"	NA	NA	FALSE
"lm"	"stats"	"Fitting Linear Models"	"<p><code>lm</code> is used to fit linear models. It can be used to carry out regression, single stratum analysis of variance and analysis of covariance (although <code>aov</code> may provide a more convenient interface for these). </p>"	"<pre>lm(formula, data, subset, weights, na.action,<br />    method = 'qr', model = TRUE, x = FALSE, y = FALSE, qr = TRUE,<br />    singular.ok = TRUE, contrasts = NULL, offset, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>an object of class <code>'formula'</code> (or one that can be coerced to that class): a symbolic description of the model to be fitted.  The details of model specification are given under ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional data frame, list or environment (or object coercible by <code>as.data.frame</code> to a data frame) containing the variables in the model.  If not found in <code>data</code>, the variables are taken from <code>environment(formula)</code>, typically the environment from which <code>lm</code> is called.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used in the fitting process.</p> </td> </tr> <tr valign='top'> <td><code>weights</code></td> <td> <p>an optional vector of weights to be used in the fitting process.  Should be <code>NULL</code> or a numeric vector. If non-NULL, weighted least squares is used with weights <code>weights</code> (that is, minimizing <code>sum(w*e^2)</code>); otherwise ordinary least squares is used.  See also ‘Details’,</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  The default is set by the <code>na.action</code> setting of <code>options</code>, and is <code>na.fail</code> if that is unset.  The ‘factory-fresh’ default is <code>na.omit</code>.  Another possible value is <code>NULL</code>, no action.  Value <code>na.exclude</code> can be useful.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>the method to be used; for fitting, currently only <code>method = 'qr'</code> is supported; <code>method = 'model.frame'</code> returns the model frame (the same as with <code>model = TRUE</code>, see below).</p> </td> </tr> <tr valign='top'> <td><code>model, x, y, qr</code></td> <td> <p>logicals.  If <code>TRUE</code> the corresponding components of the fit (the model frame, the model matrix, the response, the QR decomposition) are returned. </p> </td> </tr> <tr valign='top'> <td><code>singular.ok</code></td> <td> <p>logical. If <code>FALSE</code> (the default in S but not in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>) a singular fit is an error.</p> </td> </tr> <tr valign='top'> <td><code>contrasts</code></td> <td> <p>an optional list. See the <code>contrasts.arg</code> of <code>model.matrix.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td> <p>this can be used to specify an <em>a priori</em> known component to be included in the linear predictor during fitting. This should be <code>NULL</code> or a numeric vector of length equal to the number of cases.  One or more <code>offset</code> terms can be included in the formula instead or as well, and if more than one are specified their sum is used.  See <code>model.offset</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments to be passed to the low level regression fitting functions (see below).</p> </td> </tr> </table> "	FALSE
"lmfit"	"stats"	"Fitter Functions for Linear Models"	"<p>These are the basic computing engines called by <code>lm</code> used to fit linear models.  These should usually <em>not</em> be used directly unless by experienced users.  <code>.lm.fit()</code> is bare bone wrapper to the innermost QR-based C code, on which <code>glm.fit</code> and <code>lsfit</code> are based as well, for even more experienced users. </p>"	"<pre>lm.fit (x, y,<br />    offset = NULL, method = 'qr', tol = 1e-7,<br />        singular.ok = TRUE, ...)<br />lm.wfit(x, y, w, offset = NULL, method = 'qr', tol = 1e-7,<br />         singular.ok = TRUE, ...)<br />.lm.fit(x, y, tol = 1e-7) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>design matrix of dimension <code>n * p</code>.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>vector of observations of length <code>n</code>, or a matrix with <code>n</code> rows.</p> </td> </tr> <tr valign='top'> <td><code>w</code></td> <td> <p>vector of weights (length <code>n</code>) to be used in the fitting process for the <code>wfit</code> functions.  Weighted least squares is used with weights <code>w</code>, i.e., <code>sum(w * e^2)</code> is minimized.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td> <p>numeric of length <code>n</code>).  This can be used to specify an <em>a priori</em> known component to be included in the linear predictor during fitting.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>currently, only <code>method = 'qr'</code> is supported.</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>tolerance for the <code>qr</code> decomposition.  Default is 1e-7.</p> </td> </tr> <tr valign='top'> <td><code>singular.ok</code></td> <td> <p>logical. If <code>FALSE</code>, a singular model is an error.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>currently disregarded.</p> </td> </tr> </table> "	FALSE
"loadings"	"stats"	"Print Loadings in Factor Analysis"	"<p>Extract or print loadings in factor analysis (or principal components analysis). </p>"	"<pre>loadings(x, ...)<br />## S3 method for class 'loadings' print(x, digits = 3, cutoff = 0.1, sort = FALSE, ...)<br />## S3 method for class 'factanal' print(x, digits = 3, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'factanal'</code> or <code>'princomp'</code> or the <code>loadings</code> component of such an object.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>number of decimal places to use in printing uniquenesses and loadings.</p> </td> </tr> <tr valign='top'> <td><code>cutoff</code></td> <td> <p>loadings smaller than this (in absolute value) are suppressed.</p> </td> </tr> <tr valign='top'> <td><code>sort</code></td> <td> <p>logical. If true, the variables are sorted by their importance on each factor.  Each variable with any loading larger than 0.5 (in modulus) is assigned to the factor with the largest loading, and the variables are printed in the order of the factor they are assigned to, then those unassigned.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments for other methods, ignored for <code>loadings</code>.</p> </td> </tr> </table> "	FALSE
"loess"	"stats"	"Local Polynomial Regression Fitting"	"<p>Fit a polynomial surface determined by one or more numerical predictors, using local fitting. </p>"	"<pre>loess(formula, data, weights, subset, na.action, model = FALSE,<br />       span = 0.75, enp.target, degree = 2,<br />       parametric = FALSE, drop.square = FALSE, normalize = TRUE,<br />       family = c('gaussian', 'symmetric'),<br />       method = c('loess', 'model.frame'),<br />       control = loess.control(...), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula specifying the numeric response and one to four numeric predictors (best specified via an interaction, but can also be specified additively).  Will be coerced to a formula if necessary.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional data frame, list or environment (or object coercible by <code>as.data.frame</code> to a data frame) containing the variables in the model.  If not found in <code>data</code>, the variables are taken from <code>environment(formula)</code>, typically the environment from which <code>loess</code> is called.</p> </td> </tr> <tr valign='top'> <td><code>weights</code></td> <td> <p>optional weights for each case.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional specification of a subset of the data to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>the action to be taken with missing values in the response or predictors.  The default is given by <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>model</code></td> <td> <p>should the model frame be returned?</p> </td> </tr> <tr valign='top'> <td><code>span</code></td> <td> <p>the parameter <i>α</i> which controls the degree of smoothing.</p> </td> </tr> <tr valign='top'> <td><code>enp.target</code></td> <td> <p>an alternative way to specify <code>span</code>, as the approximate equivalent number of parameters to be used.</p> </td> </tr> <tr valign='top'> <td><code>degree</code></td> <td> <p>the degree of the polynomials to be used, normally 1 or 2. (Degree 0 is also allowed, but see the ‘Note’.)</p> </td> </tr> <tr valign='top'> <td><code>parametric</code></td> <td> <p>should any terms be fitted globally rather than locally?  Terms can be specified by name, number or as a logical vector of the same length as the number of predictors.</p> </td> </tr> <tr valign='top'> <td><code>drop.square</code></td> <td> <p>for fits with more than one predictor and <code>degree = 2</code>, should the quadratic term be dropped for particular predictors?  Terms are specified in the same way as for <code>parametric</code>.</p> </td> </tr> <tr valign='top'> <td><code>normalize</code></td> <td> <p>should the predictors be normalized to a common scale if there is more than one?  The normalization used is to set the 10% trimmed standard deviation to one.  Set to false for spatial coordinate predictors and others known to be on a common scale.</p> </td> </tr> <tr valign='top'> <td><code>family</code></td> <td> <p>if <code>'gaussian'</code> fitting is by least-squares, and if <code>'symmetric'</code> a re-descending M estimator is used with Tukey's biweight function.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>fit the model or just extract the model frame.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>control parameters: see <code>loess.control</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>control parameters can also be supplied directly (<em>if</em> <code>control</code> is not specified).</p> </td> </tr> </table> "	FALSE
"loess.control"	"stats"	"Set Parameters for Loess"	"<p>Set control parameters for <code>loess</code> fits. </p>"	"<pre>loess.control(surface = c('interpolate', 'direct'),<br />               statistics = c('approximate', 'exact', 'none'),<br />               trace.hat = c('exact', 'approximate'),<br />               cell = 0.2, iterations = 4, iterTrace = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>surface</code></td> <td> <p>should the fitted surface be computed exactly (<code>'direct'</code>) or via interpolation from a kd tree?  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>statistics</code></td> <td> <p>should the statistics be computed exactly, approximately or not at all?  Exact computation can be very slow. Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>trace.hat</code></td> <td> <p>Only for the (default) case <code>(surface =<br />      'interpolate', statistics = 'approximate')</code>: should the trace of the smoother matrix be computed exactly or approximately?  It is recommended to use the approximation for more than about 1000 data points.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>cell</code></td> <td> <p>if interpolation is used this controls the accuracy of the approximation via the maximum number of points in a  cell in the kd tree. Cells with more than <code>floor(n*span*cell)</code> points are subdivided.</p> </td> </tr> <tr valign='top'> <td><code>iterations</code></td> <td> <p>the number of iterations used in robust fitting, i.e. only if <code>family</code> is <code>'symmetric'</code>.</p> </td> </tr> <tr valign='top'> <td><code>iterTrace</code></td> <td> <p>logical (or integer) determining if tracing information during the robust iterations (<code>iterations</code><i>&gt;= 2</i>) is produced.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments which are ignored.</p> </td> </tr> </table> "	FALSE
"scatter.smooth"	"stats"	"Scatter Plot with Smooth Curve Fitted by Loess"	"<p>Plot and add a smooth curve computed by <code>loess</code> to a scatter plot. </p>"	"<pre>scatter.smooth(x, y = NULL, span = 2/3, degree = 1,<br />     family = c('symmetric', 'gaussian'),<br />     xlab = NULL, ylab = NULL,<br />     ylim = range(y, pred$y, na.rm = TRUE),<br />     evaluation = 50, ..., lpars = list())<br />loess.smooth(x, y, span = 2/3, degree = 1,<br />     family = c('symmetric', 'gaussian'), evaluation = 50, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>the <code>x</code> and <code>y</code> arguments provide the x and y coordinates for the plot.  Any reasonable way of defining the coordinates is acceptable.  See the function <code>xy.coords</code> for details.</p> </td> </tr> <tr valign='top'> <td><code>span</code></td> <td> <p>smoothness parameter for <code>loess</code>.</p> </td> </tr> <tr valign='top'> <td><code>degree</code></td> <td> <p>degree of local polynomial used.</p> </td> </tr> <tr valign='top'> <td><code>family</code></td> <td> <p>if <code>'gaussian'</code> fitting is by least-squares, and if <code>family = 'symmetric'</code> a re-descending M estimator is used. Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>label for x axis.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>label for y axis.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>the y limits of the plot.</p> </td> </tr> <tr valign='top'> <td><code>evaluation</code></td> <td> <p>number of points at which to evaluate the smooth curve.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>For <code>scatter.smooth()</code>, graphical parameters, passed to <code>plot()</code> only.  For <code>loess.smooth</code>, control parameters passed to <code>loess.control</code>.</p> </td> </tr> <tr valign='top'> <td><code>lpars</code></td> <td> <p>a <code>list</code> of arguments to be passed to <code>lines()</code>.</p> </td> </tr> </table> "	FALSE
"logLik"	"stats"	"Extract Log-Likelihood"	"<p>This function is generic; method functions can be written to handle specific classes of objects.  Classes which have methods for this function include: <code>'glm'</code>, <code>'lm'</code>, <code>'nls'</code> and <code>'Arima'</code>.  Packages contain methods for other classes, such as <code>'fitdistr'</code>, <code>'negbin'</code> and <code>'polr'</code> in package <a href='https://CRAN.R-project.org/package=MASS'><span class='pkg'>MASS</span></a>, <code>'multinom'</code> in package <a href='https://CRAN.R-project.org/package=nnet'><span class='pkg'>nnet</span></a> and <code>'gls'</code>, <code>'gnls'</code> <code>'lme'</code> and others in package <a href='https://CRAN.R-project.org/package=nlme'><span class='pkg'>nlme</span></a>. </p>"	"<pre>logLik(object, ...)<br />## S3 method for class 'lm' logLik(object, REML = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>any object from which a log-likelihood value, or a contribution to a log-likelihood value, can be extracted.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>some methods for this generic function require additional arguments.</p> </td> </tr> <tr valign='top'> <td><code>REML</code></td> <td> <p>an optional logical value.  If <code>TRUE</code> the restricted log-likelihood is returned, else, if <code>FALSE</code>, the log-likelihood is returned.  Defaults to <code>FALSE</code>.</p> </td> </tr> </table> "	FALSE
"loglin"	"stats"	"Fitting Log-Linear Models"	"<p><code>loglin</code> is used to fit log-linear models to multidimensional contingency tables by Iterative Proportional Fitting. </p>"	"<pre>loglin(table, margin, start = rep(1, length(table)), fit = FALSE,<br />        eps = 0.1, iter = 20, param = FALSE, print = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>table</code></td> <td> <p>a contingency table to be fit, typically the output from <code>table</code>.</p> </td> </tr> <tr valign='top'> <td><code>margin</code></td> <td> <p>a list of vectors with the marginal totals to be fit. </p> <p>(Hierarchical) log-linear models can be specified in terms of these marginal totals which give the ‘maximal’ factor subsets contained in the model.  For example, in a three-factor model, <code>list(c(1, 2), c(1, 3))</code> specifies a model which contains parameters for the grand mean, each factor, and the 1-2 and 1-3 interactions, respectively (but no 2-3 or 1-2-3 interaction), i.e., a model where factors 2 and 3 are independent conditional on factor 1 (sometimes represented as ‘[12][13]’). </p> <p>The names of factors (i.e., <code>names(dimnames(table))</code>) may be used rather than numeric indices. </p> </td> </tr> <tr valign='top'> <td><code>start</code></td> <td> <p>a starting estimate for the fitted table.  This optional argument is important for incomplete tables with structural zeros in <code>table</code> which should be preserved in the fit.  In this case, the corresponding entries in <code>start</code> should be zero and the others can be taken as one.</p> </td> </tr> <tr valign='top'> <td><code>fit</code></td> <td> <p>a logical indicating whether the fitted values should be returned.</p> </td> </tr> <tr valign='top'> <td><code>eps</code></td> <td> <p>maximum deviation allowed between observed and fitted margins.</p> </td> </tr> <tr valign='top'> <td><code>iter</code></td> <td> <p>maximum number of iterations.</p> </td> </tr> <tr valign='top'> <td><code>param</code></td> <td> <p>a logical indicating whether the parameter values should be returned.</p> </td> </tr> <tr valign='top'> <td><code>print</code></td> <td> <p>a logical.  If <code>TRUE</code>, the number of iterations and the final deviation are printed.</p> </td> </tr> </table> "	FALSE
"lowess"	"stats"	"Scatter Plot Smoothing"	"<p>This function performs the computations for the <em>LOWESS</em> smoother which uses locally-weighted polynomial regression (see the references). </p>"	"<pre>lowess(x, y = NULL, f = 2/3, iter = 3, delta = 0.01 * diff(range(x))) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>vectors giving the coordinates of the points in the scatter plot. Alternatively a single plotting structure can be specified – see <code>xy.coords</code>.</p> </td> </tr> <tr valign='top'> <td><code>f</code></td> <td> <p>the smoother span. This gives the proportion of points in the plot which influence the smooth at each value. Larger values give more smoothness.</p> </td> </tr> <tr valign='top'> <td><code>iter</code></td> <td> <p>the number of ‘robustifying’ iterations which should be performed. Using smaller values of <code>iter</code> will make <code>lowess</code> run faster.</p> </td> </tr> <tr valign='top'> <td><code>delta</code></td> <td> <p>See ‘Details’.  Defaults to 1/100th of the range of <code>x</code>.</p> </td> </tr> </table> "	FALSE
"ls.diag"	"stats"	"Compute Diagnostics for lsfit Regression Results"	"<p>Computes basic statistics, including standard errors, t- and p-values for the regression coefficients. </p>"	"<pre>ls.diag(ls.out) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>ls.out</code></td> <td> <p>Typically the result of <code>lsfit()</code></p> </td> </tr></table> "	FALSE
"ls.print"	"stats"	"Print lsfit Regression Results"	"<p>Computes basic statistics, including standard errors, t- and p-values for the regression coefficients and prints them if <code>print.it</code> is <code>TRUE</code>. </p>"	"<pre>ls.print(ls.out, digits = 4, print.it = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>ls.out</code></td> <td> <p>Typically the result of <code>lsfit()</code></p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>The number of significant digits used for printing</p> </td> </tr> <tr valign='top'> <td><code>print.it</code></td> <td> <p>a logical indicating whether the result should also be printed</p> </td> </tr> </table> "	FALSE
"lsfit"	"stats"	"Find the Least Squares Fit"	"<p>The least squares estimate of <b><i>b</i></b> in the model </p> <p style='text-align: center;'><i>y = X b + e</i></p> <p>is found. </p>"	"<pre>lsfit(x, y, wt = NULL, intercept = TRUE, tolerance = 1e-07,<br />       yname = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a matrix whose rows correspond to cases and whose columns correspond to variables.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>the responses, possibly a matrix if you want to fit multiple left hand sides.</p> </td> </tr> <tr valign='top'> <td><code>wt</code></td> <td> <p>an optional vector of weights for performing weighted least squares.</p> </td> </tr> <tr valign='top'> <td><code>intercept</code></td> <td> <p>whether or not an intercept term should be used.</p> </td> </tr> <tr valign='top'> <td><code>tolerance</code></td> <td> <p>the tolerance to be used in the matrix decomposition.</p> </td> </tr> <tr valign='top'> <td><code>yname</code></td> <td> <p>names to be used for the response variables.</p> </td> </tr> </table> "	FALSE
"mad"	"stats"	"Median Absolute Deviation"	"<p>Compute the median absolute deviation, i.e., the (lo-/hi-) median of the absolute deviations from the median, and (by default) adjust by a factor for asymptotically normal consistency. </p>"	"<pre>mad(x, center = median(x), constant = 1.4826, na.rm = FALSE,<br />     low = FALSE, high = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>center</code></td> <td> <p>Optionally, the centre: defaults to the median.</p> </td> </tr> <tr valign='top'> <td><code>constant</code></td> <td> <p>scale factor.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>if <code>TRUE</code> then <code>NA</code> values are stripped from <code>x</code> before computation takes place.</p> </td> </tr> <tr valign='top'> <td><code>low</code></td> <td> <p>if <code>TRUE</code>, compute the ‘lo-median’, i.e., for even sample size, do not average the two middle values, but take the smaller one.</p> </td> </tr> <tr valign='top'> <td><code>high</code></td> <td> <p>if <code>TRUE</code>, compute the ‘hi-median’, i.e., take the larger of the two middle values for even sample size.</p> </td> </tr> </table> "	FALSE
"mahalanobis"	"stats"	"Mahalanobis Distance"	"<p>Returns the squared Mahalanobis distance of all rows in <code>x</code> and the vector <i>mu</i> = <code>center</code> with respect to <i>Sigma</i> = <code>cov</code>. This is (for vector <code>x</code>) defined as </p> <p style='text-align: center;'><i>D^2 = (x - μ)' Σ^-1 (x - μ)</i></p>"	"<pre>mahalanobis(x, center, cov, inverted = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>vector or matrix of data with, say, <i>p</i> columns.</p> </td> </tr> <tr valign='top'> <td><code>center</code></td> <td> <p>mean vector of the distribution or second data vector of length <i>p</i> or recyclable to that length.  If set to <code>FALSE</code>, the centering step is skipped.</p> </td> </tr> <tr valign='top'> <td><code>cov</code></td> <td> <p>covariance matrix (<i>p x p</i>) of the distribution.</p> </td> </tr> <tr valign='top'> <td><code>inverted</code></td> <td> <p>logical.  If <code>TRUE</code>, <code>cov</code> is supposed to contain the <em>inverse</em> of the covariance matrix.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>passed to <code>solve</code> for computing the inverse of the covariance matrix (if <code>inverted</code> is false).</p> </td> </tr> </table> "	FALSE
"make.link"	"stats"	"Create a Link for GLM Families"	"<p>This function is used with the <code>family</code> functions in <code>glm()</code>. Given the name of a link, it returns a link function, an inverse link function, the derivative <i>dmu/deta</i> and a function for domain checking. </p>"	"<pre>make.link(link) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>link</code></td> <td> <p>character; one of <code>'logit'</code>, <code>'probit'</code>, <code>'cauchit'</code>, <code>'cloglog'</code>, <code>'identity'</code>, <code>'log'</code>,  <code>'sqrt'</code>,  <code>'1/mu^2'</code>, <code>'inverse'</code>. </p> </td> </tr></table> "	FALSE
"makepredictcall"	"stats"	"Utility Function for Safe Prediction"	"<p>A utility to help <code>model.frame.default</code> create the right matrices when predicting from models with terms like (univariate) <code>poly</code> or <code>ns</code>. </p>"	"<pre>makepredictcall(var, call) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>var</code></td> <td> <p>A variable.</p> </td> </tr> <tr valign='top'> <td><code>call</code></td> <td> <p>The term in the formula, as a call.</p> </td> </tr> </table> "	FALSE
"poly"	"stats"	"Compute Orthogonal Polynomials"	"<p>Returns or evaluates orthogonal polynomials of degree 1 to <code>degree</code> over the specified set of points <code>x</code>: these are all orthogonal to the constant polynomial of degree 0.  Alternatively, evaluate raw polynomials. </p>"	"<pre>poly(x, ..., degree = 1, coefs = NULL, raw = FALSE, simple = FALSE) polym  (..., degree = 1, coefs = NULL, raw = FALSE)<br />## S3 method for class 'poly' predict(object, newdata, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, newdata</code></td> <td> <p>a numeric vector at which to evaluate the polynomial. <code>x</code> can also be a matrix.  Missing values are not allowed in <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>degree</code></td> <td> <p>the degree of the polynomial.  Must be less than the number of unique points if <code>raw = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>coefs</code></td> <td> <p>for prediction, coefficients from a previous fit.</p> </td> </tr> <tr valign='top'> <td><code>raw</code></td> <td> <p>if true, use raw and not orthogonal polynomials.</p> </td> </tr> <tr valign='top'> <td><code>simple</code></td> <td> <p>logical indicating if a simple matrix (with no further <code>attributes</code> but <code>dimnames</code>) should be returned.  For speedup only.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>an object inheriting from class <code>'poly'</code>, normally the result of a call to <code>poly</code> with a single vector argument.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p><code>poly</code>, <code>polym</code>: further vectors.<br><code>predict.poly</code>: arguments to be passed to or from other methods. </p> </td> </tr> </table> "	FALSE
"manova"	"stats"	"Multivariate Analysis of Variance"	"<p>A class for the multivariate analysis of variance. </p>"	"<pre>manova(...) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>...</code></td> <td> <p>Arguments to be passed to <code>aov</code>.</p> </td> </tr></table> "	FALSE
"mantelhaen.test"	"stats"	"Cochran-Mantel-Haenszel Chi-Squared Test for Count Data"	"<p>Performs a Cochran-Mantel-Haenszel chi-squared test of the null that two nominal variables are conditionally independent in each stratum, assuming that there is no three-way interaction. </p>"	"<pre>mantelhaen.test(x, y = NULL, z = NULL,<br />                 alternative = c('two.sided', 'less', 'greater'),<br />                 correct = TRUE, exact = FALSE, conf.level = 0.95) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>either a 3-dimensional contingency table in array form where each dimension is at least 2 and the last dimension corresponds to the strata, or a factor object with at least 2 levels.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>a factor object with at least 2 levels; ignored if <code>x</code> is an array.</p> </td> </tr> <tr valign='top'> <td><code>z</code></td> <td> <p>a factor object with at least 2 levels identifying to which stratum the corresponding elements in <code>x</code> and <code>y</code> belong; ignored if <code>x</code> is an array.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>indicates the alternative hypothesis and must be one of <code>'two.sided'</code>, <code>'greater'</code> or <code>'less'</code>. You can specify just the initial letter. Only used in the 2 by 2 by <i>K</i> case.</p> </td> </tr> <tr valign='top'> <td><code>correct</code></td> <td> <p>a logical indicating whether to apply continuity correction when computing the test statistic. Only used in the 2 by 2 by <i>K</i> case.</p> </td> </tr> <tr valign='top'> <td><code>exact</code></td> <td> <p>a logical indicating whether the Mantel-Haenszel test or the exact conditional test (given the strata margins) should be computed. Only used in the 2 by 2 by <i>K</i> case.</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level for the returned confidence interval. Only used in the 2 by 2 by <i>K</i> case.</p> </td> </tr> </table> "	FALSE
"mauchly.test"	"stats"	"Mauchly's Test of Sphericity"	"<p>Tests whether a Wishart-distributed covariance matrix (or transformation thereof) is proportional to a given matrix. </p>"	"<pre>mauchly.test(object, ...) ## S3 method for class 'mlm' mauchly.test(object, ...) ## S3 method for class 'SSD' mauchly.test(object, Sigma = diag(nrow = p),<br />    T = Thin.row(proj(M) - proj(X)), M = diag(nrow = p), X = ~0,<br />    idata = data.frame(index = seq_len(p)), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>object of class <code>SSD</code> or <code>mlm</code>.</p> </td> </tr> <tr valign='top'> <td><code>Sigma</code></td> <td> <p>matrix to be proportional to.</p> </td> </tr> <tr valign='top'> <td><code>T</code></td> <td> <p>transformation matrix. By default computed from <code>M</code> and <code>X</code>.</p> </td> </tr> <tr valign='top'> <td><code>M</code></td> <td> <p>formula or matrix describing the outer projection (see below).</p> </td> </tr> <tr valign='top'> <td><code>X</code></td> <td> <p>formula or matrix describing the inner projection (see below).</p> </td> </tr> <tr valign='top'> <td><code>idata</code></td> <td> <p>data frame describing intra-block design.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"mcnemar.test"	"stats"	"McNemar's Chi-squared Test for Count Data"	"<p>Performs McNemar's chi-squared test for symmetry of rows and columns in a two-dimensional contingency table. </p>"	"<pre>mcnemar.test(x, y = NULL, correct = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>either a two-dimensional contingency table in matrix form, or a factor object.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>a factor object; ignored if <code>x</code> is a matrix.</p> </td> </tr> <tr valign='top'> <td><code>correct</code></td> <td> <p>a logical indicating whether to apply continuity correction when computing the test statistic.</p> </td> </tr> </table> "	FALSE
"median"	"stats"	"Median Value"	"<p>Compute the sample median. </p>"	"<pre>median(x, na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object for which a method has been defined, or a numeric vector containing the values whose median is to be computed.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>a logical value indicating whether <code>NA</code> values should be stripped before the computation proceeds.</p> </td> </tr> </table> "	FALSE
"medpolish"	"stats"	"Median Polish (Robust Twoway Decomposition) of a Matrix"	"<p>Fits an additive model (twoway decomposition) using Tukey's <em>median polish</em> procedure. </p>"	"<pre>medpolish(x, eps = 0.01, maxiter = 10, trace.iter = TRUE,<br />           na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric matrix.</p> </td> </tr> <tr valign='top'> <td><code>eps</code></td> <td> <p>real number greater than 0. A tolerance for convergence: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>maxiter</code></td> <td> <p>the maximum number of iterations</p> </td> </tr> <tr valign='top'> <td><code>trace.iter</code></td> <td> <p>logical. Should progress in convergence be reported?</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical. Should missing values be removed?</p> </td> </tr> </table> "	FALSE
"model.extract"	"stats"	"Extract Components from a Model Frame"	"<p>Returns the response, offset, subset, weights or other special components of a model frame passed as optional arguments to <code>model.frame</code>. </p>"	"<pre>model.extract(frame, component) model.offset(x) model.response(data, type = 'any') model.weights(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>frame, x, data</code></td> <td> <p>A model frame.</p> </td> </tr> <tr valign='top'> <td><code>component</code></td> <td> <p>literal character string or name. The name of a component to extract, such as <code>'weights'</code>, <code>'subset'</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>One of <code>'any'</code>, <code>'numeric'</code>, <code>'double'</code>. Using either of latter two coerces the result to have storage mode <code>'double'</code>.</p> </td> </tr> </table> "	FALSE
"model.matrix"	"stats"	"Construct Design Matrices"	"<p><code>model.matrix</code> creates a design (or model) matrix, e.g., by expanding factors to a set of dummary variables (depending on the contrasts) and expanding interactions similarly. </p>"	"<pre>model.matrix(object, ...)<br />## Default S3 method: model.matrix(object, data = environment(object),<br />              contrasts.arg = NULL, xlev = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object of an appropriate class.  For the default method, a model formula or a <code>terms</code> object.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data frame created with <code>model.frame</code>.  If another sort of object, <code>model.frame</code> is called first.</p> </td> </tr> <tr valign='top'> <td><code>contrasts.arg</code></td> <td> <p>A list, whose entries are values (numeric matrices or character strings naming functions) to be used as replacement values for the <code>contrasts</code> replacement function and whose names are the names of columns of <code>data</code> containing <code>factor</code>s.</p> </td> </tr> <tr valign='top'> <td><code>xlev</code></td> <td> <p>to be used as argument of <code>model.frame</code> if <code>data</code> is such that <code>model.frame</code> is called.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"model.tables"	"stats"	"Compute Tables of Results from an Aov Model Fit"	"<p>Computes summary tables for model fits, especially complex <code>aov</code> fits. </p>"	"<pre>model.tables(x, ...)<br />## S3 method for class 'aov' model.tables(x, type = 'effects', se = FALSE, cterms, ...)<br />## S3 method for class 'aovlist' model.tables(x, type = 'effects', se = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a model object, usually produced by <code>aov</code></p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>type of table: currently only <code>'effects'</code> and <code>'means'</code> are implemented.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>se</code></td> <td> <p>should standard errors be computed?</p> </td> </tr> <tr valign='top'> <td><code>cterms</code></td> <td> <p>A character vector giving the names of the terms for which tables should be computed. The default is all tables.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"monthplot"	"stats"	"Plot a Seasonal or other Subseries from a Time Series"	"<p>These functions plot seasonal (or other) subseries of a time series. For each season (or other category), a time series is plotted. </p>"	"<pre>monthplot(x, ...)<br />## S3 method for class 'stl' monthplot(x, labels = NULL, ylab = choice, choice = 'seasonal',<br />           ...)<br />## S3 method for class 'StructTS' monthplot(x, labels = NULL, ylab = choice, choice = 'sea', ...)<br />## S3 method for class 'ts' monthplot(x, labels = NULL, times = time(x), phase = cycle(x),<br />              ylab = deparse(substitute(x)), ...)<br />## Default S3 method: monthplot(x, labels = 1L:12L,<br />           ylab = deparse(substitute(x)),<br />           times = seq_along(x),<br />           phase = (times - 1L)%%length(labels) + 1L, base = mean,<br />           axes = TRUE, type = c('l', 'h'), box = TRUE,<br />           add = FALSE,<br />           col = par('col'), lty = par('lty'), lwd = par('lwd'),<br />           col.base = col, lty.base = lty, lwd.base = lwd, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>Time series or related object.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>Labels to use for each ‘season’.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>y label.</p> </td> </tr> <tr valign='top'> <td><code>times</code></td> <td> <p>Time of each observation.</p> </td> </tr> <tr valign='top'> <td><code>phase</code></td> <td> <p>Indicator for each ‘season’.</p> </td> </tr> <tr valign='top'> <td><code>base</code></td> <td> <p>Function to use for reference line for subseries.</p> </td> </tr> <tr valign='top'> <td><code>choice</code></td> <td> <p>Which series of an <code>stl</code> or <code>StructTS</code> object?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Arguments to be passed to the default method or graphical parameters.</p> </td> </tr> <tr valign='top'> <td><code>axes</code></td> <td> <p>Should axes be drawn (ignored if <code>add = TRUE</code>)?</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>Type of plot.  The default is to join the points with lines, and <code>'h'</code> is for histogram-like vertical lines.</p> </td> </tr> <tr valign='top'> <td><code>box</code></td> <td> <p>Should a box be drawn (ignored if <code>add = TRUE</code>?</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>Should thus just add on an existing plot.</p> </td> </tr> <tr valign='top'> <td><code>col, lty, lwd</code></td> <td> <p>Graphics parameters for the series.</p> </td> </tr> <tr valign='top'> <td><code>col.base, lty.base, lwd.base</code></td> <td> <p>Graphics parameters for the segments used for the reference lines.</p> </td> </tr> </table> "	FALSE
"mood.test"	"stats"	"Mood Two-Sample Test of Scale"	"<p>Performs Mood's two-sample test for a difference in scale parameters. </p>"	"<pre>mood.test(x, ...)<br />## Default S3 method: mood.test(x, y,<br />           alternative = c('two.sided', 'less', 'greater'), ...)<br />## S3 method for class 'formula' mood.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric vectors of data values.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>indicates the alternative hypothesis and must be one of <code>'two.sided'</code> (default), <code>'greater'</code> or <code>'less'</code> all of which can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>lhs ~ rhs</code> where <code>lhs</code> is a numeric variable giving the data values and <code>rhs</code> a factor with two levels giving the corresponding groups.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"na.action"	"stats"	"NA Action"	"<p>Extract information on the NA action used to create an object. </p>"	"<pre>na.action(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>any object whose <code>NA</code> action is given.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments special methods could require.</p> </td> </tr> </table> "	FALSE
"na.contiguous"	"stats"	"Find Longest Contiguous Stretch of non-NAs"	"<p>Find the longest consecutive stretch of non-missing values in a time series object.  (In the event of a tie, the first such stretch.) </p>"	"<pre>na.contiguous(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a univariate or multivariate time series.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"na.fail"	"stats"	"Handle Missing Values in Objects"	"<p>These generic functions are useful for dealing with <code>NA</code>s in e.g., data frames. <code>na.fail</code> returns the object if it does not contain any missing values, and signals an error otherwise. <code>na.omit</code> returns the object with incomplete cases removed. <code>na.pass</code> returns the object unchanged. </p>"	"<pre>na.fail(object, ...) na.omit(object, ...) na.exclude(object, ...) na.pass(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically a data frame</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments special methods could require.</p> </td> </tr> </table> "	FALSE
"nafns"	"stats"	"Adjust for Missing Values"	"<p>Use missing value information to adjust residuals and predictions. </p>"	"<pre>naresid(omit, x, ...) napredict(omit, x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>omit</code></td> <td> <p>an object produced by an <code>na.action</code> function, typically the <code>'na.action'</code> attribute of the result of <code>na.omit</code> or <code>na.exclude</code>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector, data frame, or matrix to be adjusted based upon the missing value information.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"naprint"	"stats"	"Adjust for Missing Values"	"<p>Use missing value information to report the effects of an <code>na.action</code>. </p>"	"<pre>naprint(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td><br /><p>An object produced by an <code>na.action</code> function. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"nextn"	"stats"	"Highly Composite Numbers"	"<p><code>nextn</code> returns the smallest integer, greater than or equal to <code>n</code>, which can be obtained as a product of powers of the values contained in <code>factors</code>. <code>nextn</code> is intended to be used to find a suitable length to zero-pad the argument of <code>fft</code> to so that the transform is computed quickly. The default value for <code>factors</code> ensures this. </p>"	"<pre>nextn(n, factors = c(2,3,5)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>an integer.</p> </td> </tr> <tr valign='top'> <td><code>factors</code></td> <td> <p>a vector of positive integer factors.</p> </td> </tr> </table> "	FALSE
"nlm"	"stats"	"Non-Linear Minimization"	"<p>This function carries out a minimization of the function <code>f</code> using a Newton-type algorithm.  See the references for details. </p>"	"<pre>nlm(f, p, ..., hessian = FALSE, typsize = rep(1, length(p)),<br />     fscale = 1, print.level = 0, ndigit = 12, gradtol = 1e-6,<br />     stepmax = max(1000 * sqrt(sum((p/typsize)^2)), 1000),<br />     steptol = 1e-6, iterlim = 100, check.analyticals = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>the function to be minimized, returning a single numeric value.  This should be a function with first argument a vector of the length of <code>p</code> followed by any other arguments specified by the <code>...</code> argument. </p> <p>If the function value has an attribute called <code>gradient</code> or both <code>gradient</code> and <code>hessian</code> attributes, these will be used in the calculation of updated parameter values.  Otherwise, numerical derivatives are used. <code>deriv</code> returns a function with suitable <code>gradient</code> attribute and optionally a <code>hessian</code> attribute.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>starting parameter values for the minimization.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments to be passed to <code>f</code>.</p> </td> </tr> <tr valign='top'> <td><code>hessian</code></td> <td> <p>if <code>TRUE</code>, the hessian of <code>f</code> at the minimum is returned.</p> </td> </tr> <tr valign='top'> <td><code>typsize</code></td> <td> <p>an estimate of the size of each parameter at the minimum.</p> </td> </tr> <tr valign='top'> <td><code>fscale</code></td> <td> <p>an estimate of the size of <code>f</code> at the minimum.</p> </td> </tr> <tr valign='top'> <td><code>print.level</code></td> <td> <p>this argument determines the level of printing which is done during the minimization process.  The default value of <code>0</code> means that no printing occurs, a value of <code>1</code> means that initial and final details are printed and a value of 2 means that full tracing information is printed.</p> </td> </tr> <tr valign='top'> <td><code>ndigit</code></td> <td> <p>the number of significant digits in the function <code>f</code>.</p> </td> </tr> <tr valign='top'> <td><code>gradtol</code></td> <td> <p>a positive scalar giving the tolerance at which the scaled gradient is considered close enough to zero to terminate the algorithm.  The scaled gradient is a measure of the relative change in <code>f</code> in each direction <code>p[i]</code> divided by the relative change in <code>p[i]</code>.</p> </td> </tr> <tr valign='top'> <td><code>stepmax</code></td> <td> <p>a positive scalar which gives the maximum allowable scaled step length.  <code>stepmax</code> is used to prevent steps which would cause the optimization function to overflow, to prevent the algorithm from leaving the area of interest in parameter space, or to detect divergence in the algorithm. <code>stepmax</code> would be chosen small enough to prevent the first two of these occurrences, but should be larger than any anticipated reasonable step.</p> </td> </tr> <tr valign='top'> <td><code>steptol</code></td> <td> <p>A positive scalar providing the minimum allowable relative step length.</p> </td> </tr> <tr valign='top'> <td><code>iterlim</code></td> <td> <p>a positive integer specifying the maximum number of iterations to be performed before the program is terminated.</p> </td> </tr> <tr valign='top'> <td><code>check.analyticals</code></td> <td> <p>a logical scalar specifying whether the analytic gradients and Hessians, if they are supplied, should be checked against numerical derivatives at the initial parameter values. This can help detect incorrectly formulated gradients or Hessians.</p> </td> </tr> </table> "	FALSE
"nlminb"	"stats"	"Optimization using PORT routines "	"<p>Unconstrained and box-constrained optimization using PORT routines. </p> <p>For historical compatibility. </p>"	"<pre>nlminb(start, objective, gradient = NULL, hessian = NULL, ...,<br />        scale = 1, control = list(), lower = -Inf, upper = Inf) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>start</code></td> <td><br /><p>numeric vector, initial values for the parameters to be optimized. </p> </td> </tr> <tr valign='top'> <td><code>objective</code></td> <td><br /><p>Function to be minimized.  Must return a scalar value.  The first argument to <code>objective</code> is the vector of parameters to be optimized, whose initial values are supplied through <code>start</code>. Further arguments (fixed during the course of the optimization) to <code>objective</code> may be specified as well (see <code>...</code>). </p> </td> </tr> <tr valign='top'> <td><code>gradient</code></td> <td><br /><p>Optional function that takes the same arguments as <code>objective</code> and evaluates the gradient of <code>objective</code> at its first argument.  Must return a vector as long as <code>start</code>. </p> </td> </tr> <tr valign='top'> <td><code>hessian</code></td> <td><br /><p>Optional function that takes the same arguments as <code>objective</code> and evaluates the hessian of <code>objective</code> at its first argument.  Must return a square matrix of order <code>length(start)</code>.  Only the lower triangle is used. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to be supplied to <code>objective</code>.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>See PORT documentation (or leave alone).</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>A list of control parameters. See below for details.</p> </td> </tr> <tr valign='top'> <td><code>lower, upper</code></td> <td><br /><p>vectors of lower and upper bounds, replicated to be as long as <code>start</code>.  If unspecified, all parameters are assumed to be unconstrained. </p> </td> </tr> </table> "	FALSE
"nls"	"stats"	"Nonlinear Least Squares"	"<p>Determine the nonlinear (weighted) least-squares estimates of the parameters of a nonlinear model. </p>"	"<pre>nls(formula, data, start, control, algorithm,<br />     trace, subset, weights, na.action, model,<br />     lower, upper, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a nonlinear model formula including variables and parameters.  Will be coerced to a formula if necessary.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional data frame in which to evaluate the variables in <code>formula</code> and <code>weights</code>.  Can also be a list or an environment, but not a matrix.</p> </td> </tr> <tr valign='top'> <td><code>start</code></td> <td> <p>a named list or named numeric vector of starting estimates.  When <code>start</code> is missing, a very cheap guess for <code>start</code> is tried (if <code>algorithm != 'plinear'</code>). </p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>an optional list of control settings.  See <code>nls.control</code> for the names of the settable control values and their effect.</p> </td> </tr> <tr valign='top'> <td><code>algorithm</code></td> <td> <p>character string specifying the algorithm to use. The default algorithm is a Gauss-Newton algorithm.  Other possible values are <code>'plinear'</code> for the Golub-Pereyra algorithm for partially linear least-squares models and <code>'port'</code> for the ‘nl2sol’ algorithm from the Port library – see the references. Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>trace</code></td> <td> <p>logical value indicating if a trace of the iteration progress should be printed.  Default is <code>FALSE</code>.  If <code>TRUE</code> the residual (weighted) sum-of-squares and the parameter values are printed at the conclusion of each iteration. When the <code>'plinear'</code> algorithm is used, the conditional estimates of the linear parameters are printed after the nonlinear parameters.  When the <code>'port'</code> algorithm is used the objective function value printed is half the residual (weighted) sum-of-squares.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used in the fitting process.</p> </td> </tr> <tr valign='top'> <td><code>weights</code></td> <td> <p>an optional numeric vector of (fixed) weights.  When present, the objective function is weighted least squares.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  The default is set by the <code>na.action</code> setting of <code>options</code>, and is <code>na.fail</code> if that is unset.  The ‘factory-fresh’ default is <code>na.omit</code>.  Value <code>na.exclude</code> can be useful.</p> </td> </tr> <tr valign='top'> <td><code>model</code></td> <td> <p>logical.  If true, the model frame is returned as part of the object. Default is <code>FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>lower, upper</code></td> <td> <p>vectors of lower and upper bounds, replicated to be as long as <code>start</code>.  If unspecified, all parameters are assumed to be unconstrained.  Bounds can only be used with the <code>'port'</code> algorithm.  They are ignored, with a warning, if given for other algorithms.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Additional optional arguments.  None are used at present.</p> </td> </tr> </table> "	FALSE
"nls.control"	"stats"	"Control the Iterations in nls"	"<p>Allow the user to set some characteristics of the <code>nls</code> nonlinear least squares algorithm. </p>"	"<pre>nls.control(maxiter = 50, tol = 1e-05, minFactor = 1/1024,<br />             printEval = FALSE, warnOnly = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>maxiter</code></td> <td> <p>A positive integer specifying the maximum number of iterations allowed.</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>A positive numeric value specifying the tolerance level for the relative offset convergence criterion.</p> </td> </tr> <tr valign='top'> <td><code>minFactor</code></td> <td> <p>A positive numeric value specifying the minimum step-size factor allowed on any step in the iteration.  The increment is calculated with a Gauss-Newton algorithm and successively halved until the residual sum of squares has been decreased or until the step-size factor has been reduced below this limit.</p> </td> </tr> <tr valign='top'> <td><code>printEval</code></td> <td> <p>a logical specifying whether the number of evaluations (steps in the gradient direction taken each iteration) is printed.</p> </td> </tr> <tr valign='top'> <td><code>warnOnly</code></td> <td> <p>a logical specifying whether <code>nls()</code> should return instead of signalling an error in the case of termination before convergence. Termination before convergence happens upon completion of <code>maxiter</code> iterations, in the case of a singular gradient, and in the case that the step-size factor is reduced below <code>minFactor</code>.</p> </td> </tr> </table> "	FALSE
"NLSstAsymptotic"	"stats"	"Fit the Asymptotic Regression Model"	"<p>Fits the asymptotic regression model, in the form <code>b0 +<br />       b1*(1-exp(-exp(lrc) * x)</code> to the <code>xy</code> data. This can be used as a building block in determining starting estimates for more complicated models. </p>"	"<pre>NLSstAsymptotic(xy) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>xy</code></td> <td> <p>a <code>sortedXyData</code> object</p> </td> </tr></table> "	FALSE
"NLSstClosestX"	"stats"	"Inverse Interpolation"	"<p>Use inverse linear interpolation to approximate the <code>x</code> value at which the function represented by <code>xy</code> is equal to <code>yval</code>. </p>"	"<pre>NLSstClosestX(xy, yval) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>xy</code></td> <td> <p>a <code>sortedXyData</code> object</p> </td> </tr> <tr valign='top'> <td><code>yval</code></td> <td> <p>a numeric value on the <code>y</code> scale</p> </td> </tr> </table> "	FALSE
"NLSstLfAsymptote"	"stats"	"Horizontal Asymptote on the Left Side"	"<p>Provide an initial guess at the horizontal asymptote on the left side (i.e., small values of <code>x</code>) of the graph of <code>y</code> versus <code>x</code> from the <code>xy</code> object.  Primarily used within <code>initial</code> functions for self-starting nonlinear regression models. </p>"	"<pre>NLSstLfAsymptote(xy) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>xy</code></td> <td> <p>a <code>sortedXyData</code> object</p> </td> </tr></table> "	FALSE
"NLSstRtAsymptote"	"stats"	"Horizontal Asymptote on the Right Side"	"<p>Provide an initial guess at the horizontal asymptote on the right side (i.e., large values of <code>x</code>) of the graph of <code>y</code> versus <code>x</code> from the <code>xy</code> object.  Primarily used within <code>initial</code> functions for self-starting nonlinear regression models. </p>"	"<pre>NLSstRtAsymptote(xy) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>xy</code></td> <td> <p>a <code>sortedXyData</code> object</p> </td> </tr></table> "	FALSE
"nobs"	"stats"	"Extract the Number of Observations from a Fit."	"<p>Extract the number of ‘observations’ from a model fit.  This is principally intended to be used in computing BIC (see <code>AIC</code>). </p>"	"<pre>nobs(object, ...)<br />## Default S3 method: nobs(object, use.fallback = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>A fitted model object.</p> </td> </tr> <tr valign='top'> <td><code>use.fallback</code></td> <td> <p>logical: should fallback methods be used to try to guess the value?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to be passed to methods.</p> </td> </tr> </table> "	FALSE
"numericDeriv"	"stats"	"Evaluate Derivatives Numerically"	"<p><code>numericDeriv</code> numerically evaluates the gradient of an expression. </p>"	"<pre>numericDeriv(expr, theta, rho = parent.frame(), dir = 1.0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>The expression to be differentiated.  The value of this expression should be a numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>theta</code></td> <td> <p>A character vector of names of numeric variables used in <code>expr</code>.</p> </td> </tr> <tr valign='top'> <td><code>rho</code></td> <td> <p>An environment containing all the variables needed to evaluate <code>expr</code>.</p> </td> </tr> <tr valign='top'> <td><code>dir</code></td> <td> <p>A numeric vector of directions to use for the finite differences.</p> </td> </tr> </table> "	FALSE
"offset"	"stats"	"Include an Offset in a Model Formula"	"<p>An offset is a term to be added to a linear predictor, such as in a generalised linear model, with known coefficient 1 rather than an estimated coefficient. </p>"	"<pre>offset(object) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>object</code></td> <td> <p>An offset to be included in a model frame</p> </td> </tr></table> "	FALSE
"oneway.test"	"stats"	"Test for Equal Means in a One-Way Layout"	"<p>Test whether two or more samples from normal distributions have the same means.  The variances are not necessarily assumed to be equal. </p>"	"<pre>oneway.test(formula, data, subset, na.action, var.equal = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>lhs ~ rhs</code> where <code>lhs</code> gives the sample values and <code>rhs</code> the corresponding groups.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>var.equal</code></td> <td> <p>a logical variable indicating whether to treat the variances in the samples as equal.  If <code>TRUE</code>, then a simple F test for the equality of means in a one-way analysis of variance is performed.  If <code>FALSE</code>, an approximate method of Welch (1951) is used, which generalizes the commonly known 2-sample Welch test to the case of arbitrarily many samples.</p> </td> </tr> </table> "	FALSE
"optim"	"stats"	"General-purpose Optimization"	"<p>General-purpose optimization based on Nelder–Mead, quasi-Newton and conjugate-gradient algorithms. It includes an option for box-constrained optimization and simulated annealing. </p>"	"<pre>optim(par, fn, gr = NULL, ...,<br />       method = c('Nelder-Mead', 'BFGS', 'CG', 'L-BFGS-B', 'SANN',<br />                  'Brent'),<br />       lower = -Inf, upper = Inf,<br />       control = list(), hessian = FALSE)<br />optimHess(par, fn, gr = NULL, ..., control = list()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>par</code></td> <td> <p>Initial values for the parameters to be optimized over.</p> </td> </tr> <tr valign='top'> <td><code>fn</code></td> <td> <p>A function to be minimized (or maximized), with first argument the vector of parameters over which minimization is to take place.  It should return a scalar result.</p> </td> </tr> <tr valign='top'> <td><code>gr</code></td> <td> <p>A function to return the gradient for the <code>'BFGS'</code>, <code>'CG'</code> and <code>'L-BFGS-B'</code> methods.  If it is <code>NULL</code>, a finite-difference approximation will be used. </p> <p>For the <code>'SANN'</code> method it specifies a function to generate a new candidate point.  If it is <code>NULL</code> a default Gaussian Markov kernel is used.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to be passed to <code>fn</code> and <code>gr</code>.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>The method to be used. See ‘Details’.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>lower, upper</code></td> <td> <p>Bounds on the variables for the <code>'L-BFGS-B'</code> method, or bounds in which to <em>search</em> for method <code>'Brent'</code>.</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>A list of control parameters. See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>hessian</code></td> <td> <p>Logical. Should a numerically differentiated Hessian matrix be returned?</p> </td> </tr> </table> "	FALSE
"optimize"	"stats"	"One Dimensional Optimization"	"<p>The function <code>optimize</code> searches the interval from <code>lower</code> to <code>upper</code> for a minimum or maximum of the function <code>f</code> with respect to its first argument. </p> <p><code>optimise</code> is an alias for <code>optimize</code>. </p>"	"<pre>optimize(f, interval, ..., lower = min(interval), upper = max(interval),<br />          maximum = FALSE,<br />          tol = .Machine$double.eps^0.25) optimise(f, interval, ..., lower = min(interval), upper = max(interval),<br />          maximum = FALSE,<br />          tol = .Machine$double.eps^0.25) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>the function to be optimized.  The function is either minimized or maximized over its first argument depending on the value of <code>maximum</code>.</p> </td> </tr> <tr valign='top'> <td><code>interval</code></td> <td> <p>a vector containing the end-points of the interval to be searched for the minimum.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional named or unnamed arguments to be passed to <code>f</code>.</p> </td> </tr> <tr valign='top'> <td><code>lower</code></td> <td> <p>the lower end point of the interval to be searched.</p> </td> </tr> <tr valign='top'> <td><code>upper</code></td> <td> <p>the upper end point of the interval to be searched.</p> </td> </tr> <tr valign='top'> <td><code>maximum</code></td> <td> <p>logical.  Should we maximize or minimize (the default)?</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>the desired accuracy.</p> </td> </tr> </table> "	FALSE
"p.adjust"	"stats"	"Adjust P-values for Multiple Comparisons"	"<p>Given a set of p-values, returns p-values adjusted using one of several methods.</p>"	"<pre>p.adjust(p, method = p.adjust.methods, n = length(p))<br />p.adjust.methods # c('holm', 'hochberg', 'hommel', 'bonferroni', 'BH', 'BY', #<br />   'fdr', 'none') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>p</code></td> <td> <p>numeric vector of p-values (possibly with <code>NA</code>s). Any other <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> is coerced by <code>as.numeric</code>.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>correction method.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of comparisons, must be at least <code>length(p)</code>; only set this (to non-default) when you know what you are doing!</p> </td> </tr> </table> "	FALSE
"pairwise.prop.test"	"stats"	" Pairwise comparisons for proportions"	"<p>Calculate pairwise comparisons between pairs of proportions with correction for multiple testing </p>"	"<pre>pairwise.prop.test(x, n, p.adjust.method = p.adjust.methods, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p> Vector of counts of successes or a matrix with 2 columns giving the counts of successes and failures, respectively. </p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p> Vector of counts of trials; ignored if <code>x</code> is a matrix.</p> </td> </tr> <tr valign='top'> <td><code>p.adjust.method</code></td> <td> <p>Method for adjusting p values (see <code>p.adjust</code>).  Can be abbreviated. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p> Additional arguments to pass to <code>prop.test</code> </p> </td> </tr> </table> "	FALSE
"pairwise.t.test"	"stats"	" Pairwise t tests"	"<p>Calculate pairwise comparisons between group levels with corrections for multiple testing </p>"	"<pre>pairwise.t.test(x, g, p.adjust.method = p.adjust.methods,<br />                 pool.sd = !paired, paired = FALSE,<br />                 alternative = c('two.sided', 'less', 'greater'),<br />                 ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p> response vector. </p> </td> </tr> <tr valign='top'> <td><code>g</code></td> <td> <p> grouping vector or factor. </p> </td> </tr> <tr valign='top'> <td><code>p.adjust.method</code></td> <td> <p> Method for adjusting p values (see <code>p.adjust</code>). </p> </td> </tr> <tr valign='top'> <td><code>pool.sd</code></td> <td> <p> switch to allow/disallow the use of a pooled SD </p> </td> </tr> <tr valign='top'> <td><code>paired</code></td> <td> <p> a logical indicating whether you want paired t-tests. </p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p> a character string specifying the alternative hypothesis, must be one of <code>'two.sided'</code> (default), <code>'greater'</code> or <code>'less'</code>.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p> additional arguments to pass to <code>t.test</code>. </p> </td> </tr> </table> "	FALSE
"pairwise.table"	"stats"	"Tabulate p values for pairwise comparisons"	"<p>Creates  table of p values for pairwise comparisons with corrections for multiple testing. </p>"	"<pre>pairwise.table(compare.levels, level.names, p.adjust.method) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>compare.levels</code></td> <td> <p> Function to compute (raw) p value given indices <code>i</code> and <code>j</code> </p> </td> </tr> <tr valign='top'> <td><code>level.names</code></td> <td> <p> Names of the group levels</p> </td> </tr> <tr valign='top'> <td><code>p.adjust.method</code></td> <td> <p>Method for multiple testing adjustment.  Can be abbreviated.</p> </td> </tr> </table> "	FALSE
"pairwise.wilcox.test"	"stats"	"Pairwise Wilcoxon Rank Sum Tests"	"<p>Calculate pairwise comparisons between group levels with corrections for multiple testing. </p>"	"<pre>pairwise.wilcox.test(x, g, p.adjust.method = p.adjust.methods,<br />                       paired = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p> response vector. </p> </td> </tr> <tr valign='top'> <td><code>g</code></td> <td> <p> grouping vector or factor. </p> </td> </tr> <tr valign='top'> <td><code>p.adjust.method</code></td> <td> <p> method for adjusting p values (see <code>p.adjust</code>). Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>paired</code></td> <td> <p>a logical indicating whether you want a paired test.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments to pass to <code>wilcox.test</code>.</p> </td> </tr> </table> "	FALSE
"birthday"	"stats"	"Probability of coincidences"	"<p>Computes answers to a generalised <em>birthday paradox</em> problem. <code>pbirthday</code> computes the probability of a coincidence and <code>qbirthday</code> computes the smallest number of observations needed to have at least a specified probability of coincidence. </p>"	"<pre>qbirthday(prob = 0.5, classes = 365, coincident = 2) pbirthday(n, classes = 365, coincident = 2) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>classes</code></td> <td> <p>How many distinct categories the people could fall into</p> </td> </tr> <tr valign='top'> <td><code>prob</code></td> <td> <p>The desired probability of coincidence</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>The number of people</p> </td> </tr> <tr valign='top'> <td><code>coincident</code></td> <td> <p>The number of people to fall in the same category</p> </td> </tr> </table> "	FALSE
"stats-deprecated"	"stats"	"Deprecated Functions in Package stats"	"<p>These functions are provided for compatibility with older versions of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> only, and may be defunct as soon as the next release. </p>"	"<pre>plclust(tree, hang = 0.1, unit = FALSE, level = FALSE, hmin = 0,<br />         square = TRUE, labels = NULL, plot. = TRUE,<br />         axes = TRUE, frame.plot = FALSE, ann = TRUE,<br />         main = '', sub = NULL, xlab = NULL, ylab = 'Height') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>tree</code></td> <td> <p>an object of the type produced by <code>hclust</code>.</p> </td> </tr> <tr valign='top'> <td><code>hang</code></td> <td> <p>The fraction of the plot height by which labels should hang below the rest of the plot. A negative value will cause the labels to hang down from 0.</p> </td> </tr> <tr valign='top'> <td><code>unit</code></td> <td> <p>logical.  If true, the splits are plotted at equally-spaced heights rather than at the height in the object.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>A character vector of labels for the leaves of the tree. By default the row names or row numbers of the original data are used. If <code>labels = FALSE</code> no labels at all are plotted.</p> </td> </tr> <tr valign='top'> <td><code>axes, frame.plot, ann</code></td> <td> <p>logical flags as in <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>main, sub, xlab, ylab</code></td> <td> <p>character strings for <code>title</code>.  <code>sub</code> and <code>xlab</code> have a non-NULL default when there's a <code>tree$call</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further graphical arguments.  E.g., <code>cex</code> controls the size of the labels (if plotted) in the same way as <code>text</code>.</p> </td> </tr> <tr valign='top'> <td><code>hmin</code></td> <td> <p>numeric.  All heights less than <code>hmin</code> are regarded as being <code>hmin</code>: this can be used to suppress detail at the bottom of the tree.</p> </td> </tr> <tr valign='top'> <td><code>level, square, plot.</code></td> <td> <p>unimplemented arguments for S-PLUS compatibility.</p> </td> </tr> </table> "	FALSE
"plot.acf"	"stats"	"Plot Autocovariance and Autocorrelation Functions"	"<p>Plot method for objects of class <code>'acf'</code>. </p>"	"<pre>## S3 method for class 'acf' plot(x, ci = 0.95, type = 'h', xlab = 'Lag', ylab = NULL,<br />      ylim = NULL, main = NULL,<br />      ci.col = 'blue', ci.type = c('white', 'ma'),<br />      max.mfrow = 6, ask = Npgs &gt; 1 &amp;&amp; dev.interactive(),<br />      mar = if(nser &gt; 2) c(3,2,2,0.8) else par('mar'),<br />      oma = if(nser &gt; 2) c(1,1.2,1,1) else par('oma'),<br />      mgp = if(nser &gt; 2) c(1.5,0.6,0) else par('mgp'),<br />      xpd = par('xpd'),<br />      cex.main = if(nser &gt; 2) 1 else par('cex.main'),<br />      verbose = getOption('verbose'),<br />      ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'acf'</code>.</p> </td> </tr> <tr valign='top'> <td><code>ci</code></td> <td> <p>coverage probability for confidence interval.  Plotting of the confidence interval is suppressed if <code>ci</code> is zero or negative.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the type of plot to be drawn, default to histogram like vertical lines.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>the x label of the plot.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>the y label of the plot.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>numeric of length 2 giving the y limits for the plot.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>overall title for the plot.</p> </td> </tr> <tr valign='top'> <td><code>ci.col</code></td> <td> <p>colour to plot the confidence interval lines.</p> </td> </tr> <tr valign='top'> <td><code>ci.type</code></td> <td> <p>should the confidence limits assume a white noise input or for lag <i>k</i> an MA(<i>k-1</i>) input?<br />   Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>max.mfrow</code></td> <td> <p>positive integer; for multivariate <code>x</code> indicating how many rows and columns of plots should be put on one page, using <code>par(mfrow = c(m,m))</code>.</p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td> <p>logical; if <code>TRUE</code>, the user is asked before a new page is started.</p> </td> </tr> <tr valign='top'> <td><code>mar, oma, mgp, xpd, cex.main</code></td> <td> <p>graphics parameters as in <code>par(*)</code>, by default adjusted to use smaller than default margins for multivariate <code>x</code> only. </p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>logical.  Should <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> report extra information on progress?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphics parameters to be passed to the plotting routines.</p> </td> </tr> </table> "	FALSE
"plot.density"	"stats"	"Plot Method for Kernel Density Estimation"	"<p>The <code>plot</code> method for density objects. </p>"	"<pre>## S3 method for class 'density' plot(x, main = NULL, xlab = NULL, ylab = 'Density', type = 'l',<br />      zero.line = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a <code>'density'</code> object.</p> </td> </tr> <tr valign='top'> <td><code>main, xlab, ylab, type</code></td> <td> <p>plotting parameters with useful defaults.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further plotting parameters.</p> </td> </tr> <tr valign='top'> <td><code>zero.line</code></td> <td> <p>logical; if <code>TRUE</code>, add a base line at <i>y = 0</i></p> </td> </tr> </table> "	FALSE
"plot.HoltWinters"	"stats"	"Plot function for HoltWinters objects"	"<p>Produces a chart of the original time series along with the fitted values. Optionally, predicted values (and their confidence bounds) can also be plotted. </p>"	"<pre>## S3 method for class 'HoltWinters' plot(x, predicted.values = NA, intervals = TRUE,<br />         separator = TRUE, col = 1, col.predicted = 2,<br />         col.intervals = 4, col.separator = 1, lty = 1,<br />         lty.predicted = 1, lty.intervals = 1, lty.separator = 3,<br />         ylab = 'Observed / Fitted',<br />         main = 'Holt-Winters filtering',<br />         ylim = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>Object of class <code>'HoltWinters'</code></p> </td> </tr> <tr valign='top'> <td><code>predicted.values</code></td> <td> <p>Predicted values as returned by <code>predict.HoltWinters</code></p> </td> </tr> <tr valign='top'> <td><code>intervals</code></td> <td> <p>If <code>TRUE</code>, the prediction intervals are plotted (default).</p> </td> </tr> <tr valign='top'> <td><code>separator</code></td> <td> <p>If <code>TRUE</code>, a separating line between fitted and predicted values is plotted (default).</p> </td> </tr> <tr valign='top'> <td><code>col, lty</code></td> <td> <p>Color/line type of original data (default: black solid).</p> </td> </tr> <tr valign='top'> <td><code>col.predicted, lty.predicted</code></td> <td> <p>Color/line type of fitted and predicted values (default: red solid).</p> </td> </tr> <tr valign='top'> <td><code>col.intervals, lty.intervals</code></td> <td> <p>Color/line type of prediction intervals (default: blue solid).</p> </td> </tr> <tr valign='top'> <td><code>col.separator, lty.separator</code></td> <td> <p>Color/line type of observed/predicted values separator (default: black dashed).</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>Label of the y-axis.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>Main title.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>Limits of the y-axis. If <code>NULL</code>, the range is chosen such that the plot contains the original series, the fitted values, and the predicted values if any.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Other graphics parameters.</p> </td> </tr> </table> "	FALSE
"plot.lm"	"stats"	"Plot Diagnostics for an lm Object"	"<p>Six plots (selectable by <code>which</code>) are currently available: a plot of residuals against fitted values, a Scale-Location plot of <i>sqrt(| residuals |)</i> against fitted values, a Normal Q-Q plot, a plot of Cook's distances versus row labels, a plot of residuals against leverages, and a plot of Cook's distances against leverage/(1-leverage).  By default, the first three and <code>5</code> are provided. </p>"	"<pre>## S3 method for class 'lm' plot(x, which = c(1:3, 5),<br />       caption = list('Residuals vs Fitted', 'Normal Q-Q',<br />        'Scale-Location', 'Cook's distance',<br />        'Residuals vs Leverage',<br />        expression('Cook's dist vs Leverage  ' * h[ii] / (1 - h[ii]))),<br />      panel = if(add.smooth) panel.smooth else points,<br />      sub.caption = NULL, main = '',<br />      ask = prod(par('mfcol')) &lt; length(which) &amp;&amp; dev.interactive(),<br />      ...,<br />      id.n = 3, labels.id = names(residuals(x)), cex.id = 0.75,<br />      qqline = TRUE, cook.levels = c(0.5, 1.0),<br />      add.smooth = getOption('add.smooth'), label.pos = c(4,2),<br />      cex.caption = 1, cex.oma.main = 1.25) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p><code>lm</code> object, typically result of <code>lm</code> or <code>glm</code>.</p> </td> </tr> <tr valign='top'> <td><code>which</code></td> <td> <p>if a subset of the plots is required, specify a subset of the numbers <code>1:6</code>, see <code>caption</code> below (and the ‘Details’) for the different kinds.</p> </td> </tr> <tr valign='top'> <td><code>caption</code></td> <td> <p>captions to appear above the plots; <code>character</code> vector or <code>list</code> of valid graphics annotations, see <code>as.graphicsAnnot</code>, of length 6, the j-th entry corresponding to <code>which[j]</code>.  Can be set to <code>''</code> or <code>NA</code> to suppress all captions. </p> </td> </tr> <tr valign='top'> <td><code>panel</code></td> <td> <p>panel function.  The useful alternative to <code>points</code>, <code>panel.smooth</code> can be chosen by <code>add.smooth = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>sub.caption</code></td> <td> <p>common title—above the figures if there are more than one; used as <code>sub</code> (s.<code>title</code>) otherwise.  If <code>NULL</code>, as by default, a possible abbreviated version of <code>deparse(x$call)</code> is used.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>title to each plot—in addition to <code>caption</code>.</p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td> <p>logical; if <code>TRUE</code>, the user is <em>ask</em>ed before each plot, see <code>par(ask=.)</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other parameters to be passed through to plotting functions.</p> </td> </tr> <tr valign='top'> <td><code>id.n</code></td> <td> <p>number of points to be labelled in each plot, starting with the most extreme.</p> </td> </tr> <tr valign='top'> <td><code>labels.id</code></td> <td> <p>vector of labels, from which the labels for extreme points will be chosen.  <code>NULL</code> uses observation numbers.</p> </td> </tr> <tr valign='top'> <td><code>cex.id</code></td> <td> <p>magnification of point labels.</p> </td> </tr> <tr valign='top'> <td><code>qqline</code></td> <td> <p>logical indicating if a <code>qqline()</code> should be added to the normal Q-Q plot.</p> </td> </tr> <tr valign='top'> <td><code>cook.levels</code></td> <td> <p>levels of Cook's distance at which to draw contours.</p> </td> </tr> <tr valign='top'> <td><code>add.smooth</code></td> <td> <p>logical indicating if a smoother should be added to most plots; see also <code>panel</code> above.</p> </td> </tr> <tr valign='top'> <td><code>label.pos</code></td> <td> <p>positioning of labels, for the left half and right half of the graph respectively, for plots 1-3.</p> </td> </tr> <tr valign='top'> <td><code>cex.caption</code></td> <td> <p>controls the size of <code>caption</code>.</p> </td> </tr> <tr valign='top'> <td><code>cex.oma.main</code></td> <td> <p>controls the size of the <code>sub.caption</code> only if that is <em>above</em> the figures when there is more than one.</p> </td> </tr> </table> "	FALSE
"plot.ppr"	"stats"	"Plot Ridge Functions for Projection Pursuit Regression Fit"	"<p>Plot ridge functions for projection pursuit regression fit. </p>"	"<pre>## S3 method for class 'ppr' plot(x, ask, type = 'o', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td><br /><p>A fit of class <code>'ppr'</code> as produced by a call to <code>ppr</code>. </p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td><br /><p>the graphics parameter <code>ask</code>: see <code>par</code> for details. If set to <code>TRUE</code> will ask between the plot of each cross-section. </p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td><br /><p>the type of line to draw </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td><br /><p>further graphical parameters </p> </td> </tr> </table> "	FALSE
"prcomp"	"stats"	"Principal Components Analysis"	"<p>Performs a principal components analysis on the given data matrix and returns the results as an object of class <code>prcomp</code>.</p>"	"<pre>prcomp(x, ...)<br />## S3 method for class 'formula' prcomp(formula, data = NULL, subset, na.action, ...)<br />## Default S3 method: prcomp(x, retx = TRUE, center = TRUE, scale. = FALSE,<br />        tol = NULL, ...)<br />## S3 method for class 'prcomp' predict(object, newdata, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula with no response variable, referring only to numeric variables.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector used to select rows (observations) of the data matrix <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  The default is set by the <code>na.action</code> setting of <code>options</code>, and is <code>na.fail</code> if that is unset. The ‘factory-fresh’ default is <code>na.omit</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods. If <code>x</code> is a formula one might specify <code>scale.</code> or <code>tol</code>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric or complex matrix (or data frame) which provides the data for the principal components analysis.</p> </td> </tr> <tr valign='top'> <td><code>retx</code></td> <td> <p>a logical value indicating whether the rotated variables should be returned.</p> </td> </tr> <tr valign='top'> <td><code>center</code></td> <td> <p>a logical value indicating whether the variables should be shifted to be zero centered. Alternately, a vector of length equal the number of columns of <code>x</code> can be supplied. The value is passed to <code>scale</code>.</p> </td> </tr> <tr valign='top'> <td><code>scale.</code></td> <td> <p>a logical value indicating whether the variables should be scaled to have unit variance before the analysis takes place. The default is <code>FALSE</code> for consistency with S, but in general scaling is advisable.  Alternatively, a vector of length equal the number of columns of <code>x</code> can be supplied.  The value is passed to <code>scale</code>.</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>a value indicating the magnitude below which components should be omitted. (Components are omitted if their standard deviations are less than or equal to <code>tol</code> times the standard deviation of the first component.) With the default null setting, no components are omitted.  Other settings for tol could be <code>tol = 0</code> or <code>tol = sqrt(.Machine$double.eps)</code>, which would omit essentially constant components.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>Object of class inheriting from <code>'prcomp'</code></p> </td> </tr> <tr valign='top'> <td><code>newdata</code></td> <td> <p>An optional data frame or matrix in which to look for variables with which to predict.  If omitted, the scores are used. If the original fit used a formula or a data frame or a matrix with column names, <code>newdata</code> must contain columns with the same names. Otherwise it must contain the same number of columns, to be used in the same order. </p> </td> </tr> </table> "	FALSE
"princomp"	"stats"	"Principal Components Analysis"	"<p><code>princomp</code> performs a principal components analysis on the given numeric data matrix and returns the results as an object of class <code>princomp</code>. </p>"	"<pre>princomp(x, ...)<br />## S3 method for class 'formula' princomp(formula, data = NULL, subset, na.action, ...)<br />## Default S3 method: princomp(x, cor = FALSE, scores = TRUE, covmat = NULL,<br />          subset = rep_len(TRUE, nrow(as.matrix(x))), ...)<br />## S3 method for class 'princomp' predict(object, newdata, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula with no response variable, referring only to numeric variables.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector used to select rows (observations) of the data matrix <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  The default is set by the <code>na.action</code> setting of <code>options</code>, and is <code>na.fail</code> if that is unset. The ‘factory-fresh’ default is <code>na.omit</code>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric matrix or data frame which provides the data for the principal components analysis.</p> </td> </tr> <tr valign='top'> <td><code>cor</code></td> <td> <p>a logical value indicating whether the calculation should use the correlation matrix or the covariance matrix.  (The correlation matrix can only be used if there are no constant variables.)</p> </td> </tr> <tr valign='top'> <td><code>scores</code></td> <td> <p>a logical value indicating whether the score on each principal component should be calculated.</p> </td> </tr> <tr valign='top'> <td><code>covmat</code></td> <td> <p>a covariance matrix, or a covariance list as returned by <code>cov.wt</code> (and <code>cov.mve</code> or <code>cov.mcd</code> from package <a href='https://CRAN.R-project.org/package=MASS'><span class='pkg'>MASS</span></a>). If supplied, this is used rather than the covariance matrix of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods. If <code>x</code> is a formula one might specify <code>cor</code> or <code>scores</code>.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>Object of class inheriting from <code>'princomp'</code></p> </td> </tr> <tr valign='top'> <td><code>newdata</code></td> <td> <p>An optional data frame or matrix in which to look for variables with which to predict.  If omitted, the scores are used. If the original fit used a formula or a data frame or a matrix with column names, <code>newdata</code> must contain columns with the same names. Otherwise it must contain the same number of columns, to be used in the same order. </p> </td> </tr> </table> "	FALSE
"plot.profile.nls"	"stats"	"Plot a profile.nls Object"	"<p>Displays a series of plots of the profile t function and interpolated confidence intervals for the parameters in a nonlinear regression model that has been fit with <code>nls</code> and profiled with <code>profile.nls</code>. </p>"	"<pre>## S3 method for class 'profile.nls' plot(x, levels, conf = c(99, 95, 90, 80, 50)/100,<br />      absVal = TRUE, ylab = NULL, lty = 2, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'profile.nls'</code> </p> </td> </tr> <tr valign='top'> <td><code>levels</code></td> <td> <p>levels, on the scale of the absolute value of a t statistic, at which to interpolate intervals.  Usually <code>conf</code> is used instead of giving <code>levels</code> explicitly.</p> </td> </tr> <tr valign='top'> <td><code>conf</code></td> <td> <p>a numeric vector of confidence levels for profile-based confidence intervals on the parameters. Defaults to <code>c(0.99, 0.95, 0.90, 0.80, 0.50).</code></p> </td> </tr> <tr valign='top'> <td><code>absVal</code></td> <td> <p>a logical value indicating whether or not the plots should be on the scale of the absolute value of the profile t. Defaults to <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>the line type to be used for axis and dropped lines.</p> </td> </tr> <tr valign='top'> <td><code>ylab, ...</code></td> <td> <p>other arguments to the <code>plot.default</code> function can be passed here (but not <code>xlab</code>, <code>xlim</code>, <code>ylim</code> nor <code>type</code>).</p> </td> </tr> </table> "	FALSE
"plot.spec"	"stats"	"Plotting Spectral Densities"	"<p>Plotting method for objects of class <code>'spec'</code>.  For multivariate time series it plots the marginal spectra of the series or pairs plots of the coherency and phase of the cross-spectra. </p>"	"<pre>## S3 method for class 'spec' plot(x, add = FALSE, ci = 0.95, log = c('yes', 'dB', 'no'),<br />      xlab = 'frequency', ylab = NULL, type = 'l',<br />      ci.col = 'blue', ci.lty = 3,<br />      main = NULL, sub = NULL,<br />      plot.type = c('marginal', 'coherency', 'phase'),<br />      ...)<br />plot.spec.phase(x, ci = 0.95,<br />                 xlab = 'frequency', ylab = 'phase',<br />                 ylim = c(-pi, pi), type = 'l',<br />                 main = NULL, ci.col = 'blue', ci.lty = 3, ...)<br />plot.spec.coherency(x, ci = 0.95,<br />                     xlab = 'frequency',<br />                     ylab = 'squared coherency',<br />                     ylim = c(0, 1), type = 'l',<br />                     main = NULL, ci.col = 'blue', ci.lty = 3, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'spec'</code>.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical.  If <code>TRUE</code>, add to already existing plot. Only valid for <code>plot.type = 'marginal'</code>. </p> </td> </tr> <tr valign='top'> <td><code>ci</code></td> <td> <p>coverage probability for confidence interval.  Plotting of the confidence bar/limits is omitted unless <code>ci</code> is strictly positive.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>If <code>'dB'</code>, plot on log10 (decibel) scale (as S-PLUS), otherwise use conventional log scale or linear scale.  Logical values are also accepted.  The default is <code>'yes'</code> unless <code>options(ts.S.compat = TRUE)</code> has been set, when it is <code>'dB'</code>.  Only valid for <code>plot.type = 'marginal'</code>. </p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>the x label of the plot.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>the y label of the plot.  If missing a suitable label will be constructed.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the type of plot to be drawn, defaults to lines.</p> </td> </tr> <tr valign='top'> <td><code>ci.col</code></td> <td> <p>colour for plotting confidence bar or confidence intervals for coherency and phase.</p> </td> </tr> <tr valign='top'> <td><code>ci.lty</code></td> <td> <p>line type for confidence intervals for coherency and phase.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>overall title for the plot. If missing, a suitable title is constructed.</p> </td> </tr> <tr valign='top'> <td><code>sub</code></td> <td> <p>a sub title for the plot.  Only used for <code>plot.type =<br />       'marginal'</code>.  If missing, a description of the smoothing is used.</p> </td> </tr> <tr valign='top'> <td><code>plot.type</code></td> <td> <p>For multivariate time series, the type of plot required.  Only the first character is needed.</p> </td> </tr> <tr valign='top'> <td><code>ylim, ...</code></td> <td> <p>Graphical parameters.</p> </td> </tr> </table> "	FALSE
"stlmethods"	"stats"	"Methods for STL Objects"	"<p>Methods for objects of class <code>stl</code>, typically the result of <code>stl</code>.  The <code>plot</code> method does a multiple figure plot with some flexibility. </p> <p>There are also (non-visible) <code>print</code> and <code>summary</code> methods. </p>"	"<pre>## S3 method for class 'stl' plot(x, labels = colnames(X),<br />      set.pars = list(mar = c(0, 6, 0, 6), oma = c(6, 0, 4, 0),<br />                      tck = -0.01, mfrow = c(nplot, 1)),<br />      main = NULL, range.bars = TRUE, ...,<br />      col.range = 'light gray') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p><code>stl</code> object.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>character of length 4 giving the names of the component time-series.</p> </td> </tr> <tr valign='top'> <td><code>set.pars</code></td> <td> <p>settings for <code>par(.)</code> when setting up the plot.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>plot main title.</p> </td> </tr> <tr valign='top'> <td><code>range.bars</code></td> <td> <p>logical indicating if each plot should have a bar at its right side which are of equal heights in user coordinates.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> <tr valign='top'> <td><code>col.range</code></td> <td> <p>colour to be used for the range bars, if plotted. Note this appears after <code>...</code> and so cannot be abbreviated.</p> </td> </tr> </table> "	FALSE
"poisson.test"	"stats"	"Exact Poisson tests"	"<p>Performs an exact test of a simple null hypothesis about the rate parameter in Poisson distribution, or for the ratio between two rate parameters. </p>"	"<pre>poisson.test(x, T = 1, r = 1,<br />     alternative = c('two.sided', 'less', 'greater'),<br />     conf.level = 0.95) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>number of events. A vector of length one or two.</p> </td> </tr> <tr valign='top'> <td><code>T</code></td> <td> <p>time base for event count. A vector of length one or two. </p> </td> </tr> <tr valign='top'> <td><code>r</code></td> <td> <p>hypothesized rate or rate ratio</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>indicates the alternative hypothesis and must be one of <code>'two.sided'</code>, <code>'greater'</code> or <code>'less'</code>. You can specify just the initial letter.</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level for the returned confidence interval.</p> </td> </tr> </table> "	FALSE
"power"	"stats"	"Create a Power Link Object"	"<p>Creates a link object based on the link function <i>η = μ ^ λ</i>. </p>"	"<pre>power(lambda = 1) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>lambda</code></td> <td> <p>a real number.</p> </td> </tr></table> "	FALSE
"power.anova.test"	"stats"	"Power Calculations for Balanced One-Way Analysis of Variance Tests"	"<p>Compute power of test or determine parameters to obtain target power. </p>"	"<pre>power.anova.test(groups = NULL, n = NULL,<br />                  between.var = NULL, within.var = NULL,<br />                  sig.level = 0.05, power = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>groups</code></td> <td> <p>Number of groups</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>Number of observations (per group)</p> </td> </tr> <tr valign='top'> <td><code>between.var</code></td> <td> <p>Between group variance</p> </td> </tr> <tr valign='top'> <td><code>within.var</code></td> <td> <p>Within group variance</p> </td> </tr> <tr valign='top'> <td><code>sig.level</code></td> <td> <p>Significance level (Type I error probability)</p> </td> </tr> <tr valign='top'> <td><code>power</code></td> <td> <p>Power of test (1 minus Type II error probability)</p> </td> </tr> </table> "	FALSE
"power.prop.test"	"stats"	"Power Calculations for Two-Sample Test for Proportions"	"<p>Compute the power of the two-sample test for proportions, or determine parameters to obtain a target power. </p>"	"<pre>power.prop.test(n = NULL, p1 = NULL, p2 = NULL, sig.level = 0.05,<br />                 power = NULL,<br />                 alternative = c('two.sided', 'one.sided'),<br />                 strict = FALSE, tol = .Machine$double.eps^0.25) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations (per group)</p> </td> </tr> <tr valign='top'> <td><code>p1</code></td> <td> <p>probability in one group</p> </td> </tr> <tr valign='top'> <td><code>p2</code></td> <td> <p>probability in other group</p> </td> </tr> <tr valign='top'> <td><code>sig.level</code></td> <td> <p>significance level (Type I error probability)</p> </td> </tr> <tr valign='top'> <td><code>power</code></td> <td> <p>power of test (1 minus Type II error probability)</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>one- or two-sided test.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>strict</code></td> <td> <p>use strict interpretation in two-sided case</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>numerical tolerance used in root finding, the default providing (at least) four significant digits.</p> </td> </tr> </table> "	FALSE
"power.t.test"	"stats"	"Power calculations for one and two sample t tests"	"<p>Compute the power of the one- or two- sample t test, or determine parameters to obtain a target power. </p>"	"<pre>power.t.test(n = NULL, delta = NULL, sd = 1, sig.level = 0.05,<br />              power = NULL,<br />              type = c('two.sample', 'one.sample', 'paired'),<br />              alternative = c('two.sided', 'one.sided'),<br />              strict = FALSE, tol = .Machine$double.eps^0.25) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations (per group)</p> </td> </tr> <tr valign='top'> <td><code>delta</code></td> <td> <p>true difference in means</p> </td> </tr> <tr valign='top'> <td><code>sd</code></td> <td> <p>standard deviation</p> </td> </tr> <tr valign='top'> <td><code>sig.level</code></td> <td> <p>significance level (Type I error probability)</p> </td> </tr> <tr valign='top'> <td><code>power</code></td> <td> <p>power of test (1 minus Type II error probability)</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>string specifying the type of t test.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>one- or two-sided test.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>strict</code></td> <td> <p>use strict interpretation in two-sided case</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>numerical tolerance used in root finding, the default providing (at least) four significant digits.</p> </td> </tr> </table> "	FALSE
"pp.test"	"stats"	"Phillips-Perron Test for Unit Roots"	"<p>Computes the Phillips-Perron test for the null hypothesis that <code>x</code> has a unit root against a stationary alternative. </p>"	"<pre>PP.test(x, lshort = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector or univariate time series.</p> </td> </tr> <tr valign='top'> <td><code>lshort</code></td> <td> <p>a logical indicating whether the short or long version of the truncation lag parameter is used.</p> </td> </tr> </table> "	FALSE
"ppoints"	"stats"	"Ordinates for Probability Plotting"	"<p>Generates the sequence of probability points <code>(1:m - a)/(m + (1-a)-a)</code> where <code>m</code> is either <code>n</code>, if <code>length(n)==1</code>, or <code>length(n)</code>. </p>"	"<pre>ppoints(n, a = if(n &lt;= 10) 3/8 else 1/2) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>either the number of points generated or a vector of observations.</p> </td> </tr> <tr valign='top'> <td><code>a</code></td> <td> <p>the offset fraction to be used; typically in <i>(0,1)</i>.</p> </td> </tr> </table> "	FALSE
"ppr"	"stats"	"Projection Pursuit Regression"	"<p>Fit a projection pursuit regression model. </p>"	"<pre>ppr(x, ...)<br />## S3 method for class 'formula' ppr(formula, data, weights, subset, na.action,<br />     contrasts = NULL, ..., model = FALSE)<br />## Default S3 method: ppr(x, y, weights = rep(1, n),<br />     ww = rep(1, q), nterms, max.terms = nterms, optlevel = 2,<br />     sm.method = c('supsmu', 'spline', 'gcvspline'),<br />     bass = 0, span = 0, df = 5, gcvpen = 1, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td><br /><p>a formula specifying one or more numeric response variables and the explanatory variables. </p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td><br /><p>numeric matrix of explanatory variables.  Rows represent observations, and columns represent variables.  Missing values are not accepted. </p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td><br /><p>numeric matrix of response variables.  Rows represent observations, and columns represent variables.  Missing values are not accepted. </p> </td> </tr> <tr valign='top'> <td><code>nterms</code></td> <td> <p>number of terms to include in the final model.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td><br /><p>a data frame (or similar: see <code>model.frame</code>) from which variables specified in <code>formula</code> are preferentially to be taken. </p> </td> </tr> <tr valign='top'> <td><code>weights</code></td> <td> <p>a vector of weights <code>w_i</code> for each <em>case</em>.</p> </td> </tr> <tr valign='top'> <td><code>ww</code></td> <td><br /><p>a vector of weights for each <em>response</em>, so the fit criterion is the sum over case <code>i</code> and responses <code>j</code> of <code>w_i ww_j (y_ij - fit_ij)^2</code> divided by the sum of <code>w_i</code>. </p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td><br /><p>an index vector specifying the cases to be used in the training sample.  (NOTE: If given, this argument must be named.) </p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td><br /><p>a function to specify the action to be taken if <code>NA</code>s are found. The default action is given by <code>getOption('na.action')</code>. (NOTE: If given, this argument must be named.) </p> </td> </tr> <tr valign='top'> <td><code>contrasts</code></td> <td><br /><p>the contrasts to be used when any factor explanatory variables are coded. </p> </td> </tr> <tr valign='top'> <td><code>max.terms</code></td> <td><br /><p>maximum number of terms to choose from when building the model. </p> </td> </tr> <tr valign='top'> <td><code>optlevel</code></td> <td><br /><p>integer from 0 to 3 which determines the thoroughness of an optimization routine in the SMART program. See the ‘Details’ section. </p> </td> </tr> <tr valign='top'> <td><code>sm.method</code></td> <td><br /><p>the method used for smoothing the ridge functions.  The default is to use Friedman's super smoother <code>supsmu</code>.  The alternatives are to use the smoothing spline code underlying <code>smooth.spline</code>, either with a specified (equivalent) degrees of freedom for each ridge functions, or to allow the smoothness to be chosen by GCV. </p> <p>Can be abbreviated. </p> </td> </tr> <tr valign='top'> <td><code>bass</code></td> <td><br /><p>super smoother bass tone control used with automatic span selection (see <code>supsmu</code>); the range of values is 0 to 10, with larger values resulting in increased smoothing. </p> </td> </tr> <tr valign='top'> <td><code>span</code></td> <td><br /><p>super smoother span control (see <code>supsmu</code>).  The default, <code>0</code>, results in automatic span selection by local cross validation. <code>span</code> can also take a value in <code>(0, 1]</code>. </p> </td> </tr> <tr valign='top'> <td><code>df</code></td> <td><br /><p>if <code>sm.method</code> is <code>'spline'</code> specifies the smoothness of each ridge term via the requested equivalent degrees of freedom. </p> </td> </tr> <tr valign='top'> <td><code>gcvpen</code></td> <td><br /><p>if <code>sm.method</code> is <code>'gcvspline'</code> this is the penalty used in the GCV selection for each degree of freedom used. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from other methods.</p> </td> </tr> <tr valign='top'> <td><code>model</code></td> <td> <p>logical.  If true, the model frame is returned.</p> </td> </tr> </table> "	FALSE
"predict"	"stats"	"Model Predictions"	"<p><code>predict</code> is a generic function for predictions from the results of various model fitting functions.  The function invokes particular <em>methods</em> which depend on the <code>class</code> of the first argument. </p>"	"<pre>predict (object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a model object for which prediction is desired.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments affecting the predictions produced.</p> </td> </tr> </table> "	FALSE
"predict.arima"	"stats"	"Forecast from ARIMA fits"	"<p>Forecast from models fitted by <code>arima</code>. </p>"	"<pre>## S3 method for class 'Arima' predict(object, n.ahead = 1, newxreg = NULL,<br />         se.fit = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>The result of an <code>arima</code> fit.</p> </td> </tr> <tr valign='top'> <td><code>n.ahead</code></td> <td> <p>The number of steps ahead for which prediction is required.</p> </td> </tr> <tr valign='top'> <td><code>newxreg</code></td> <td> <p>New values of <code>xreg</code> to be used for prediction. Must have at least <code>n.ahead</code> rows.</p> </td> </tr> <tr valign='top'> <td><code>se.fit</code></td> <td> <p>Logical: should standard errors of prediction be returned?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"predict.glm"	"stats"	"Predict Method for GLM Fits"	"<p>Obtains predictions and optionally estimates standard errors of those predictions from a fitted generalized linear model object. </p>"	"<pre>## S3 method for class 'glm' predict(object, newdata = NULL,<br />             type = c('link', 'response', 'terms'),<br />             se.fit = FALSE, dispersion = NULL, terms = NULL,<br />             na.action = na.pass, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a fitted object of class inheriting from <code>'glm'</code>.</p> </td> </tr> <tr valign='top'> <td><code>newdata</code></td> <td> <p>optionally, a data frame in which to look for variables with which to predict.  If omitted, the fitted linear predictors are used.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the type of prediction required.  The default is on the scale of the linear predictors; the alternative <code>'response'</code> is on the scale of the response variable.  Thus for a default binomial model the default predictions are of log-odds (probabilities on logit scale) and <code>type = 'response'</code> gives the predicted probabilities.  The <code>'terms'</code> option returns a matrix giving the fitted values of each term in the model formula on the linear predictor scale. </p> <p>The value of this argument can be abbreviated. </p> </td> </tr> <tr valign='top'> <td><code>se.fit</code></td> <td> <p>logical switch indicating if standard errors are required.</p> </td> </tr> <tr valign='top'> <td><code>dispersion</code></td> <td> <p>the dispersion of the GLM fit to be assumed in computing the standard errors.  If omitted, that returned by <code>summary</code> applied to the object is used.</p> </td> </tr> <tr valign='top'> <td><code>terms</code></td> <td> <p>with <code>type = 'terms'</code> by default all terms are returned. A character vector specifies which terms are to be returned</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>function determining what should be done with missing values in <code>newdata</code>.  The default is to predict <code>NA</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"predict.HoltWinters"	"stats"	"Prediction Function for Fitted Holt-Winters Models"	"<p>Computes predictions and prediction intervals for models fitted by the Holt-Winters method. </p>"	"<pre>## S3 method for class 'HoltWinters' predict(object, n.ahead = 1, prediction.interval = FALSE,<br />        level = 0.95, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>An object of class <code>HoltWinters</code>.</p> </td> </tr> <tr valign='top'> <td><code>n.ahead</code></td> <td> <p>Number of future periods to predict.</p> </td> </tr> <tr valign='top'> <td><code>prediction.interval</code></td> <td> <p>logical. If <code>TRUE</code>, the lower and upper bounds of the corresponding prediction intervals are computed.</p> </td> </tr> <tr valign='top'> <td><code>level</code></td> <td> <p>Confidence level for the prediction interval.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"predict.lm"	"stats"	"Predict method for Linear Model Fits"	"<p>Predicted values based on linear model object. </p>"	"<pre>## S3 method for class 'lm' predict(object, newdata, se.fit = FALSE, scale = NULL, df = Inf,<br />         interval = c('none', 'confidence', 'prediction'),<br />         level = 0.95, type = c('response', 'terms'),<br />         terms = NULL, na.action = na.pass,<br />         pred.var = res.var/weights, weights = 1, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>Object of class inheriting from <code>'lm'</code></p> </td> </tr> <tr valign='top'> <td><code>newdata</code></td> <td> <p>An optional data frame in which to look for variables with which to predict.  If omitted, the fitted values are used.</p> </td> </tr> <tr valign='top'> <td><code>se.fit</code></td> <td> <p>A switch indicating if standard errors are required.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>Scale parameter for std.err. calculation.</p> </td> </tr> <tr valign='top'> <td><code>df</code></td> <td> <p>Degrees of freedom for scale.</p> </td> </tr> <tr valign='top'> <td><code>interval</code></td> <td> <p>Type of interval calculation.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>level</code></td> <td> <p>Tolerance/confidence level.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>Type of prediction (response or model term).  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>terms</code></td> <td> <p>If <code>type = 'terms'</code>, which terms (default is all terms), a <code>character</code> vector.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>function determining what should be done with missing values in <code>newdata</code>.  The default is to predict <code>NA</code>.</p> </td> </tr> <tr valign='top'> <td><code>pred.var</code></td> <td> <p>the variance(s) for future observations to be assumed for prediction intervals.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>weights</code></td> <td> <p>variance weights for prediction.  This can be a numeric vector or a one-sided model formula.  In the latter case, it is interpreted as an expression evaluated in <code>newdata</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"predict.loess"	"stats"	"Predict Loess Curve or Surface"	"<p>Predictions from a <code>loess</code> fit, optionally with standard errors. </p>"	"<pre>## S3 method for class 'loess' predict(object, newdata = NULL, se = FALSE,<br />         na.action = na.pass, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object fitted by <code>loess</code>.</p> </td> </tr> <tr valign='top'> <td><code>newdata</code></td> <td> <p>an optional data frame in which to look for variables with which to predict, or a matrix or vector containing exactly the variables needs for prediction.  If missing, the original data points are used.</p> </td> </tr> <tr valign='top'> <td><code>se</code></td> <td> <p>should standard errors be computed?</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>function determining what should be done with missing values in data frame <code>newdata</code>.  The default is to predict <code>NA</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"predict.nls"	"stats"	"Predicting from Nonlinear Least Squares Fits"	"<p><code>predict.nls</code> produces predicted values, obtained by evaluating the regression function in the frame <code>newdata</code>.  If the logical <code>se.fit</code> is <code>TRUE</code>, standard errors of the predictions are calculated.  If the numeric argument <code>scale</code> is set (with optional <code>df</code>), it is used as the residual standard deviation in the computation of the standard errors, otherwise this is extracted from the model fit.  Setting <code>intervals</code> specifies computation of confidence or prediction (tolerance) intervals at the specified <code>level</code>. </p> <p>At present <code>se.fit</code> and <code>interval</code> are ignored. </p>"	"<pre>## S3 method for class 'nls' predict(object, newdata , se.fit = FALSE, scale = NULL, df = Inf,<br />         interval = c('none', 'confidence', 'prediction'),<br />         level = 0.95, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>An object that inherits from class <code>nls</code>.</p> </td> </tr> <tr valign='top'> <td><code>newdata</code></td> <td> <p>A named list or data frame in which to look for variables with which to predict.  If <code>newdata</code> is missing the fitted values at the original data points are returned.</p> </td> </tr> <tr valign='top'> <td><code>se.fit</code></td> <td> <p>A logical value indicating if the standard errors of the predictions should be calculated.  Defaults to <code>FALSE</code>.  At present this argument is ignored.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>A numeric scalar.  If it is set (with optional <code>df</code>), it is used as the residual standard deviation in the computation of the standard errors, otherwise this information is extracted from the model fit. At present this argument is ignored.</p> </td> </tr> <tr valign='top'> <td><code>df</code></td> <td> <p>A positive numeric scalar giving the number of degrees of freedom for the <code>scale</code> estimate. At present this argument is ignored.</p> </td> </tr> <tr valign='top'> <td><code>interval</code></td> <td> <p>A character string indicating if prediction intervals or a confidence interval on the mean responses are to be calculated. At present this argument is ignored.</p> </td> </tr> <tr valign='top'> <td><code>level</code></td> <td> <p>A numeric scalar between 0 and 1 giving the confidence level for the intervals (if any) to be calculated.  At present this argument is ignored.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Additional optional arguments.  At present no optional arguments are used.</p> </td> </tr> </table> "	FALSE
"predict.smooth.spline"	"stats"	"Predict from Smoothing Spline Fit"	"<p>Predict a smoothing spline fit at new points, return the derivative if desired. The predicted fit is linear beyond the original data. </p>"	"<pre>## S3 method for class 'smooth.spline' predict(object, x, deriv = 0, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a fit from <code>smooth.spline</code>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>the new values of x.</p> </td> </tr> <tr valign='top'> <td><code>deriv</code></td> <td> <p>integer; the order of the derivative required.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"StructTS"	"stats"	"Fit Structural Time Series"	"<p>Fit a structural model for a time series by maximum likelihood. </p>"	"<pre>StructTS(x, type = c('level', 'trend', 'BSM'), init = NULL,<br />          fixed = NULL, optim.control = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a univariate numeric time series. Missing values are allowed.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the class of structural model.  If omitted, a BSM is used for a time series with <code>frequency(x) &gt; 1</code>, and a local trend model otherwise.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>init</code></td> <td> <p>initial values of the variance parameters.</p> </td> </tr> <tr valign='top'> <td><code>fixed</code></td> <td> <p>optional numeric vector of the same length as the total number of parameters.  If supplied, only <code>NA</code> entries in <code>fixed</code> will be varied.  Probably most useful for setting variances to zero.</p> </td> </tr> <tr valign='top'> <td><code>optim.control</code></td> <td> <p>List of control parameters for <code>optim</code>.  Method <code>'L-BFGS-B'</code> is used.</p> </td> </tr> </table> "	FALSE
"preplot"	"stats"	"Pre-computations for a Plotting Object"	"<p>Compute an object to be used for plots relating to the given model object. </p>"	"<pre>preplot(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a fitted model object.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments for specific methods.</p> </td> </tr> </table> "	FALSE
"print.power.htest"	"stats"	"Print Methods for Hypothesis Tests and Power Calculation Objects"	"<p>Printing objects of class <code>'htest'</code> or <code>'power.htest'</code>, respectively, by simple <code>print</code> methods. </p>"	"<pre>## S3 method for class 'htest' print(x, digits = getOption('digits'), prefix = '\t', ...)<br />## S3 method for class 'power.htest' print(x, digits = getOption('digits'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>object of class <code>'htest'</code> or <code>'power.htest'</code>.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>number of significant digits to be used.</p> </td> </tr> <tr valign='top'> <td><code>prefix</code></td> <td> <p>string, passed to <code>strwrap</code> for displaying the <code>method</code> component of the <code>htest</code> object.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"summary.aov"	"stats"	"Summarize an Analysis of Variance Model"	"<p>Summarize an analysis of variance model. </p>"	"<pre>## S3 method for class 'aov' summary(object, intercept = FALSE, split,<br />         expand.split = TRUE, keep.zero.df = TRUE, ...)<br />## S3 method for class 'aovlist' summary(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>An object of class <code>'aov'</code> or <code>'aovlist'</code>.</p> </td> </tr> <tr valign='top'> <td><code>intercept</code></td> <td> <p>logical: should intercept terms be included?</p> </td> </tr> <tr valign='top'> <td><code>split</code></td> <td> <p>an optional named list, with names corresponding to terms in the model.  Each component is itself a list with integer components giving contrasts whose contributions are to be summed.</p> </td> </tr> <tr valign='top'> <td><code>expand.split</code></td> <td> <p>logical: should the split apply also to interactions involving the factor?</p> </td> </tr> <tr valign='top'> <td><code>keep.zero.df</code></td> <td> <p>logical: should terms with no degrees of freedom be included?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Arguments to be passed to or from other methods, for <code>summary.aovlist</code> including those for <code>summary.aov</code>.</p> </td> </tr> </table> "	FALSE
"summary.glm"	"stats"	"Summarizing Generalized Linear Model Fits"	"<p>These functions are all <code>methods</code> for class <code>glm</code> or <code>summary.glm</code> objects. </p>"	"<pre>## S3 method for class 'glm' summary(object, dispersion = NULL, correlation = FALSE,<br />         symbolic.cor = FALSE, ...)<br />## S3 method for class 'summary.glm' print(x, digits = max(3, getOption('digits') - 3),<br />       symbolic.cor = x$symbolic.cor,<br />       signif.stars = getOption('show.signif.stars'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object of class <code>'glm'</code>, usually, a result of a call to <code>glm</code>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'summary.glm'</code>, usually, a result of a call to <code>summary.glm</code>.</p> </td> </tr> <tr valign='top'> <td><code>dispersion</code></td> <td> <p>the dispersion parameter for the family used. Either a single numerical value or <code>NULL</code> (the default), when it is inferred from <code>object</code> (see ‘Details’).</p> </td> </tr> <tr valign='top'> <td><code>correlation</code></td> <td> <p>logical; if <code>TRUE</code>, the correlation matrix of the estimated parameters is returned and printed.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>the number of significant digits to use when printing.</p> </td> </tr> <tr valign='top'> <td><code>symbolic.cor</code></td> <td> <p>logical. If <code>TRUE</code>, print the correlations in a symbolic form (see <code>symnum</code>) rather than as numbers.</p> </td> </tr> <tr valign='top'> <td><code>signif.stars</code></td> <td> <p>logical. If <code>TRUE</code>, ‘significance stars’ are printed for each coefficient.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"summary.lm"	"stats"	"Summarizing Linear Model Fits"	"<p><code>summary</code> method for class <code>'lm'</code>. </p>"	"<pre>## S3 method for class 'lm' summary(object, correlation = FALSE, symbolic.cor = FALSE, ...)<br />## S3 method for class 'summary.lm' print(x, digits = max(3, getOption('digits') - 3),<br />       symbolic.cor = x$symbolic.cor,<br />       signif.stars = getOption('show.signif.stars'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object of class <code>'lm'</code>, usually, a result of a call to <code>lm</code>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'summary.lm'</code>, usually, a result of a call to <code>summary.lm</code>.</p> </td> </tr> <tr valign='top'> <td><code>correlation</code></td> <td> <p>logical; if <code>TRUE</code>, the correlation matrix of the estimated parameters is returned and printed.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>the number of significant digits to use when printing.</p> </td> </tr> <tr valign='top'> <td><code>symbolic.cor</code></td> <td> <p>logical. If <code>TRUE</code>, print the correlations in a symbolic form (see <code>symnum</code>) rather than as numbers.</p> </td> </tr> <tr valign='top'> <td><code>signif.stars</code></td> <td> <p>logical. If <code>TRUE</code>, ‘significance stars’ are printed for each coefficient.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"summary.manova"	"stats"	"Summary Method for Multivariate Analysis of Variance"	"<p>A <code>summary</code> method for class <code>'manova'</code>. </p>"	"<pre>## S3 method for class 'manova' summary(object,<br />         test = c('Pillai', 'Wilks', 'Hotelling-Lawley', 'Roy'),<br />         intercept = FALSE, tol = 1e-7, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>An object of class <code>'manova'</code> or an <code>aov</code> object with multiple responses.</p> </td> </tr> <tr valign='top'> <td><code>test</code></td> <td> <p>The name of the test statistic to be used.  Partial matching is used so the name can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>intercept</code></td> <td> <p>logical.  If <code>TRUE</code>, the intercept term is included in the table.</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>tolerance to be used in deciding if the residuals are rank-deficient: see <code>qr</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"summary.nls"	"stats"	"Summarizing Non-Linear Least-Squares Model Fits"	"<p><code>summary</code> method for class <code>'nls'</code>. </p>"	"<pre>## S3 method for class 'nls' summary(object, correlation = FALSE, symbolic.cor = FALSE, ...)<br />## S3 method for class 'summary.nls' print(x, digits = max(3, getOption('digits') - 3),<br />       symbolic.cor = x$symbolic.cor,<br />       signif.stars = getOption('show.signif.stars'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object of class <code>'nls'</code>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'summary.nls'</code>, usually the result of a call to <code>summary.nls</code>.</p> </td> </tr> <tr valign='top'> <td><code>correlation</code></td> <td> <p>logical; if <code>TRUE</code>, the correlation matrix of the estimated parameters is returned and printed.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>the number of significant digits to use when printing.</p> </td> </tr> <tr valign='top'> <td><code>symbolic.cor</code></td> <td> <p>logical.  If <code>TRUE</code>, print the correlations in a symbolic form (see <code>symnum</code>) rather than as numbers.</p> </td> </tr> <tr valign='top'> <td><code>signif.stars</code></td> <td> <p>logical.  If <code>TRUE</code>, ‘significance stars’ are printed for each coefficient.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"summary.princomp"	"stats"	"Summary method for Principal Components Analysis"	"<p>The <code>summary</code> method for class <code>'princomp'</code>. </p>"	"<pre>## S3 method for class 'princomp' summary(object, loadings = FALSE, cutoff = 0.1, ...)<br />## S3 method for class 'summary.princomp' print(x, digits = 3, loadings = x$print.loadings,<br />       cutoff = x$cutoff, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object of class <code>'princomp'</code>, as from <code>princomp()</code>.</p> </td> </tr> <tr valign='top'> <td><code>loadings</code></td> <td> <p>logical. Should loadings be included?</p> </td> </tr> <tr valign='top'> <td><code>cutoff</code></td> <td> <p>numeric. Loadings below this cutoff in absolute value are shown as blank in the output.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class 'summary.princomp'.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>the number of significant digits to be used in listing loadings.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"print.ts"	"stats"	"Printing and Formatting of Time-Series Objects"	"<p>Notably for calendar related time series objects,<br />   <code>format</code> and <code>print</code> methods showing years, months and or quarters respectively. </p>"	"<pre>## S3 method for class 'ts' print(x, calendar, ...) .preformat.ts(x, calendar, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a time series object.</p> </td> </tr> <tr valign='top'> <td><code>calendar</code></td> <td> <p>enable/disable the display of information about month names, quarter names or year when printing.  The default is <code>TRUE</code> for a frequency of 4 or 12, <code>FALSE</code> otherwise.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments to <code>print</code> (or <code>format</code> methods).</p> </td> </tr> </table> "	FALSE
"xtabs"	"stats"	"Cross Tabulation"	"<p>Create a contingency table (optionally a sparse matrix) from cross-classifying factors, usually contained in a data frame, using a formula interface. </p>"	"<pre>xtabs(formula = ~., data = parent.frame(), subset, sparse = FALSE,<br />       na.action, exclude = c(NA, NaN), drop.unused.levels = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula object with the cross-classifying variables (separated by <code>+</code>) on the right hand side (or an object which can be coerced to a formula).  Interactions are not allowed.  On the left hand side, one may optionally give a vector or a matrix of counts; in the latter case, the columns are interpreted as corresponding to the levels of a variable.  This is useful if the data have already been tabulated, see the examples below.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>sparse</code></td> <td> <p>logical specifying if the result should be a <em>sparse</em> matrix, i.e., inheriting from <code>sparseMatrix</code> Only works for two factors (since there are no higher-order sparse array classes yet). </p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.</p> </td> </tr> <tr valign='top'> <td><code>exclude</code></td> <td> <p>a vector of values to be excluded when forming the set of levels of the classifying factors.</p> </td> </tr> <tr valign='top'> <td><code>drop.unused.levels</code></td> <td> <p>a logical indicating whether to drop unused levels in the classifying factors.  If this is <code>FALSE</code> and there are unused levels, the table will contain zero marginals, and a subsequent chi-squared test for independence of the factors will not work.</p> </td> </tr> </table> "	FALSE
"printCoefmat"	"stats"	"Print Coefficient Matrices"	"<p>Utility function to be used in higher-level <code>print</code> methods, such as those for <code>summary.lm</code>, <code>summary.glm</code> and <code>anova</code>.  The goal is to provide a flexible interface with smart defaults such that often, only <code>x</code> needs to be specified. </p>"	"<pre>printCoefmat(x, digits = max(3, getOption('digits') - 2),<br />              signif.stars = getOption('show.signif.stars'),<br />              signif.legend = signif.stars,<br />              dig.tst = max(1, min(5, digits - 1)),<br />              cs.ind = 1L:k, tst.ind = k + 1L,<br />              zap.ind = integer(), P.values = NULL,<br />              has.Pvalue = nc &gt;= 4L &amp;&amp;<br />                           substr(colnames(x)[nc], 1L, 3L) == 'Pr(',<br />              eps.Pvalue = .Machine$double.eps,<br />              na.print = 'NA', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric matrix like object, to be printed.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>minimum number of significant digits to be used for most numbers.</p> </td> </tr> <tr valign='top'> <td><code>signif.stars</code></td> <td> <p>logical; if <code>TRUE</code>, P-values are additionally encoded visually as ‘significance stars’ in order to help scanning of long coefficient tables.  It defaults to the <code>show.signif.stars</code> slot of <code>options</code>.</p> </td> </tr> <tr valign='top'> <td><code>signif.legend</code></td> <td> <p>logical; if <code>TRUE</code>, a legend for the ‘significance stars’ is printed provided <code>signif.stars =<br />       TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>dig.tst</code></td> <td> <p>minimum number of significant digits for the test statistics, see <code>tst.ind</code>.</p> </td> </tr> <tr valign='top'> <td><code>cs.ind</code></td> <td> <p>indices (integer) of column numbers which are (like) <b>c</b>oefficients and <b>s</b>tandard errors to be formatted together.</p> </td> </tr> <tr valign='top'> <td><code>tst.ind</code></td> <td> <p>indices (integer) of column numbers for test statistics.</p> </td> </tr> <tr valign='top'> <td><code>zap.ind</code></td> <td> <p>indices (integer) of column numbers which should be formatted by <code>zapsmall</code>, i.e., by ‘zapping’ values close to 0.</p> </td> </tr> <tr valign='top'> <td><code>P.values</code></td> <td> <p>logical or <code>NULL</code>; if <code>TRUE</code>, the last column of <code>x</code> is formatted by <code>format.pval</code> as P values.  If <code>P.values = NULL</code>, the default, it is set to <code>TRUE</code> only if <code>options('show.coef.Pvalue')</code> is <code>TRUE</code> <em>and</em> <code>x</code> has at least 4 columns <em>and</em> the last column name of <code>x</code> starts with <code>'Pr('</code>.</p> </td> </tr> <tr valign='top'> <td><code>has.Pvalue</code></td> <td> <p>logical; if <code>TRUE</code>, the last column of <code>x</code> contains P values; in that case, it is printed if and only if <code>P.values</code> (above) is true.</p> </td> </tr> <tr valign='top'> <td><code>eps.Pvalue</code></td> <td> <p>number, ..</p> </td> </tr> <tr valign='top'> <td><code>na.print</code></td> <td> <p>a character string to code <code>NA</code> values in printed output.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments for <code>print</code>.</p> </td> </tr> </table> "	FALSE
"profile"	"stats"	"Generic Function for Profiling Models"	"<p>Investigates behavior of objective function near the solution represented by <code>fitted</code>. </p> <p>See documentation on method functions for further details. </p>"	"<pre>profile(fitted, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>fitted</code></td> <td> <p>the original fitted model object.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional parameters. See documentation on individual methods.</p> </td> </tr> </table> "	FALSE
"profile.nls"	"stats"	"Method for Profiling nls Objects"	"<p>Investigates the profile log-likelihood function for a fitted model of class <code>'nls'</code>. </p>"	"<pre>## S3 method for class 'nls' profile(fitted, which = 1:npar, maxpts = 100, alphamax = 0.01,<br />         delta.t = cutoff/5, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>fitted</code></td> <td> <p>the original fitted model object.</p> </td> </tr> <tr valign='top'> <td><code>which</code></td> <td> <p>the original model parameters which should be profiled. This can be a numeric or character vector. By default, all non-linear parameters are profiled.</p> </td> </tr> <tr valign='top'> <td><code>maxpts</code></td> <td> <p>maximum number of points to be used for profiling each parameter.</p> </td> </tr> <tr valign='top'> <td><code>alphamax</code></td> <td> <p>highest significance level allowed for the profile t-statistics.</p> </td> </tr> <tr valign='top'> <td><code>delta.t</code></td> <td> <p>suggested change on the scale of the profile t-statistics.  Default value chosen to allow profiling at about 10 parameter values.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"proj"	"stats"	"Projections of Models"	"<p><code>proj</code> returns a matrix or list of matrices giving the projections of the data onto the terms of a linear model.  It is most frequently used for <code>aov</code> models. </p>"	"<pre>proj(object, ...)<br />## S3 method for class 'aov' proj(object, onedf = FALSE, unweighted.scale = FALSE, ...)<br />## S3 method for class 'aovlist' proj(object, onedf = FALSE, unweighted.scale = FALSE, ...)<br />## Default S3 method: proj(object, onedf = TRUE, ...)<br />## S3 method for class 'lm' proj(object, onedf = FALSE, unweighted.scale = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>An object of class <code>'lm'</code> or a class inheriting from it, or an object with a similar structure including in particular components <code>qr</code> and <code>effects</code>.</p> </td> </tr> <tr valign='top'> <td><code>onedf</code></td> <td> <p>A logical flag. If <code>TRUE</code>, a projection is returned for all the columns of the model matrix. If <code>FALSE</code>, the single-column projections are collapsed by terms of the model (as represented in the analysis of variance table).</p> </td> </tr> <tr valign='top'> <td><code>unweighted.scale</code></td> <td> <p>If the fit producing <code>object</code> used weights, this determines if the projections correspond to weighted or unweighted observations.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Swallow and ignore any other arguments.</p> </td> </tr> </table> "	FALSE
"varimax"	"stats"	"Rotation Methods for Factor Analysis"	"<p>These functions ‘rotate’ loading matrices in factor analysis. </p>"	"<pre>varimax(x, normalize = TRUE, eps = 1e-5) promax(x, m = 4) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A loadings matrix, with <i>p</i> rows and <i>k &lt; p</i> columns</p> </td> </tr> <tr valign='top'> <td><code>m</code></td> <td> <p>The power used the target for <code>promax</code>.  Values of 2 to 4 are recommended.</p> </td> </tr> <tr valign='top'> <td><code>normalize</code></td> <td> <p>logical. Should Kaiser normalization be performed? If so the rows of <code>x</code> are re-scaled to unit length before rotation, and scaled back afterwards.</p> </td> </tr> <tr valign='top'> <td><code>eps</code></td> <td> <p>The tolerance for stopping: the relative change in the sum of singular values.</p> </td> </tr> </table> "	FALSE
"prop.test"	"stats"	"Test of Equal or Given Proportions"	"<p><code>prop.test</code> can be used for testing the null that the proportions (probabilities of success) in several groups are the same, or that they equal certain given values. </p>"	"<pre>prop.test(x, n, p = NULL,<br />           alternative = c('two.sided', 'less', 'greater'),<br />           conf.level = 0.95, correct = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector of counts of successes, a one-dimensional table with two entries, or a two-dimensional table (or matrix) with 2 columns, giving the counts of successes and failures, respectively.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>a vector of counts of trials; ignored if <code>x</code> is a matrix or a table.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>a vector of probabilities of success.  The length of <code>p</code> must be the same as the number of groups specified by <code>x</code>, and its elements must be greater than 0 and less than 1.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>a character string specifying the alternative hypothesis, must be one of <code>'two.sided'</code> (default), <code>'greater'</code> or <code>'less'</code>.  You can specify just the initial letter.  Only used for testing the null that a single proportion equals a given value, or that two proportions are equal; ignored otherwise.</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level of the returned confidence interval.  Must be a single number between 0 and 1.  Only used when testing the null that a single proportion equals a given value, or that two proportions are equal; ignored otherwise.</p> </td> </tr> <tr valign='top'> <td><code>correct</code></td> <td> <p>a logical indicating whether Yates' continuity correction should be applied where possible.</p> </td> </tr> </table> "	FALSE
"prop.trend.test"	"stats"	"Test for trend in proportions"	"<p>Performs chi-squared test for trend in proportions, i.e., a test asymptotically optimal for local alternatives where the log odds vary in proportion with <code>score</code>.  By default, <code>score</code> is chosen as the group numbers. </p>"	"<pre>prop.trend.test(x, n, score = seq_along(x)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p> Number of events </p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p> Number of trials </p> </td> </tr> <tr valign='top'> <td><code>score</code></td> <td> <p> Group score </p> </td> </tr> </table> "	FALSE
"Tukey"	"stats"	"The Studentized Range Distribution"	"<p>Functions of the distribution of the studentized range, <i>R/s</i>, where <i>R</i> is the range of a standard normal sample and <i>df*s^2</i> is independently distributed as chi-squared with <i>df</i> degrees of freedom, see <code>pchisq</code>. </p>"	"<pre>ptukey(q, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE) qtukey(p, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>q</code></td> <td> <p>vector of quantiles.</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>vector of probabilities.</p> </td> </tr> <tr valign='top'> <td><code>nmeans</code></td> <td> <p>sample size for range (same for each group).</p> </td> </tr> <tr valign='top'> <td><code>df</code></td> <td> <p>degrees of freedom for <i>s</i> (see below).</p> </td> </tr> <tr valign='top'> <td><code>nranges</code></td> <td> <p>number of <em>groups</em> whose <b>maximum</b> range is considered.</p> </td> </tr> <tr valign='top'> <td><code>log.p</code></td> <td> <p>logical; if TRUE, probabilities p are given as log(p).</p> </td> </tr> <tr valign='top'> <td><code>lower.tail</code></td> <td> <p>logical; if TRUE (default), probabilities are <i>P[X ≤ x]</i>, otherwise, <i>P[X &gt; x]</i>.</p> </td> </tr> </table> "	FALSE
"qqnorm"	"stats"	"Quantile-Quantile Plots"	"<p><code>qqnorm</code> is a generic function the default method of which produces a normal QQ plot of the values in <code>y</code>. <code>qqline</code> adds a line to a “theoretical”, by default normal, quantile-quantile plot which passes through the <code>probs</code> quantiles, by default the first and third quartiles. </p> <p><code>qqplot</code> produces a QQ plot of two datasets. </p> <p>Graphical parameters may be given as arguments to <code>qqnorm</code>, <code>qqplot</code> and <code>qqline</code>. </p>"	"<pre>qqnorm(y, ...) ## Default S3 method: qqnorm(y, ylim, main = 'Normal Q-Q Plot',<br />        xlab = 'Theoretical Quantiles', ylab = 'Sample Quantiles',<br />        plot.it = TRUE, datax = FALSE, ...)<br />qqline(y, datax = FALSE, distribution = qnorm,<br />        probs = c(0.25, 0.75), qtype = 7, ...)<br />qqplot(x, y, plot.it = TRUE, xlab = deparse(substitute(x)),<br />        ylab = deparse(substitute(y)), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>The first sample for <code>qqplot</code>.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>The second or only data sample.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab, main</code></td> <td> <p>plot labels.  The <code>xlab</code> and <code>ylab</code> refer to the y and x axes respectively if <code>datax = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>plot.it</code></td> <td> <p>logical. Should the result be plotted?</p> </td> </tr> <tr valign='top'> <td><code>datax</code></td> <td> <p>logical. Should data values be on the x-axis?</p> </td> </tr> <tr valign='top'> <td><code>distribution</code></td> <td> <p>quantile function for reference theoretical distribution.</p> </td> </tr> <tr valign='top'> <td><code>probs</code></td> <td> <p>numeric vector of length two, representing probabilities. Corresponding quantile pairs define the line drawn.</p> </td> </tr> <tr valign='top'> <td><code>qtype</code></td> <td> <p>the <code>type</code> of quantile computation used in <code>quantile</code>.</p> </td> </tr> <tr valign='top'> <td><code>ylim, ...</code></td> <td> <p>graphical parameters.</p> </td> </tr> </table> "	FALSE
"quade.test"	"stats"	"Quade Test"	"<p>Performs a Quade test with unreplicated blocked data. </p>"	"<pre>quade.test(y, ...)<br />## Default S3 method: quade.test(y, groups, blocks, ...)<br />## S3 method for class 'formula' quade.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>y</code></td> <td> <p>either a numeric vector of data values, or a data matrix.</p> </td> </tr> <tr valign='top'> <td><code>groups</code></td> <td> <p>a vector giving the group for the corresponding elements of <code>y</code> if this is a vector;  ignored if <code>y</code> is a matrix. If not a factor object, it is coerced to one.</p> </td> </tr> <tr valign='top'> <td><code>blocks</code></td> <td> <p>a vector giving the block for the corresponding elements of <code>y</code> if this is a vector;  ignored if <code>y</code> is a matrix. If not a factor object, it is coerced to one.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>a ~ b | c</code>, where <code>a</code>, <code>b</code> and <code>c</code> give the data values and corresponding groups and blocks, respectively.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"quantile"	"stats"	"Sample Quantiles"	"<p>The generic function <code>quantile</code> produces sample quantiles corresponding to the given probabilities. The smallest observation corresponds to a probability of 0 and the largest to a probability of 1. </p>"	"<pre>quantile(x, ...)<br />## Default S3 method: quantile(x, probs = seq(0, 1, 0.25), na.rm = FALSE,<br />          names = TRUE, type = 7, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric vector whose sample quantiles are wanted, or an object of a class for which a method has been defined (see also ‘details’). <code>NA</code> and <code>NaN</code> values are not allowed in numeric vectors unless <code>na.rm</code> is <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>probs</code></td> <td> <p>numeric vector of probabilities with values in <i>[0,1]</i>.  (Values up to <span class='samp'>2e-14</span> outside that range are accepted and moved to the nearby endpoint.)</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical; if true, any <code>NA</code> and <code>NaN</code>'s are removed from <code>x</code> before the quantiles are computed.</p> </td> </tr> <tr valign='top'> <td><code>names</code></td> <td> <p>logical; if true, the result has a <code>names</code> attribute.  Set to <code>FALSE</code> for speedup with many <code>probs</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>an integer between 1 and 9 selecting one of the nine quantile algorithms detailed below to be used.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"r2dtable"	"stats"	"Random 2-way Tables with Given Marginals"	"<p>Generate random 2-way tables with given marginals using Patefield's algorithm. </p>"	"<pre>r2dtable(n, r, c) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>a non-negative numeric giving the number of tables to be drawn.</p> </td> </tr> <tr valign='top'> <td><code>r</code></td> <td> <p>a non-negative vector of length at least 2 giving the row totals, to be coerced to <code>integer</code>.  Must sum to the same as <code>c</code>.</p> </td> </tr> <tr valign='top'> <td><code>c</code></td> <td> <p>a non-negative vector of length at least 2 giving the column totals, to be coerced to <code>integer</code>.</p> </td> </tr> </table> "	FALSE
"rect.hclust"	"stats"	"Draw Rectangles Around Hierarchical Clusters"	"<p>Draws rectangles around the branches of a dendrogram highlighting the corresponding clusters. First the dendrogram is cut at a certain level, then a rectangle is drawn around selected branches. </p>"	"<pre>rect.hclust(tree, k = NULL, which = NULL, x = NULL, h = NULL,<br />             border = 2, cluster = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>tree</code></td> <td> <p>an object of the type produced by <code>hclust</code>.</p> </td> </tr> <tr valign='top'> <td><code>k, h</code></td> <td> <p>Scalar. Cut the dendrogram such that either exactly <code>k</code> clusters are produced or by cutting at height <code>h</code>.</p> </td> </tr> <tr valign='top'> <td><code>which, x</code></td> <td> <p>A vector selecting the clusters around which a rectangle should be drawn. <code>which</code> selects clusters by number (from left to right in the tree), <code>x</code> selects clusters containing the respective horizontal coordinates. Default is <code>which = 1:k</code>.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>Vector with border colors for the rectangles.</p> </td> </tr> <tr valign='top'> <td><code>cluster</code></td> <td> <p>Optional vector with cluster memberships as returned by <code>cutree(hclust.obj, k = k)</code>, can be specified for efficiency if already computed.</p> </td> </tr> </table> "	FALSE
"relevel"	"stats"	"Reorder Levels of Factor"	"<p>The levels of a factor are re-ordered so that the level specified by <code>ref</code> is first and the others are moved down. This is useful for <code>contr.treatment</code> contrasts which take the first level as the reference. </p>"	"<pre>relevel(x, ref, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an unordered factor.</p> </td> </tr> <tr valign='top'> <td><code>ref</code></td> <td> <p>the reference level, typically a string.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments for future methods.</p> </td> </tr> </table> "	FALSE
"reorder.factor"	"stats"	"Reorder Levels of a Factor"	"<p><code>reorder</code> is a generic function.  The <code>'default'</code> method treats its first argument as a categorical variable, and reorders its levels based on the values of a second variable, usually numeric. </p>"	"<pre>reorder(x, ...)<br />## Default S3 method: reorder(x, X, FUN = mean, ...,<br />         order = is.ordered(x))<br /></pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an atomic vector, usually a <code>factor</code> (possibly ordered).  The vector is treated as a categorical variable whose levels will be reordered.  If <code>x</code> is not a factor, its unique values will be used as the implicit levels. </p> </td> </tr> <tr valign='top'> <td><code>X</code></td> <td> <p> a vector of the same length as <code>x</code>, whose subset of values for each unique level of <code>x</code> determines the eventual order of that level. </p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>a <code>function</code> whose first argument is a vector and returns a scalar, to be applied to each subset of <code>X</code> determined by the levels of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p> optional: extra arguments supplied to <code>FUN</code></p> </td> </tr> <tr valign='top'> <td><code>order</code></td> <td> <p> logical, whether return value will be an ordered factor rather than a factor. </p> </td> </tr> </table> "	FALSE
"reorder.dendrogram"	"stats"	"Reorder a Dendrogram"	"<p>A method for the generic function <code>reorder</code>. </p> <p>There are many different orderings of a dendrogram that are consistent with the structure imposed.  This function takes a dendrogram and a vector of values and reorders the dendrogram in the order of the supplied vector, maintaining the constraints on the dendrogram. </p>"	"<pre>## S3 method for class 'dendrogram' reorder(x, wts, agglo.FUN = sum, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the (dendrogram) object to be reordered</p> </td> </tr> <tr valign='top'> <td><code>wts</code></td> <td> <p>numeric weights (arbitrary values) for reordering.</p> </td> </tr> <tr valign='top'> <td><code>agglo.FUN</code></td> <td> <p>a function for weights agglomeration, see below.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments</p> </td> </tr> </table> "	FALSE
"replications"	"stats"	"Number of Replications of Terms"	"<p>Returns a vector or a list of the number of replicates for each term in the formula. </p>"	"<pre>replications(formula, data = NULL, na.action) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula or a terms object or a data frame.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data frame used  to  find  the  objects in <code>formula</code>.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>function for handling missing values.  Defaults to a <code>na.action</code> attribute of <code>data</code>, then a setting of the option <code>na.action</code>, or <code>na.fail</code> if that is not set.</p> </td> </tr> </table> "	FALSE
"reshape"	"stats"	"Reshape Grouped Data"	"<p>This function reshapes a data frame between ‘wide’ format with repeated measurements in separate columns of the same record and ‘long’ format with the repeated measurements in separate records. </p>"	"<pre>reshape(data, varying = NULL, v.names = NULL, timevar = 'time',<br />         idvar = 'id', ids = 1:NROW(data),<br />         times = seq_along(varying[[1]]),<br />         drop = NULL, direction, new.row.names = NULL,<br />         sep = '.',<br />         split = if (sep == '') {<br />             list(regexp = '[A-Za-z][0-9]', include = TRUE)<br />         } else {<br />             list(regexp = sep, include = FALSE, fixed = TRUE)}<br />         )<br /></pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>data</code></td> <td> <p>a data frame</p> </td> </tr> <tr valign='top'> <td><code>varying</code></td> <td> <p>names of sets of variables in the wide format that correspond to single variables in long format (‘time-varying’).  This is canonically a list of vectors of variable names, but it can optionally be a matrix of names, or a single vector of names.  In each case, the names can be replaced by indices which are interpreted as referring to <code>names(data)</code>. See ‘Details’ for more details and options.</p> </td> </tr> <tr valign='top'> <td><code>v.names</code></td> <td> <p>names of variables in the long format that correspond to multiple variables in the wide format.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>timevar</code></td> <td> <p>the variable in long format that differentiates multiple records from the same group or individual.  If more than one record matches, the first will be taken (with a warning). </p> </td> </tr> <tr valign='top'> <td><code>idvar</code></td> <td> <p>Names of one or more variables in long format that identify multiple records from the same group/individual.  These variables may also be present in wide format.</p> </td> </tr> <tr valign='top'> <td><code>ids</code></td> <td> <p>the values to use for a newly created <code>idvar</code> variable in long format.</p> </td> </tr> <tr valign='top'> <td><code>times</code></td> <td> <p>the values to use for a newly created <code>timevar</code> variable in long format.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>drop</code></td> <td> <p>a vector of names of variables to drop before reshaping.</p> </td> </tr> <tr valign='top'> <td><code>direction</code></td> <td> <p>character string, partially matched to either <code>'wide'</code> to reshape to wide format, or <code>'long'</code> to reshape to long format.</p> </td> </tr> <tr valign='top'> <td><code>new.row.names</code></td> <td> <p>character or <code>NULL</code>: a non-null value will be used for the row names of the result.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>A character vector of length 1, indicating a separating character in the variable names in the wide format.  This is used for guessing <code>v.names</code> and <code>times</code> arguments based on the names in <code>varying</code>.  If <code>sep == ''</code>, the split is just before the first numeral that follows an alphabetic character.  This is also used to create variable names when reshaping to wide format.</p> </td> </tr> <tr valign='top'> <td><code>split</code></td> <td> <p>A list with three components, <code>regexp</code>, <code>include</code>, and (optionally) <code>fixed</code>.  This allows an extended interface to variable name splitting.  See ‘Details’.</p> </td> </tr> </table> "	FALSE
"residuals"	"stats"	"Extract Model Residuals"	"<p><code>residuals</code> is a generic function which extracts model residuals from objects returned by modeling functions. </p> <p>The abbreviated form <code>resid</code> is an alias for <code>residuals</code>. It is intended to encourage users to access object components through an accessor function rather than by directly referencing an object slot. </p> <p>All object classes which are returned by model fitting functions should provide a <code>residuals</code> method.  (Note that the method is for <span class='samp'>residuals</span> and not <span class='samp'>resid</span>.) </p> <p>Methods can make use of <code>naresid</code> methods to compensate for the omission of missing values.  The default, <code>nls</code> and <code>smooth.spline</code> methods do. </p>"	"<pre>residuals(object, ...) resid(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object for which the extraction of model residuals is meaningful.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other arguments.</p> </td> </tr> </table> "	FALSE
"runmed"	"stats"	"Running Medians – Robust Scatter Plot Smoothing"	"<p>Compute running medians of odd span.  This is the ‘most robust’ scatter plot smoothing possible.  For efficiency (and historical reason), you can use one of two different algorithms giving identical results. </p>"	"<pre>runmed(x, k, endrule = c('median', 'keep', 'constant'),<br />        algorithm = NULL, print.level = 0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric vector, the ‘dependent’ variable to be smoothed.</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>integer width of median window; must be odd.  Turlach had a default of <code>k &lt;- 1 + 2 * min((n-1)%/% 2, ceiling(0.1*n))</code>. Use <code>k = 3</code> for ‘minimal’ robust smoothing eliminating isolated outliers.</p> </td> </tr> <tr valign='top'> <td><code>endrule</code></td> <td> <p>character string indicating how the values at the beginning and the end (of the data) should be treated. Can be abbreviated.  Possible values are: </p><br /><dl> <dt><code>'keep'</code></dt> <dd> <p>keeps the first and last <i>k2</i> values at both ends, where <i>k2</i> is the half-bandwidth <code>k2 = k %/% 2</code>, i.e., <code>y[j] = x[j]</code> for <i>j = 1, …, k2 and (n-k2+1), …, n</i>;</p> </dd> <dt><code>'constant'</code></dt> <dd> <p>copies <code>median(y[1:k2])</code> to the first values and analogously for the last ones making the smoothed ends <em>constant</em>;</p> </dd> <dt><code>'median'</code></dt> <dd> <p>the default, smooths the ends by using symmetrical medians of subsequently smaller bandwidth, but for the very first and last value where Tukey's robust end-point rule is applied, see <code>smoothEnds</code>.</p> </dd> </dl> </td> </tr> <tr valign='top'> <td><code>algorithm</code></td> <td> <p>character string (partially matching <code>'Turlach'</code> or <code>'Stuetzle'</code>) or the default <code>NULL</code>, specifying which algorithm should be applied.  The default choice depends on <code>n = length(x)</code> and <code>k</code> where <code>'Turlach'</code> will be used for larger problems.</p> </td> </tr> <tr valign='top'> <td><code>print.level</code></td> <td> <p>integer, indicating verboseness of algorithm; should rarely be changed by average users.</p> </td> </tr> </table> "	FALSE
"rWishart"	"stats"	"Random Wishart Distributed Matrices"	"<p>Generate <code>n</code> random matrices, distributed according to the Wishart distribution with parameters <code>Sigma</code> and <code>df</code>, <i>W_p(Sigma, df)</i>. </p>"	"<pre>rWishart(n, df, Sigma) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>integer sample size.</p> </td> </tr> <tr valign='top'> <td><code>df</code></td> <td> <p>numeric parameter, “degrees of freedom”.</p> </td> </tr> <tr valign='top'> <td><code>Sigma</code></td> <td> <p>positive definite (<i>p * p</i>) “scale” matrix, the matrix parameter of the distribution.</p> </td> </tr> </table> "	FALSE
"screeplot"	"stats"	"Screeplots"	"<p><code>screeplot.default</code> plots the variances against the number of the principal component. This is also the <code>plot</code> method for classes <code>'princomp'</code> and <code>'prcomp'</code>. </p>"	"<pre>## Default S3 method: screeplot(x, npcs = min(10, length(x$sdev)),<br />           type = c('barplot', 'lines'),<br />           main = deparse(substitute(x)), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object containing a <code>sdev</code> component, such as that returned by <code>princomp()</code> and <code>prcomp()</code>.</p> </td> </tr> <tr valign='top'> <td><code>npcs</code></td> <td> <p>the number of components to be plotted.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the type of plot.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>main, ...</code></td> <td> <p>graphics parameters.</p> </td> </tr> </table> "	FALSE
"sd"	"stats"	"Standard Deviation"	"<p>This function computes the standard deviation of the values in <code>x</code>. If <code>na.rm</code> is <code>TRUE</code> then missing values are removed before computation proceeds. </p>"	"<pre>sd(x, na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector or an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object which is coercible to one by <code>as.double(x)</code>.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical.  Should missing values be removed?</p> </td> </tr> </table> "	FALSE
"se.contrast"	"stats"	"Standard Errors for Contrasts in Model Terms"	"<p>Returns the standard errors for one or more contrasts in an <code>aov</code> object. </p>"	"<pre>se.contrast(object, ...) ## S3 method for class 'aov' se.contrast(object, contrast.obj,<br />            coef = contr.helmert(ncol(contrast))[, 1],<br />            data = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>A suitable fit, usually from <code>aov</code>.</p> </td> </tr> <tr valign='top'> <td><code>contrast.obj</code></td> <td> <p>The contrasts for which standard errors are requested.  This can be specified via a list or via a matrix.  A single contrast can be specified by a list of logical vectors giving the cells to be contrasted.  Multiple contrasts should be specified by a matrix, each column of which is a numerical contrast vector (summing to zero). </p> </td> </tr> <tr valign='top'> <td><code>coef</code></td> <td> <p>used when <code>contrast.obj</code> is a list; it should be a vector of the same length as the list with zero sum.  The default value is the first Helmert contrast, which contrasts the first and second cell means specified by the list.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>The data frame used to evaluate <code>contrast.obj</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"selfStart"	"stats"	"Construct Self-starting Nonlinear Models"	"<p>Construct self-starting nonlinear models. </p>"	"<pre>selfStart(model, initial, parameters, template) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>model</code></td> <td> <p>a function object defining a nonlinear model or a nonlinear formula object of the form <code>~expression</code>.</p> </td> </tr> <tr valign='top'> <td><code>initial</code></td> <td> <p>a function object, taking three arguments: <code>mCall</code>, <code>data</code>, and <code>LHS</code>, representing, respectively, a matched call to the function <code>model</code>, a data frame in which to interpret the variables in <code>mCall</code>, and the expression from the left-hand side of the model formula in the call to <code>nls</code>. This function should return initial values for the parameters in <code>model</code>.</p> </td> </tr> <tr valign='top'> <td><code>parameters</code></td> <td> <p>a character vector specifying the terms on the right hand side of <code>model</code> for which initial estimates should be calculated.  Passed as the <code>namevec</code> argument to the <code>deriv</code> function.</p> </td> </tr> <tr valign='top'> <td><code>template</code></td> <td> <p>an optional prototype for the calling sequence of the returned object, passed as the <code>function.arg</code> argument to the <code>deriv</code> function.  By default, a template is generated with the covariates in <code>model</code> coming first and the parameters in <code>model</code> coming last in the calling sequence.</p> </td> </tr> </table> "	FALSE
"setNames"	"stats"	"Set the Names in an Object"	"<p>This is a convenience function that sets the names on an object and returns the object.  It is most useful at the end of a function definition where one is creating the object to be returned and would prefer not to store it under a name just so the names can be assigned. </p>"	"<pre>setNames(object = nm, nm) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object for which a <code>names</code> attribute will be meaningful </p> </td> </tr> <tr valign='top'> <td><code>nm</code></td> <td> <p>a character vector of names to assign to the object</p> </td> </tr> </table> "	FALSE
"shapiro.test"	"stats"	"Shapiro-Wilk Normality Test"	"<p>Performs the Shapiro-Wilk test of normality. </p>"	"<pre>shapiro.test(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector of data values. Missing values are allowed, but the number of non-missing values must be between 3 and 5000.</p> </td> </tr></table> "	FALSE
"sigma"	"stats"	"Extract Residual Standard Deviation 'Sigma'"	"<p>Extract the estimated standard deviation of the errors, the “residual standard deviation” (misnomed also “residual standard error”, e.g., in <code>summary.lm()</code>'s output, from a fitted model). </p> <p>Many classical statistical models have a <em>scale parameter</em>, typically the standard deviation of a zero-mean normal (or Gaussian) random variable which is denoted as <i>σ</i>. <code>sigma(.)</code> extracts the <em>estimated</em> parameter from a fitted model, i.e., <i>sigma^</i>. </p>"	"<pre>sigma(object, ...)<br />## Default S3 method: sigma(object, use.fallback = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically resulting from a model fitting function such as <code>lm</code>.</p> </td> </tr> <tr valign='top'> <td><code>use.fallback</code></td> <td> <p>logical, passed to <code>nobs</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>potentially further arguments passed to and from methods.  Passed to <code>deviance(*, ...)</code> for the default method.</p> </td> </tr> </table> "	FALSE
"simulate"	"stats"	"Simulate Responses"	"<p>Simulate one or more responses from the distribution corresponding to a fitted model object. </p>"	"<pre>simulate(object, nsim = 1, seed = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object representing a fitted model.</p> </td> </tr> <tr valign='top'> <td><code>nsim</code></td> <td> <p>number of response vectors to simulate.  Defaults to <code>1</code>.</p> </td> </tr> <tr valign='top'> <td><code>seed</code></td> <td> <p>an object specifying if and how the random number generator should be initialized (‘seeded’).<br> For the 'lm' method, either <code>NULL</code> or an integer that will be used in a call to <code>set.seed</code> before simulating the response vectors.  If set, the value is saved as the <code>'seed'</code> attribute of the returned value.  The default, <code>NULL</code> will not change the random generator state, and return <code>.Random.seed</code> as the <code>'seed'</code> attribute, see ‘Value’. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional optional arguments.</p> </td> </tr> </table> "	FALSE
"smooth"	"stats"	"Tukey's (Running Median) Smoothing"	"<p>Tukey's smoothers, <em>3RS3R</em>, <em>3RSS</em>, <em>3R</em>, etc. </p>"	"<pre>smooth(x, kind = c('3RS3R', '3RSS', '3RSR', '3R', '3', 'S'),<br />        twiceit = FALSE, endrule = c('Tukey', 'copy'), do.ends = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector or time series</p> </td> </tr> <tr valign='top'> <td><code>kind</code></td> <td> <p>a character string indicating the kind of smoother required; defaults to <code>'3RS3R'</code>.</p> </td> </tr> <tr valign='top'> <td><code>twiceit</code></td> <td> <p>logical, indicating if the result should be ‘twiced’. Twicing a smoother <i>S(y)</i> means <i>S(y) + S(y - S(y))</i>, i.e., adding smoothed residuals to the smoothed values.  This decreases bias (increasing variance).</p> </td> </tr> <tr valign='top'> <td><code>endrule</code></td> <td> <p>a character string indicating the rule for smoothing at the boundary.  Either <code>'Tukey'</code> (default) or <code>'copy'</code>.</p> </td> </tr> <tr valign='top'> <td><code>do.ends</code></td> <td> <p>logical, indicating if the 3-splitting of ties should also happen at the boundaries (ends).  This is only used for <code>kind = 'S'</code>.</p> </td> </tr> </table> "	FALSE
"smooth.spline"	"stats"	"Fit a Smoothing Spline"	"<p>Fits a cubic smoothing spline to the supplied data. </p>"	"<pre>smooth.spline(x, y = NULL, w = NULL, df, spar = NULL, cv = FALSE,<br />               all.knots = FALSE, nknots = .nknots.smspl,<br />               keep.data = TRUE, df.offset = 0, penalty = 1,<br />               control.spar = list(), tol = 1e-6 * IQR(x)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector giving the values of the predictor variable, or  a list or a two-column matrix specifying x and y. </p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>responses. If <code>y</code> is missing or <code>NULL</code>, the responses are assumed to be specified by <code>x</code>, with <code>x</code> the index vector.</p> </td> </tr> <tr valign='top'> <td><code>w</code></td> <td> <p>optional vector of weights of the same length as <code>x</code>; defaults to all 1.</p> </td> </tr> <tr valign='top'> <td><code>df</code></td> <td> <p>the desired equivalent number of degrees of freedom (trace of the smoother matrix).  Must be in <i>(1,nx]</i>, <i>nx</i> the number of unique x values, see below.</p> </td> </tr> <tr valign='top'> <td><code>spar</code></td> <td> <p>smoothing parameter, typically (but not necessarily) in <i>(0,1]</i>.  The coefficient <i>λ</i> of the integral of the squared second derivative in the fit (penalized log likelihood) criterion is a monotone function of <code>spar</code>, see the details below.</p> </td> </tr> <tr valign='top'> <td><code>cv</code></td> <td> <p>ordinary (<code>TRUE</code>) or ‘generalized’ cross-validation (GCV) when <code>FALSE</code>; is used for smoothing parameter computation only when <code>df</code> is not specified; it is used however to determine <code>cv.crit</code> in the result.  Setting it to <code>NA</code> for speedup skips the evaluation of leverages and any score.</p> </td> </tr> <tr valign='top'> <td><code>all.knots</code></td> <td> <p>if <code>TRUE</code>, all distinct points in <code>x</code> are used as knots.  If <code>FALSE</code> (default), a subset of <code>x[]</code> is used, specifically <code>x[j]</code> where the <code>nknots</code> indices are evenly spaced in <code>1:n</code>, see also the next argument <code>nknots</code>.</p> </td> </tr> <tr valign='top'> <td><code>nknots</code></td> <td> <p>integer or <code>function</code> giving the number of knots to use when <code>all.knots = FALSE</code>.  If a function (as by default), the number of knots is <code>nknots(nx)</code>.  By default for <i>nx &gt; 49</i> this is less than <i>nx</i>, the number of unique <code>x</code> values, see the Note.</p> </td> </tr> <tr valign='top'> <td><code>keep.data</code></td> <td> <p>logical specifying if the input data should be kept in the result.  If <code>TRUE</code> (as per default), fitted values and residuals are available from the result.</p> </td> </tr> <tr valign='top'> <td><code>df.offset</code></td> <td> <p>allows the degrees of freedom to be increased by <code>df.offset</code> in the GCV criterion.</p> </td> </tr> <tr valign='top'> <td><code>penalty</code></td> <td> <p>the coefficient of the penalty for degrees of freedom in the GCV criterion.</p> </td> </tr> <tr valign='top'> <td><code>control.spar</code></td> <td> <p>optional list with named components controlling the root finding when the smoothing parameter <code>spar</code> is computed, i.e., missing or <code>NULL</code>, see below. </p> <p><b>Note</b> that this is partly <em>experimental</em> and may change with general spar computation improvements! </p><br /><dl> <dt>low:</dt> <dd> <p>lower bound for <code>spar</code>; defaults to -1.5 (used to implicitly default to 0 in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> versions earlier than 1.4).</p> </dd> <dt>high:</dt> <dd> <p>upper bound for <code>spar</code>; defaults to +1.5.</p> </dd> <dt>tol:</dt> <dd> <p>the absolute precision (<b>tol</b>erance) used; defaults to 1e-4 (formerly 1e-3).</p> </dd> <dt>eps:</dt> <dd> <p>the relative precision used; defaults to 2e-8 (formerly 0.00244).</p> </dd> <dt>trace:</dt> <dd> <p>logical indicating if iterations should be traced.</p> </dd> <dt>maxit:</dt> <dd> <p>integer giving the maximal number of iterations; defaults to 500.</p> </dd> </dl> <p>Note that <code>spar</code> is only searched for in the interval <i>[low, high]</i>. </p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>a tolerance for same-ness or uniqueness of the <code>x</code> values.  The values are binned into bins of size <code>tol</code> and values which fall into the same bin are regarded as the same.  Must be strictly positive (and finite).</p> </td> </tr> </table> "	FALSE
"smoothEnds"	"stats"	"End Points Smoothing (for Running Medians)"	"<p>Smooth end points of a vector <code>y</code> using subsequently smaller medians and Tukey's end point rule at the very end. (of odd span), </p>"	"<pre>smoothEnds(y, k = 3) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>y</code></td> <td> <p>dependent variable to be smoothed (vector).</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>width of largest median window; must be odd.</p> </td> </tr> </table> "	FALSE
"sortedXyData"	"stats"	"Create a sortedXyData Object"	"<p>This is a constructor function for the class of <code>sortedXyData</code> objects.  These objects are mostly used in the <code>initial</code> function for a self-starting nonlinear regression model, which will be of the <code>selfStart</code> class. </p>"	"<pre>sortedXyData(x, y, data) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p> a numeric vector or an expression that will evaluate in <code>data</code> to a numeric vector </p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p> a numeric vector or an expression that will evaluate in <code>data</code> to a numeric vector </p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p> an optional data frame in which to evaluate expressions for <code>x</code> and <code>y</code>, if they are given as expressions </p> </td> </tr> </table> "	FALSE
"spectrum"	"stats"	"Spectral Density Estimation"	"<p>The <code>spectrum</code> function estimates the spectral density of a time series. </p>"	"<pre>spectrum(x, ..., method = c('pgram', 'ar')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A univariate or multivariate time series.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>String specifying the method used to estimate the spectral density.  Allowed methods are <code>'pgram'</code> (the default) and <code>'ar'</code>.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to specific spec methods or <code>plot.spec</code>.</p> </td> </tr> </table> "	FALSE
"spec.ar"	"stats"	"Estimate Spectral Density of a Time Series from AR Fit"	"<p>Fits an AR model to <code>x</code> (or uses the existing fit) and computes (and by default plots) the spectral density of the fitted model. </p>"	"<pre>spec.ar(x, n.freq, order = NULL, plot = TRUE, na.action = na.fail,<br />         method = 'yule-walker', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A univariate (not yet:or multivariate) time series or the result of a fit by <code>ar</code>.</p> </td> </tr> <tr valign='top'> <td><code>n.freq</code></td> <td> <p>The number of points at which to plot.</p> </td> </tr> <tr valign='top'> <td><code>order</code></td> <td> <p>The order of the AR model to be fitted.  If omitted, the order is chosen by AIC.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>Plot the periodogram?</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p><code>NA</code> action function.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p><code>method</code> for <code>ar</code> fit.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Graphical arguments passed to <code>plot.spec</code>.</p> </td> </tr> </table> "	FALSE
"spec.pgram"	"stats"	"Estimate Spectral Density of a Time Series by a SmoothedPeriodogram"	"<p><code>spec.pgram</code> calculates the periodogram using a fast Fourier transform, and optionally smooths the result with a series of modified Daniell smoothers (moving averages giving half weight to the end values). </p>"	"<pre>spec.pgram(x, spans = NULL, kernel, taper = 0.1,<br />            pad = 0, fast = TRUE, demean = FALSE, detrend = TRUE,<br />            plot = TRUE, na.action = na.fail, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>univariate or multivariate time series.</p> </td> </tr> <tr valign='top'> <td><code>spans</code></td> <td> <p>vector of odd integers giving the widths of modified Daniell smoothers to be used to smooth the periodogram.</p> </td> </tr> <tr valign='top'> <td><code>kernel</code></td> <td> <p>alternatively, a kernel smoother of class <code>'tskernel'</code>.</p> </td> </tr> <tr valign='top'> <td><code>taper</code></td> <td> <p>specifies the proportion of data to taper.  A split cosine bell taper is applied to this proportion of the data at the beginning and end of the series.</p> </td> </tr> <tr valign='top'> <td><code>pad</code></td> <td> <p>proportion of data to pad. Zeros are added to the end of the series to increase its length by the proportion <code>pad</code>.</p> </td> </tr> <tr valign='top'> <td><code>fast</code></td> <td> <p>logical; if <code>TRUE</code>, pad the series to a highly composite length.</p> </td> </tr> <tr valign='top'> <td><code>demean</code></td> <td> <p>logical. If <code>TRUE</code>, subtract the mean of the series.</p> </td> </tr> <tr valign='top'> <td><code>detrend</code></td> <td> <p>logical. If <code>TRUE</code>, remove a linear trend from the series. This will also remove the mean.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>plot the periodogram?</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p><code>NA</code> action function.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical arguments passed to <code>plot.spec</code>.</p> </td> </tr> </table> "	FALSE
"spec.taper"	"stats"	"Taper a Time Series by a Cosine Bell"	"<p>Apply a cosine-bell taper to a time series. </p>"	"<pre>spec.taper(x, p = 0.1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A univariate or multivariate time series</p> </td> </tr> <tr valign='top'> <td><code>p</code></td> <td> <p>The proportion to be tapered at each end of the series, either a scalar (giving the proportion for all series) or a vector of the length of the number of series (giving the proportion for each series..</p> </td> </tr> </table> "	FALSE
"splinefun"	"stats"	"Interpolating Splines"	"<p>Perform cubic (or Hermite) spline interpolation of given data points, returning either a list of points obtained by the interpolation or a <em>function</em> performing the interpolation. </p>"	"<pre>splinefun(x, y = NULL,<br />           method = c('fmm', 'periodic', 'natural', 'monoH.FC', 'hyman'),<br />           ties = mean)<br />spline(x, y = NULL, n = 3*length(x), method = 'fmm',<br />        xmin = min(x), xmax = max(x), xout, ties = mean)<br />splinefunH(x, y, m) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>vectors giving the coordinates of the points to be interpolated.  Alternatively a single plotting structure can be specified: see <code>xy.coords</code>. </p> <p><code>y</code> must be increasing or decreasing for <code>method = 'hyman'</code>. </p> </td> </tr> <tr valign='top'> <td><code>m</code></td> <td> <p>(for <code>splinefunH()</code>): vector of <em>slopes</em> <i>m[i]</i> at the points <i>(x[i],y[i])</i>; these together determine the <b>H</b>ermite “spline” which is piecewise cubic, (only) <em>once</em> differentiable continuously.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>specifies the type of spline to be used.  Possible values are <code>'fmm'</code>, <code>'natural'</code>, <code>'periodic'</code>, <code>'monoH.FC'</code> and <code>'hyman'</code>.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>if <code>xout</code> is left unspecified, interpolation takes place at <code>n</code> equally spaced points spanning the interval [<code>xmin</code>, <code>xmax</code>].</p> </td> </tr> <tr valign='top'> <td><code>xmin, xmax</code></td> <td> <p>left-hand and right-hand endpoint of the interpolation interval (when <code>xout</code> is unspecified).</p> </td> </tr> <tr valign='top'> <td><code>xout</code></td> <td> <p>an optional set of values specifying where interpolation is to take place.</p> </td> </tr> <tr valign='top'> <td><code>ties</code></td> <td> <p>Handling of tied <code>x</code> values.  Either a function with a single vector argument returning a single number result or the string <code>'ordered'</code>.</p> </td> </tr> </table> "	FALSE
"SSasymp"	"stats"	"Self-Starting Nls Asymptotic Regression Model"	"<p>This <code>selfStart</code> model evaluates the asymptotic regression function and its gradient.  It has an <code>initial</code> attribute that will evaluate initial estimates of the parameters <code>Asym</code>, <code>R0</code>, and <code>lrc</code> for a given set of data. </p>"	"<pre>SSasymp(input, Asym, R0, lrc) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>input</code></td> <td> <p>a numeric vector of values at which to evaluate the model.</p> </td> </tr> <tr valign='top'> <td><code>Asym</code></td> <td> <p>a numeric parameter representing the horizontal asymptote on the right side (very large values of <code>input</code>).</p> </td> </tr> <tr valign='top'> <td><code>R0</code></td> <td> <p>a numeric parameter representing the response when <code>input</code> is zero.</p> </td> </tr> <tr valign='top'> <td><code>lrc</code></td> <td> <p>a numeric parameter representing the natural logarithm of the rate constant.</p> </td> </tr> </table> "	FALSE
"SSasympOff"	"stats"	"Self-Starting Nls Asymptotic Regression Model with an Offset"	"<p>This <code>selfStart</code> model evaluates an alternative parametrization of the asymptotic regression function and the gradient with respect to those parameters. It has an <code>initial</code> attribute that creates initial estimates of the parameters <code>Asym</code>, <code>lrc</code>, and <code>c0</code>. </p>"	"<pre>SSasympOff(input, Asym, lrc, c0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>input</code></td> <td> <p>a numeric vector of values at which to evaluate the model.</p> </td> </tr> <tr valign='top'> <td><code>Asym</code></td> <td> <p>a numeric parameter representing the horizontal asymptote on the right side (very large values of <code>input</code>).</p> </td> </tr> <tr valign='top'> <td><code>lrc</code></td> <td> <p>a numeric parameter representing the natural logarithm of the rate constant.</p> </td> </tr> <tr valign='top'> <td><code>c0</code></td> <td> <p>a numeric parameter representing the <code>input</code> for which the response is zero.</p> </td> </tr> </table> "	FALSE
"SSasympOrig"	"stats"	"Self-Starting Nls Asymptotic Regression Model through the Origin"	"<p>This <code>selfStart</code> model evaluates the asymptotic regression function through the origin and its gradient.  It has an <code>initial</code> attribute that will evaluate initial estimates of the parameters <code>Asym</code> and <code>lrc</code> for a given set of data. </p>"	"<pre>SSasympOrig(input, Asym, lrc) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>input</code></td> <td> <p>a numeric vector of values at which to evaluate the model.</p> </td> </tr> <tr valign='top'> <td><code>Asym</code></td> <td> <p>a numeric parameter representing the horizontal asymptote.</p> </td> </tr> <tr valign='top'> <td><code>lrc</code></td> <td> <p>a numeric parameter representing the natural logarithm of the rate constant.</p> </td> </tr> </table> "	FALSE
"SSbiexp"	"stats"	"Self-Starting Nls Biexponential model"	"<p>This <code>selfStart</code> model evaluates the biexponential model function and its gradient.  It has an <code>initial</code> attribute that creates initial estimates of the parameters <code>A1</code>, <code>lrc1</code>, <code>A2</code>, and <code>lrc2</code>. </p>"	"<pre>SSbiexp(input, A1, lrc1, A2, lrc2) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>input</code></td> <td> <p>a numeric vector of values at which to evaluate the model.</p> </td> </tr> <tr valign='top'> <td><code>A1</code></td> <td> <p>a numeric parameter representing the multiplier of the first exponential.</p> </td> </tr> <tr valign='top'> <td><code>lrc1</code></td> <td> <p>a numeric parameter representing the natural logarithm of the rate constant of the first exponential.</p> </td> </tr> <tr valign='top'> <td><code>A2</code></td> <td> <p>a numeric parameter representing the multiplier of the second exponential.</p> </td> </tr> <tr valign='top'> <td><code>lrc2</code></td> <td> <p>a numeric parameter representing the natural logarithm of the rate constant of the second exponential.</p> </td> </tr> </table> "	FALSE
"SSfol"	"stats"	"Self-Starting Nls First-order Compartment Model"	"<p>This <code>selfStart</code> model evaluates the first-order compartment function and its gradient.  It has an <code>initial</code> attribute that creates initial estimates of the parameters <code>lKe</code>, <code>lKa</code>, and <code>lCl</code>. </p>"	"<pre>SSfol(Dose, input, lKe, lKa, lCl) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>Dose</code></td> <td> <p>a numeric value representing the initial dose.</p> </td> </tr> <tr valign='top'> <td><code>input</code></td> <td> <p>a numeric vector at which to evaluate the model.</p> </td> </tr> <tr valign='top'> <td><code>lKe</code></td> <td> <p>a numeric parameter representing the natural logarithm of the elimination rate constant.</p> </td> </tr> <tr valign='top'> <td><code>lKa</code></td> <td> <p>a numeric parameter representing the natural logarithm of the absorption rate constant.</p> </td> </tr> <tr valign='top'> <td><code>lCl</code></td> <td> <p>a numeric parameter representing the natural logarithm of the clearance.</p> </td> </tr> </table> "	FALSE
"SSfpl"	"stats"	"Self-Starting Nls Four-Parameter Logistic Model"	"<p>This <code>selfStart</code> model evaluates the four-parameter logistic function and its gradient.  It has an <code>initial</code> attribute that will evaluate initial estimates of the parameters <code>A</code>, <code>B</code>, <code>xmid</code>, and <code>scal</code> for a given set of data. </p>"	"<pre>SSfpl(input, A, B, xmid, scal) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>input</code></td> <td> <p>a numeric vector of values at which to evaluate the model.</p> </td> </tr> <tr valign='top'> <td><code>A</code></td> <td> <p>a numeric parameter representing the horizontal asymptote on the left side (very small values of <code>input</code>).</p> </td> </tr> <tr valign='top'> <td><code>B</code></td> <td> <p>a numeric parameter representing the horizontal asymptote on the right side (very large values of <code>input</code>).</p> </td> </tr> <tr valign='top'> <td><code>xmid</code></td> <td> <p>a numeric parameter representing the <code>input</code> value at the inflection point of the curve.  The value of <code>SSfpl</code> will be midway between <code>A</code> and <code>B</code> at <code>xmid</code>.</p> </td> </tr> <tr valign='top'> <td><code>scal</code></td> <td> <p>a numeric scale parameter on the <code>input</code> axis.</p> </td> </tr> </table> "	FALSE
"SSgompertz"	"stats"	"Self-Starting Nls Gompertz Growth Model"	"<p>This <code>selfStart</code> model evaluates the Gompertz growth model and its gradient.  It has an <code>initial</code> attribute that creates initial estimates of the parameters <code>Asym</code>, <code>b2</code>, and <code>b3</code>. </p>"	"<pre>SSgompertz(x, Asym, b2, b3) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector of values at which to evaluate the model.</p> </td> </tr> <tr valign='top'> <td><code>Asym</code></td> <td> <p>a numeric parameter representing the asymptote.</p> </td> </tr> <tr valign='top'> <td><code>b2</code></td> <td> <p>a numeric parameter related to the value of the function at <code>x = 0</code></p> </td> </tr> <tr valign='top'> <td><code>b3</code></td> <td> <p>a numeric parameter related to the scale the <code>x</code> axis.</p> </td> </tr> </table> "	FALSE
"SSlogis"	"stats"	"Self-Starting Nls Logistic Model"	"<p>This <code>selfStart</code> model evaluates the logistic function and its gradient.  It has an <code>initial</code> attribute that creates initial estimates of the parameters <code>Asym</code>, <code>xmid</code>, and <code>scal</code>. </p>"	"<pre>SSlogis(input, Asym, xmid, scal) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>input</code></td> <td> <p>a numeric vector of values at which to evaluate the model.</p> </td> </tr> <tr valign='top'> <td><code>Asym</code></td> <td> <p>a numeric parameter representing the asymptote.</p> </td> </tr> <tr valign='top'> <td><code>xmid</code></td> <td> <p>a numeric parameter representing the <code>x</code> value at the inflection point of the curve.  The value of <code>SSlogis</code> will be <code>Asym/2</code> at <code>xmid</code>.</p> </td> </tr> <tr valign='top'> <td><code>scal</code></td> <td> <p>a numeric scale parameter on the <code>input</code> axis.</p> </td> </tr> </table> "	FALSE
"SSmicmen"	"stats"	"Self-Starting Nls Michaelis-Menten Model"	"<p>This <code>selfStart</code> model evaluates the Michaelis-Menten model and its gradient.  It has an <code>initial</code> attribute that will evaluate initial estimates of the parameters <code>Vm</code> and <code>K</code> </p>"	"<pre>SSmicmen(input, Vm, K) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>input</code></td> <td> <p>a numeric vector of values at which to evaluate the model.</p> </td> </tr> <tr valign='top'> <td><code>Vm</code></td> <td> <p>a numeric parameter representing the maximum value of the response.</p> </td> </tr> <tr valign='top'> <td><code>K</code></td> <td> <p>a numeric parameter representing the <code>input</code> value at which half the maximum response is attained.  In the field of enzyme kinetics this is called the Michaelis parameter.</p> </td> </tr> </table> "	FALSE
"SSweibull"	"stats"	"Self-Starting Nls Weibull Growth Curve Model"	"<p>This <code>selfStart</code> model evaluates the Weibull model for growth curve data and its gradient.  It has an <code>initial</code> attribute that will evaluate initial estimates of the parameters <code>Asym</code>, <code>Drop</code>, <code>lrc</code>, and <code>pwr</code> for a given set of data. </p>"	"<pre>SSweibull(x, Asym, Drop, lrc, pwr) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector of values at which to evaluate the model.</p> </td> </tr> <tr valign='top'> <td><code>Asym</code></td> <td> <p>a numeric parameter representing the horizontal asymptote on the right side (very small values of <code>x</code>).</p> </td> </tr> <tr valign='top'> <td><code>Drop</code></td> <td> <p>a numeric parameter representing the change from <code>Asym</code> to the <code>y</code> intercept.</p> </td> </tr> <tr valign='top'> <td><code>lrc</code></td> <td> <p>a numeric parameter representing the natural logarithm of the rate constant.</p> </td> </tr> <tr valign='top'> <td><code>pwr</code></td> <td> <p>a numeric parameter representing the power to which <code>x</code> is raised.</p> </td> </tr> </table> "	FALSE
"stat.anova"	"stats"	"GLM Anova Statistics"	"<p>This is a utility function, used in <code>lm</code> and <code>glm</code> methods for <code>anova(..., test != NULL)</code> and should not be used by the average user. </p>"	"<pre>stat.anova(table, test = c('Rao','LRT', 'Chisq', 'F', 'Cp'),<br />            scale, df.scale, n) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>table</code></td> <td> <p>numeric matrix as results from <code>anova.glm(..., test = NULL)</code>.</p> </td> </tr> <tr valign='top'> <td><code>test</code></td> <td> <p>a character string, partially matching one of <code>'Rao'</code>, <code>'LRT'</code>, <code>'Chisq'</code>, <code>'F'</code> or <code>'Cp'</code>.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>a residual mean square or other scale estimate to be used as the denominator in an F test.</p> </td> </tr> <tr valign='top'> <td><code>df.scale</code></td> <td> <p>degrees of freedom corresponding to <code>scale</code>.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of observations.</p> </td> </tr> </table> "	FALSE
"step"	"stats"	"Choose a model by AIC in a Stepwise Algorithm"	"<p>Select a formula-based model by AIC. </p>"	"<pre>step(object, scope, scale = 0,<br />      direction = c('both', 'backward', 'forward'),<br />      trace = 1, keep = NULL, steps = 1000, k = 2, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td><br /><p>an object representing a model of an appropriate class (mainly <code>'lm'</code> and <code>'glm'</code>). This is used as the initial model in the stepwise search. </p> </td> </tr> <tr valign='top'> <td><code>scope</code></td> <td><br /><p>defines the range of models examined in the stepwise search. This should be either a single formula, or a list containing components <code>upper</code> and <code>lower</code>, both formulae.  See the details for how to specify the formulae and how they are used. </p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td><br /><p>used in the definition of the AIC statistic for selecting the models, currently only for <code>lm</code>, <code>aov</code> and <code>glm</code> models.  The default value, <code>0</code>, indicates the scale should be estimated: see <code>extractAIC</code>. </p> </td> </tr> <tr valign='top'> <td><code>direction</code></td> <td><br /><p>the mode of stepwise search, can be one of <code>'both'</code>, <code>'backward'</code>, or <code>'forward'</code>, with a default of <code>'both'</code>. If the <code>scope</code> argument is missing the default for <code>direction</code> is <code>'backward'</code>.  Values can be abbreviated. </p> </td> </tr> <tr valign='top'> <td><code>trace</code></td> <td><br /><p>if positive, information is printed during the running of <code>step</code>. Larger values may give more detailed information. </p> </td> </tr> <tr valign='top'> <td><code>keep</code></td> <td><br /><p>a filter function whose input is a fitted model object and the associated <code>AIC</code> statistic, and whose output is arbitrary. Typically <code>keep</code> will select a subset of the components of the object and return them. The default is not to keep anything. </p> </td> </tr> <tr valign='top'> <td><code>steps</code></td> <td><br /><p>the maximum number of steps to be considered.  The default is 1000 (essentially as many as required).  It is typically used to stop the process early. </p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td><br /><p>the multiple of the number of degrees of freedom used for the penalty. Only <code>k = 2</code> gives the genuine AIC: <code>k = log(n)</code> is sometimes referred to as BIC or SBC. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td><br /><p>any additional arguments to <code>extractAIC</code>. </p> </td> </tr> </table> "	FALSE
"stl"	"stats"	"Seasonal Decomposition of Time Series by Loess"	"<p>Decompose a time series into seasonal, trend and irregular components using <code>loess</code>, acronym STL. </p>"	"<pre>stl(x, s.window, s.degree = 0,<br />     t.window = NULL, t.degree = 1,<br />     l.window = nextodd(period), l.degree = t.degree,<br />     s.jump = ceiling(s.window/10),<br />     t.jump = ceiling(t.window/10),<br />     l.jump = ceiling(l.window/10),<br />     robust = FALSE,<br />     inner = if(robust)  1 else 2,<br />     outer = if(robust) 15 else 0,<br />     na.action = na.fail) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>univariate time series to be decomposed. This should be an object of class <code>'ts'</code> with a frequency greater than one.</p> </td> </tr> <tr valign='top'> <td><code>s.window</code></td> <td> <p>either the character string <code>'periodic'</code> or the span (in lags) of the loess window for seasonal extraction, which should be odd and at least 7, according to Cleveland et al.  This has no default.</p> </td> </tr> <tr valign='top'> <td><code>s.degree</code></td> <td> <p>degree of locally-fitted polynomial in seasonal extraction.  Should be zero or one.</p> </td> </tr> <tr valign='top'> <td><code>t.window</code></td> <td> <p>the span (in lags) of the loess window for trend extraction, which should be odd.  If <code>NULL</code>, the default, <code>nextodd(ceiling((1.5*period) / (1-(1.5/s.window))))</code>, is taken.</p> </td> </tr> <tr valign='top'> <td><code>t.degree</code></td> <td> <p>degree of locally-fitted polynomial in trend extraction.  Should be zero or one.</p> </td> </tr> <tr valign='top'> <td><code>l.window</code></td> <td> <p>the span (in lags) of the loess window of the low-pass filter used for each subseries.  Defaults to the smallest odd integer greater than or equal to <code>frequency(x)</code> which is recommended since it prevents competition between the trend and seasonal components.  If not an odd integer its given value is increased to the next odd one.</p> </td> </tr> <tr valign='top'> <td><code>l.degree</code></td> <td> <p>degree of locally-fitted polynomial for the subseries low-pass filter.  Must be 0 or 1.</p> </td> </tr> <tr valign='top'> <td><code>s.jump, t.jump, l.jump</code></td> <td> <p>integers at least one to increase speed of the respective smoother.  Linear interpolation happens between every <code>*.jump</code>th value.</p> </td> </tr> <tr valign='top'> <td><code>robust</code></td> <td> <p>logical indicating if robust fitting be used in the <code>loess</code> procedure.</p> </td> </tr> <tr valign='top'> <td><code>inner</code></td> <td> <p>integer; the number of ‘inner’ (backfitting) iterations; usually very few (2) iterations suffice.</p> </td> </tr> <tr valign='top'> <td><code>outer</code></td> <td> <p>integer; the number of ‘outer’ robustness iterations.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>action on missing values.</p> </td> </tr> </table> "	FALSE
"supsmu"	"stats"	"Friedman's SuperSmoother"	"<p>Smooth the (x, y) values by Friedman's ‘super smoother’. </p>"	"<pre>supsmu(x, y, wt, span = 'cv', periodic = FALSE, bass = 0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>x values for smoothing</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>y values for smoothing</p> </td> </tr> <tr valign='top'> <td><code>wt</code></td> <td> <p>case weights, by default all equal</p> </td> </tr> <tr valign='top'> <td><code>span</code></td> <td> <p>the fraction of the observations in the span of the running lines smoother, or <code>'cv'</code> to choose this by leave-one-out cross-validation.</p> </td> </tr> <tr valign='top'> <td><code>periodic</code></td> <td> <p>if <code>TRUE</code>, the x values are assumed to be in <code>[0, 1]</code> and of period 1.</p> </td> </tr> <tr valign='top'> <td><code>bass</code></td> <td> <p>controls the smoothness of the fitted curve. Values of up to 10 indicate increasing smoothness.</p> </td> </tr> </table> "	FALSE
"symnum"	"stats"	"Symbolic Number Coding"	"<p>Symbolically encode a given numeric or logical vector or array. Particularly useful for visualization of structured matrices, e.g., correlation, sparse, or logical ones. </p>"	"<pre>symnum(x, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95),<br />        symbols = if(numeric.x) c(' ', '.', ',', '+', '*', 'B')<br />                  else c('.', '|'),<br />        legend = length(symbols) &gt;= 3,<br />        na = '?', eps = 1e-5, numeric.x = is.numeric(x),<br />        corr = missing(cutpoints) &amp;&amp; numeric.x,<br />        show.max = if(corr) '1', show.min = NULL,<br />        abbr.colnames = has.colnames,<br />        lower.triangular = corr &amp;&amp; is.numeric(x) &amp;&amp; is.matrix(x),<br />        diag.lower.tri<br />   = corr &amp;&amp; !is.null(show.max)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric or logical vector or array.</p> </td> </tr> <tr valign='top'> <td><code>cutpoints</code></td> <td> <p>numeric vector whose values <code>cutpoints[j]</code> <i> == c[j]</i>  (<em>after</em> augmentation, see <code>corr</code> below) are used for intervals.</p> </td> </tr> <tr valign='top'> <td><code>symbols</code></td> <td> <p>character vector, one shorter than (the <em>augmented</em>, see <code>corr</code> below) <code>cutpoints</code>. <code>symbols[j]</code><i> == s[j]</i> are used as ‘code’ for the (half open) interval <i>(c[j], c[j+1]]</i>. </p> <p>When <code>numeric.x</code> is <code>FALSE</code>, i.e., by default when argument <code>x</code> is <code>logical</code>, the default is <code>c('.','|')</code> (graphical 0 / 1 s).</p> </td> </tr> <tr valign='top'> <td><code>legend</code></td> <td> <p>logical indicating if a <code>'legend'</code> attribute is desired.</p> </td> </tr> <tr valign='top'> <td><code>na</code></td> <td> <p>character or logical. How <code>NAs</code> are coded.  If <code>na == FALSE</code>, <code>NA</code>s are coded invisibly, <em>including</em> the <code>'legend'</code> attribute below, which otherwise mentions NA coding.</p> </td> </tr> <tr valign='top'> <td><code>eps</code></td> <td> <p>absolute precision to be used at left and right boundary.</p> </td> </tr> <tr valign='top'> <td><code>numeric.x</code></td> <td> <p>logical indicating if <code>x</code> should be treated as numbers, otherwise as logical.</p> </td> </tr> <tr valign='top'> <td><code>corr</code></td> <td> <p>logical.  If <code>TRUE</code>, <code>x</code> contains correlations. The cutpoints are augmented by <code>0</code> and <code>1</code> and <code>abs(x)</code> is coded.</p> </td> </tr> <tr valign='top'> <td><code>show.max</code></td> <td> <p>if <code>TRUE</code>, or of mode <code>character</code>, the maximal cutpoint is coded especially.</p> </td> </tr> <tr valign='top'> <td><code>show.min</code></td> <td> <p>if <code>TRUE</code>, or of mode <code>character</code>, the minimal cutpoint is coded especially.</p> </td> </tr> <tr valign='top'> <td><code>abbr.colnames</code></td> <td> <p>logical, integer or <code>NULL</code> indicating how column names should be abbreviated (if they are); if <code>NULL</code> (or <code>FALSE</code> and <code>x</code> has no column names), the column names will all be empty, i.e., <code>''</code>; otherwise if <code>abbr.colnames</code> is false, they are left unchanged.  If <code>TRUE</code> or integer, existing column names will be abbreviated to <code>abbreviate(*, minlength = abbr.colnames)</code>.</p> </td> </tr> <tr valign='top'> <td><code>lower.triangular</code></td> <td> <p>logical.  If <code>TRUE</code> and <code>x</code> is a matrix, only the <em>lower triangular</em> part of the matrix is coded as non-blank.</p> </td> </tr> <tr valign='top'> <td><code>diag.lower.tri</code></td> <td> <p>logical.  If <code>lower.triangular</code> <em>and</em> this are <code>TRUE</code>, the <em>diagonal</em> part of the matrix is shown.</p> </td> </tr> </table> "	FALSE
"t.test"	"stats"	"Student's t-Test"	"<p>Performs one and two sample t-tests on vectors of data. </p>"	"<pre>t.test(x, ...)<br />## Default S3 method: t.test(x, y = NULL,<br />        alternative = c('two.sided', 'less', 'greater'),<br />        mu = 0, paired = FALSE, var.equal = FALSE,<br />        conf.level = 0.95, ...)<br />## S3 method for class 'formula' t.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a (non-empty) numeric vector of data values.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>an optional (non-empty) numeric vector of data values.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>a character string specifying the alternative hypothesis, must be one of <code>'two.sided'</code> (default), <code>'greater'</code> or <code>'less'</code>.  You can specify just the initial letter.</p> </td> </tr> <tr valign='top'> <td><code>mu</code></td> <td> <p>a number indicating the true value of the mean (or difference in means if you are performing a two sample test).</p> </td> </tr> <tr valign='top'> <td><code>paired</code></td> <td> <p>a logical indicating whether you want a paired t-test.</p> </td> </tr> <tr valign='top'> <td><code>var.equal</code></td> <td> <p>a logical variable indicating whether to treat the two variances as being equal. If <code>TRUE</code> then the pooled variance is used to estimate the variance otherwise the Welch (or Satterthwaite) approximation to the degrees of freedom is used.</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level of the interval.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>lhs ~ rhs</code> where <code>lhs</code> is a numeric variable giving the data values and <code>rhs</code> a factor with two levels giving the corresponding groups.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"termplot"	"stats"	"Plot Regression Terms"	"<p>Plots regression terms against their predictors, optionally with standard errors and partial residuals added. </p>"	"<pre>termplot(model, data = NULL, envir = environment(formula(model)),<br />          partial.resid = FALSE, rug = FALSE,<br />          terms = NULL, se = FALSE,<br />          xlabs = NULL, ylabs = NULL, main = NULL,<br />          col.term = 2, lwd.term = 1.5,<br />          col.se = 'orange', lty.se = 2, lwd.se = 1,<br />          col.res = 'gray', cex = 1, pch = par('pch'),<br />          col.smth = 'darkred', lty.smth = 2, span.smth = 2/3,<br />          ask = dev.interactive() &amp;&amp; nb.fig &lt; n.tms,<br />          use.factor.levels = TRUE, smooth = NULL, ylim = 'common',<br />          plot = TRUE, transform.x = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>model</code></td> <td> <p>fitted model object</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>data frame in which variables in <code>model</code> can be found</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>environment in which variables in <code>model</code> can be found</p> </td> </tr> <tr valign='top'> <td><code>partial.resid</code></td> <td> <p>logical; should partial residuals be plotted?</p> </td> </tr> <tr valign='top'> <td><code>rug</code></td> <td> <p>add rugplots (jittered 1-d histograms) to the axes?</p> </td> </tr> <tr valign='top'> <td><code>terms</code></td> <td> <p>which terms to plot (default <code>NULL</code> means all terms); a vector passed to <code>predict(.., type = 'terms', terms = *)</code>.</p> </td> </tr> <tr valign='top'> <td><code>se</code></td> <td> <p>plot pointwise standard errors?</p> </td> </tr> <tr valign='top'> <td><code>xlabs</code></td> <td> <p>vector of labels for the x axes</p> </td> </tr> <tr valign='top'> <td><code>ylabs</code></td> <td> <p>vector of labels for the y axes</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>logical, or vector of main titles;  if <code>TRUE</code>, the model's call is taken as main title, <code>NULL</code> or <code>FALSE</code> mean no titles.</p> </td> </tr> <tr valign='top'> <td><code>col.term, lwd.term</code></td> <td> <p>color and line width for the ‘term curve’, see <code>lines</code>.</p> </td> </tr> <tr valign='top'> <td><code>col.se, lty.se, lwd.se</code></td> <td> <p>color, line type and line width for the ‘twice-standard-error curve’ when <code>se = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>col.res, cex, pch</code></td> <td> <p>color, plotting character expansion and type for partial residuals, when <code>partial.resid = TRUE</code>, see <code>points</code>.</p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td> <p>logical; if <code>TRUE</code>, the user is <em>ask</em>ed before each plot, see <code>par(ask=.)</code>.</p> </td> </tr> <tr valign='top'> <td><code>use.factor.levels</code></td> <td> <p>Should x-axis ticks use factor levels or numbers for factor terms?</p> </td> </tr> <tr valign='top'> <td><code>smooth</code></td> <td> <p><code>NULL</code> or a function with the same arguments as <code>panel.smooth</code> to draw a smooth through the partial residuals for non-factor terms</p> </td> </tr> <tr valign='top'> <td><code>lty.smth, col.smth, span.smth</code></td> <td> <p>Passed to <code>smooth</code></p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>an optional range for the y axis, or <code>'common'</code> when a range sufficient for all the plot will be computed, or <code>'free'</code> when limits are computed for each plot.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>if set to <code>FALSE</code> plots are not produced: instead a list is returned containing the data that would have been plotted.</p> </td> </tr> <tr valign='top'> <td><code>transform.x</code></td> <td> <p>logical vector; if an element (recycled as necessary) is <code>TRUE</code>, partial residuals for the corresponding term are plotted against transformed values. The model response is then a straight line, allowing a ready comparison against the data or against the curve obtained from <code>smooth-panel.smooth</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other graphical parameters.</p> </td> </tr> </table> "	FALSE
"terms.formula"	"stats"	"Construct a terms Object from a Formula"	"<p>This function takes a formula and some optional arguments and constructs a terms object. The terms object can then be used to construct a <code>model.matrix</code>. </p>"	"<pre>## S3 method for class 'formula' terms(x, specials = NULL, abb = NULL, data = NULL, neg.out = TRUE,<br />       keep.order = FALSE, simplify = FALSE, ...,<br />       allowDotAsName = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a formula.</p> </td> </tr> <tr valign='top'> <td><code>specials</code></td> <td> <p>which functions in the formula should be marked as special in the <code>terms</code> object?  A character vector or <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>abb</code></td> <td> <p>Not implemented in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data frame from which the meaning of the special symbol <code>.</code> can be inferred.  It is unused if there is no <code>.</code> in the formula.</p> </td> </tr> <tr valign='top'> <td><code>neg.out</code></td> <td> <p>Not implemented in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>.</p> </td> </tr> <tr valign='top'> <td><code>keep.order</code></td> <td> <p>a logical value indicating whether the terms should keep their positions.  If <code>FALSE</code> the terms are reordered so that main effects come first, followed by the interactions, all second-order, all third-order and so on.  Effects of a given order are kept in the order specified.</p> </td> </tr> <tr valign='top'> <td><code>simplify</code></td> <td> <p>should the formula be expanded and simplified, the pre-1.7.0 behaviour?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> <tr valign='top'> <td><code>allowDotAsName</code></td> <td> <p>normally <code>.</code> in a formula refers to the remaining variables contained in <code>data</code>.  Exceptionally, <code>.</code> can be treated as a name for non-standard uses of formulae.</p> </td> </tr> </table> "	FALSE
"terms.object"	"stats"	"Description of Terms Objects"	"<p>An object of class <code>terms</code> holds information about a model.  Usually the model was specified in terms of a <code>formula</code> and that formula was used to determine the terms object. </p>"	NA	NA	FALSE
"toeplitz"	"stats"	"Form Symmetric Toeplitz Matrix"	"<p>Forms a symmetric Toeplitz matrix given its first row. </p>"	"<pre>toeplitz(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>the first row to form the Toeplitz matrix.</p> </td> </tr></table> "	FALSE
"ts.union"	"stats"	"Bind Two or More Time Series"	"<p>Bind time series which have a common frequency. <code>ts.union</code> pads with <code>NA</code>s to the total time coverage, <code>ts.intersect</code> restricts to the time covered by all the series. </p>"	"<pre>ts.intersect(..., dframe = FALSE) ts.union(..., dframe = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>two or more univariate or multivariate time series, or objects which can coerced to time series.</p> </td> </tr> <tr valign='top'> <td><code>dframe</code></td> <td> <p>logical; if <code>TRUE</code> return the result as a data frame.</p> </td> </tr> </table> "	FALSE
"ts.plot"	"stats"	"Plot Multiple Time Series"	"<p>Plot several time series on a common plot. Unlike <code>plot.ts</code> the series can have a different time bases, but they should have the same frequency. </p>"	"<pre>ts.plot(..., gpars = list()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>one or more univariate or multivariate time series.</p> </td> </tr> <tr valign='top'> <td><code>gpars</code></td> <td> <p>list of named graphics parameters to be passed to the plotting functions.  Those commonly used can be supplied directly in <code>...</code>.</p> </td> </tr> </table> "	FALSE
"tsdiag"	"stats"	"Diagnostic Plots for Time-Series Fits"	"<p>A generic function to plot time-series diagnostics. </p>"	"<pre>tsdiag(object, gof.lag, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a fitted time-series model</p> </td> </tr> <tr valign='top'> <td><code>gof.lag</code></td> <td> <p>the maximum number of lags for a Portmanteau goodness-of-fit test</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to particular methods</p> </td> </tr> </table> "	FALSE
"tsSmooth"	"stats"	"Use Fixed-Interval Smoothing on Time Series"	"<p>Performs fixed-interval smoothing on a univariate time series via a state-space model.  Fixed-interval smoothing gives the best estimate of the state at each time point based on the whole observed series. </p>"	"<pre>tsSmooth(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>a time-series fit.  Currently only class <code>'StructTS'</code> is supported</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>possible arguments for future methods.</p> </td> </tr> </table> "	FALSE
"TukeyHSD"	"stats"	"Compute Tukey Honest Significant Differences"	"<p>Create a set of confidence intervals on the differences between the means of the levels of a factor with the specified family-wise probability of coverage.  The intervals are based on the Studentized range statistic, Tukey's ‘Honest Significant Difference’ method. </p>"	"<pre>TukeyHSD(x, which, ordered = FALSE, conf.level = 0.95, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A fitted model object, usually an <code>aov</code> fit.</p> </td> </tr> <tr valign='top'> <td><code>which</code></td> <td> <p>A character vector listing terms in the fitted model for which the intervals should be calculated.  Defaults to all the terms.</p> </td> </tr> <tr valign='top'> <td><code>ordered</code></td> <td> <p>A logical value indicating if the levels of the factor should be ordered according to increasing average in the sample before taking differences.  If <code>ordered</code> is true then the calculated differences in the means will all be positive.  The significant differences will be those for which the <code>lwr</code> end point is positive.</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>A numeric value between zero and one giving the family-wise confidence level to use.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Optional additional arguments.  None are used at present.</p> </td> </tr> </table> "	FALSE
"uniroot"	"stats"	"One Dimensional Root (Zero) Finding"	"<p>The function <code>uniroot</code> searches the interval from <code>lower</code> to <code>upper</code> for a root (i.e., zero) of the function <code>f</code> with respect to its first argument. </p> <p>Setting <code>extendInt</code> to a non-<code>'no'</code> string, means searching for the correct <code>interval = c(lower,upper)</code> if <code>sign(f(x))</code> does not satisfy the requirements at the interval end points; see the ‘Details’ section. </p>"	"<pre>uniroot(f, interval, ...,<br />         lower = min(interval), upper = max(interval),<br />         f.lower = f(lower, ...), f.upper = f(upper, ...),<br />         extendInt = c('no', 'yes', 'downX', 'upX'), check.conv = FALSE,<br />         tol = .Machine$double.eps^0.25, maxiter = 1000, trace = 0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>the function for which the root is sought.</p> </td> </tr> <tr valign='top'> <td><code>interval</code></td> <td> <p>a vector containing the end-points of the interval to be searched for the root.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional named or unnamed arguments to be passed to <code>f</code></p> </td> </tr> <tr valign='top'> <td><code>lower, upper</code></td> <td> <p>the lower and upper end points of the interval to be searched.</p> </td> </tr> <tr valign='top'> <td><code>f.lower, f.upper</code></td> <td> <p>the same as <code>f(upper)</code> and <code>f(lower)</code>, respectively.  Passing these values from the caller where they are often known is more economical as soon as <code>f()</code> contains non-trivial computations.</p> </td> </tr> <tr valign='top'> <td><code>extendInt</code></td> <td> <p>character string specifying if the interval <code>c(lower,upper)</code> should be extended or directly produce an error when <code>f()</code> does not have differing signs at the endpoints.  The default, <code>'no'</code>, keeps the search interval and hence produces an error.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>check.conv</code></td> <td> <p>logical indicating whether a convergence warning of the underlying <code>uniroot</code> should be caught as an error and if non-convergence in <code>maxiter</code> iterations should be an error instead of a warning.</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>the desired accuracy (convergence tolerance).</p> </td> </tr> <tr valign='top'> <td><code>maxiter</code></td> <td> <p>the maximum number of iterations.</p> </td> </tr> <tr valign='top'> <td><code>trace</code></td> <td> <p>integer number; if positive, tracing information is produced.  Higher values giving more details.</p> </td> </tr> </table> "	FALSE
"update.formula"	"stats"	"Model Updating"	"<p><code>update.formula</code> is used to update model formulae. This typically involves adding or dropping terms, but updates can be more general. </p>"	"<pre>## S3 method for class 'formula' update(old, new, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>old</code></td> <td> <p>a model formula to be updated.</p> </td> </tr> <tr valign='top'> <td><code>new</code></td> <td> <p>a formula giving a template which specifies how to update.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"var.test"	"stats"	"F Test to Compare Two Variances"	"<p>Performs an F test to compare the variances of two samples from normal populations. </p>"	"<pre>var.test(x, ...)<br />## Default S3 method: var.test(x, y, ratio = 1,<br />          alternative = c('two.sided', 'less', 'greater'),<br />          conf.level = 0.95, ...)<br />## S3 method for class 'formula' var.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric vectors of data values, or fitted linear model objects (inheriting from class <code>'lm'</code>).</p> </td> </tr> <tr valign='top'> <td><code>ratio</code></td> <td> <p>the hypothesized ratio of the population variances of <code>x</code> and <code>y</code>.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>a character string specifying the alternative hypothesis, must be one of <code>'two.sided'</code> (default), <code>'greater'</code> or <code>'less'</code>.  You can specify just the initial letter.</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level for the returned confidence interval.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>lhs ~ rhs</code> where <code>lhs</code> is a numeric variable giving the data values and <code>rhs</code> a factor with two levels giving the corresponding groups.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"vcov"	"stats"	"Calculate Variance-Covariance Matrix for a Fitted Model Object"	"<p>Returns the variance-covariance matrix of the main parameters of a fitted model object. </p>"	"<pre>vcov(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td><br /><p>a fitted model object, typically.  Sometimes also a <code>summary()</code> object of such a fitted model. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td><br /><p>additional arguments for method functions.  For the <code>glm</code> method this can be used to pass a <code>dispersion</code> parameter. </p> </td> </tr> </table> "	FALSE
"weighted.mean"	"stats"	"Weighted Arithmetic Mean"	"<p>Compute a weighted mean. </p>"	"<pre>weighted.mean(x, w, ...)<br />## Default S3 method: weighted.mean(x, w, ..., na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object containing the values whose weighted mean is to be computed.</p> </td> </tr> <tr valign='top'> <td><code>w</code></td> <td> <p>a numerical vector of weights the same length as <code>x</code> giving the weights to use for elements of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from methods.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>a logical value indicating whether <code>NA</code> values in <code>x</code> should be stripped before the computation proceeds.</p> </td> </tr> </table> "	FALSE
"weighted.residuals"	"stats"	"Compute Weighted Residuals"	"<p>Computed weighted residuals from a linear model fit. </p>"	"<pre>weighted.residuals(obj, drop0 = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>obj</code></td> <td> <p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically of class <code>lm</code> or <code>glm</code>.</p> </td> </tr> <tr valign='top'> <td><code>drop0</code></td> <td> <p>logical.  If <code>TRUE</code>, drop all cases with <code>weights == 0</code>.</p> </td> </tr> </table> "	FALSE
"weights"	"stats"	"Extract Model Weights"	"<p><code>weights</code> is a generic function which extracts fitting weights from objects returned by modeling functions. </p> <p>Methods can make use of <code>napredict</code> methods to compensate for the omission of missing values.  The default methods does so. </p>"	"<pre>weights(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object for which the extraction of model weights is meaningful.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other arguments passed to methods.</p> </td> </tr> </table> "	FALSE
"wilcox.test"	"stats"	"Wilcoxon Rank Sum and Signed Rank Tests"	"<p>Performs one- and two-sample Wilcoxon tests on vectors of data; the latter is also known as ‘Mann-Whitney’ test. </p>"	"<pre>wilcox.test(x, ...)<br />## Default S3 method: wilcox.test(x, y = NULL,<br />             alternative = c('two.sided', 'less', 'greater'),<br />             mu = 0, paired = FALSE, exact = NULL, correct = TRUE,<br />             conf.int = FALSE, conf.level = 0.95, ...)<br />## S3 method for class 'formula' wilcox.test(formula, data, subset, na.action, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric vector of data values.  Non-finite (e.g., infinite or missing) values will be omitted.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>an optional numeric vector of data values: as with <code>x</code> non-finite values will be omitted.</p> </td> </tr> <tr valign='top'> <td><code>alternative</code></td> <td> <p>a character string specifying the alternative hypothesis, must be one of <code>'two.sided'</code> (default), <code>'greater'</code> or <code>'less'</code>.  You can specify just the initial letter.</p> </td> </tr> <tr valign='top'> <td><code>mu</code></td> <td> <p>a number specifying an optional parameter used to form the null hypothesis.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>paired</code></td> <td> <p>a logical indicating whether you want a paired test.</p> </td> </tr> <tr valign='top'> <td><code>exact</code></td> <td> <p>a logical indicating whether an exact p-value should be computed.</p> </td> </tr> <tr valign='top'> <td><code>correct</code></td> <td> <p>a logical indicating whether to apply continuity correction in the normal approximation for the p-value.</p> </td> </tr> <tr valign='top'> <td><code>conf.int</code></td> <td> <p>a logical indicating whether a confidence interval should be computed.</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level of the interval.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula of the form <code>lhs ~ rhs</code> where <code>lhs</code> is a numeric variable giving the data values and <code>rhs</code> a factor with two levels giving the corresponding groups.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional matrix or data frame (or similar: see <code>model.frame</code>) containing the variables in the formula <code>formula</code>.  By default the variables are taken from <code>environment(formula)</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  Defaults to <code>getOption('na.action')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"window"	"stats"	"Time Windows"	"<p><code>window</code> is a generic function which extracts the subset of the object <code>x</code> observed between the times <code>start</code> and <code>end</code>. If a frequency is specified, the series is then re-sampled at the new frequency. </p>"	"<pre>window(x, ...) ## S3 method for class 'ts' window(x, ...) ## Default S3 method: window(x, start = NULL, end = NULL,<br />       frequency = NULL, deltat = NULL, extend = FALSE, ...)<br />window(x, ...) &lt;- value ## S3 replacement method for class 'ts' window(x, start, end, frequency, deltat, ...) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a time-series (or other object if not replacing values).</p> </td> </tr> <tr valign='top'> <td><code>start</code></td> <td> <p>the start time of the period of interest.</p> </td> </tr> <tr valign='top'> <td><code>end</code></td> <td> <p>the end time of the period of interest.</p> </td> </tr> <tr valign='top'> <td><code>frequency, deltat</code></td> <td> <p>the new frequency can be specified by either (or both if they are consistent).</p> </td> </tr> <tr valign='top'> <td><code>extend</code></td> <td> <p>logical.  If true, the <code>start</code> and <code>end</code> values are allowed to extend the series.  If false, attempts to extend the series give a warning and are ignored.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>replacement values.</p> </td> </tr> </table> "	FALSE
"checkMFClasses"	"stats"	"Functions to Check the Type of Variables passed to Model Frames"	"<p><code>.checkMFClasses</code> checks if the variables used in a predict method agree in type with those used for fitting. </p> <p><code>.MFclass</code> categorizes variables for this purpose. </p>"	"<pre>.checkMFClasses(cl, m, ordNotOK = FALSE) .MFclass(x) .getXlevels(Terms, m) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>cl</code></td> <td> <p>a character vector of class descriptions to match.</p> </td> </tr> <tr valign='top'> <td><code>m</code></td> <td> <p>a model frame.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>ordNotOK</code></td> <td> <p>logical: are ordered factors different?</p> </td> </tr> <tr valign='top'> <td><code>Terms</code></td> <td> <p>a <code>terms</code> object.</p> </td> </tr> </table> "	FALSE
"graphics-package"	"graphics"	"The R Graphics Package"	"<p>R functions for base graphics </p>"	NA	NA	FALSE
"filled.contour"	"graphics"	"Level (Contour) Plots"	"<p>This function produces a contour plot with the areas between the contours filled in solid color (Cleveland calls this a level plot).  A key showing how the colors map to z values is shown to the right of the plot. </p>"	"<pre>filled.contour(x = seq(0, 1, length.out = nrow(z)),<br />                y = seq(0, 1, length.out = ncol(z)),<br />                z,<br />                xlim = range(x, finite = TRUE),<br />                ylim = range(y, finite = TRUE),<br />                zlim = range(z, finite = TRUE),<br />                levels = pretty(zlim, nlevels), nlevels = 20,<br />                color.palette = cm.colors,<br />                col = color.palette(length(levels) - 1),<br />                plot.title, plot.axes, key.title, key.axes,<br />                asp = NA, xaxs = 'i', yaxs = 'i', las = 1,<br />                axes = TRUE, frame.plot = axes, ...)<br />.filled.contour(x, y, z, levels, col) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>locations of grid lines at which the values in <code>z</code> are measured.  These must be in ascending order.  (The rest of this description does not apply to <code>.filled.contour</code>.) By default, equally spaced values from 0 to 1 are used.  If <code>x</code> is a <code>list</code>, its components <code>x$x</code> and <code>x$y</code> are used for <code>x</code> and <code>y</code>, respectively.  If the list has component <code>z</code> this is used for <code>z</code>.</p> </td> </tr> <tr valign='top'> <td><code>z</code></td> <td> <p>a numeric matrix containing the values to be plotted..  Note that <code>x</code> can be used instead of <code>z</code> for convenience.</p> </td> </tr> <tr valign='top'> <td><code>xlim</code></td> <td> <p>x limits for the plot.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>y limits for the plot.</p> </td> </tr> <tr valign='top'> <td><code>zlim</code></td> <td> <p>z limits for the plot.</p> </td> </tr> <tr valign='top'> <td><code>levels</code></td> <td> <p>a set of levels which are used to partition the range of <code>z</code>.  Must be <b>strictly</b> increasing (and finite).  Areas with <code>z</code> values between consecutive levels are painted with the same color.</p> </td> </tr> <tr valign='top'> <td><code>nlevels</code></td> <td> <p>if <code>levels</code> is not specified, the range of <code>z</code>, values is divided into approximately this many levels.</p> </td> </tr> <tr valign='top'> <td><code>color.palette</code></td> <td> <p>a color palette function to be used to assign colors in the plot.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>an explicit set of colors to be used in the plot. This argument overrides any palette function specification.  There should be one less color than levels</p> </td> </tr> <tr valign='top'> <td><code>plot.title</code></td> <td> <p>statements which add titles to the main plot.</p> </td> </tr> <tr valign='top'> <td><code>plot.axes</code></td> <td> <p>statements which draw axes (and a <code>box</code>) on the main plot.  This overrides the default axes.</p> </td> </tr> <tr valign='top'> <td><code>key.title</code></td> <td> <p>statements which add titles for the plot key.</p> </td> </tr> <tr valign='top'> <td><code>key.axes</code></td> <td> <p>statements which draw axes on the plot key. This overrides the default axis.</p> </td> </tr> <tr valign='top'> <td><code>asp</code></td> <td> <p>the <i>y/x</i> aspect ratio, see <code>plot.window</code>.</p> </td> </tr> <tr valign='top'> <td><code>xaxs</code></td> <td> <p>the x axis style.  The default is to use internal labeling.</p> </td> </tr> <tr valign='top'> <td><code>yaxs</code></td> <td> <p>the y axis style.  The default is to use internal labeling.</p> </td> </tr> <tr valign='top'> <td><code>las</code></td> <td> <p>the style of labeling to be used.  The default is to use horizontal labeling.</p> </td> </tr> <tr valign='top'> <td><code>axes, frame.plot</code></td> <td> <p>logicals indicating if axes and a box should be drawn, as in <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional graphical parameters, currently only passed to <code>title()</code>.</p> </td> </tr> </table> "	FALSE
"par"	"graphics"	"Set or Query Graphical Parameters"	"<p><code>par</code> can be used to set or query graphical parameters. Parameters can be set by specifying them as arguments to <code>par</code> in <code>tag = value</code> form, or by passing them as a list of tagged values. </p>"	"<pre>par(..., no.readonly = FALSE)<br />&lt;highlevel plot&gt; (..., &lt;tag&gt; = &lt;value&gt;) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments in <code>tag = value</code> form, or a list of tagged values.  The tags must come from the names of graphical parameters described in the ‘Graphical Parameters’ section.</p> </td> </tr> <tr valign='top'> <td><code>no.readonly</code></td> <td> <p>logical; if <code>TRUE</code> and there are no other arguments, only parameters are returned which can be set by a subsequent <code>par()</code> call <em>on the same device</em>.</p> </td> </tr> </table> "	FALSE
"abline"	"graphics"	"Add Straight Lines to a Plot"	"<p>This function adds one or more straight lines through the current plot. </p>"	"<pre>abline(a = NULL, b = NULL, h = NULL, v = NULL, reg = NULL,<br />        coef = NULL, untf = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>a, b</code></td> <td> <p>the intercept and slope, single values.</p> </td> </tr> <tr valign='top'> <td><code>untf</code></td> <td> <p>logical asking whether to <em>untransform</em>.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>h</code></td> <td> <p>the y-value(s) for horizontal line(s).</p> </td> </tr> <tr valign='top'> <td><code>v</code></td> <td> <p>the x-value(s) for vertical line(s).</p> </td> </tr> <tr valign='top'> <td><code>coef</code></td> <td> <p>a vector of length two giving the intercept and slope.</p> </td> </tr> <tr valign='top'> <td><code>reg</code></td> <td> <p>an object with a <code>coef</code> method.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters such as <code>col</code>, <code>lty</code> and  <code>lwd</code> (possibly as vectors: see ‘Details’) and <code>xpd</code> and the line characteristics <code>lend</code>, <code>ljoin</code> and <code>lmitre</code>.</p> </td> </tr> </table> "	FALSE
"arrows"	"graphics"	"Add Arrows to a Plot"	"<p>Draw arrows between pairs of points. </p>"	"<pre>arrows(x0, y0, x1 = x0, y1 = y0, length = 0.25, angle = 30,<br />        code = 2, col = par('fg'), lty = par('lty'),<br />        lwd = par('lwd'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x0, y0</code></td> <td> <p>coordinates of points <b>from</b> which to draw.</p> </td> </tr> <tr valign='top'> <td><code>x1, y1</code></td> <td> <p>coordinates of points <b>to</b> which to draw.  At least one must the supplied</p> </td> </tr> <tr valign='top'> <td><code>length</code></td> <td> <p>length of the edges of the arrow head (in inches).</p> </td> </tr> <tr valign='top'> <td><code>angle</code></td> <td> <p>angle from the shaft of the arrow to the edge of the arrow head.</p> </td> </tr> <tr valign='top'> <td><code>code</code></td> <td> <p>integer code, determining <em>kind</em> of arrows to be drawn.</p> </td> </tr> <tr valign='top'> <td><code>col, lty, lwd</code></td> <td> <p>graphical parameters, possible vectors. <code>NA</code> values in <code>col</code> cause the arrow to be omitted.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters such as <code>xpd</code> and the line characteristics <code>lend</code>, <code>ljoin</code> and <code>lmitre</code>: see <code>par</code>.</p> </td> </tr> </table> "	FALSE
"plot.window"	"graphics"	"Set up World Coordinates for Graphics Window"	"<p>This function sets up the world coordinate system for a graphics window.  It is called by higher level functions such as <code>plot.default</code> (<em>after</em> <code>plot.new</code>). </p>"	"<pre>plot.window(xlim, ylim, log = '', asp = NA, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>numeric vectors of length 2, giving the x and y coordinates ranges.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>character; indicating which axes should be in log scale.</p> </td> </tr> <tr valign='top'> <td><code>asp</code></td> <td> <p>numeric, giving the <b>asp</b>ect ratio y/x, see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further graphical parameters as in <code>par</code>. The relevant ones are <code>xaxs</code>, <code>yaxs</code> and <code>lab</code>. </p> </td> </tr> </table> "	FALSE
"assocplot"	"graphics"	"Association Plots"	"<p>Produce a Cohen-Friendly association plot indicating deviations from independence of rows and columns in a 2-dimensional contingency table. </p>"	"<pre>assocplot(x, col = c('black', 'red'), space = 0.3,<br />           main = NULL, xlab = NULL, ylab = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a two-dimensional contingency table in matrix form.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>a character vector of length two giving the colors used for drawing positive and negative Pearson residuals, respectively.</p> </td> </tr> <tr valign='top'> <td><code>space</code></td> <td> <p>the amount of space (as a fraction of the average rectangle width and height) left between each rectangle.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>overall title for the plot.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>a label for the x axis.  Defaults to the name (if any) of the row dimension in <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>a label for the y axis.  Defaults to the name (if any) of the column dimension in <code>x</code>.</p> </td> </tr> </table> "	FALSE
"zAxis"	"graphics"	"Generic Function to Add an Axis to a Plot"	"<p>Generic function to add a suitable axis to the current plot. </p>"	"<pre>Axis(x = NULL, at = NULL, ..., side, labels = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object which indicates the range over which an axis should be drawn</p> </td> </tr> <tr valign='top'> <td><code>at</code></td> <td> <p>the points at which tick-marks are to be drawn.</p> </td> </tr> <tr valign='top'> <td><code>side</code></td> <td> <p>an integer specifying which side of the plot the axis is to be drawn on.  The axis is placed as follows: 1=below, 2=left, 3=above and 4=right.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>this can either be a logical value specifying whether (numerical) annotations are to be made at the tickmarks, or a character or expression vector of labels to be placed at the tickpoints. If this is specified as a character or expression vector, <code>at</code> should be supplied and they should be the same length.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Arguments to be passed to methods and perhaps then to <code>axis</code>.</p> </td> </tr> </table> "	FALSE
"axis"	"graphics"	"Add an Axis to a Plot"	"<p>Adds an axis to the current plot, allowing the specification of the side, position, labels, and other options. </p>"	"<pre>axis(side, at = NULL, labels = TRUE, tick = TRUE, line = NA,<br />      pos = NA, outer = FALSE, font = NA, lty = 'solid',<br />      lwd = 1, lwd.ticks = lwd, col = NULL, col.ticks = NULL,<br />      hadj = NA, padj = NA, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>side</code></td> <td> <p>an integer specifying which side of the plot the axis is to be drawn on.  The axis is placed as follows: 1=below, 2=left, 3=above and 4=right.</p> </td> </tr> <tr valign='top'> <td><code>at</code></td> <td> <p>the points at which tick-marks are to be drawn.  Non-finite (infinite, <code>NaN</code> or <code>NA</code>) values are omitted.  By default (when <code>NULL</code>) tickmark locations are computed, see ‘Details’ below.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>this can either be a logical value specifying whether (numerical) annotations are to be made at the tickmarks, or a character or expression vector of labels to be placed at the tickpoints.  (Other objects are coerced by <code>as.graphicsAnnot</code>.) If this is not logical, <code>at</code> should also be supplied and of the same length.  If <code>labels</code> is of length zero after coercion, it has the same effect as supplying <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>tick</code></td> <td> <p>a logical value specifying whether tickmarks and an axis line should be drawn.</p> </td> </tr> <tr valign='top'> <td><code>line</code></td> <td> <p>the number of lines into the margin at which the axis line will be drawn, if not <code>NA</code>.</p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td> <p>the coordinate at which the axis line is to be drawn: if not <code>NA</code> this overrides the value of <code>line</code>.</p> </td> </tr> <tr valign='top'> <td><code>outer</code></td> <td> <p>a logical value indicating whether the axis should be drawn in the outer plot margin, rather than the standard plot margin.</p> </td> </tr> <tr valign='top'> <td><code>font</code></td> <td> <p>font for text.  Defaults to <code>par('font')</code>.</p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>line type for both the axis line and the tick marks.</p> </td> </tr> <tr valign='top'> <td><code>lwd, lwd.ticks</code></td> <td> <p>line widths for the axis line and the tick marks. Zero or negative values will suppress the line or ticks.</p> </td> </tr> <tr valign='top'> <td><code>col, col.ticks</code></td> <td> <p>colors for the axis line and the tick marks respectively.  <code>col = NULL</code> means to use <code>par('fg')</code>, possibly specified inline, and <code>col.ticks = NULL</code> means to use whatever color <code>col</code> resolved to.</p> </td> </tr> <tr valign='top'> <td><code>hadj</code></td> <td> <p>adjustment (see <code>par('adj')</code>) for all labels <em>parallel</em> (‘horizontal’) to the reading direction.  If this is not a finite value, the default is used (centring for strings parallel to the axis, justification of the end nearest the axis otherwise).</p> </td> </tr> <tr valign='top'> <td><code>padj</code></td> <td> <p>adjustment for each tick label <em>perpendicular</em> to the reading direction.  For labels parallel to the axes, <code>padj = 0</code> means right or top alignment, and <code>padj = 1</code> means left or bottom alignment.  This can be a vector given a value for each string, and will be recycled as necessary. </p> <p>If <code>padj</code> is not a finite value (the default), the value of <code>par('las')</code> determines the adjustment.  For strings plotted perpendicular to the axis the default is to centre the string.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other graphical parameters may also be passed as arguments to this function, particularly, <code>cex.axis</code>, <code>col.axis</code> and <code>font.axis</code> for axis annotation, <code>mgp</code> and <code>xaxp</code> or <code>yaxp</code> for positioning, <code>tck</code> or <code>tcl</code> for tick mark length and direction, <code>las</code> for vertical/horizontal label orientation, or <code>fg</code> instead of <code>col</code>, and <code>xpd</code> for clipping.  See <code>par</code> on these. </p> <p>Parameters <code>xaxt</code> (sides 1 and 3) and <code>yaxt</code> (sides 2 and 4) control if the axis is plotted at all. </p> <p>Note that <code>lab</code> will partial match to argument <code>labels</code> unless the latter is also supplied.  (Since the default axes have already been set up by <code>plot.window</code>, <code>lab</code> will not be acted on by <code>axis</code>.)</p> </td> </tr> </table> "	FALSE
"axis.POSIXct"	"graphics"	"Date and Date-time Plotting Functions"	"<p>Functions to plot objects of classes <code>'POSIXlt'</code>, <code>'POSIXct'</code> and <code>'Date'</code> representing calendar dates and times. </p>"	"<pre>axis.POSIXct(side, x, at, format, labels = TRUE, ...) axis.Date(side, x, at, format, labels = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, at</code></td> <td> <p>A date-time or date object.</p> </td> </tr> <tr valign='top'> <td><code>side</code></td> <td> <p>See <code>axis</code>.</p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p>See <code>strptime</code>.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>Either a logical value specifying whether annotations are to be made at the tickmarks, or a vector of character strings to be placed at the tickpoints.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to be passed from or to other methods, typically graphical parameters.</p> </td> </tr> </table> "	FALSE
"axTicks"	"graphics"	"Compute Axis Tickmark Locations"	"<p>Compute pretty tickmark locations, the same way as <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> does internally. This is only non-trivial when <b>log</b> coordinates are active. By default, gives the <code>at</code> values which <code>axis(side)</code> would use. </p>"	"<pre>axTicks(side, axp = NULL, usr = NULL, log = NULL, nintLog = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>side</code></td> <td> <p>integer in 1:4, as for <code>axis</code>.</p> </td> </tr> <tr valign='top'> <td><code>axp</code></td> <td> <p>numeric vector of length three, defaulting to <code>par('xaxp')</code> or <code>par('yaxp')</code> depending on the <code>side</code> argument (<code>par('xaxp')</code> if <code>side</code> is 1 or 3, <code>par('yaxp')</code> if side is 2 or 4).</p> </td> </tr> <tr valign='top'> <td><code>usr</code></td> <td> <p>numeric vector of length two giving user coordinate limits, defaulting to the relevant portion of <code>par('usr')</code> (<code>par('usr')[1:2]</code> or <code>par('usr')[3:4]</code> for <code>side</code> in (1,3) or (2,4) respectively).</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>logical indicating if log coordinates are active; defaults to <code>par('xlog')</code> or <code>par('ylog')</code> depending on <code>side</code>.</p> </td> </tr> <tr valign='top'> <td><code>nintLog</code></td> <td> <p>(only used when <code>log</code> is true): approximate (lower bound for the) number of tick intervals; defaults to <code>par('lab')[j]</code> where <code>j</code> is 1 or 2 depending on <code>side</code>.  Set this to <code>Inf</code> if you want the same behavior as in earlier <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> versions (than 2.14.x).</p> </td> </tr> </table> "	FALSE
"barplot"	"graphics"	"Bar Plots"	"<p>Creates a bar plot with vertical or horizontal bars. </p>"	"<pre>barplot(height, ...)<br />## Default S3 method: barplot(height, width = 1, space = NULL,<br />         names.arg = NULL, legend.text = NULL, beside = FALSE,<br />         horiz = FALSE, density = NULL, angle = 45,<br />         col = NULL, border = par('fg'),<br />         main = NULL, sub = NULL, xlab = NULL, ylab = NULL,<br />         xlim = NULL, ylim = NULL, xpd = TRUE, log = '',<br />         axes = TRUE, axisnames = TRUE,<br />         cex.axis = par('cex.axis'), cex.names = par('cex.axis'),<br />         inside = TRUE, plot = TRUE, axis.lty = 0, offset = 0,<br />         add = FALSE, args.legend = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>height</code></td> <td> <p>either a vector or matrix of values describing the bars which make up the plot.  If <code>height</code> is a vector, the plot consists of a sequence of rectangular bars with heights given by the values in the vector.  If <code>height</code> is a matrix and <code>beside</code> is <code>FALSE</code> then each bar of the plot corresponds to a column of <code>height</code>, with the values in the column giving the heights of stacked sub-bars making up the bar.  If <code>height</code> is a matrix and <code>beside</code> is <code>TRUE</code>, then the values in each column are juxtaposed rather than stacked.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>optional vector of bar widths. Re-cycled to length the number of bars drawn.  Specifying a single value will have no visible effect unless <code>xlim</code> is specified.</p> </td> </tr> <tr valign='top'> <td><code>space</code></td> <td> <p>the amount of space (as a fraction of the average bar width) left before each bar.  May be given as a single number or one number per bar.  If <code>height</code> is a matrix and <code>beside</code> is <code>TRUE</code>, <code>space</code> may be specified by two numbers, where the first is the space between bars in the same group, and the second the space between the groups.  If not given explicitly, it defaults to <code>c(0,1)</code> if <code>height</code> is a matrix and <code>beside</code> is <code>TRUE</code>, and to 0.2 otherwise.</p> </td> </tr> <tr valign='top'> <td><code>names.arg</code></td> <td> <p>a vector of names to be plotted below each bar or group of bars.  If this argument is omitted, then the names are taken from the <code>names</code> attribute of <code>height</code> if this is a vector, or the column names if it is a matrix.</p> </td> </tr> <tr valign='top'> <td><code>legend.text</code></td> <td> <p>a vector of text used to construct a legend for the plot, or a logical indicating whether a legend should be included.  This is only useful when <code>height</code> is a matrix. In that case given legend labels should correspond to the rows of <code>height</code>; if <code>legend.text</code> is true, the row names of <code>height</code> will be used as labels if they are non-null.</p> </td> </tr> <tr valign='top'> <td><code>beside</code></td> <td> <p>a logical value.  If <code>FALSE</code>, the columns of <code>height</code> are portrayed as stacked bars, and if <code>TRUE</code> the columns are portrayed as juxtaposed bars.</p> </td> </tr> <tr valign='top'> <td><code>horiz</code></td> <td> <p>a logical value.  If <code>FALSE</code>, the bars are drawn vertically with the first bar to the left.  If <code>TRUE</code>, the bars are drawn horizontally with the first at the bottom.</p> </td> </tr> <tr valign='top'> <td><code>density</code></td> <td> <p>a vector giving the density of shading lines, in lines per inch, for the bars or bar components. The default value of <code>NULL</code> means that no shading lines are drawn. Non-positive values of <code>density</code> also inhibit the drawing of shading lines.</p> </td> </tr> <tr valign='top'> <td><code>angle</code></td> <td> <p>the slope of shading lines, given as an angle in degrees (counter-clockwise), for the bars or bar components.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>a vector of colors for the bars or bar components. By default, grey is used if <code>height</code> is a vector, and a gamma-corrected grey palette if <code>height</code> is a matrix.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>the color to be used for the border of the bars. Use <code>border = NA</code> to omit borders.  If there are shading lines, <code>border = TRUE</code> means use the same colour for the border as for the shading lines.</p> </td> </tr> <tr valign='top'> <td><code>main,sub</code></td> <td> <p>overall and sub title for the plot.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>a label for the x axis.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>a label for the y axis.</p> </td> </tr> <tr valign='top'> <td><code>xlim</code></td> <td> <p>limits for the x axis.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>limits for the y axis.</p> </td> </tr> <tr valign='top'> <td><code>xpd</code></td> <td> <p>logical. Should bars be allowed to go outside region?</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>string specifying if axis scales should be logarithmic; see <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>axes</code></td> <td> <p>logical.  If <code>TRUE</code>, a vertical (or horizontal, if <code>horiz</code> is true) axis is drawn.</p> </td> </tr> <tr valign='top'> <td><code>axisnames</code></td> <td> <p>logical.  If <code>TRUE</code>, and if there are <code>names.arg</code> (see above), the other axis is drawn (with <code>lty = 0</code>) and labeled.</p> </td> </tr> <tr valign='top'> <td><code>cex.axis</code></td> <td> <p>expansion factor for numeric axis labels.</p> </td> </tr> <tr valign='top'> <td><code>cex.names</code></td> <td> <p>expansion factor for axis names (bar labels).</p> </td> </tr> <tr valign='top'> <td><code>inside</code></td> <td> <p>logical.  If <code>TRUE</code>, the lines which divide adjacent (non-stacked!) bars will be drawn.  Only applies when <code>space = 0</code> (which it partly is when <code>beside = TRUE</code>).</p> </td> </tr> </table>  <table summary='R argblock'> <tr valign='top'> <td><code>plot</code></td> <td> <p>logical.  If <code>FALSE</code>, nothing is plotted.</p> </td> </tr> <tr valign='top'> <td><code>axis.lty</code></td> <td> <p>the graphics parameter <code>lty</code> applied to the axis and tick marks of the categorical (default horizontal) axis.  Note that by default the axis is suppressed.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td> <p>a vector indicating how much the bars should be shifted relative to the x axis.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical specifying if bars should be added to an already existing plot; defaults to <code>FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>args.legend</code></td> <td> <p>list of additional arguments to pass to <code>legend()</code>; names of the list are used as argument names.  Only used if <code>legend.text</code> is supplied.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to/from other methods.  For the default method these can include further arguments (such as <code>axes</code>, <code>asp</code> and <code>main</code>) and graphical parameters (see <code>par</code>) which are passed to <code>plot.window()</code>, <code>title()</code> and <code>axis</code>.</p> </td> </tr> </table> "	FALSE
"box"	"graphics"	"Draw a Box around a Plot"	"<p>This function draws a box around the current plot in the given color and linetype.  The <code>bty</code> parameter determines the type of box drawn.  See <code>par</code> for details. </p>"	"<pre>box(which = 'plot', lty = 'solid', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>which</code></td> <td> <p>character, one of <code>'plot'</code>, <code>'figure'</code>, <code>'inner'</code> and <code>'outer'</code>.</p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>line type of the box.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further graphical parameters, such as <code>bty</code>, <code>col</code>, or <code>lwd</code>, see <code>par</code>.  Note that <code>xpd</code> is not accepted as clipping is always to the device region.</p> </td> </tr> </table> "	FALSE
"boxplot"	"graphics"	"Box Plots"	"<p>Produce box-and-whisker plot(s) of the given (grouped) values. </p>"	"<pre>boxplot(x, ...)<br />## S3 method for class 'formula' boxplot(formula, data = NULL, ..., subset, na.action = NULL)<br />## Default S3 method: boxplot(x, ..., range = 1.5, width = NULL, varwidth = FALSE,<br />         notch = FALSE, outline = TRUE, names, plot = TRUE,<br />         border = par('fg'), col = NULL, log = '',<br />         pars = list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5),<br />         horizontal = FALSE, add = FALSE, at = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula, such as <code>y ~ grp</code>, where <code>y</code> is a numeric vector of data values to be split into groups according to the grouping variable <code>grp</code> (usually a factor).</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data.frame (or list) from which the variables in <code>formula</code> should be taken.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used for plotting.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  The default is to ignore missing values in either the response or the group.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>for specifying data from which the boxplots are to be produced. Either a numeric vector, or a single list containing such vectors. Additional unnamed arguments specify further data as separate vectors (each corresponding to a component boxplot). <code>NA</code>s are allowed in the data.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>For the <code>formula</code> method, named arguments to be passed to the default method. </p> <p>For the default method, unnamed arguments are additional data vectors (unless <code>x</code> is a list when they are ignored), and named arguments are arguments and graphical parameters to be passed to <code>bxp</code> in addition to the ones given by argument <code>pars</code> (and override those in <code>pars</code>). Note that <code>bxp</code> may or may not make use of graphical parameters it is passed: see its documentation. </p> </td> </tr> <tr valign='top'> <td><code>range</code></td> <td> <p>this determines how far the plot whiskers extend out from the box.  If <code>range</code> is positive, the whiskers extend to the most extreme data point which is no more than <code>range</code> times the interquartile range from the box. A value of zero causes the whiskers to extend to the data extremes.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>a vector giving the relative widths of the boxes making up the plot.</p> </td> </tr> <tr valign='top'> <td><code>varwidth</code></td> <td> <p>if <code>varwidth</code> is <code>TRUE</code>, the boxes are drawn with widths proportional to the square-roots of the number of observations in the groups.</p> </td> </tr> <tr valign='top'> <td><code>notch</code></td> <td> <p>if <code>notch</code> is <code>TRUE</code>, a notch is drawn in each side of the boxes.  If the notches of two plots do not overlap this is ‘strong evidence’ that the two medians differ (Chambers <em>et al</em>, 1983, p. 62).  See <code>boxplot.stats</code> for the calculations used.</p> </td> </tr> <tr valign='top'> <td><code>outline</code></td> <td> <p>if <code>outline</code> is not true, the outliers are not drawn (as points whereas S+ uses lines).</p> </td> </tr> </table>  <table summary='R argblock'> <tr valign='top'> <td><code>names</code></td> <td> <p>group labels which will be printed under each boxplot. Can be a character vector or an expression (see plotmath).</p> </td> </tr> <tr valign='top'> <td><code>boxwex</code></td> <td> <p>a scale factor to be applied to all boxes.  When there are only a few groups, the appearance of the plot can be improved by making the boxes narrower.</p> </td> </tr> <tr valign='top'> <td><code>staplewex</code></td> <td> <p>staple line width expansion, proportional to box width.</p> </td> </tr> <tr valign='top'> <td><code>outwex</code></td> <td> <p>outlier line width expansion, proportional to box width.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>if <code>TRUE</code> (the default) then a boxplot is produced.  If not, the summaries which the boxplots are based on are returned.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>an optional vector of colors for the outlines of the boxplots.  The values in <code>border</code> are recycled if the length of <code>border</code> is less than the number of plots.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>if <code>col</code> is non-null it is assumed to contain colors to be used to colour the bodies of the box plots. By default they are in the background colour.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>character indicating if x or y or both coordinates should be plotted in log scale.</p> </td> </tr> <tr valign='top'> <td><code>pars</code></td> <td> <p>a list of (potentially many) more graphical parameters, e.g., <code>boxwex</code> or <code>outpch</code>; these are passed to <code>bxp</code> (if <code>plot</code> is true); for details, see there.</p> </td> </tr> <tr valign='top'> <td><code>horizontal</code></td> <td> <p>logical indicating if the boxplots should be horizontal; default <code>FALSE</code> means vertical boxes.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical, if true <em>add</em> boxplot to current plot.</p> </td> </tr> <tr valign='top'> <td><code>at</code></td> <td> <p>numeric vector giving the locations where the boxplots should be drawn, particularly when <code>add = TRUE</code>; defaults to <code>1:n</code> where <code>n</code> is the number of boxes.</p> </td> </tr> </table> "	FALSE
"boxplot.matrix"	"graphics"	"Draw a Boxplot for each Column (Row) of a Matrix"	"<p>Interpreting the columns (or rows) of a matrix as different groups, draw a boxplot for each. </p>"	"<pre>## S3 method for class 'matrix' boxplot(x, use.cols = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric matrix.</p> </td> </tr> <tr valign='top'> <td><code>use.cols</code></td> <td> <p>logical indicating if columns (by default) or rows (<code>use.cols = FALSE</code>) should be plotted.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to <code>boxplot</code>.</p> </td> </tr> </table> "	FALSE
"bxp"	"graphics"	"Draw Box Plots from Summaries"	"<p><code>bxp</code> draws box plots based on the given summaries in <code>z</code>. It is usually called from within <code>boxplot</code>, but can be invoked directly. </p>"	"<pre>bxp(z, notch = FALSE, width = NULL, varwidth = FALSE,<br />     outline = TRUE, notch.frac = 0.5, log = '',<br />     border = par('fg'), pars = NULL, frame.plot = axes,<br />     horizontal = FALSE, add = FALSE, at = NULL, show.names = NULL,<br />     ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>z</code></td> <td> <p>a list containing data summaries to be used in constructing the plots.  These are usually the result of a call to <code>boxplot</code>, but can be generated in any fashion.</p> </td> </tr> <tr valign='top'> <td><code>notch</code></td> <td> <p>if <code>notch</code> is <code>TRUE</code>, a notch is drawn in each side of the boxes.  If the notches of two plots do not overlap then the medians are significantly different at the 5 percent level.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>a vector giving the relative widths of the boxes making up the plot.</p> </td> </tr> <tr valign='top'> <td><code>varwidth</code></td> <td> <p>if <code>varwidth</code> is <code>TRUE</code>, the boxes are drawn with widths proportional to the square-roots of the number of observations in the groups.</p> </td> </tr> <tr valign='top'> <td><code>outline</code></td> <td> <p>if <code>outline</code> is not true, the outliers are not drawn.</p> </td> </tr> <tr valign='top'> <td><code>notch.frac</code></td> <td> <p>numeric in (0,1). When <code>notch = TRUE</code>, the fraction of the box width that the notches should use.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>character or numeric (vector), the color of the box borders.  Is recycled for multiple boxes.  Is used as default for the <code>boxcol</code>, <code>medcol</code>, <code>whiskcol</code>, <code>staplecol</code>, and <code>outcol</code> options (see below). </p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>character, indicating if any axis should be drawn in logarithmic scale, as in <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>frame.plot</code></td> <td> <p>logical, indicating if a ‘frame’ (<code>box</code>) should be drawn; defaults to <code>TRUE</code>, unless <code>axes = FALSE</code> is specified.</p> </td> </tr> <tr valign='top'> <td><code>horizontal</code></td> <td> <p>logical indicating if the  boxplots should be horizontal; default <code>FALSE</code> means vertical boxes.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical, if true <em>add</em> boxplot to current plot.</p> </td> </tr> <tr valign='top'> <td><code>at</code></td> <td> <p>numeric vector giving the locations where the boxplots should be drawn, particularly when <code>add = TRUE</code>; defaults to <code>1:n</code> where <code>n</code> is the number of boxes.</p> </td> </tr> <tr valign='top'> <td><code>show.names</code></td> <td> <p>Set to <code>TRUE</code> or <code>FALSE</code> to override the defaults on whether an x-axis label is printed for each group.</p> </td> </tr> <tr valign='top'> <td><code>pars,...</code></td> <td> <p>graphical parameters (etc) can be passed as arguments to this function, either as a list (<code>pars</code>) or normally(<code>...</code>), see the following.  (Those in <code>...</code> take precedence over those in <code>pars</code>.) </p> <p>Currently, <code>yaxs</code> and <code>ylim</code> are used ‘along the boxplot’, i.e., vertically, when <code>horizontal</code> is false, and <code>xlim</code> horizontally. <code>xaxt</code>, <code>yaxt</code>, <code>las</code>, <code>cex.axis</code>, and <code>col.axis</code> are passed to <code>axis</code>, and <code>main</code>, <code>cex.main</code>, <code>col.main</code>, <code>sub</code>, <code>cex.sub</code>, <code>col.sub</code>, <code>xlab</code>, <code>ylab</code>, <code>cex.lab</code>, and <code>col.lab</code> are passed to <code>title</code>. </p> <p>In addition, <code>axes</code> is accepted (see <code>plot.window</code>), with default <code>TRUE</code>. </p> <p>The following arguments (or <code>pars</code> components) allow further customization of the boxplot graphics.  Their defaults are typically determined from the non-prefixed version (e.g., <code>boxlty</code> from <code>lty</code>), either from the specified argument or <code>pars</code> component or the corresponding <code>par</code> one. </p><br /><dl> <dt>boxwex:</dt> <dd> <p>a scale factor to be applied to all boxes.  When there are only a few groups, the appearance of the plot can be improved by making the boxes narrower.  The default depends on <code>at</code> and typically is <i>0.8</i>.</p> </dd> <dt>staplewex, outwex:</dt> <dd> <p>staple and outlier line width expansion, proportional to box width; both default to 0.5.</p> </dd> <dt>boxlty, boxlwd, boxcol, boxfill:</dt> <dd> <p>box outline type, width, color, and fill color (which currently defaults to <code>col</code> and will in future default to <code>par('bg')</code>).</p> </dd> <dt>medlty, medlwd, medpch, medcex, medcol, medbg:</dt> <dd> <p>median line type, line width, point character, point size expansion, color, and background color.  The default <code>medpch = NA</code> suppresses the point, and <code>medlty = 'blank'</code> does so for the line. Note that<code>medlwd</code> defaults to <i>3x</i> the default <code>lwd</code>.</p> </dd> <dt>whisklty, whisklwd, whiskcol:</dt> <dd> <p>whisker line type (default: <code>'dashed'</code>), width, and color.</p> </dd> <dt>staplelty, staplelwd, staplecol:</dt> <dd> <p>staple (= end of whisker) line type, width, and color.</p> </dd> <dt>outlty, outlwd, outpch, outcex, outcol, outbg:</dt> <dd> <p>outlier line type, line width, point character, point size expansion, color, and background color.  The default <code>outlty =  'blank'</code> suppresses the lines and <code>outpch = NA</code> suppresses points.</p> </dd> </dl> </td> </tr> </table> "	FALSE
"cdplot"	"graphics"	"Conditional Density Plots"	"<p>Computes and plots conditional densities describing how the conditional distribution of a categorical variable <code>y</code> changes over a numerical variable <code>x</code>. </p>"	"<pre>cdplot(x, ...)<br />## Default S3 method: cdplot(x, y,<br />   plot = TRUE, tol.ylab = 0.05, ylevels = NULL,<br />   bw = 'nrd0', n = 512, from = NULL, to = NULL,<br />   col = NULL, border = 1, main = '', xlab = NULL, ylab = NULL,<br />   yaxlabels = NULL, xlim = NULL, ylim = c(0, 1), ...)<br />## S3 method for class 'formula' cdplot(formula, data = list(),<br />   plot = TRUE, tol.ylab = 0.05, ylevels = NULL,<br />   bw = 'nrd0', n = 512, from = NULL, to = NULL,<br />   col = NULL, border = 1, main = '', xlab = NULL, ylab = NULL,<br />   yaxlabels = NULL, xlim = NULL, ylim = c(0, 1), ...,<br />   subset = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object, the default method expects a single numerical variable (or an object coercible to this).</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>a <code>'factor'</code> interpreted to be the dependent variable</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a <code>'formula'</code> of type <code>y ~ x</code> with a single dependent <code>'factor'</code> and a single numerical explanatory variable.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional data frame.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>logical. Should the computed conditional densities be plotted?</p> </td> </tr> <tr valign='top'> <td><code>tol.ylab</code></td> <td> <p>convenience tolerance parameter for y-axis annotation. If the distance between two labels drops under this threshold, they are plotted equidistantly.</p> </td> </tr> <tr valign='top'> <td><code>ylevels</code></td> <td> <p>a character or numeric vector specifying in which order the levels of the dependent variable should be plotted.</p> </td> </tr> <tr valign='top'> <td><code>bw, n, from, to, ...</code></td> <td> <p>arguments passed to <code>density</code></p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>a vector of fill colors of the same length as <code>levels(y)</code>. The default is to call <code>gray.colors</code>.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>border color of shaded polygons.</p> </td> </tr> <tr valign='top'> <td><code>main, xlab, ylab</code></td> <td> <p>character strings for annotation</p> </td> </tr> <tr valign='top'> <td><code>yaxlabels</code></td> <td> <p>character vector for annotation of y axis, defaults to <code>levels(y)</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>the range of x and y values with sensible defaults.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used for plotting.</p> </td> </tr> </table> "	FALSE
"clip"	"graphics"	"Set Clipping Region"	"<p>Set clipping region in user coordinates </p>"	"<pre>clip(x1, x2, y1, y2) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x1, x2, y1, y2</code></td> <td> <p>user coordinates of clipping rectangle</p> </td> </tr></table> "	FALSE
"screen"	"graphics"	"Creating and Controlling Multiple Screens on a Single Device"	"<p><code>split.screen</code> defines a number of regions within the current device which can, to some extent, be treated as separate graphics devices.  It is useful for generating multiple plots on a single device.  Screens can themselves be split, allowing for quite complex arrangements of plots. </p> <p><code>screen</code> is used to select which screen to draw in. </p> <p><code>erase.screen</code> is used to clear a single screen, which it does by filling with the background colour. </p> <p><code>close.screen</code> removes the specified screen definition(s). </p>"	"<pre>split.screen(figs, screen, erase = TRUE) screen(n = , new = TRUE) erase.screen(n = ) close.screen(n, all.screens = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>figs</code></td> <td> <p>A two-element vector describing the number of rows and the number of columns in a screen matrix <em>or</em> a matrix with 4 columns. If a matrix, then each row describes a screen with values for the left, right, bottom, and top of the screen (in that order) in NDC units, that is 0 at the lower left corner of the device surface, and 1 at the upper right corner.</p> </td> </tr> <tr valign='top'> <td><code>screen</code></td> <td> <p>A number giving the screen to be split.  It defaults to the current screen if there is one, otherwise the whole device region.</p> </td> </tr> <tr valign='top'> <td><code>erase</code></td> <td> <p>logical: should be selected screen be cleared?</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>A number indicating which screen to prepare for drawing (<code>screen</code>), erase (<code>erase.screen</code>), or close (<code>close.screen</code>).  (<code>close.screen</code> will accept a vector of screen numbers.)</p> </td> </tr> <tr valign='top'> <td><code>new</code></td> <td> <p>A logical value indicating whether the screen should be erased as part of the preparation for drawing in the screen.</p> </td> </tr> <tr valign='top'> <td><code>all.screens</code></td> <td> <p>A logical value indicating whether all of the screens should be closed.</p> </td> </tr> </table> "	FALSE
"coplot"	"graphics"	"Conditioning Plots"	"<p>This function produces two variants of the <b>co</b>nditioning plots discussed in the reference below. </p>"	"<pre>coplot(formula, data, given.values, panel = points, rows, columns,<br />        show.given = TRUE, col = par('fg'), pch = par('pch'),<br />        bar.bg = c(num = gray(0.8), fac = gray(0.95)),<br />        xlab = c(x.name, paste('Given :', a.name)),<br />        ylab = c(y.name, paste('Given :', b.name)),<br />        subscripts = FALSE,<br />        axlabels = function(f) abbreviate(levels(f)),<br />        number = 6, overlap = 0.5, xlim, ylim, ...) co.intervals(x, number = 6, overlap = 0.5) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula describing the form of conditioning plot.  A formula of the form <code>y ~ x | a</code> indicates that plots of <code>y</code> versus <code>x</code> should be produced conditional on the variable <code>a</code>.  A formula of the form <code>y ~ x| a * b</code> indicates that plots of <code>y</code> versus <code>x</code> should be produced conditional on the two variables <code>a</code> and <code>b</code>. </p> <p>All three or four variables may be either numeric or factors. When <code>x</code> or <code>y</code> are factors, the result is almost as if <code>as.numeric()</code> was applied, whereas for factor <code>a</code> or <code>b</code>, the conditioning (and its graphics if <code>show.given</code> is true) are adapted. </p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data frame containing values for any variables in the formula.  By default the environment where <code>coplot</code> was called from is used.</p> </td> </tr> <tr valign='top'> <td><code>given.values</code></td> <td> <p>a value or list of two values which determine how the conditioning on <code>a</code> and <code>b</code> is to take place. </p> <p>When there is no <code>b</code> (i.e., conditioning only on <code>a</code>), usually this is a matrix with two columns each row of which gives an interval, to be conditioned on, but is can also be a single vector of numbers or a set of factor levels (if the variable being conditioned on is a factor). In this case (no <code>b</code>), the result of <code>co.intervals</code> can be used directly as <code>given.values</code> argument. </p> </td> </tr> <tr valign='top'> <td><code>panel</code></td> <td> <p>a <code>function(x, y, col, pch, ...)</code> which gives the action to be carried out in each panel of the display.  The default is <code>points</code>.</p> </td> </tr> <tr valign='top'> <td><code>rows</code></td> <td> <p>the panels of the plot are laid out in a <code>rows</code> by <code>columns</code> array.  <code>rows</code> gives the number of rows in the array.</p> </td> </tr> <tr valign='top'> <td><code>columns</code></td> <td> <p>the number of columns in the panel layout array.</p> </td> </tr> <tr valign='top'> <td><code>show.given</code></td> <td> <p>logical (possibly of length 2 for 2 conditioning variables): should conditioning plots be shown for the corresponding conditioning variables (default <code>TRUE</code>).</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>a vector of colors to be used to plot the points.  If too short, the values are recycled.</p> </td> </tr> <tr valign='top'> <td><code>pch</code></td> <td> <p>a vector of plotting symbols or characters.  If too short, the values are recycled.</p> </td> </tr> <tr valign='top'> <td><code>bar.bg</code></td> <td> <p>a named vector with components <code>'num'</code> and <code>'fac'</code> giving the background colors for the (shingle) bars, for <b>num</b>eric and <b>fac</b>tor conditioning variables respectively.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>character; labels to use for the x axis and the first conditioning variable.  If only one label is given, it is used for the x axis and the default label is used for the conditioning variable.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>character; labels to use for the y axis and any second conditioning variable.</p> </td> </tr> <tr valign='top'> <td><code>subscripts</code></td> <td> <p>logical: if true the panel function is given an additional (third) argument <code>subscripts</code> giving the subscripts of the data passed to that panel.</p> </td> </tr> <tr valign='top'> <td><code>axlabels</code></td> <td> <p>function for creating axis (tick) labels when x or y are factors.</p> </td> </tr> <tr valign='top'> <td><code>number</code></td> <td> <p>integer; the number of conditioning intervals, for a and b, possibly of length 2.  It is only used if the corresponding conditioning variable is not a <code>factor</code>.</p> </td> </tr> <tr valign='top'> <td><code>overlap</code></td> <td> <p>numeric &lt; 1; the fraction of overlap of the conditioning variables, possibly of length 2 for x and y direction.  When overlap &lt; 0, there will be <em>gaps</em> between the data slices.</p> </td> </tr> <tr valign='top'> <td><code>xlim</code></td> <td> <p>the range for the x axis.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>the range for the y axis.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments to the panel function.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector.</p> </td> </tr> </table> "	FALSE
"contour"	"graphics"	"Display Contours"	"<p>Create a contour plot, or add contour lines to an existing plot. </p>"	"<pre>contour(x, ...)<br />## Default S3 method: contour(x = seq(0, 1, length.out = nrow(z)),<br />         y = seq(0, 1, length.out = ncol(z)),<br />         z,<br />         nlevels = 10, levels = pretty(zlim, nlevels),<br />         labels = NULL,<br />         xlim = range(x, finite = TRUE),<br />         ylim = range(y, finite = TRUE),<br />         zlim = range(z, finite = TRUE),<br />         labcex = 0.6, drawlabels = TRUE, method = 'flattest',<br />         vfont, axes = TRUE, frame.plot = axes,<br />         col = par('fg'), lty = par('lty'), lwd = par('lwd'),<br />         add = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>locations of grid lines at which the values in <code>z</code> are measured.  These must be in ascending order.  By default, equally spaced values from 0 to 1 are used.  If <code>x</code> is a <code>list</code>, its components <code>x$x</code> and <code>x$y</code> are used for <code>x</code> and <code>y</code>, respectively. If the list has component <code>z</code> this is used for <code>z</code>.</p> </td> </tr> <tr valign='top'> <td><code>z</code></td> <td> <p>a matrix containing the values to be plotted (<code>NA</code>s are allowed).  Note that <code>x</code> can be used instead of <code>z</code> for convenience.</p> </td> </tr> <tr valign='top'> <td><code>nlevels</code></td> <td> <p>number of contour levels desired <b>iff</b> <code>levels</code> is not supplied.</p> </td> </tr> <tr valign='top'> <td><code>levels</code></td> <td> <p>numeric vector of levels at which to draw contour lines.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>a vector giving the labels for the contour lines.  If <code>NULL</code> then the levels are used as labels, otherwise this is coerced by <code>as.character</code>.</p> </td> </tr> <tr valign='top'> <td><code>labcex</code></td> <td> <p><code>cex</code> for contour labelling.  This is an absolute size, not a multiple of <code>par('cex')</code>.</p> </td> </tr> <tr valign='top'> <td><code>drawlabels</code></td> <td> <p>logical.  Contours are labelled if <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>character string specifying where the labels will be located. Possible values are <code>'simple'</code>, <code>'edge'</code> and <code>'flattest'</code> (the default).  See the ‘Details’ section.</p> </td> </tr> <tr valign='top'> <td><code>vfont</code></td> <td> <p>if <code>NULL</code>, the current font family and face are used for the contour labels.  If a character vector of length 2 then Hershey vector fonts are used for the contour labels. The first element of the vector selects a typeface and the second element selects a fontindex (see <code>text</code> for more information). The default is <code>NULL</code> on graphics devices with high-quality rotation of text and <code>c('sans serif', 'plain')</code> otherwise.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim, zlim</code></td> <td> <p>x-, y- and z-limits for the plot.</p> </td> </tr> <tr valign='top'> <td><code>axes, frame.plot</code></td> <td> <p>logical indicating whether axes or a box should be drawn, see <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>color for the lines drawn.</p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>line type for the lines drawn.</p> </td> </tr> <tr valign='top'> <td><code>lwd</code></td> <td> <p>line width for the lines drawn.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical. If <code>TRUE</code>, add to a current plot.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments to <code>plot.window</code>, <code>title</code>, <code>Axis</code> and <code>box</code>, typically graphical parameters such as <code>cex.axis</code>.</p> </td> </tr> </table> "	FALSE
"curve"	"graphics"	"Draw Function Plots"	"<p>Draws a curve corresponding to a function over the interval <code>[from, to]</code>. <code>curve</code> can plot also an expression in the variable <code>xname</code>, default <span class='samp'>x</span>. </p>"	"<pre>curve(expr, from = NULL, to = NULL, n = 101, add = FALSE,<br />       type = 'l', xname = 'x', xlab = xname, ylab = NULL,<br />       log = NULL, xlim = NULL, ...)<br />## S3 method for class 'function' plot(x, y = 0, to = 1, from = y, xlim = NULL, ylab = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>The name of a function, or a call or an expression written as a function of <code>x</code> which will evaluate to an object of the same length as <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a ‘vectorizing’ numeric <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> function.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>alias for <code>from</code> for compatibility with <code>plot</code></p> </td> </tr> <tr valign='top'> <td><code>from, to</code></td> <td> <p>the range over which the function will be plotted.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>integer; the number of x values at which to evaluate.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical; if <code>TRUE</code> add to an already existing plot; if <code>NA</code> start a new plot taking the defaults for the limits and log-scaling of the x-axis from the previous plot.  Taken as <code>FALSE</code> (with a warning if a different value is supplied) if no graphics device is open.</p> </td> </tr> <tr valign='top'> <td><code>xlim</code></td> <td> <p><code>NULL</code> or a numeric vector of length 2; if non-<code>NULL</code> it provides the defaults for <code>c(from, to)</code> and, unless <code>add = TRUE</code>, selects the x-limits of the plot – see <code>plot.window</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>plot type: see <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>xname</code></td> <td> <p>character string giving the name to be used for the x axis.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab, log, ...</code></td> <td> <p>labels and graphical parameters can also be specified as arguments.  See ‘Details’ for the interpretation of the default for <code>log</code>. </p> <p>For the <code>'function'</code> method of <code>plot</code>, <code>...</code> can include any of the other arguments of <code>curve</code>, except <code>expr</code>. </p> </td> </tr> </table> "	FALSE
"dotchart"	"graphics"	"Cleveland's Dot Plots"	"<p>Draw a Cleveland dot plot. </p>"	"<pre>dotchart(x, labels = NULL, groups = NULL, gdata = NULL,<br />          cex = par('cex'), pt.cex = cex,<br />          pch = 21, gpch = 21, bg = par('bg'),<br />          color = par('fg'), gcolor = par('fg'), lcolor = 'gray',<br />          xlim = range(x[is.finite(x)]),<br />          main = NULL, xlab = NULL, ylab = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>either a vector or matrix of numeric values (<code>NA</code>s are allowed).  If <code>x</code> is a matrix the overall plot consists of juxtaposed dotplots for each row.  Inputs which satisfy <code>is.numeric(x)</code> but not <code>is.vector(x) || is.matrix(x)</code> are coerced by <code>as.numeric</code>, with a warning.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>a vector of labels for each point. For vectors the default is to use <code>names(x)</code> and for matrices the row labels <code>dimnames(x)[[1]]</code>.</p> </td> </tr> <tr valign='top'> <td><code>groups</code></td> <td> <p>an optional factor indicating how the elements of <code>x</code> are grouped. If <code>x</code> is a matrix, <code>groups</code> will default to the columns of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>gdata</code></td> <td> <p>data values for the groups. This is typically a summary such as the median or mean of each group.</p> </td> </tr> <tr valign='top'> <td><code>cex</code></td> <td> <p>the character size to be used.  Setting <code>cex</code> to a value smaller than one can be a useful way of avoiding label overlap.  Unlike many other graphics functions, this sets the actual size, not a multiple of <code>par('cex')</code>.</p> </td> </tr> <tr valign='top'> <td><code>pt.cex</code></td> <td> <p>the <code>cex</code> to be applied to plotting symbols. This behaves like <code>cex</code> in <code>plot()</code>.</p> </td> </tr> <tr valign='top'> <td><code>pch</code></td> <td> <p>the plotting character or symbol to be used.</p> </td> </tr> <tr valign='top'> <td><code>gpch</code></td> <td> <p>the plotting character or symbol to be used for group values.</p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>the background color of plotting characters or symbols to be used; use <code>par(bg= *)</code> to set the background color of the whole plot.</p> </td> </tr> <tr valign='top'> <td><code>color</code></td> <td> <p>the color(s) to be used for points and labels.</p> </td> </tr> <tr valign='top'> <td><code>gcolor</code></td> <td> <p>the single color to be used for group labels and values.</p> </td> </tr> <tr valign='top'> <td><code>lcolor</code></td> <td> <p>the color(s) to be used for the horizontal lines.</p> </td> </tr> <tr valign='top'> <td><code>xlim</code></td> <td> <p>horizontal range for the plot, see <code>plot.window</code>, for example.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>overall title for the plot, see <code>title</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab</code></td> <td> <p>axis annotations as in <code>title</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters can also be specified as arguments.</p> </td> </tr> </table> "	FALSE
"fourfoldplot"	"graphics"	"Fourfold Plots"	"<p>Creates a fourfold display of a 2 by 2 by <i>k</i> contingency table on the current graphics device, allowing for the visual inspection of the association between two dichotomous variables in one or several populations (strata). </p>"	"<pre>fourfoldplot(x, color = c('#99CCFF', '#6699CC'),<br />              conf.level = 0.95,<br />              std = c('margins', 'ind.max', 'all.max'),<br />              margin = c(1, 2), space = 0.2, main = NULL,<br />              mfrow = NULL, mfcol = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a 2 by 2 by <i>k</i> contingency table in array form, or as a 2 by 2 matrix if <i>k</i> is 1.</p> </td> </tr> <tr valign='top'> <td><code>color</code></td> <td> <p>a vector of length 2 specifying the colors to use for the smaller and larger diagonals of each 2 by 2 table.</p> </td> </tr> <tr valign='top'> <td><code>conf.level</code></td> <td> <p>confidence level used for the confidence rings on the odds ratios.  Must be a single nonnegative number less than 1; if set to 0, confidence rings are suppressed.</p> </td> </tr> <tr valign='top'> <td><code>std</code></td> <td> <p>a character string specifying how to standardize the table. Must match one of <code>'margins'</code>, <code>'ind.max'</code>, or <code>'all.max'</code>, and can be abbreviated to the initial letter. If set to <code>'margins'</code>, each 2 by 2 table is standardized to equate the margins specified by <code>margin</code> while preserving the odds ratio.  If <code>'ind.max'</code> or <code>'all.max'</code>, the tables are either individually or simultaneously standardized to a maximal cell frequency of 1.</p> </td> </tr> <tr valign='top'> <td><code>margin</code></td> <td> <p>a numeric vector with the margins to equate.  Must be one of <code>1</code>, <code>2</code>, or <code>c(1, 2)</code> (the default), which corresponds to standardizing the row, column, or both margins in each 2 by 2 table. Only used if <code>std</code> equals <code>'margins'</code>.</p> </td> </tr> <tr valign='top'> <td><code>space</code></td> <td> <p>the amount of space (as a fraction of the maximal radius of the quarter circles) used for the row and column labels.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>character string for the fourfold title.</p> </td> </tr> <tr valign='top'> <td><code>mfrow</code></td> <td> <p>a numeric vector of the form <code>c(nr, nc)</code>, indicating that the displays for the 2 by 2 tables should be arranged in an <code>nr</code> by <code>nc</code> layout, filled by rows.</p> </td> </tr> <tr valign='top'> <td><code>mfcol</code></td> <td> <p>a numeric vector of the form <code>c(nr, nc)</code>, indicating that the displays for the 2 by 2 tables should be arranged in an <code>nr</code> by <code>nc</code> layout, filled by columns.</p> </td> </tr> </table> "	FALSE
"frame"	"graphics"	"Create / Start a New Plot Frame"	"<p>This function (<code>frame</code> is an alias for <code>plot.new</code>) causes the completion of plotting in the current plot (if there is one) and an advance to a new graphics frame.  This is used in all high-level plotting functions and also useful for skipping plots when a multi-figure region is in use. </p>"	"<pre>plot.new() frame() </pre>"	NA	FALSE
"convertXY"	"graphics"	"Convert between Graphics Coordinate Systems"	"<p>Convert between graphics coordinate systems. </p>"	"<pre>grconvertX(x, from = 'user', to = 'user') grconvertY(y, from = 'user', to = 'user') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric vector of coordinates.</p> </td> </tr> <tr valign='top'> <td><code>from, to</code></td> <td> <p>character strings giving the coordinate systems to convert between.</p> </td> </tr> </table> "	FALSE
"grid"	"graphics"	"Add Grid to a Plot"	"<p><code>grid</code> adds an <code>nx</code> by <code>ny</code> rectangular grid to an existing plot. </p>"	"<pre>grid(nx = NULL, ny = nx, col = 'lightgray', lty = 'dotted',<br />      lwd = par('lwd'), equilogs = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>nx, ny</code></td> <td> <p>number of cells of the grid in x and y direction.  When <code>NULL</code>, as per default, the grid aligns with the tick marks on the corresponding <em>default</em> axis (i.e., tickmarks as computed by <code>axTicks</code>).  When <code>NA</code>, no grid lines are drawn in the corresponding direction.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>character or (integer) numeric; color of the grid lines.</p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>character or (integer) numeric; line type of the grid lines.</p> </td> </tr> <tr valign='top'> <td><code>lwd</code></td> <td> <p>non-negative numeric giving line width of the grid lines.</p> </td> </tr> <tr valign='top'> <td><code>equilogs</code></td> <td> <p>logical, only used when <em>log</em> coordinates and alignment with the axis tick marks are active.  Setting <code>equilogs =<br />       FALSE</code> in that case gives <em>non equidistant</em> tick aligned grid lines.</p> </td> </tr> </table> "	FALSE
"hist"	"graphics"	"Histograms"	"<p>The generic function <code>hist</code> computes a histogram of the given data values.  If <code>plot = TRUE</code>, the resulting object of class <code>'histogram'</code> is plotted by <code>plot.histogram</code>, before it is returned. </p>"	"<pre>hist(x, ...)<br />## Default S3 method: hist(x, breaks = 'Sturges',<br />      freq = NULL, probability = !freq,<br />      include.lowest = TRUE, right = TRUE,<br />      density = NULL, angle = 45, col = NULL, border = NULL,<br />      main = paste('Histogram of' , xname),<br />      xlim = range(breaks), ylim = NULL,<br />      xlab = xname, ylab,<br />      axes = TRUE, plot = TRUE, labels = FALSE,<br />      nclass = NULL, warn.unused = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector of values for which the histogram is desired.</p> </td> </tr> <tr valign='top'> <td><code>breaks</code></td> <td> <p>one of: </p><br /><ul> <li> <p> a vector giving the breakpoints between histogram cells, </p> </li> <li> <p> a function to compute the vector of breakpoints, </p> </li> <li> <p> a single number giving the number of cells for the histogram, </p> </li> <li> <p> a character string naming an algorithm to compute the number of cells (see ‘Details’), </p> </li> <li> <p> a function to compute the number of cells. </p> </li> </ul> <p>In the last three cases the number is a suggestion only; the breakpoints will be set to <code>pretty</code> values.  If <code>breaks</code> is a function, the <code>x</code> vector is supplied to it as the only argument. </p> </td> </tr> <tr valign='top'> <td><code>freq</code></td> <td> <p>logical; if <code>TRUE</code>, the histogram graphic is a representation of frequencies, the <code>counts</code> component of the result; if <code>FALSE</code>, probability densities, component <code>density</code>, are plotted (so that the histogram has a total area of one).  Defaults to <code>TRUE</code> <em>if and only if</em> <code>breaks</code> are equidistant (and <code>probability</code> is not specified).</p> </td> </tr> <tr valign='top'> <td><code>probability</code></td> <td> <p>an <em>alias</em> for <code>!freq</code>, for S compatibility.</p> </td> </tr> <tr valign='top'> <td><code>include.lowest</code></td> <td> <p>logical; if <code>TRUE</code>, an <code>x[i]</code> equal to the <code>breaks</code> value will be included in the first (or last, for <code>right = FALSE</code>) bar.  This will be ignored (with a warning) unless <code>breaks</code> is a vector.</p> </td> </tr> <tr valign='top'> <td><code>right</code></td> <td> <p>logical; if <code>TRUE</code>, the histogram cells are right-closed (left open) intervals.</p> </td> </tr> <tr valign='top'> <td><code>density</code></td> <td> <p>the density of shading lines, in lines per inch. The default value of <code>NULL</code> means that no shading lines are drawn. Non-positive values of <code>density</code> also inhibit the drawing of shading lines.</p> </td> </tr> <tr valign='top'> <td><code>angle</code></td> <td> <p>the slope of shading lines, given as an angle in degrees (counter-clockwise).</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>a colour to be used to fill the bars. The default of <code>NULL</code> yields unfilled bars.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>the color of the border around the bars.  The default is to use the standard foreground color.</p> </td> </tr> <tr valign='top'> <td><code>main, xlab, ylab</code></td> <td> <p>these arguments to <code>title</code> have useful defaults here.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>the range of x and y values with sensible defaults. Note that <code>xlim</code> is <em>not</em> used to define the histogram (breaks), but only for plotting (when <code>plot = TRUE</code>).</p> </td> </tr> <tr valign='top'> <td><code>axes</code></td> <td> <p>logical.  If <code>TRUE</code> (default), axes are draw if the plot is drawn.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>logical.  If <code>TRUE</code> (default), a histogram is plotted, otherwise a list of breaks and counts is returned.  In the latter case, a warning is used if (typically graphical) arguments are specified that only apply to the <code>plot = TRUE</code> case.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>logical or character string.  Additionally draw labels on top of bars, if not <code>FALSE</code>; see <code>plot.histogram</code>.</p> </td> </tr> <tr valign='top'> <td><code>nclass</code></td> <td> <p>numeric (integer).  For S(-PLUS) compatibility only, <code>nclass</code> is equivalent to <code>breaks</code> for a scalar or character argument.</p> </td> </tr> <tr valign='top'> <td><code>warn.unused</code></td> <td> <p>logical.  If <code>plot = FALSE</code> and <code>warn.unused = TRUE</code>, a warning will be issued when graphical parameters are passed to <code>hist.default()</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments and graphical parameters passed to <code>plot.histogram</code> and thence to <code>title</code> and <code>axis</code> (if <code>plot = TRUE</code>).</p> </td> </tr> </table> "	FALSE
"hist.POSIXt"	"graphics"	"Histogram of a Date or Date-Time Object"	"<p>Method for <code>hist</code> applied to date or date-time objects. </p>"	"<pre>## S3 method for class 'POSIXt' hist(x, breaks, ...,<br />      xlab = deparse(substitute(x)),<br />      plot = TRUE, freq = FALSE,<br />      start.on.monday = TRUE, format, right = TRUE)<br />## S3 method for class 'Date' hist(x, breaks, ...,<br />      xlab = deparse(substitute(x)),<br />      plot = TRUE, freq = FALSE,<br />      start.on.monday = TRUE, format, right = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object inheriting from class <code>'POSIXt'</code> or <code>'Date'</code>.</p> </td> </tr> <tr valign='top'> <td><code>breaks</code></td> <td><br /><p>a vector of cut points <em>or</em> number giving the number of intervals which <code>x</code> is to be cut into <em>or</em> an interval specification, one of <code>'days'</code>, <code>'weeks'</code>, <code>'months'</code>, <code>'quarters'</code> or <code>'years'</code>, plus <code>'secs'</code>, <code>'mins'</code>, <code>'hours'</code> for date-time objects. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters, or arguments to <code>hist.default</code> such as <code>include.lowest</code>, <code>right</code> and <code>labels</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>a character string giving the label for the x axis, if plotted.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>logical.  If <code>TRUE</code> (default), a histogram is plotted, otherwise a list of breaks and counts is returned.</p> </td> </tr> <tr valign='top'> <td><code>freq</code></td> <td> <p>logical; if <code>TRUE</code>, the histogram graphic is a representation of frequencies, i.e, the <code>counts</code> component of the result; if <code>FALSE</code>, <em>relative</em> frequencies (probabilities) are plotted.</p> </td> </tr> <tr valign='top'> <td><code>start.on.monday</code></td> <td> <p>logical. If <code>breaks = 'weeks'</code>, should the week start on Mondays or Sundays?</p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p>for the x-axis labels. See <code>strptime</code>.</p> </td> </tr> <tr valign='top'> <td><code>right</code></td> <td> <p>logical; if <code>TRUE</code>, the histogram cells are right-closed (left open) intervals.</p> </td> </tr> </table> "	FALSE
"identify"	"graphics"	"Identify Points in a Scatter Plot"	"<p><code>identify</code> reads the position of the graphics pointer when the (first) mouse button is pressed.  It then searches the coordinates given in <code>x</code> and <code>y</code> for the point closest to the pointer. If this point is close enough to the pointer, its index will be returned as part of the value of the call. </p>"	"<pre>identify(x, ...)<br />## Default S3 method: identify(x, y = NULL, labels = seq_along(x), pos = FALSE,<br />          n = length(x), plot = TRUE, atpen = FALSE, offset = 0.5,<br />          tolerance = 0.25, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>coordinates of points in a scatter plot.  Alternatively, any object which defines coordinates (a plotting structure, time series etc: see <code>xy.coords</code>) can be given as <code>x</code>, and <code>y</code> left missing.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>an optional character vector giving labels for the points.  Will be coerced using <code>as.character</code>, and recycled if necessary to the length of <code>x</code>.  Excess labels will be discarded, with a warning.</p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td> <p>if <code>pos</code> is <code>TRUE</code>, a component is added to the return value which indicates where text was plotted relative to each identified point: see Value.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>the maximum number of points to be identified.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>logical: if <code>plot</code> is <code>TRUE</code>, the labels are printed near the points and if <code>FALSE</code> they are omitted.</p> </td> </tr> <tr valign='top'> <td><code>atpen</code></td> <td> <p>logical: if <code>TRUE</code> and <code>plot = TRUE</code>, the lower-left corners of the labels are plotted at the points clicked rather than relative to the points.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td> <p>the distance (in character widths) which separates the label from identified points.  Negative values are allowed.  Not used if <code>atpen = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>tolerance</code></td> <td> <p>the maximal distance (in inches) for the pointer to be ‘close enough’ to a point.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to <code>par</code> such as <code>cex</code>, <code>col</code> and <code>font</code>.</p> </td> </tr> </table> "	FALSE
"image"	"graphics"	"Display a Color Image"	"<p>Creates a grid of colored or gray-scale rectangles with colors corresponding to the values in <code>z</code>.  This can be used to display three-dimensional or spatial data aka <em>images</em>. This is a generic function. </p> <p>The functions <code>heat.colors</code>, <code>terrain.colors</code> and <code>topo.colors</code> create heat-spectrum (red to white) and topographical color schemes suitable for displaying ordered data, with <code>n</code> giving the number of colors desired. </p>"	"<pre>image(x, ...)<br />## Default S3 method: image(x, y, z, zlim, xlim, ylim, col = heat.colors(12),<br />       add = FALSE, xaxs = 'i', yaxs = 'i', xlab, ylab,<br />       breaks, oldstyle = FALSE, useRaster, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>locations of grid lines at which the values in <code>z</code> are measured.  These must be finite, non-missing and in (strictly) ascending order.  By default, equally spaced values from 0 to 1 are used.  If <code>x</code> is a <code>list</code>, its components <code>x$x</code> and <code>x$y</code> are used for <code>x</code> and <code>y</code>, respectively. If the list has component <code>z</code> this is used for <code>z</code>.</p> </td> </tr> <tr valign='top'> <td><code>z</code></td> <td> <p>a numeric or logical matrix containing the values to be plotted (<code>NA</code>s are allowed).  Note that <code>x</code> can be used instead of <code>z</code> for convenience.</p> </td> </tr> <tr valign='top'> <td><code>zlim</code></td> <td> <p>the minimum and maximum <code>z</code> values for which colors should be plotted, defaulting to the range of the finite values of <code>z</code>. Each of the given colors will be used to color an equispaced interval of this range. The <em>midpoints</em> of the intervals cover the range, so that values just outside the range will be plotted.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>ranges for the plotted <code>x</code> and <code>y</code> values, defaulting to the ranges of <code>x</code> and <code>y</code>.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>a list of colors such as that generated by <code>rainbow</code>, <code>heat.colors</code>, <code>topo.colors</code>, <code>terrain.colors</code> or similar functions.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical; if <code>TRUE</code>, add to current plot (and disregard the following four arguments).  This is rarely useful because <code>image</code> ‘paints’ over existing graphics.</p> </td> </tr> <tr valign='top'> <td><code>xaxs, yaxs</code></td> <td> <p>style of x and y axis.  The default <code>'i'</code> is appropriate for images.  See <code>par</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab</code></td> <td> <p>each a character string giving the labels for the x and y axis.  Default to the ‘call names’ of <code>x</code> or <code>y</code>, or to <code>''</code> if these were unspecified.</p> </td> </tr> <tr valign='top'> <td><code>breaks</code></td> <td> <p>a set of finite numeric breakpoints for the colours: must have one more breakpoint than colour and be in increasing order.  Unsorted vectors will be sorted, with a warning.</p> </td> </tr> <tr valign='top'> <td><code>oldstyle</code></td> <td> <p>logical. If true the midpoints of the colour intervals are equally spaced, and <code>zlim[1]</code> and <code>zlim[2]</code> were taken to be midpoints.  The default is to have colour intervals of equal lengths between the limits.</p> </td> </tr> <tr valign='top'> <td><code>useRaster</code></td> <td> <p>logical; if <code>TRUE</code> a bitmap raster is used to plot the image instead of polygons. The grid must be regular in that case, otherwise an error is raised.<br />   For the behaviour when this is not specified, see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters for <code>plot</code> may also be passed as arguments to this function, as can the plot aspect ratio <code>asp</code> and <code>axes</code> (see <code>plot.window</code>).</p> </td> </tr> </table> "	FALSE
"layout"	"graphics"	"Specifying Complex Plot Arrangements"	"<p><code>layout</code> divides the device up into as many rows and columns as there are in matrix <code>mat</code>, with the column-widths and the row-heights specified in the respective arguments. </p>"	"<pre>layout(mat, widths = rep.int(1, ncol(mat)),<br />        heights = rep.int(1, nrow(mat)), respect = FALSE)<br />layout.show(n = 1) lcm(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>mat</code></td> <td> <p>a matrix object specifying the location of the next <i>N</i> figures on the output device.  Each value in the matrix must be <code>0</code> or a positive integer.  If <i>N</i> is the largest positive integer in the matrix, then the integers <i>{1, …, N-1}</i> must also appear at least once in the matrix.</p> </td> </tr> <tr valign='top'> <td><code>widths</code></td> <td> <p>a vector of values for the widths of columns on the device.  Relative widths are specified with numeric values.<br />    Absolute widths (in centimetres) are specified with the <code>lcm()</code> function (see examples).</p> </td> </tr> <tr valign='top'> <td><code>heights</code></td> <td> <p>a vector of values for the heights of rows on the device. Relative and absolute heights can be specified, see <code>widths</code> above.</p> </td> </tr> <tr valign='top'> <td><code>respect</code></td> <td> <p>either a logical value or a matrix object.  If the latter, then it must have the same dimensions as <code>mat</code> and each value in the matrix must be either <code>0</code> or <code>1</code>.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of figures to plot.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a dimension to be interpreted as a number of centimetres.</p> </td> </tr> </table> "	FALSE
"legend"	"graphics"	"Add Legends to Plots"	"<p>This function can be used to add legends to plots.  Note that a call to the function <code>locator(1)</code> can be used in place of the <code>x</code> and <code>y</code> arguments. </p>"	"<pre>legend(x, y = NULL, legend, fill = NULL, col = par('col'),<br />        border = 'black', lty, lwd, pch,<br />        angle = 45, density = NULL, bty = 'o', bg = par('bg'),<br />        box.lwd = par('lwd'), box.lty = par('lty'), box.col = par('fg'),<br />        pt.bg = NA, cex = 1, pt.cex = cex, pt.lwd = lwd,<br />        xjust = 0, yjust = 1, x.intersp = 1, y.intersp = 1,<br />        adj = c(0, 0.5), text.width = NULL, text.col = par('col'),<br />        text.font = NULL, merge = do.lines &amp;&amp; has.pch, trace = FALSE,<br />        plot = TRUE, ncol = 1, horiz = FALSE, title = NULL,<br />        inset = 0, xpd, title.col = text.col, title.adj = 0.5,<br />        seg.len = 2) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>the x and y co-ordinates to be used to position the legend. They can be specified by keyword or in any way which is accepted by <code>xy.coords</code>: See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>legend</code></td> <td> <p>a character or expression vector of length <i>≥ 1</i> to appear in the legend.  Other objects will be coerced by <code>as.graphicsAnnot</code>.</p> </td> </tr> <tr valign='top'> <td><code>fill</code></td> <td> <p>if specified, this argument will cause boxes filled with the specified colors (or shaded in the specified colors) to appear beside the legend text.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>the color of points or lines appearing in the legend.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>the border color for the boxes (used only if <code>fill</code> is specified).</p> </td> </tr> <tr valign='top'> <td><code>lty, lwd</code></td> <td> <p>the line types and widths for lines appearing in the legend.  One of these two <em>must</em> be specified for line drawing.</p> </td> </tr> <tr valign='top'> <td><code>pch</code></td> <td> <p>the plotting symbols appearing in the legend, as numeric vector or a vector of 1-character strings (see <code>points</code>). Unlike <code>points</code>, this can all be specified as a single multi-character string.  <em>Must</em> be specified for symbol drawing.</p> </td> </tr> <tr valign='top'> <td><code>angle</code></td> <td> <p>angle of shading lines.</p> </td> </tr> <tr valign='top'> <td><code>density</code></td> <td> <p>the density of shading lines, if numeric and positive. If <code>NULL</code> or negative or <code>NA</code> color filling is assumed.</p> </td> </tr> <tr valign='top'> <td><code>bty</code></td> <td> <p>the type of box to be drawn around the legend.  The allowed values are <code>'o'</code> (the default) and <code>'n'</code>.</p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>the background color for the legend box.  (Note that this is only used if <code>bty != 'n'</code>.)</p> </td> </tr> <tr valign='top'> <td><code>box.lty, box.lwd, box.col</code></td> <td> <p>the line type, width and color for the legend box (if <code>bty = 'o'</code>).</p> </td> </tr> <tr valign='top'> <td><code>pt.bg</code></td> <td> <p>the background color for the <code>points</code>, corresponding to its argument <code>bg</code>.</p> </td> </tr> <tr valign='top'> <td><code>cex</code></td> <td> <p>character expansion factor <b>relative</b> to current <code>par('cex')</code>.  Used for text, and provides the default for <code>pt.cex</code> and <code>title.cex</code>.</p> </td> </tr> <tr valign='top'> <td><code>pt.cex</code></td> <td> <p>expansion factor(s) for the points.</p> </td> </tr> <tr valign='top'> <td><code>pt.lwd</code></td> <td> <p>line width for the points, defaults to the one for lines, or if that is not set, to <code>par('lwd')</code>.</p> </td> </tr> <tr valign='top'> <td><code>xjust</code></td> <td> <p>how the legend is to be justified relative to the legend x location.  A value of 0 means left justified, 0.5 means centered and 1 means right justified.</p> </td> </tr> <tr valign='top'> <td><code>yjust</code></td> <td> <p>the same as <code>xjust</code> for the legend y location.</p> </td> </tr> <tr valign='top'> <td><code>x.intersp</code></td> <td> <p>character interspacing factor for horizontal (x) spacing.</p> </td> </tr> <tr valign='top'> <td><code>y.intersp</code></td> <td> <p>the same for vertical (y) line distances.</p> </td> </tr> <tr valign='top'> <td><code>adj</code></td> <td> <p>numeric of length 1 or 2; the string adjustment for legend text.  Useful for y-adjustment when <code>labels</code> are plotmath expressions.</p> </td> </tr> <tr valign='top'> <td><code>text.width</code></td> <td> <p>the width of the legend text in x (<code>'user'</code>) coordinates.  (Should be a single positive number even for a reversed  x axis.)  Defaults to the proper value computed by  <code>strwidth(legend)</code>.</p> </td> </tr> <tr valign='top'> <td><code>text.col</code></td> <td> <p>the color used for the legend text.</p> </td> </tr> <tr valign='top'> <td><code>text.font</code></td> <td> <p>the font used for the legend text, see <code>text</code>.</p> </td> </tr> <tr valign='top'> <td><code>merge</code></td> <td> <p>logical; if <code>TRUE</code>, merge points and lines but not filled boxes.  Defaults to <code>TRUE</code> if there are points and lines.</p> </td> </tr> <tr valign='top'> <td><code>trace</code></td> <td> <p>logical; if <code>TRUE</code>, shows how <code>legend</code> does all its magical computations.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>logical.  If <code>FALSE</code>, nothing is plotted but the sizes are returned.</p> </td> </tr> <tr valign='top'> <td><code>ncol</code></td> <td> <p>the number of columns in which to set the legend items (default is 1, a vertical legend).</p> </td> </tr> <tr valign='top'> <td><code>horiz</code></td> <td> <p>logical; if <code>TRUE</code>, set the legend horizontally rather than vertically (specifying <code>horiz</code> overrides the <code>ncol</code> specification).</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>a character string or length-one expression giving a title to be placed at the top of the legend.  Other objects will be coerced by <code>as.graphicsAnnot</code>.</p> </td> </tr> <tr valign='top'> <td><code>inset</code></td> <td> <p>inset distance(s) from the margins as a fraction of the plot region when legend is placed by keyword.</p> </td> </tr> <tr valign='top'> <td><code>xpd</code></td> <td> <p>if supplied, a value of the graphical parameter <code>xpd</code> to be used while the legend is being drawn.</p> </td> </tr> <tr valign='top'> <td><code>title.col</code></td> <td> <p>color for <code>title</code>.</p> </td> </tr> <tr valign='top'> <td><code>title.adj</code></td> <td> <p>horizontal adjustment for <code>title</code>: see the help for <code>par('adj')</code>.</p> </td> </tr> <tr valign='top'> <td><code>seg.len</code></td> <td> <p>the length of lines drawn to illustrate <code>lty</code> and/or <code>lwd</code> (in units of character widths).</p> </td> </tr> </table> "	FALSE
"lines"	"graphics"	"Add Connected Line Segments to a Plot"	"<p>A generic function taking coordinates given in various ways and joining the corresponding points with line segments. </p>"	"<pre>lines(x, ...)<br />## Default S3 method: lines(x, y = NULL, type = 'l', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>coordinate vectors of points to join.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character indicating the type of plotting; actually any of the <code>type</code>s as in <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further graphical parameters (see <code>par</code>) may also be supplied as arguments, particularly, line type, <code>lty</code>, line width, <code>lwd</code>, color, <code>col</code> and for <code>type = 'b'</code>, <code>pch</code>.  Also the line characteristics <code>lend</code>, <code>ljoin</code> and <code>lmitre</code>.</p> </td> </tr> </table> "	FALSE
"plot.formula"	"graphics"	"Formula Notation for Scatterplots"	"<p>Specify a scatterplot or add points, lines, or text via a formula. </p>"	"<pre>## S3 method for class 'formula' plot(formula, data = parent.frame(), ..., subset,<br />              ylab = varnames[response], ask = dev.interactive())<br />## S3 method for class 'formula' points(formula, data = parent.frame(), ..., subset)<br />## S3 method for class 'formula' lines(formula, data = parent.frame(), ..., subset)<br />## S3 method for class 'formula' text(formula, data = parent.frame(), ..., subset) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>formula</code></td> <td> <p>a <code>formula</code>, such as <code>y ~ x</code>.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data.frame (or list) from which the variables in <code>formula</code> should be taken.  A matrix is converted to a data frame.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Arguments to be passed to or from other methods. <code>horizontal = TRUE</code> is also accepted.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used in the fitting process.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>the y label of the plot(s).</p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td> <p>logical, see <code>par</code>.</p> </td> </tr> </table> "	FALSE
"plothistogram"	"graphics"	"Plot Histograms"	"<p>These are methods for objects of class <code>'histogram'</code>, typically produced by <code>hist</code>. </p>"	"<pre>## S3 method for class 'histogram' plot(x, freq = equidist, density = NULL, angle = 45,<br />                col = NULL, border = par('fg'), lty = NULL,<br />                main = paste('Histogram of',<br />                             paste(x$xname, collapse = '\n')),<br />                sub = NULL, xlab = x$xname, ylab,<br />                xlim = range(x$breaks), ylim = NULL,<br />                axes = TRUE, labels = FALSE, add = FALSE,<br />                ann = TRUE, ...)<br />## S3 method for class 'histogram' lines(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a <code>histogram</code> object, or a list with components <code>density</code>, <code>mid</code>, etc, see <code>hist</code> for information about the components of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>freq</code></td> <td> <p>logical; if <code>TRUE</code>, the histogram graphic is to present a representation of frequencies, i.e, <code>x$counts</code>; if <code>FALSE</code>, <em>relative</em> frequencies (probabilities), i.e., <code>x$density</code>, are plotted.  The default is true for equidistant <code>breaks</code> and false otherwise.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>a colour to be used to fill the bars.  The default of <code>NULL</code> yields unfilled bars.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>the color of the border around the bars.</p> </td> </tr> <tr valign='top'> <td><code>angle, density</code></td> <td> <p>select shading of bars by lines: see <code>rect</code>.</p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>the line type used for the bars, see also <code>lines</code>.</p> </td> </tr> <tr valign='top'> <td><code>main, sub, xlab, ylab</code></td> <td> <p>these arguments to <code>title</code> have useful defaults here.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>the range of x and y values with sensible defaults.</p> </td> </tr> <tr valign='top'> <td><code>axes</code></td> <td> <p>logical, indicating if axes should be drawn.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>logical or character.  Additionally draw labels on top of bars, if not <code>FALSE</code>; if <code>TRUE</code>, draw the counts or rounded densities; if <code>labels</code> is a <code>character</code>, draw itself.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical.  If <code>TRUE</code>, only the bars are added to the current plot.  This is what <code>lines.histogram(*)</code> does.</p> </td> </tr> <tr valign='top'> <td><code>ann</code></td> <td> <p>logical.  Should annotations (titles and axis titles) be plotted?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further graphical parameters to <code>title</code> and <code>axis</code>.</p> </td> </tr> </table> "	FALSE
"plot.table"	"graphics"	"Plot Methods for table Objects"	"<p>This is a method of the generic <code>plot</code> function for (contingency) <code>table</code> objects.  Whereas for two- and more dimensional tables, a <code>mosaicplot</code> is drawn, one-dimensional ones are plotted as bars. </p>"	"<pre>## S3 method for class 'table' plot(x, type = 'h', ylim = c(0, max(x)), lwd = 2,<br />      xlab = NULL, ylab = NULL, frame.plot = is.num, ...) ## S3 method for class 'table' points(x, y = NULL, type = 'h', lwd = 2, ...) ## S3 method for class 'table' lines(x, y = NULL, type = 'h', lwd = 2, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a <code>table</code> (like) object.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>Must be <code>NULL</code>: there to protect against incorrect calls.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>plotting type.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>range of y-axis.</p> </td> </tr> <tr valign='top'> <td><code>lwd</code></td> <td> <p>line width for bars when <code>type = 'h'</code> is used in the 1D case.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab</code></td> <td> <p>x- and y-axis labels.</p> </td> </tr> <tr valign='top'> <td><code>frame.plot</code></td> <td> <p>logical indicating if a frame (<code>box</code>) should be drawn in the 1D case.  Defaults to true when <code>x</code> has <code>dimnames</code> coerce-able to numbers.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further graphical arguments, see <code>plot.default</code>. <code>axes = FALSE</code> is accepted.</p> </td> </tr> </table> "	FALSE
"locator"	"graphics"	"Graphical Input"	"<p>Reads the position of the graphics cursor when the (first) mouse button is pressed. </p>"	"<pre>locator(n = 512, type = 'n', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>the maximum number of points to locate.  Valid values start at 1.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>One of <code>'n'</code>, <code>'p'</code>, <code>'l'</code> or <code>'o'</code>. If <code>'p'</code> or <code>'o'</code> the points are plotted; if <code>'l'</code>  or <code>'o'</code> they are joined by lines.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional graphics parameters used if <code>type != 'n'</code> for plotting the locations.</p> </td> </tr> </table> "	FALSE
"matplot"	"graphics"	"Plot Columns of Matrices"	"<p>Plot the columns of one matrix against the columns of another. </p>"	"<pre>matplot(x, y, type = 'p', lty = 1:5, lwd = 1, lend = par('lend'),<br />         pch = NULL,<br />         col = 1:6, cex = NULL, bg = NA,<br />         xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL,<br />         ..., add = FALSE, verbose = getOption('verbose'))<br />matpoints(x, y, type = 'p', lty = 1:5, lwd = 1, pch = NULL,<br />           col = 1:6, ...)<br />matlines (x, y, type = 'l', lty = 1:5, lwd = 1, pch = NULL,<br />           col = 1:6, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x,y</code></td> <td> <p>vectors or matrices of data for plotting.  The number of rows should match.  If one of them are missing, the other is taken as <code>y</code> and an <code>x</code> vector of <code>1:n</code> is used. Missing values (<code>NA</code>s) are allowed.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string (length 1 vector) or vector of 1-character strings indicating the type of plot for each column of <code>y</code>, see <code>plot</code> for all possible <code>type</code>s.  The first character of <code>type</code> defines the first plot, the second character the second, etc. Characters in <code>type</code> are cycled through; e.g., <code>'pl'</code> alternately plots points and lines.</p> </td> </tr> <tr valign='top'> <td><code>lty,lwd,lend</code></td> <td> <p>vector of line types, widths, and end styles. The first element is for the first column, the second element for the second column, etc., even if lines are not plotted for all columns. Line types will be used cyclically until all plots are drawn.</p> </td> </tr> <tr valign='top'> <td><code>pch</code></td> <td> <p>character string or vector of 1-characters or integers for plotting characters, see <code>points</code>. The first character is the plotting-character for the first plot, the second for the second, etc.  The default is the digits (1 through 9, 0) then the lowercase and uppercase letters.<br /><br /><br /></p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>vector of colors.  Colors are used cyclically.</p> </td> </tr> <tr valign='top'> <td><code>cex</code></td> <td> <p>vector of character expansion sizes, used cyclically. This works as a multiple of <code>par('cex')</code>.  <code>NULL</code> is equivalent to <code>1.0</code>. </p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>vector of background (fill) colors for the open plot symbols given by <code>pch = 21:25</code> as in <code>points</code>.  The default <code>NA</code> corresponds to the one of the underlying function <code>plot.xy</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab</code></td> <td> <p>titles for x and y axes, as in <code>plot</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>ranges of x and y axes, as in <code>plot</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Graphical parameters (see <code>par</code>) and any further arguments of <code>plot</code>, typically <code>plot.default</code>, may also be supplied as arguments to this function.  Hence, the high-level graphics control arguments described under <code>par</code> and the arguments to <code>title</code> may be supplied to this function.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical.  If <code>TRUE</code>, plots are added to current one, using <code>points</code> and <code>lines</code>.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>logical.  If <code>TRUE</code>, write one line of what is done.</p> </td> </tr> </table> "	FALSE
"mosaicplot"	"graphics"	"Mosaic Plots"	"<p>Plots a mosaic on the current graphics device.</p>"	"<pre>mosaicplot(x, ...)<br />## Default S3 method: mosaicplot(x, main = deparse(substitute(x)),<br />            sub = NULL, xlab = NULL, ylab = NULL,<br />            sort = NULL, off = NULL, dir = NULL,<br />            color = NULL, shade = FALSE, margin = NULL,<br />            cex.axis = 0.66, las = par('las'), border = NULL,<br />            type = c('pearson', 'deviance', 'FT'), ...)<br />## S3 method for class 'formula' mosaicplot(formula, data = NULL, ...,<br />            main = deparse(substitute(data)), subset,<br />            na.action = stats::na.omit) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a contingency table in array form, with optional category labels specified in the <code>dimnames(x)</code> attribute.  The table is best created by the <code>table()</code> command.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>character string for the mosaic title.</p> </td> </tr> <tr valign='top'> <td><code>sub</code></td> <td> <p>character string for the mosaic sub-title (at bottom).</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab</code></td> <td> <p>x- and y-axis labels used for the plot; by default, the first and second element of <code>names(dimnames(X))</code> (i.e., the name of the first and second variable in <code>X</code>).</p> </td> </tr> <tr valign='top'> <td><code>sort</code></td> <td> <p>vector ordering of the variables, containing a permutation of the integers <code>1:length(dim(x))</code> (the default).</p> </td> </tr> <tr valign='top'> <td><code>off</code></td> <td> <p>vector of offsets to determine percentage spacing at each level of the mosaic (appropriate values are between 0 and 20, and the default is 20 times the number of splits for 2-dimensional tables, and 10 otherwise.  Rescaled to maximally 50, and recycled if necessary.</p> </td> </tr> <tr valign='top'> <td><code>dir</code></td> <td> <p>vector of split directions (<code>'v'</code> for vertical and <code>'h'</code> for horizontal) for each level of the mosaic, one direction for each dimension of the contingency table.  The default consists of alternating directions, beginning with a vertical split.</p> </td> </tr> <tr valign='top'> <td><code>color</code></td> <td> <p>logical or (recycling) vector of colors for color shading, used only when <code>shade</code> is <code>FALSE</code>, or <code>NULL</code> (default).  By default, grey boxes are drawn.  <code>color = TRUE</code> uses a gamma-corrected grey palette.  <code>color = FALSE</code> gives empty boxes with no shading.</p> </td> </tr> <tr valign='top'> <td><code>shade</code></td> <td> <p>a logical indicating whether to produce extended mosaic plots, or a numeric vector of at most 5 distinct positive numbers giving the absolute values of the cut points for the residuals.  By default, <code>shade</code> is <code>FALSE</code>, and simple mosaics are created.  Using <code>shade = TRUE</code> cuts absolute values at 2 and 4.</p> </td> </tr> <tr valign='top'> <td><code>margin</code></td> <td> <p>a list of vectors with the marginal totals to be fit in the log-linear model.  By default, an independence model is fitted. See <code>loglin</code> for further information.</p> </td> </tr> <tr valign='top'> <td><code>cex.axis</code></td> <td> <p>The magnification to be used for axis annotation, as a multiple of <code>par('cex')</code>.</p> </td> </tr> <tr valign='top'> <td><code>las</code></td> <td> <p>numeric; the style of axis labels, see <code>par</code>.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>colour of borders of cells: see <code>polygon</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>a character string indicating the type of residual to be represented.  Must be one of <code>'pearson'</code> (giving components of Pearson's <i>chi-squared</i>), <code>'deviance'</code> (giving components of the likelihood ratio <i>chi-squared</i>), or <code>'FT'</code> for the Freeman-Tukey residuals.  The value of this argument can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula, such as <code>y ~ x</code>.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data frame (or list), or a contingency table from which the variables in <code>formula</code> should be taken.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations in the data frame to be used for plotting.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contains variables to be cross-tabulated, and these variables contain <code>NA</code>s.  The default is to omit cases which have an <code>NA</code> in any variable.  Since the tabulation will omit all cases containing missing values, this will only be useful if the <code>na.action</code> function replaces missing values.</p> </td> </tr> </table> "	FALSE
"mtext"	"graphics"	"Write Text into the Margins of a Plot"	"<p>Text is written in one of the four margins of the current figure region or one of the outer margins of the device region. </p>"	"<pre>mtext(text, side = 3, line = 0, outer = FALSE, at = NA,<br />       adj = NA, padj = NA, cex = NA, col = NA, font = NA, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>text</code></td> <td> <p>a character or expression vector specifying the <em>text</em> to be written.  Other objects are coerced by <code>as.graphicsAnnot</code>.</p> </td> </tr> <tr valign='top'> <td><code>side</code></td> <td> <p>on which side of the plot (1=bottom, 2=left, 3=top, 4=right).</p> </td> </tr> <tr valign='top'> <td><code>line</code></td> <td> <p>on which MARgin line, starting at 0 counting outwards.</p> </td> </tr> <tr valign='top'> <td><code>outer</code></td> <td> <p>use outer margins if available.</p> </td> </tr> <tr valign='top'> <td><code>at</code></td> <td> <p>give location of each string in user coordinates.  If the component of <code>at</code> corresponding to a particular text item is not a finite value (the default), the location will be determined by <code>adj</code>.</p> </td> </tr> <tr valign='top'> <td><code>adj</code></td> <td> <p>adjustment for each string in reading direction.  For strings parallel to the axes, <code>adj = 0</code> means left or bottom alignment, and <code>adj = 1</code> means right or top alignment. </p> <p>If <code>adj</code> is not a finite value (the default), the value of <code>par('las')</code> determines the adjustment.  For strings plotted parallel to the axis the default is to centre the string.</p> </td> </tr> <tr valign='top'> <td><code>padj</code></td> <td> <p>adjustment for each string perpendicular to the reading direction (which is controlled by <code>adj</code>).  For strings parallel to the axes, <code>padj = 0</code> means right or top alignment, and <code>padj = 1</code> means left or bottom alignment. </p> <p>If <code>padj</code> is not a finite value (the default), the value of <code>par('las')</code> determines the adjustment.  For strings plotted perpendicular to the axis the default is to centre the string.</p> </td> </tr> <tr valign='top'> <td><code>cex</code></td> <td> <p>character expansion factor.  <code>NULL</code> and <code>NA</code> are equivalent to <code>1.0</code>.  This is an absolute measure, not scaled by <code>par('cex')</code> or by setting <code>par('mfrow')</code> or <code>par('mfcol')</code>.  Can be a vector.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>color to use.  Can be a vector.  <code>NA</code> values (the default) mean use <code>par('col')</code>.</p> </td> </tr> <tr valign='top'> <td><code>font</code></td> <td> <p>font for text.  Can be a vector.  <code>NA</code> values (the default) mean use <code>par('font')</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further graphical parameters (see <code>par</code>), including <code>family</code>, <code>las</code> and <code>xpd</code>. (The latter defaults to the figure region unless <code>outer = TRUE</code>, otherwise the device region.  It can only be increased.)</p> </td> </tr> </table> "	FALSE
"pairs"	"graphics"	"Scatterplot Matrices"	"<p>A matrix of scatterplots is produced. </p>"	"<pre>pairs(x, ...)<br />## S3 method for class 'formula' pairs(formula, data = NULL, ..., subset,<br />       na.action = stats::na.pass)<br />## Default S3 method: pairs(x, labels, panel = points, ...,<br />       horInd = 1:nc, verInd = 1:nc,<br />       lower.panel = panel, upper.panel = panel,<br />       diag.panel = NULL, text.panel = textPanel,<br />       label.pos = 0.5 + has.diag/3, line.main = 3,<br />       cex.labels = NULL, font.labels = 1,<br />       row1attop = TRUE, gap = 1, log = '') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the coordinates of points given as numeric columns of a matrix or data frame.  Logical and factor columns are converted to numeric in the same way that <code>data.matrix</code> does. </p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a formula, such as <code>~ x + y + z</code>.  Each term will give a separate variable in the pairs plot, so terms should be numeric vectors.  (A response will be interpreted as another variable, but not treated specially, so it is confusing to use one.)</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data.frame (or list) from which the variables in <code>formula</code> should be taken.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used for plotting.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  The default is to pass missing values on to the panel functions, but <code>na.action = na.omit</code> will cause cases with missing values in any of the variables to be omitted entirely.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>the names of the variables.</p> </td> </tr> <tr valign='top'> <td><code>panel</code></td> <td> <p><code>function(x, y, ...)</code> which is used to plot the contents of each panel of the display.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td><br /><p>arguments to be passed to or from methods. </p> <p>Also, graphical parameters can be given as can arguments to <code>plot</code> such as <code>main</code>.  <code>par('oma')</code> will be set appropriately unless specified. </p> </td> </tr> <tr valign='top'> <td><code>horInd, verInd</code></td> <td> <p>The (numerical) indices of the variables to be plotted on the horizontal and vertical axes respectively.</p> </td> </tr> <tr valign='top'> <td><code>lower.panel, upper.panel</code></td> <td> <p>separate panel functions (or <code>NULL</code>) to be used below and above the diagonal respectively.</p> </td> </tr> <tr valign='top'> <td><code>diag.panel</code></td> <td> <p>optional <code>function(x, ...)</code> to be applied on the diagonals.</p> </td> </tr> <tr valign='top'> <td><code>text.panel</code></td> <td> <p>optional <code>function(x, y, labels, cex,<br />       font, ...)</code> to be applied on the diagonals.</p> </td> </tr> <tr valign='top'> <td><code>label.pos</code></td> <td> <p><code>y</code> position of labels in the text panel.</p> </td> </tr> <tr valign='top'> <td><code>line.main</code></td> <td> <p>if <code>main</code> is specified, <code>line.main</code> gives the <code>line</code> argument to <code>mtext()</code> which draws the title.  You may want to specify <code>oma</code> when changing <code>line.main</code>.</p> </td> </tr> <tr valign='top'> <td><code>cex.labels, font.labels</code></td> <td> <p>graphics parameters for the text panel.</p> </td> </tr> <tr valign='top'> <td><code>row1attop</code></td> <td> <p>logical. Should the layout be matrix-like with row 1 at the top, or graph-like with row 1 at the bottom?</p> </td> </tr> <tr valign='top'> <td><code>gap</code></td> <td> <p>distance between subplots, in margin lines.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>a character string indicating if logarithmic axes are to be used: see <code>plot.default</code>.  <code>log = 'xy'</code> specifies logarithmic axes for all variables.</p> </td> </tr> </table> "	FALSE
"panel.smooth"	"graphics"	"Simple Panel Plot"	"<p>An example of a simple useful <code>panel</code> function to be used as argument in e.g., <code>coplot</code> or <code>pairs</code>. </p>"	"<pre>panel.smooth(x, y, col = par('col'), bg = NA, pch = par('pch'),<br />              cex = 1, col.smooth = 'red', span = 2/3, iter = 3,<br />              ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric vectors of the same length</p> </td> </tr> <tr valign='top'> <td><code>col, bg, pch, cex</code></td> <td> <p>numeric or character codes for the color(s), point type and size of <code>points</code>; see also <code>par</code>.</p> </td> </tr> <tr valign='top'> <td><code>col.smooth</code></td> <td> <p>color to be used by <code>lines</code> for drawing the smooths.</p> </td> </tr> <tr valign='top'> <td><code>span</code></td> <td> <p>smoothing parameter <code>f</code> for <code>lowess</code>, see there.</p> </td> </tr> <tr valign='top'> <td><code>iter</code></td> <td> <p>number of robustness iterations for <code>lowess</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to <code>lines</code>.</p> </td> </tr> </table> "	FALSE
"points"	"graphics"	"Add Points to a Plot"	"<p><code>points</code> is a generic function to draw a sequence of points at the specified coordinates.  The specified character(s) are plotted, centered at the coordinates. </p>"	"<pre>points(x, ...)<br />## Default S3 method: points(x, y = NULL, type = 'p', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>coordinate vectors of points to plot.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character indicating the type of plotting; actually any of the <code>type</code>s as in <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further graphical parameters may also be supplied as arguments.  See ‘Details’.</p> </td> </tr> </table> "	FALSE
"persp"	"graphics"	"Perspective Plots"	"<p>This function draws perspective plots of a surface over the x–y plane.  <code>persp</code> is a generic function. </p>"	"<pre>persp(x, ...)<br />## Default S3 method: persp(x = seq(0, 1, length.out = nrow(z)),<br />       y = seq(0, 1, length.out = ncol(z)),<br />       z, xlim = range(x), ylim = range(y),<br />       zlim = range(z, na.rm = TRUE),<br />       xlab = NULL, ylab = NULL, zlab = NULL,<br />       main = NULL, sub = NULL,<br />       theta = 0, phi = 15, r = sqrt(3), d = 1,<br />       scale = TRUE, expand = 1,<br />       col = 'white', border = NULL, ltheta = -135, lphi = 0,<br />       shade = NA, box = TRUE, axes = TRUE, nticks = 5,<br />       ticktype = 'simple', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>locations of grid lines at which the values in <code>z</code> are measured.  These must be in ascending order.  By default, equally spaced values from 0 to 1 are used.  If <code>x</code> is a <code>list</code>, its components <code>x$x</code> and <code>x$y</code> are used for <code>x</code> and <code>y</code>, respectively.</p> </td> </tr> <tr valign='top'> <td><code>z</code></td> <td> <p>a matrix containing the values to be plotted (<code>NA</code>s are allowed).  Note that <code>x</code> can be used instead of <code>z</code> for convenience.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim, zlim</code></td> <td> <p>x-, y-  and z-limits.  These should be chosen to cover the range of values of the surface: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab, zlab</code></td> <td> <p>titles for the axes.  N.B. These must be character strings; expressions are not accepted.  Numbers will be coerced to character strings.</p> </td> </tr> <tr valign='top'> <td><code>main, sub</code></td> <td> <p>main and sub title, as for <code>title</code>.</p> </td> </tr> <tr valign='top'> <td><code>theta, phi</code></td> <td> <p>angles defining the viewing direction. <code>theta</code> gives the azimuthal direction and <code>phi</code> the colatitude.</p> </td> </tr> <tr valign='top'> <td><code>r</code></td> <td> <p>the distance of the eyepoint from the centre of the plotting box.</p> </td> </tr> <tr valign='top'> <td><code>d</code></td> <td> <p>a value which can be used to vary the strength of the perspective transformation.  Values of <code>d</code> greater than 1 will lessen the perspective effect and values less and 1 will exaggerate it.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>before viewing the x, y and z coordinates of the points defining the surface are transformed to the interval [0,1].  If <code>scale</code> is <code>TRUE</code> the x, y and z coordinates are transformed separately.  If <code>scale</code> is <code>FALSE</code> the coordinates are scaled so that aspect ratios are retained. This is useful for rendering things like DEM information.</p> </td> </tr> <tr valign='top'> <td><code>expand</code></td> <td> <p>a expansion factor applied to the <code>z</code> coordinates. Often used with <code>0 &lt; expand &lt; 1</code> to shrink the plotting box in the <code>z</code> direction.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>the color(s) of the surface facets.  Transparent colours are ignored.  This is recycled to the <i>(nx-1)(ny-1)</i> facets.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>the color of the line drawn around the surface facets. The default, <code>NULL</code>, corresponds to <code>par('fg')</code>. A value of <code>NA</code> will disable the drawing of borders: this is sometimes useful when the surface is shaded.</p> </td> </tr> <tr valign='top'> <td><code>ltheta, lphi</code></td> <td> <p>if finite values are specified for <code>ltheta</code> and <code>lphi</code>, the surface is shaded as though it was being illuminated from the direction specified by azimuth <code>ltheta</code> and colatitude <code>lphi</code>.</p> </td> </tr> <tr valign='top'> <td><code>shade</code></td> <td> <p>the shade at a surface facet is computed as <code>((1+d)/2)^shade</code>, where <code>d</code> is the dot product of a unit vector normal to the facet and a unit vector in the direction of a light source.  Values of <code>shade</code> close to one yield shading similar to a point light source model and values close to zero produce no shading.  Values in the range 0.5 to 0.75 provide an approximation to daylight illumination.</p> </td> </tr> <tr valign='top'> <td><code>box</code></td> <td> <p>should the bounding box for the surface be displayed. The default is <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>axes</code></td> <td> <p>should ticks and labels be added to the box.  The default is <code>TRUE</code>.  If <code>box</code> is <code>FALSE</code> then no ticks or labels are drawn.</p> </td> </tr> <tr valign='top'> <td><code>ticktype</code></td> <td> <p>character: <code>'simple'</code> draws just an arrow parallel to the axis to indicate direction of increase; <code>'detailed'</code> draws normal ticks as per 2D plots.</p> </td> </tr> <tr valign='top'> <td><code>nticks</code></td> <td> <p>the (approximate) number of tick marks to draw on the axes.  Has no effect if <code>ticktype</code> is <code>'simple'</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional graphical parameters (see <code>par</code>).</p> </td> </tr> </table> "	FALSE
"pie"	"graphics"	"Pie Charts"	"<p>Draw a pie chart. </p>"	"<pre>pie(x, labels = names(x), edges = 200, radius = 0.8,<br />     clockwise = FALSE, init.angle = if(clockwise) 90 else 0,<br />     density = NULL, angle = 45, col = NULL, border = NULL,<br />     lty = NULL, main = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector of non-negative numerical quantities. The values in <code>x</code> are displayed as the areas of pie slices.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>one or more expressions or character strings giving names for the slices.  Other objects are coerced by <code>as.graphicsAnnot</code>.  For empty or <code>NA</code> (after coercion to character) labels, no label nor pointing line is drawn.</p> </td> </tr> <tr valign='top'> <td><code>edges</code></td> <td> <p>the circular outline of the pie is approximated by a polygon with this many edges.</p> </td> </tr> <tr valign='top'> <td><code>radius</code></td> <td> <p>the pie is drawn centered in a square box whose sides range from <i>-1</i> to <i>1</i>.  If the character strings labeling the slices are long it may be necessary to use a smaller radius.</p> </td> </tr> <tr valign='top'> <td><code>clockwise</code></td> <td> <p>logical indicating if slices are drawn clockwise or counter clockwise (i.e., mathematically positive direction), the latter is default.</p> </td> </tr> <tr valign='top'> <td><code>init.angle</code></td> <td> <p>number specifying the <em>starting angle</em> (in degrees) for the slices. Defaults to 0 (i.e., ‘3 o'clock’) unless <code>clockwise</code> is true where <code>init.angle</code> defaults to 90 (degrees), (i.e., ‘12 o'clock’).</p> </td> </tr> <tr valign='top'> <td><code>density</code></td> <td> <p>the density of shading lines, in lines per inch. The default value of <code>NULL</code> means that no shading lines are drawn. Non-positive values of <code>density</code> also inhibit the drawing of shading lines.</p> </td> </tr> <tr valign='top'> <td><code>angle</code></td> <td> <p>the slope of shading lines, given as an angle in degrees (counter-clockwise).</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>a vector of colors to be used in filling or shading the slices. If missing a set of 6 pastel colours is used, unless <code>density</code> is specified when <code>par('fg')</code> is used.</p> </td> </tr> <tr valign='top'> <td><code>border, lty</code></td> <td> <p>(possibly vectors) arguments passed to <code>polygon</code> which draws each slice.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>an overall title for the plot.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters can be given as arguments to <code>pie</code>.  They will affect the main title and labels only.</p> </td> </tr> </table> "	FALSE
"plot"	"graphics"	"Generic X-Y Plotting"	"<p>Generic function for plotting of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects.  For more details about the graphical parameter arguments, see <code>par</code>. </p> <p>For simple scatter plots, <code>plot.default</code> will be used. However, there are <code>plot</code> methods for many <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects, including <code>function</code>s, <code>data.frame</code>s, <code>density</code> objects, etc.  Use <code>methods(plot)</code> and the documentation for these. </p>"	"<pre>plot(x, y, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the coordinates of points in the plot. Alternatively, a single plotting structure, function or <em>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object with a <code>plot</code> method</em> can be provided.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>the y coordinates of points in the plot, <em>optional</em> if <code>x</code> is an appropriate structure.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Arguments to be passed to methods, such as graphical parameters (see <code>par</code>). Many methods will accept the following arguments: </p><br /><dl> <dt><code>type</code></dt> <dd> <p>what type of plot should be drawn.  Possible types are </p><br /><ul> <li> <p><code>'p'</code> for <b>p</b>oints, </p> </li> <li> <p><code>'l'</code> for <b>l</b>ines, </p> </li> <li> <p><code>'b'</code> for <b>b</b>oth, </p> </li> <li> <p><code>'c'</code> for the lines part alone of <code>'b'</code>, </p> </li> <li> <p><code>'o'</code> for both ‘<b>o</b>verplotted’, </p> </li> <li> <p><code>'h'</code> for ‘<b>h</b>istogram’ like (or ‘high-density’) vertical lines, </p> </li> <li> <p><code>'s'</code> for stair <b>s</b>teps, </p> </li> <li> <p><code>'S'</code> for other <b>s</b>teps, see ‘Details’ below, </p> </li> <li> <p><code>'n'</code> for no plotting. </p> </li> </ul> <p>All other <code>type</code>s give a warning or an error; using, e.g., <code>type = 'punkte'</code> being equivalent to <code>type = 'p'</code> for S compatibility.  Note that some methods, e.g. <code>plot.factor</code>, do not accept this. </p> </dd> <dt><code>main</code></dt> <dd> <p>an overall title for the plot: see <code>title</code>.</p> </dd> <dt><code>sub</code></dt> <dd> <p>a sub title for the plot: see <code>title</code>.</p> </dd> <dt><code>xlab</code></dt> <dd> <p>a title for the x axis: see <code>title</code>.</p> </dd> <dt><code>ylab</code></dt> <dd> <p>a title for the y axis: see <code>title</code>.</p> </dd> <dt><code>asp</code></dt> <dd> <p>the <i>y/x</i> aspect ratio, see <code>plot.window</code>.</p> </dd> </dl> </td> </tr> </table> "	FALSE
"plot.dataframe"	"graphics"	"Plot Method for Data Frames"	"<p><code>plot.data.frame</code>, a method for the <code>plot</code> generic. It is designed for a quick look at numeric data frames. </p>"	"<pre>## S3 method for class 'data.frame' plot(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>object of class <code>data.frame</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to <code>stripchart</code>, <code>plot.default</code> or <code>pairs</code>.</p> </td> </tr> </table> "	FALSE
"plot.default"	"graphics"	"The Default Scatterplot Function"	"<p>Draw a scatter plot with decorations such as axes and titles in the active graphics window. </p>"	"<pre>## Default S3 method: plot(x, y = NULL, type = 'p',  xlim = NULL, ylim = NULL,<br />      log = '', main = NULL, sub = NULL, xlab = NULL, ylab = NULL,<br />      ann = par('ann'), axes = TRUE, frame.plot = axes,<br />      panel.first = NULL, panel.last = NULL, asp = NA, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>the <code>x</code> and <code>y</code> arguments provide the x and y coordinates for the plot.  Any reasonable way of defining the coordinates is acceptable.  See the function <code>xy.coords</code> for details.  If supplied separately, they must be of the same length.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>1-character string giving the type of plot desired.  The following values are possible, for details, see <code>plot</code>: <code>'p'</code> for points, <code>'l'</code> for lines, <code>'b'</code> for both points and lines, <code>'c'</code> for empty points joined by lines, <code>'o'</code> for overplotted points and lines, <code>'s'</code> and <code>'S'</code> for stair steps and <code>'h'</code> for histogram-like vertical lines.  Finally, <code>'n'</code> does not produce any points or lines.</p> </td> </tr> <tr valign='top'> <td><code>xlim</code></td> <td> <p>the x limits (x1, x2) of the plot.  Note that <code>x1 &gt; x2</code> is allowed and leads to a ‘reversed axis’. </p> <p>The default value, <code>NULL</code>, indicates that the range of the finite values to be plotted should be used.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>the y limits of the plot.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>a character string which contains <code>'x'</code> if the x axis is to be logarithmic, <code>'y'</code> if the y axis is to be logarithmic and <code>'xy'</code> or <code>'yx'</code> if both axes are to be logarithmic.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>a main title for the plot, see also <code>title</code>.</p> </td> </tr> <tr valign='top'> <td><code>sub</code></td> <td> <p>a sub title for the plot.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>a label for the x axis, defaults to a description of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>a label for the y axis, defaults to a description of <code>y</code>.</p> </td> </tr> <tr valign='top'> <td><code>ann</code></td> <td> <p>a logical value indicating whether the default annotation (title and x and y axis labels) should appear on the plot.</p> </td> </tr> <tr valign='top'> <td><code>axes</code></td> <td> <p>a logical value indicating whether both axes should be drawn on the plot.  Use graphical parameter <code>'xaxt'</code> or <code>'yaxt'</code> to suppress just one of the axes.</p> </td> </tr> <tr valign='top'> <td><code>frame.plot</code></td> <td> <p>a logical indicating whether a box should be drawn around the plot.</p> </td> </tr> <tr valign='top'> <td><code>panel.first</code></td> <td> <p>an ‘expression’ to be evaluated after the plot axes are set up but before any plotting takes place.  This can be useful for drawing background grids or scatterplot smooths.  Note that this works by lazy evaluation: passing this argument from other <code>plot</code> methods may well not work since it may be evaluated too early.</p> </td> </tr> <tr valign='top'> <td><code>panel.last</code></td> <td> <p>an expression to be evaluated after plotting has taken place but before the axes, title and box are added.  See the comments about <code>panel.first</code>.</p> </td> </tr> <tr valign='top'> <td><code>asp</code></td> <td> <p>the <i>y/x</i> aspect ratio, see <code>plot.window</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other graphical parameters (see <code>par</code> and section ‘Details’ below).</p> </td> </tr> </table> "	FALSE
"plot.design"	"graphics"	"Plot Univariate Effects of a Design or Model"	"<p>Plot univariate effects of one or more <code>factor</code>s, typically for a designed experiment as analyzed by <code>aov()</code>. </p>"	"<pre>plot.design(x, y = NULL, fun = mean, data = NULL, ...,<br />             ylim = NULL, xlab = 'Factors', ylab = NULL,<br />             main = NULL, ask = NULL, xaxt = par('xaxt'),<br />             axes = TRUE, xtick = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>either a data frame containing the design factors and optionally the response, or a <code>formula</code> or <code>terms</code> object.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>the response, if not given in x.</p> </td> </tr> <tr valign='top'> <td><code>fun</code></td> <td> <p>a function (or name of one) to be applied to each subset.  It must return one number for a numeric (vector) input.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>data frame containing the variables referenced by <code>x</code> when that is formula-like.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters such as <code>col</code>, see <code>par</code>.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>range of y values, as in <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>x axis label, see <code>title</code>.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>y axis label with a ‘smart’ default.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>main title, see <code>title</code>.</p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td> <p>logical indicating if the user should be asked before a new page is started – in the case of multiple y's.</p> </td> </tr> <tr valign='top'> <td><code>xaxt</code></td> <td> <p>character giving the type of x axis.</p> </td> </tr> <tr valign='top'> <td><code>axes</code></td> <td> <p>logical indicating if axes should be drawn.</p> </td> </tr> <tr valign='top'> <td><code>xtick</code></td> <td> <p>logical indicating if ticks (one per factor) should be drawn on the x axis.</p> </td> </tr> </table> "	FALSE
"plot.factor"	"graphics"	"Plotting Factor Variables"	"<p>This functions implements a scatterplot method for <code>factor</code> arguments of the <em>generic</em> <code>plot</code> function. </p> <p>If <code>y</code> is missing <code>barplot</code> is produced. For numeric <code>y</code> a <code>boxplot</code> is used, and for a factor <code>y</code> a <code>spineplot</code> is shown.  For any other type of <code>y</code> the next <code>plot</code> method is called, normally <code>plot.default</code>. </p>"	"<pre>## S3 method for class 'factor' plot(x, y, legend.text = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric or factor. <code>y</code> may be missing.</p> </td> </tr> <tr valign='top'> <td><code>legend.text</code></td> <td> <p>character vector for annotation of y axis in the case of a factor <code>y</code>: defaults to <code>levels(y)</code>.  This sets the <code>yaxlabels</code> argument of <code>spineplot</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to <code>barplot</code>, <code>boxplot</code>, <code>spineplot</code> or <code>plot</code> as appropriate.  All of these accept graphical parameters (see <code>par</code>) and annotation arguments passed to <code>title</code> and <code>axes = FALSE</code>.  None accept <code>type</code>. </p> </td> </tr> </table> "	FALSE
"plot.raster"	"graphics"	"Plotting Raster Images"	"<p>This functions implements a <code>plot</code> method for raster images. </p>"	"<pre>## S3 method for class 'raster' plot(x, y,<br />      xlim = c(0, ncol(x)), ylim = c(0, nrow(x)),<br />      xaxs = 'i', yaxs = 'i',<br />      asp = 1, add = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>raster. <code>y</code> will be ignored.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>Limits on the plot region (default from dimensions of the raster.</p> </td> </tr> <tr valign='top'> <td><code>xaxs, yaxs</code></td> <td> <p>Axis interval calculation style (default means that raster fills plot region.</p> </td> </tr> <tr valign='top'> <td><code>asp</code></td> <td> <p>Aspect ratio (default retains aspect ratio of the raster).</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>Logical indicating whether to simply add raster to an existing plot.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to the <code>rasterImage</code> function.</p> </td> </tr> </table> "	FALSE
"plot.xy"	"graphics"	"Basic Internal Plot Function"	"<p>This is <em>the</em> internal function that does the basic plotting of points and lines.  Usually, one should rather use the higher level functions instead and refer to their help pages for explanation of the arguments. </p>"	"<pre>plot.xy(xy, type, pch = par('pch'), lty = par('lty'),<br />         col = par('col'), bg = NA,<br />         cex = 1, lwd = par('lwd'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>xy</code></td> <td> <p>A four-element list as results from <code>xy.coords</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>1 character code: see <code>plot.default</code>. <code>NULL</code> is accepted as a synonym for <code>'p'</code>.</p> </td> </tr> <tr valign='top'> <td><code>pch</code></td> <td> <p>character or integer code for kind of points, see <code>points.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>line type code, see <code>lines</code>.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>color code or name, see <code>colors</code>, <code>palette</code>.  Here <code>NULL</code> means colour 0.</p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>background (fill) color for the open plot symbols 21:25: see <code>points.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>cex</code></td> <td> <p>character expansion.</p> </td> </tr> <tr valign='top'> <td><code>lwd</code></td> <td> <p>line width, also used for (non-filled) plot symbols, see <code>lines</code> and <code>points</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further graphical parameters such as <code>xpd</code>, <code>lend</code>, <code>ljoin</code> and <code>lmitre</code>.</p> </td> </tr> </table> "	FALSE
"polygon"	"graphics"	"Polygon Drawing"	"<p><code>polygon</code> draws the polygons whose vertices are given in <code>x</code> and <code>y</code>. </p>"	"<pre>polygon(x, y = NULL, density = NULL, angle = 45,<br />         border = NULL, col = NA, lty = par('lty'),<br />         ..., fillOddEven = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>vectors containing the coordinates of the vertices of the polygon.</p> </td> </tr> <tr valign='top'> <td><code>density</code></td> <td> <p>the density of shading lines, in lines per inch.  The default value of <code>NULL</code> means that no shading lines are drawn. A zero value of <code>density</code> means no shading nor filling whereas negative values and <code>NA</code> suppress shading (and so allow color filling).</p> </td> </tr> <tr valign='top'> <td><code>angle</code></td> <td> <p>the slope of shading lines, given as an angle in degrees (counter-clockwise).</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>the color for filling the polygon. The default, <code>NA</code>, is to leave polygons unfilled, unless <code>density</code> is specified.  (For back-compatibility, <code>NULL</code> is equivalent to <code>NA</code>.)  If <code>density</code> is specified with a positive value this gives the color of the shading lines.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>the color to draw the border.  The default, <code>NULL</code>, means to use <code>par('fg')</code>.  Use <code>border = NA</code> to omit borders. </p> <p>For compatibility with S, <code>border</code> can also be logical, in which case <code>FALSE</code> is equivalent to <code>NA</code> (borders omitted) and <code>TRUE</code> is equivalent to <code>NULL</code> (use the foreground colour), </p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>the line type to be used, as in <code>par</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters such as <code>xpd</code>, <code>lend</code>, <code>ljoin</code> and <code>lmitre</code> can be given as arguments.</p> </td> </tr> <tr valign='top'> <td><code>fillOddEven</code></td> <td> <p>logical controlling the polygon shading mode:  see below for details.  Default <code>FALSE</code>.</p> </td> </tr> </table> "	FALSE
"polypath"	"graphics"	"Path Drawing"	"<p><code>path</code> draws a path whose vertices are given in <code>x</code> and <code>y</code>. </p>"	"<pre>polypath(x, y = NULL,<br />          border = NULL, col = NA, lty = par('lty'),<br />          rule = 'winding', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>vectors containing the coordinates of the vertices of the path.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>the color for filling the path. The default, <code>NA</code>, is to leave paths unfilled, unless <code>density</code> is specified.  (For back-compatibility, <code>NULL</code> is equivalent to <code>NA</code>.)  If <code>density</code> is specified with a positive value this gives the color of the shading lines.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>the color to draw the border.  The default, <code>NULL</code>, means to use <code>par('fg')</code>.  Use <code>border = NA</code> to omit borders. </p> <p>For compatibility with S, <code>border</code> can also be logical, in which case <code>FALSE</code> is equivalent to <code>NA</code> (borders omitted) and <code>TRUE</code> is equivalent to <code>NULL</code> (use the foreground colour), </p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>the line type to be used, as in <code>par</code>.</p> </td> </tr> <tr valign='top'> <td><code>rule</code></td> <td> <p>character value specifying the path fill mode: either <code>'winding'</code> or <code>'evenodd'</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters such as <code>xpd</code>, <code>lend</code>, <code>ljoin</code> and <code>lmitre</code> can be given as arguments.</p> </td> </tr> </table> "	FALSE
"rasterImage"	"graphics"	"Draw One or More Raster Images"	"<p><code>rasterImage</code> draws a raster image at the given locations and sizes. </p>"	"<pre>rasterImage(image,<br />             xleft, ybottom, xright, ytop,<br />             angle = 0, interpolate = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>image</code></td> <td> <p>a <code>raster</code> object, or an object that can be coerced to one by <code>as.raster</code>.</p> </td> </tr> <tr valign='top'> <td><code>xleft</code></td> <td> <p>a vector (or scalar) of left x positions.</p> </td> </tr> <tr valign='top'> <td><code>ybottom</code></td> <td> <p>a vector (or scalar) of bottom y positions.</p> </td> </tr> <tr valign='top'> <td><code>xright</code></td> <td> <p>a vector (or scalar) of right x positions.</p> </td> </tr> <tr valign='top'> <td><code>ytop</code></td> <td> <p>a vector (or scalar) of top y positions.</p> </td> </tr> <tr valign='top'> <td><code>angle</code></td> <td> <p>angle of rotation (in degrees, anti-clockwise from positive x-axis, about the bottom-left corner).</p> </td> </tr> <tr valign='top'> <td><code>interpolate</code></td> <td> <p>a logical vector (or scalar) indicating whether to apply linear interpolation to the image when drawing. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters.</p> </td> </tr> </table> "	FALSE
"rect"	"graphics"	"Draw One or More Rectangles"	"<p><code>rect</code> draws a rectangle (or sequence of rectangles) with the given coordinates, fill and border colors. </p>"	"<pre>rect(xleft, ybottom, xright, ytop, density = NULL, angle = 45,<br />      col = NA, border = NULL, lty = par('lty'), lwd = par('lwd'),<br />      ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>xleft</code></td> <td> <p>a vector (or scalar) of left x positions.</p> </td> </tr> <tr valign='top'> <td><code>ybottom</code></td> <td> <p>a vector (or scalar) of bottom y positions.</p> </td> </tr> <tr valign='top'> <td><code>xright</code></td> <td> <p>a vector (or scalar) of right x positions.</p> </td> </tr> <tr valign='top'> <td><code>ytop</code></td> <td> <p>a vector (or scalar) of top y positions.</p> </td> </tr> <tr valign='top'> <td><code>density</code></td> <td> <p>the density of shading lines, in lines per inch. The default value of <code>NULL</code> means that no shading lines are drawn. A zero value of <code>density</code> means no shading lines whereas negative values (and <code>NA</code>) suppress shading (and so allow color filling).</p> </td> </tr> <tr valign='top'> <td><code>angle</code></td> <td> <p>angle (in degrees) of the shading lines.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>color(s) to fill or shade the rectangle(s) with. The default <code>NA</code> (or also <code>NULL</code>) means do not fill, i.e., draw transparent rectangles, unless <code>density</code> is specified.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>color for rectangle border(s).  The default means <code>par('fg')</code>.  Use <code>border = NA</code> to omit borders. If there are shading lines, <code>border = TRUE</code> means use the same colour for the border as for the shading lines.</p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>line type for borders and shading; defaults to <code>'solid'</code>.</p> </td> </tr> <tr valign='top'> <td><code>lwd</code></td> <td> <p>line width for borders and shading.  Note that the use of <code>lwd = 0</code> (as in the examples) is device-dependent.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters such as <code>xpd</code>, <code>lend</code>, <code>ljoin</code> and <code>lmitre</code> can be given as arguments.</p> </td> </tr> </table> "	FALSE
"rug"	"graphics"	"Add a Rug to a Plot"	"<p>Adds a <em>rug</em> representation (1-d plot) of the data to the plot. </p>"	"<pre>rug(x, ticksize = 0.03, side = 1, lwd = 0.5, col = par('fg'),<br />     quiet = getOption('warn') &lt; 0, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A numeric vector</p> </td> </tr> <tr valign='top'> <td><code>ticksize</code></td> <td> <p>The length of the ticks making up the ‘rug’. Positive lengths give inwards ticks.</p> </td> </tr> <tr valign='top'> <td><code>side</code></td> <td> <p>On which side of the plot box the rug will be plotted. Normally 1 (bottom) or 3 (top).</p> </td> </tr> <tr valign='top'> <td><code>lwd</code></td> <td> <p>The line width of the ticks.  Some devices will round the default width up to <code>1</code>.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>The colour the ticks are plotted in.</p> </td> </tr> <tr valign='top'> <td><code>quiet</code></td> <td> <p>logical indicating if there should be a warning about clipped values.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments, passed to <code>axis</code>, such as <code>line</code> or <code>pos</code> for specifying the location of the rug.</p> </td> </tr> </table> "	FALSE
"segments"	"graphics"	"Add Line Segments to a Plot"	"<p>Draw line segments between pairs of points. </p>"	"<pre>segments(x0, y0, x1 = x0, y1 = y0,<br />          col = par('fg'), lty = par('lty'), lwd = par('lwd'),<br />          ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x0, y0</code></td> <td> <p>coordinates of points <b>from</b> which to draw.</p> </td> </tr> <tr valign='top'> <td><code>x1, y1</code></td> <td> <p>coordinates of points <b>to</b> which to draw.  At least one must be supplied.</p> </td> </tr> <tr valign='top'> <td><code>col, lty, lwd</code></td> <td> <p>graphical parameters as in <code>par</code>, possibly vectors.  <code>NA</code> values in <code>col</code> cause the segment to be omitted.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further graphical parameters (from <code>par</code>), such as <code>xpd</code> and the line characteristics <code>lend</code>, <code>ljoin</code> and <code>lmitre</code>.</p> </td> </tr> </table> "	FALSE
"smoothScatter"	"graphics"	"Scatterplots with Smoothed Densities Color Representation"	"<p><code>smoothScatter</code> produces a smoothed color density representation of a scatterplot, obtained through a (2D) kernel density estimate. </p>"	"<pre>smoothScatter(x, y = NULL, nbin = 128, bandwidth,<br />               colramp = colorRampPalette(c('white', blues9)),<br />               nrpoints = 100, ret.selection = FALSE,<br />               pch = '.', cex = 1, col = 'black',<br />               transformation = function(x) x^.25,<br />               postPlotHook = box,<br />               xlab = NULL, ylab = NULL, xlim, ylim,<br />               xaxs = par('xaxs'), yaxs = par('yaxs'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>the <code>x</code> and <code>y</code> arguments provide the x and y coordinates for the plot.  Any reasonable way of defining the coordinates is acceptable.  See the function <code>xy.coords</code> for details.  If supplied separately, they must be of the same length.</p> </td> </tr> <tr valign='top'> <td><code>nbin</code></td> <td> <p>numeric vector of length one (for both directions) or two (for x and y separately) specifying the number of equally spaced grid points for the density estimation; directly used as <code>gridsize</code> in <code>bkde2D()</code>.</p> </td> </tr> <tr valign='top'> <td><code>bandwidth</code></td> <td> <p>numeric vector (length 1 or 2) of smoothing bandwidth(s). If missing, a more or less useful default is used. <code>bandwidth</code> is subsequently passed to function <code>bkde2D</code>.</p> </td> </tr> <tr valign='top'> <td><code>colramp</code></td> <td> <p>function accepting an integer <code>n</code> as an argument and returning <code>n</code> colors.</p> </td> </tr> <tr valign='top'> <td><code>nrpoints</code></td> <td> <p>number of points to be superimposed on the density image.  The first <code>nrpoints</code> points from those areas of lowest regional densities will be plotted.  Adding points to the plot allows for the identification of outliers.  If all points are to be plotted, choose <code>nrpoints = Inf</code>.</p> </td> </tr> <tr valign='top'> <td><code>ret.selection</code></td> <td> <p><code>logical</code> indicating to return the ordered indices of “low density” points if <code>nrpoints &gt; 0</code>.</p> </td> </tr> <tr valign='top'> <td><code>pch, cex, col</code></td> <td> <p>arguments passed to <code>points</code>, when <code>nrpoints &gt; 0</code>: point symbol, character expansion factor and color, see also <code>par</code>.</p> </td> </tr> <tr valign='top'> <td><code>transformation</code></td> <td> <p>function mapping the density scale to the color scale.</p> </td> </tr> <tr valign='top'> <td><code>postPlotHook</code></td> <td> <p>either <code>NULL</code> or a function which will be called (with no arguments) after <code>image</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab</code></td> <td> <p>character strings to be used as axis labels, passed to <code>image</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>numeric vectors of length 2 specifying axis limits.</p> </td> </tr> <tr valign='top'> <td><code>xaxs, yaxs, ...</code></td> <td> <p>further arguments passed to <code>image</code>, e.g., <code>add=TRUE</code> or <code>useRaster=TRUE</code>.</p> </td> </tr> </table> "	FALSE
"spineplot"	"graphics"	"Spine Plots and Spinograms"	"<p>Spine plots are a special cases of mosaic plots, and can be seen as a generalization of stacked (or highlighted) bar plots. Analogously, spinograms are an extension of histograms. </p>"	"<pre>spineplot(x, ...)<br />## Default S3 method: spineplot(x, y = NULL,<br />           breaks = NULL, tol.ylab = 0.05, off = NULL,<br />           ylevels = NULL, col = NULL,<br />           main = '', xlab = NULL, ylab = NULL,<br />           xaxlabels = NULL, yaxlabels = NULL,<br />           xlim = NULL, ylim = c(0, 1), axes = TRUE, ...)<br />## S3 method for class 'formula' spineplot(formula, data = NULL,<br />           breaks = NULL, tol.ylab = 0.05, off = NULL,<br />           ylevels = NULL, col = NULL,<br />           main = '', xlab = NULL, ylab = NULL,<br />           xaxlabels = NULL, yaxlabels = NULL,<br />           xlim = NULL, ylim = c(0, 1), axes = TRUE, ...,<br />           subset = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object, the default method expects either a single variable (interpreted to be the explanatory variable) or a 2-way table.  See details.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>a <code>'factor'</code> interpreted to be the dependent variable</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a <code>'formula'</code> of type <code>y ~ x</code> with a single dependent <code>'factor'</code> and a single explanatory variable.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional data frame.</p> </td> </tr> <tr valign='top'> <td><code>breaks</code></td> <td> <p>if the explanatory variable is numeric, this controls how it is discretized. <code>breaks</code> is passed to <code>hist</code> and can be a list of arguments.</p> </td> </tr> <tr valign='top'> <td><code>tol.ylab</code></td> <td> <p>convenience tolerance parameter for y-axis annotation. If the distance between two labels drops under this threshold, they are plotted equidistantly.</p> </td> </tr> <tr valign='top'> <td><code>off</code></td> <td> <p>vertical offset between the bars (in per cent). It is fixed to <code>0</code> for spinograms and defaults to <code>2</code> for spine plots.</p> </td> </tr> <tr valign='top'> <td><code>ylevels</code></td> <td> <p>a character or numeric vector specifying in which order the levels of the dependent variable should be plotted.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>a vector of fill colors of the same length as <code>levels(y)</code>. The default is to call <code>gray.colors</code>.</p> </td> </tr> <tr valign='top'> <td><code>main, xlab, ylab</code></td> <td> <p>character strings for annotation</p> </td> </tr> <tr valign='top'> <td><code>xaxlabels, yaxlabels</code></td> <td> <p>character vectors for annotation of x and y axis. Default to <code>levels(y)</code> and <code>levels(x)</code>, respectively for the spine plot. For <code>xaxlabels</code> in the spinogram, the breaks are used.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>the range of x and y values with sensible defaults.</p> </td> </tr> <tr valign='top'> <td><code>axes</code></td> <td> <p>logical.  If <code>FALSE</code> all axes (including those giving level names) are suppressed.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments passed to <code>rect</code>.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used for plotting.  </p> </td> </tr> </table> "	FALSE
"stars"	"graphics"	"Star (Spider/Radar) Plots and Segment Diagrams"	"<p>Draw star plots or segment diagrams of a multivariate data set. With one single location, also draws ‘spider’ (or ‘radar’) plots. </p>"	"<pre>stars(x, full = TRUE, scale = TRUE, radius = TRUE,<br />       labels = dimnames(x)[[1]], locations = NULL,<br />       nrow = NULL, ncol = NULL, len = 1,<br />       key.loc = NULL, key.labels = dimnames(x)[[2]],<br />       key.xpd = TRUE,<br />       xlim = NULL, ylim = NULL, flip.labels = NULL,<br />       draw.segments = FALSE,<br />       col.segments = 1:n.seg, col.stars = NA, col.lines = NA,<br />       axes = FALSE, frame.plot = axes,<br />       main = NULL, sub = NULL, xlab = '', ylab = '',<br />       cex = 0.8, lwd = 0.25, lty = par('lty'), xpd = FALSE,<br />       mar = pmin(par('mar'),<br />                  1.1+ c(2*axes+ (xlab != ''),<br />                  2*axes+ (ylab != ''), 1, 0)),<br />       add = FALSE, plot = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>matrix or data frame of data. One star or segment plot will be produced for each row of <code>x</code>. Missing values (<code>NA</code>) are allowed, but they are treated as if they were 0 (after scaling, if relevant).</p> </td> </tr> <tr valign='top'> <td><code>full</code></td> <td> <p>logical flag: if <code>TRUE</code>, the segment plots will occupy a full circle.  Otherwise, they occupy the (upper) semicircle only.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>logical flag: if <code>TRUE</code>, the columns of the data matrix are scaled independently so that the maximum value in each column is 1 and the minimum is 0.  If <code>FALSE</code>, the presumption is that the data have been scaled by some other algorithm to the range <i>[0, 1]</i>.</p> </td> </tr> <tr valign='top'> <td><code>radius</code></td> <td> <p>logical flag: in <code>TRUE</code>, the radii corresponding to each variable in the data will be drawn.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>vector of character strings for labeling the plots. Unlike the S function <code>stars</code>, no attempt is made to construct labels if <code>labels = NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>locations</code></td> <td> <p>Either two column matrix with the x and y coordinates used to place each of the segment plots; or numeric of length 2 when all plots should be superimposed (for a ‘spider plot’). By default, <code>locations = NULL</code>, the segment plots will be placed in a rectangular grid.</p> </td> </tr> <tr valign='top'> <td><code>nrow, ncol</code></td> <td> <p>integers giving the number of rows and columns to use when <code>locations</code> is <code>NULL</code>.  By default, <code>nrow == ncol</code>, a square layout will be used.</p> </td> </tr> <tr valign='top'> <td><code>len</code></td> <td> <p>scale factor for the length of radii or segments.</p> </td> </tr> <tr valign='top'> <td><code>key.loc</code></td> <td> <p>vector with x and y coordinates of the unit key.</p> </td> </tr> <tr valign='top'> <td><code>key.labels</code></td> <td> <p>vector of character strings for labeling the segments of the unit key.  If omitted, the second component of <code>dimnames(x)</code> is used, if available.</p> </td> </tr> <tr valign='top'> <td><code>key.xpd</code></td> <td> <p>clipping switch for the unit key (drawing and labeling), see <code>par('xpd')</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlim</code></td> <td> <p>vector with the range of x coordinates to plot. </p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>vector with the range of y coordinates to plot.</p> </td> </tr> <tr valign='top'> <td><code>flip.labels</code></td> <td> <p>logical indicating if the label locations should flip up and down from diagram to diagram. Defaults to a somewhat smart heuristic.</p> </td> </tr> <tr valign='top'> <td><code>draw.segments</code></td> <td> <p>logical. If <code>TRUE</code> draw a segment diagram.</p> </td> </tr> <tr valign='top'> <td><code>col.segments</code></td> <td> <p>color vector (integer or character, see <code>par</code>), each specifying a color for one of the segments (variables).  Ignored if <code>draw.segments = FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>col.stars</code></td> <td> <p>color vector (integer or character, see <code>par</code>), each specifying a color for one of the stars (cases).  Ignored if <code>draw.segments = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>col.lines</code></td> <td> <p>color vector (integer or character, see <code>par</code>), each specifying a color for one of the lines (cases).  Ignored if <code>draw.segments = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>axes</code></td> <td> <p>logical flag: if <code>TRUE</code> axes are added to the plot.</p> </td> </tr> <tr valign='top'> <td><code>frame.plot</code></td> <td> <p>logical flag: if <code>TRUE</code>, the plot region is framed.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>a main title for the plot.</p> </td> </tr> <tr valign='top'> <td><code>sub</code></td> <td> <p>a sub title for the plot.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>a label for the x axis.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>a label for the y axis.</p> </td> </tr> <tr valign='top'> <td><code>cex</code></td> <td> <p>character expansion factor for the labels.</p> </td> </tr> <tr valign='top'> <td><code>lwd</code></td> <td> <p>line width used for drawing.</p> </td> </tr> <tr valign='top'> <td><code>lty</code></td> <td> <p>line type used for drawing.</p> </td> </tr> <tr valign='top'> <td><code>xpd</code></td> <td> <p>logical or NA indicating if clipping should be done, see <code>par(xpd = .)</code>.</p> </td> </tr> <tr valign='top'> <td><code>mar</code></td> <td> <p>argument to <code>par(mar = *)</code>, typically choosing smaller margins than by default.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments, passed to the first call of <code>plot()</code>, see <code>plot.default</code> and to <code>box()</code> if <code>frame.plot</code> is true.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical, if <code>TRUE</code> <em>add</em> stars to current plot.</p> </td> </tr> <tr valign='top'> <td><code>plot</code></td> <td> <p>logical, if <code>FALSE</code>, nothing is plotted.</p> </td> </tr> </table> "	FALSE
"stem"	"graphics"	"Stem-and-Leaf Plots"	"<p><code>stem</code> produces a stem-and-leaf plot of the values in <code>x</code>. The parameter <code>scale</code> can be used to expand the scale of the plot.  A value of <code>scale = 2</code> will cause the plot to be roughly twice as long as the default. </p>"	"<pre>stem(x, scale = 1, width = 80, atom = 1e-08) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>This controls the plot length.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>The desired width of plot.</p> </td> </tr> <tr valign='top'> <td><code>atom</code></td> <td> <p>a tolerance.</p> </td> </tr> </table> "	FALSE
"strwidth"	"graphics"	"Plotting Dimensions of Character Strings and Math Expressions"	"<p>These functions compute the width or height, respectively, of the given strings or mathematical expressions <code>s[i]</code> on the current plotting device in <em>user</em> coordinates, <em>inches</em> or as fraction of the figure width <code>par('fin')</code>. </p>"	"<pre>strwidth(s, units = 'user', cex = NULL, font = NULL, vfont = NULL, ...) strheight(s, units = 'user', cex = NULL, font = NULL, vfont = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>s</code></td> <td> <p>a character or expression vector whose dimensions are to be determined.  Other objects are coerced by <code>as.graphicsAnnot</code>.</p> </td> </tr> <tr valign='top'> <td><code>units</code></td> <td> <p>character indicating in which units <code>s</code> is measured; should be one of <code>'user'</code>, <code>'inches'</code>, <code>'figure'</code>; partial matching is performed.</p> </td> </tr> <tr valign='top'> <td><code>cex</code></td> <td> <p>numeric <b>c</b>haracter <b>ex</b>pansion factor; multiplied by <code>par('cex')</code> yields the final character size; the default <code>NULL</code> is equivalent to <code>1</code>.</p> </td> </tr> <tr valign='top'> <td><code>font, vfont, ...</code></td> <td> <p>additional information about the font, possibly including the graphics parameter <code>'family'</code>: see <code>text</code>.</p> </td> </tr> </table> "	FALSE
"stripchart"	"graphics"	"1-D Scatter Plots"	"<p><code>stripchart</code> produces one dimensional scatter plots (or dot plots) of the given data.  These plots are a good alternative to <code>boxplot</code>s when sample sizes are small. </p>"	"<pre>stripchart(x, ...)<br />## S3 method for class 'formula' stripchart(x, data = NULL, dlab = NULL, ...,<br />            subset, na.action = NULL)<br /> ## Default S3 method: stripchart(x, method = 'overplot', jitter = 0.1, offset = 1/3,<br />            vertical = FALSE, group.names, add = FALSE,<br />            at = NULL, xlim = NULL, ylim = NULL,<br />            ylab = NULL, xlab = NULL, dlab = '', glab = '',<br />            log = '', pch = 0, col = par('fg'), cex = par('cex'),<br />            axes = TRUE, frame.plot = axes, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the data from which the plots are to be produced.  In the default method the data can be specified as a single numeric vector, or as list of numeric vectors, each corresponding to a component plot.  In the <code>formula</code> method, a symbolic specification of the form <code>y ~ g</code> can be given, indicating the observations in the vector <code>y</code> are to be grouped according to the levels of the factor <code>g</code>.  <code>NA</code>s are allowed in the data.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data.frame (or list) from which the variables in <code>x</code> should be taken.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used for plotting.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  The default is to ignore missing values in either the response or the group.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional parameters passed to the default method, or by it to <code>plot.window</code>, <code>points</code>, <code>axis</code> and <code>title</code> to control the appearance of the plot.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>the method to be used to separate coincident points. The default method <code>'overplot'</code> causes such points to be overplotted, but it is also possible to specify <code>'jitter'</code> to jitter the points, or <code>'stack'</code> have coincident points stacked.  The last method only makes sense for very granular data.</p> </td> </tr> <tr valign='top'> <td><code>jitter</code></td> <td> <p>when <code>method = 'jitter'</code> is used, <code>jitter</code> gives the amount of jittering applied.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td> <p>when stacking is used, points are stacked this many line-heights (symbol widths) apart.</p> </td> </tr> <tr valign='top'> <td><code>vertical</code></td> <td> <p>when vertical is <code>TRUE</code> the plots are drawn vertically rather than the default horizontal.</p> </td> </tr> <tr valign='top'> <td><code>group.names</code></td> <td> <p>group labels which will be printed alongside (or underneath) each plot.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical, if true <em>add</em> the chart to the current plot.</p> </td> </tr> <tr valign='top'> <td><code>at</code></td> <td> <p>numeric vector giving the locations where the charts should be drawn, particularly when <code>add = TRUE</code>; defaults to <code>1:n</code> where <code>n</code> is the number of boxes.</p> </td> </tr> <tr valign='top'> <td><code>ylab, xlab</code></td> <td> <p>labels: see <code>title</code>.</p> </td> </tr> <tr valign='top'> <td><code>dlab, glab</code></td> <td> <p>alternate way to specify axis labels: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p>plot limits: see <code>plot.window</code>.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>on which axes to use a log scale:  see <code>plot.default</code></p> </td> </tr> <tr valign='top'> <td><code>pch, col, cex</code></td> <td> <p>Graphical parameters: see <code>par</code>.</p> </td> </tr> <tr valign='top'> <td><code>axes, frame.plot</code></td> <td> <p>Axis control:  see <code>plot.default</code>.</p> </td> </tr> </table> "	FALSE
"sunflowerplot"	"graphics"	"Produce a Sunflower Scatter Plot"	"<p>Multiple points are plotted as ‘sunflowers’ with multiple leaves (‘petals’) such that overplotting is visualized instead of accidental and invisible. </p>"	"<pre>sunflowerplot(x, ...)<br />## Default S3 method: sunflowerplot(x, y = NULL, number, log = '', digits = 6,<br />               xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL,<br />               add = FALSE, rotate = FALSE,<br />               pch = 16, cex = 0.8, cex.fact = 1.5,<br />               col = par('col'), bg = NA, size = 1/8, seg.col = 2,<br />               seg.lwd = 1.5, ...)<br />## S3 method for class 'formula' sunflowerplot(formula, data = NULL, xlab = NULL, ylab = NULL, ...,<br />              subset, na.action = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric vector of <code>x</code>-coordinates of length <code>n</code>, say, or another valid plotting structure, as for <code>plot.default</code>, see also <code>xy.coords</code>.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>numeric vector of <code>y</code>-coordinates of length <code>n</code>.</p> </td> </tr> <tr valign='top'> <td><code>number</code></td> <td> <p>integer vector of length <code>n</code>. <code>number[i]</code> = number of replicates for <code>(x[i], y[i])</code>, may be 0.<br> Default (<code>missing(number)</code>): compute the exact multiplicity of the points <code>x[], y[]</code>, via <code>xyTable()</code>.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>character indicating log coordinate scale, see <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>when <code>number</code> is computed (i.e., not specified), <code>x</code> and <code>y</code> are rounded to <code>digits</code> significant digits before multiplicities are computed.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab</code></td> <td> <p>character label for x-, or y-axis, respectively.</p> </td> </tr> <tr valign='top'> <td><code>xlim, ylim</code></td> <td> <p><code>numeric(2)</code> limiting the extents of the x-, or y-axis.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>logical; should the plot be added on a previous one ? Default is <code>FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>rotate</code></td> <td> <p>logical; if <code>TRUE</code>, randomly rotate the sunflowers (preventing artefacts).</p> </td> </tr> <tr valign='top'> <td><code>pch</code></td> <td> <p>plotting character to be used for points (<code>number[i]==1</code>) and center of sunflowers.</p> </td> </tr> <tr valign='top'> <td><code>cex</code></td> <td> <p>numeric; character size expansion of center points (s. <code>pch</code>).</p> </td> </tr> <tr valign='top'> <td><code>cex.fact</code></td> <td> <p>numeric <em>shrinking</em> factor to be used for the center points <em>when there are flower leaves</em>, i.e., <code>cex / cex.fact</code> is used for these.</p> </td> </tr> <tr valign='top'> <td><code>col, bg</code></td> <td> <p>colors for the plot symbols, passed to <code>plot.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>size</code></td> <td> <p>of sunflower leaves in inches, 1[in] := 2.54[cm]. Default: 1/8\', approximately 3.2mm.</p> </td> </tr> <tr valign='top'> <td><code>seg.col</code></td> <td> <p>color to be used for the <b>seg</b>ments which make the sunflowers leaves, see <code>par(col=)</code>; <code>col = 'gold'</code> reminds of real sunflowers.</p> </td> </tr> <tr valign='top'> <td><code>seg.lwd</code></td> <td> <p>numeric; the line width for the leaves' segments.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to <code>plot</code> [if <code>add = FALSE</code>], or to be passed to or from another method.</p> </td> </tr> <tr valign='top'> <td><code>formula</code></td> <td> <p>a <code>formula</code>, such as <code>y ~ x</code>.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>a data.frame (or list) from which the variables in <code>formula</code> should be taken.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>an optional vector specifying a subset of observations to be used in the fitting process.</p> </td> </tr> <tr valign='top'> <td><code>na.action</code></td> <td> <p>a function which indicates what should happen when the data contain <code>NA</code>s.  The default is to ignore case with missing values.</p> </td> </tr> </table> "	FALSE
"symbols"	"graphics"	"Draw Symbols (Circles, Squares, Stars, Thermometers, Boxplots)"	"<p>This function draws symbols on a plot.  One of six symbols; <em>circles</em>, <em>squares</em>, <em>rectangles</em>, <em>stars</em>, <em>thermometers</em>, and <em>boxplots</em>, can be plotted at a specified set of x and y coordinates.  Specific aspects of the symbols, such as relative size, can be customized by additional parameters. </p>"	"<pre>symbols(x, y = NULL, circles, squares, rectangles, stars,<br />         thermometers, boxplots, inches = TRUE, add = FALSE,<br />         fg = par('col'), bg = NA,<br />         xlab = NULL, ylab = NULL, main = NULL,<br />         xlim = NULL, ylim = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>the x and y co-ordinates for the centres of the symbols. They can be specified in any way which is accepted by <code>xy.coords</code>.</p> </td> </tr> <tr valign='top'> <td><code>circles</code></td> <td> <p>a vector giving the radii of the circles.</p> </td> </tr> <tr valign='top'> <td><code>squares</code></td> <td> <p>a vector giving the length of the sides of the squares.</p> </td> </tr> <tr valign='top'> <td><code>rectangles</code></td> <td> <p>a matrix with two columns.  The first column gives widths and the second the heights of rectangles.</p> </td> </tr> <tr valign='top'> <td><code>stars</code></td> <td> <p>a matrix with three or more columns giving the lengths of the rays from the center of the stars.  <code>NA</code> values are replaced by zeroes.</p> </td> </tr> <tr valign='top'> <td><code>thermometers</code></td> <td> <p>a matrix with three or four columns.  The first two columns give the width and height of the thermometer symbols. If there are three columns, the third is taken as a proportion: the thermometers are filled (using colour <code>fg</code>) from their base to this proportion of their height.  If there are four columns, the third and fourth columns are taken as proportions and the thermometers are filled between these two proportions of their heights.  The part of the box not filled in <code>fg</code> will be filled in the background colour (default transparent) given by <code>bg</code>.</p> </td> </tr> <tr valign='top'> <td><code>boxplots</code></td> <td> <p>a matrix with five columns.  The first two columns give the width and height of the boxes, the next two columns give the lengths of the lower and upper whiskers and the fifth the proportion (with a warning if not in [0,1]) of the way up the box that the median line is drawn.</p> </td> </tr> <tr valign='top'> <td><code>inches</code></td> <td> <p><code>TRUE</code>, <code>FALSE</code> or a positive number. See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>if <code>add</code> is <code>TRUE</code>, the symbols are added to an existing plot, otherwise a new plot is created.</p> </td> </tr> <tr valign='top'> <td><code>fg</code></td> <td> <p>colour(s) the symbols are to be drawn in.</p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>if specified, the symbols are filled with colour(s), the vector <code>bg</code> being recycled to the number of symbols. The default is to leave the symbols unfilled.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>the x label of the plot if <code>add</code> is not true. Defaults to the <code>deparse</code>d expression used for <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>the y label of the plot.  Unused if <code>add = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>a main title for the plot.  Unused if <code>add = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlim</code></td> <td> <p>numeric vector of length 2 giving the x limits for the plot.  Unused if <code>add = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>ylim</code></td> <td> <p>numeric vector of length 2 giving the y limits for the plot.  Unused if <code>add = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphics parameters can also be passed to this function, as can the plot aspect ratio <code>asp</code> (see <code>plot.window</code>).</p> </td> </tr> </table> "	FALSE
"text"	"graphics"	"Add Text to a Plot"	"<p><code>text</code> draws the strings given in the vector <code>labels</code> at the coordinates given by <code>x</code> and <code>y</code>. <code>y</code> may be missing since <code>xy.coords(x, y)</code> is used for construction of the coordinates. </p>"	"<pre>text(x, ...)<br />## Default S3 method:  text(x, y = NULL, labels = seq_along(x$x), adj = NULL,<br />      pos = NULL, offset = 0.5, vfont = NULL,<br />      cex = 1, col = NULL, font = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric vectors of coordinates where the text <code>labels</code> should be written.  If the length of <code>x</code> and <code>y</code> differs, the shorter one is recycled.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>a character vector or expression specifying the <em>text</em> to be written.  An attempt is made to coerce other language objects (names and calls) to expressions, and vectors and other classed objects to character vectors by <code>as.character</code>. If <code>labels</code> is longer than <code>x</code> and <code>y</code>, the coordinates are recycled to the length of <code>labels</code>.</p> </td> </tr> <tr valign='top'> <td><code>adj</code></td> <td> <p>one or two values in <i>[0, 1]</i> which specify the x (and optionally y) adjustment of the labels.  On most devices values outside that interval will also work.</p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td> <p>a position specifier for the text.  If specified this overrides any <code>adj</code> value given.  Values of <code>1</code>, <code>2</code>, <code>3</code> and <code>4</code>, respectively indicate positions below, to the left of, above and to the right of the specified coordinates.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td> <p>when <code>pos</code> is specified, this value gives the offset of the label from the specified coordinate in fractions of a character width.</p> </td> </tr> <tr valign='top'> <td><code>vfont</code></td> <td> <p><code>NULL</code> for the current font family, or a character vector of length 2 for Hershey vector fonts.  The first element of the vector selects a typeface and the second element selects a style.  Ignored if <code>labels</code> is an expression.</p> </td> </tr> <tr valign='top'> <td><code>cex</code></td> <td> <p>numeric <b>c</b>haracter <b>ex</b>pansion factor; multiplied by <code>par('cex')</code> yields the final character size. <code>NULL</code> and <code>NA</code> are equivalent to <code>1.0</code>.</p> </td> </tr> <tr valign='top'> <td><code>col, font</code></td> <td> <p>the color and (if <code>vfont = NULL</code>) font to be used, possibly vectors.  These default to the values of the global graphical parameters in <code>par()</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further graphical parameters (from <code>par</code>), such as <code>srt</code>, <code>family</code> and <code>xpd</code>.</p> </td> </tr> </table> "	FALSE
"title"	"graphics"	"Plot Annotation"	"<p>This function can be used to add labels to a plot.  Its first four principal arguments can also be used as arguments in most high-level plotting functions.  They must be of type <code>character</code> or <code>expression</code>. In the latter case, quite a bit of mathematical notation is available such as sub- and superscripts, greek letters, fractions, etc: see plotmath </p>"	"<pre>title(main = NULL, sub = NULL, xlab = NULL, ylab = NULL,<br />       line = NA, outer = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>main</code></td> <td> <p>The main title (on top) using font, size (character expansion) and color <code>par(c('font.main', 'cex.main', 'col.main'))</code>.</p> </td> </tr> <tr valign='top'> <td><code>sub</code></td> <td> <p>Sub-title (at bottom) using font, size and color  <code>par(c('font.sub', 'cex.sub', 'col.sub'))</code>.</p> </td> </tr> <tr valign='top'> <td><code>xlab</code></td> <td> <p>X axis label using font, size and color  <code>par(c('font.lab', 'cex.lab', 'col.lab'))</code>.</p> </td> </tr> <tr valign='top'> <td><code>ylab</code></td> <td> <p>Y axis label, same font attributes as <code>xlab</code>.</p> </td> </tr> <tr valign='top'> <td><code>line</code></td> <td> <p>specifying a value for <code>line</code> overrides the default placement of labels, and places them this many lines outwards from the plot edge.</p> </td> </tr> <tr valign='top'> <td><code>outer</code></td> <td> <p>a logical value.  If <code>TRUE</code>, the titles are placed in the outer margins of the plot.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further graphical parameters from <code>par</code>.  Use e.g., <code>col.main</code> or <code>cex.sub</code> instead of just <code>col</code> or <code>cex</code>.  <code>adj</code> controls the justification of the titles. <code>xpd</code> can be used to set the clipping region: this defaults to the figure region unless <code>outer = TRUE</code>, otherwise the device region and can only be increased.  <code>mgp</code> controls the default placing of the axis titles. </p> </td> </tr> </table> "	FALSE
"units"	"graphics"	"Graphical Units"	"<p><code>xinch</code> and <code>yinch</code> convert the specified number of inches given as their arguments into the correct units for plotting with graphics functions.  Usually, this only makes sense when normal coordinates are used, i.e., <em>no</em> <code>log</code> scale (see the <code>log</code> argument to <code>par</code>). </p> <p><code>xyinch</code> does the same for a pair of numbers <code>xy</code>, simultaneously. </p>"	"<pre>xinch(x = 1, warn.log = TRUE) yinch(y = 1, warn.log = TRUE) xyinch(xy = 1, warn.log = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric vector</p> </td> </tr> <tr valign='top'> <td><code>xy</code></td> <td> <p>numeric of length 1 or 2.</p> </td> </tr> <tr valign='top'> <td><code>warn.log</code></td> <td> <p>logical; if <code>TRUE</code>, a warning is printed in case of active log scale.</p> </td> </tr> </table> "	FALSE
"xspline"	"graphics"	"Draw an X-spline"	"<p>Draw an X-spline, a curve drawn relative to control points. </p>"	"<pre>xspline(x, y = NULL, shape = 0, open = TRUE, repEnds = TRUE,<br />         draw = TRUE, border = par('fg'), col = NA, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x,y</code></td> <td> <p>vectors containing the coordinates of the vertices of the polygon. See <code>xy.coords</code> for alternatives.</p> </td> </tr> <tr valign='top'> <td><code>shape</code></td> <td> <p>A numeric vector of values between -1 and 1, which control the shape of the spline relative to the control points.</p> </td> </tr> <tr valign='top'> <td><code>open</code></td> <td> <p>A logical value indicating whether the spline is an open or a closed shape.</p> </td> </tr> <tr valign='top'> <td><code>repEnds</code></td> <td> <p>For open X-splines, a logical value indicating whether the first and last control points should be replicated for drawing the curve. Ignored for closed X-splines.</p> </td> </tr> <tr valign='top'> <td><code>draw</code></td> <td> <p>logical: should the X-spline be drawn?  If false, a set of line segments to draw the curve is returned, and nothing is drawn.</p> </td> </tr> <tr valign='top'> <td><code>border</code></td> <td> <p>the color to draw the curve.<br />   Use <code>border = NA</code> to omit borders.</p> </td> </tr> <tr valign='top'> <td><code>col</code></td> <td> <p>the color for filling the shape. The default, <code>NA</code>, is to leave unfilled.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>graphical parameters such as <code>lty</code>, <code>xpd</code>, <code>lend</code>, <code>ljoin</code> and <code>lmitre</code> can be given as arguments.</p> </td> </tr> </table> "	FALSE
"grDevices-package"	"grDevices"	"The R Graphics Devices and Support for Colours and Fonts"	"<p>Graphics devices and support for base and grid graphics </p>"	NA	NA	FALSE
"adjustcolor"	"grDevices"	"Adjust Colors in One or More Directions Conveniently."	"<p>Adjust or modify a vector of colors by “turning knobs” on one or more coordinates in <i>(r,g,b,α)</i> space, typically by up or down scaling them. </p>"	"<pre>adjustcolor(col, alpha.f = 1, red.f = 1, green.f = 1, blue.f = 1,<br />             offset = c(0, 0, 0, 0),<br />             transform = diag(c(red.f, green.f, blue.f, alpha.f)))</pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>col</code></td> <td> <p>vector of colors, in any format that col2rgb() accepts</p> </td> </tr> <tr valign='top'> <td><code>alpha.f</code></td> <td> <p>factor modifying the opacity alpha; typically in [0,1]</p> </td> </tr> <tr valign='top'> <td><code>red.f, green.f, blue.f</code></td> <td> <p>factors modifying the “red-”, “green-” or “blue-”ness of the colors, respectively.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td><br /></td> </tr> <tr valign='top'> <td><code>transform</code></td> <td><br /></td> </tr> </table> "	FALSE
"as.graphicsAnnot"	"grDevices"	"Coerce an Object for Graphics Annotation"	"<p>Coerce an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object into a form suitable for graphics annotation. </p>"	"<pre>as.graphicsAnnot(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object</p> </td> </tr></table> "	FALSE
"as.raster"	"grDevices"	"Create a Raster Object"	"<p>Functions to create a raster object (representing a bitmap image) and coerce other objects to a raster object. </p>"	"<pre>is.raster(x) as.raster(x, ...)<br />## S3 method for class 'matrix' as.raster(x, max = 1, ...) ## S3 method for class 'array' as.raster(x, max = 1, ...)<br />## S3 method for class 'logical' as.raster(x, max = 1, ...) ## S3 method for class 'numeric' as.raster(x, max = 1, ...) ## S3 method for class 'character' as.raster(x, max = 1, ...) ## S3 method for class 'raw' as.raster(x, max = 255L, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>max</code></td> <td> <p>number giving the maximum of the color values range.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"plotmath"	"grDevices"	"Mathematical Annotation in R"	"<p>If the <code>text</code> argument to one of the text-drawing functions (<code>text</code>, <code>mtext</code>, <code>axis</code>, <code>legend</code>) in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> is an expression, the argument is interpreted as a mathematical expression and the output will be formatted according to TeX-like rules.  Expressions can also be used for titles, subtitles and x- and y-axis labels (but not for axis labels on <code>persp</code> plots). </p> <p>In most cases other language objects (names and calls, including formulas) are coerced to expressions and so can also be used. </p>"	NA	NA	FALSE
"axisTicks"	"grDevices"	"Compute Pretty Axis Tick Scales"	"<p>Compute pretty axis scales and tick mark locations, the same way as traditional <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> graphics do it.  This is interesting particularly for log scale axes. </p>"	"<pre>axisTicks(usr, log, axp = NULL, nint = 5)  .axisPars(usr, log = FALSE, nintLog = 5) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>usr</code></td> <td> <p>numeric vector of length 2, with <code>c(min, max)</code> axis extents.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>logical indicating if a log scale is (thought to be) in use.</p> </td> </tr> <tr valign='top'> <td><code>axp</code></td> <td> <p>numeric vector of length 3, <code>c(mi, ma, n.)</code>, with identical meaning to <code>par('?axp')</code> (where <code>?</code> is <code>x</code> or <code>y</code>), namely “pretty” axis extents, and an integer <em>code</em> <code>n.</code>.<br /></p> </td> </tr> <tr valign='top'> <td><code>nint, nintLog</code></td> <td> <p>positive integer value indicating (<em>approximately</em>) the desired number of intervals. <code>nintLog</code> is used <b>only</b> for the case <code>log = TRUE</code>.</p> </td> </tr> </table> "	FALSE
"dev2bitmap"	"grDevices"	"Graphics Device for Bitmap Files via Ghostscript"	"<p><code>bitmap</code> generates a graphics file. <code>dev2bitmap</code> copies the current graphics device to a file in a graphics format. </p>"	"<pre>bitmap(file, type = 'png16m', height = 7, width = 7, res = 72,<br />        units = 'in', pointsize, taa = NA, gaa = NA, ...)<br />dev2bitmap(file, type = 'png16m', height = 7, width = 7, res = 72,<br />            units = 'in', pointsize, ...,<br />            method = c('postscript', 'pdf'), taa = NA, gaa = NA) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>The output file name, with an appropriate extension.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>The type of bitmap.</p> </td> </tr> <tr valign='top'> <td><code>width, height</code></td> <td> <p>Dimensions of the display region.</p> </td> </tr> <tr valign='top'> <td><code>res</code></td> <td> <p>Resolution, in dots per inch.</p> </td> </tr> <tr valign='top'> <td><code>units</code></td> <td> <p>The units in which <code>height</code> and <code>width</code> are given.  Can be <code>in</code> (inches), <code>px</code> (pixels), <code>cm</code> or <code>mm</code>.</p> </td> </tr> <tr valign='top'> <td><code>pointsize</code></td> <td> <p>The pointsize to be used for text: defaults to something reasonable given the width and height</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Other parameters passed to <code>postscript</code> or <code>pdf</code>.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>Should the plot be done by <code>postscript</code> or <code>pdf</code>?</p> </td> </tr> <tr valign='top'> <td><code>taa, gaa</code></td> <td> <p>Number of bits of antialiasing for text and for graphics respectively.  Usually 4 (for best effect) or 2.  Not supported on all types.</p> </td> </tr> </table> "	FALSE
"densCols"	"grDevices"	"Colors for Smooth Density Plots"	"<p><code>densCols</code> produces a vector containing colors which encode the local densities at each point in a scatterplot. </p>"	"<pre>densCols(x, y = NULL, nbin = 128, bandwidth,<br />          colramp = colorRampPalette(blues9[-(1:3)])) blues9 </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>the <code>x</code> and <code>y</code> arguments provide the x and y coordinates of the points.  Any reasonable way of defining the coordinates is acceptable.  See the function <code>xy.coords</code> for details.  If supplied separately, they must be of the same length.</p> </td> </tr> <tr valign='top'> <td><code>nbin</code></td> <td> <p>numeric vector of length one (for both directions) or two (for x and y separately) specifying the number of equally spaced grid points for the density estimation; directly used as <code>gridsize</code> in <code>bkde2D()</code>.</p> </td> </tr> <tr valign='top'> <td><code>bandwidth</code></td> <td> <p>numeric vector (length 1 or 2) of smoothing bandwidth(s). If missing, a more or less useful default is used. <code>bandwidth</code> is subsequently passed to function <code>bkde2D</code>.</p> </td> </tr> <tr valign='top'> <td><code>colramp</code></td> <td> <p>function accepting an integer <code>n</code> as an argument and returning <code>n</code> colors.</p> </td> </tr> </table> "	FALSE
"png"	"grDevices"	"BMP, JPEG, PNG and TIFF graphics devices"	"<p>Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files. </p>"	"<pre>bmp(filename = 'Rplot%03d.bmp',<br />     width = 480, height = 480, units = 'px', pointsize = 12,<br />     bg = 'white', res = NA, ...,<br />     type = c('cairo', 'Xlib', 'quartz'), antialias)<br />jpeg(filename = 'Rplot%03d.jpeg',<br />      width = 480, height = 480, units = 'px', pointsize = 12,<br />      quality = 75,<br />      bg = 'white', res = NA, ...,<br />      type = c('cairo', 'Xlib', 'quartz'), antialias)<br />png(filename = 'Rplot%03d.png',<br />     width = 480, height = 480, units = 'px', pointsize = 12,<br />      bg = 'white',  res = NA, ...,<br />     type = c('cairo', 'cairo-png', 'Xlib', 'quartz'), antialias)<br />tiff(filename = 'Rplot%03d.tiff',<br />      width = 480, height = 480, units = 'px', pointsize = 12,<br />      compression = c('none', 'rle', 'lzw', 'jpeg', 'zip', 'lzw+p', 'zip+p'),<br />      bg = 'white', res = NA,  ...,<br />      type = c('cairo', 'Xlib', 'quartz'), antialias) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>filename</code></td> <td> <p>the name of the output file. The page number is substituted if a C integer format is included in the character string, as in the default.  (The result must be less than <code>PATH_MAX</code> characters long, and may be truncated if not. See <code>postscript</code> for further details.)  Tilde expansion is performed where supported by the platform.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>the width of the device.</p> </td> </tr> <tr valign='top'> <td><code>height</code></td> <td> <p>the height of the device.</p> </td> </tr> <tr valign='top'> <td><code>units</code></td> <td> <p>The units in which <code>height</code> and <code>width</code> are given.  Can be <code>px</code> (pixels, the default), <code>in</code> (inches), <code>cm</code> or <code>mm</code>.</p> </td> </tr> <tr valign='top'> <td><code>pointsize</code></td> <td> <p>the default pointsize of plotted text, interpreted as big points (1/72 inch) at <code>res</code> ppi.</p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>the initial background colour: can be overridden by setting par('bg').</p> </td> </tr> <tr valign='top'> <td><code>quality</code></td> <td> <p>the ‘quality’ of the JPEG image, as a percentage.  Smaller values will give more compression but also more degradation of the image.</p> </td> </tr> <tr valign='top'> <td><code>compression</code></td> <td> <p>the type of compression to be used.  Ignored for <code>type = 'quartz'</code>.</p> </td> </tr> <tr valign='top'> <td><code>res</code></td> <td> <p>The nominal resolution in ppi which will be recorded in the bitmap file, if a positive integer.  Also used for <code>units</code> other than the default, and to convert points to pixels.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>for <code>type = 'Xlib'</code> only, additional arguments to the underlying <code>X11</code> device such as <code>fonts</code> or <code>family</code>. </p> <p>For types <code>'cairo'</code> and <code>'quartz'</code>, the <code>family</code> argument can be supplied.  See the ‘Cairo fonts’ section in the help for <code>X11</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string, one of <code>'Xlib'</code> or <code>'quartz'</code> (some macOS builds) or <code>'cairo'</code>.  The latter will only be available if the system was compiled with support for cairo – otherwise <code>'Xlib'</code> will be used.  The default is set by <code>getOption('bitmapType')</code> – the ‘out of the box’ default is <code>'quartz'</code> or <code>'cairo'</code> where available, otherwise <code>'Xlib'</code>.</p> </td> </tr> <tr valign='top'> <td><code>antialias</code></td> <td> <p>for <code>type = 'cairo'</code>, giving the type of anti-aliasing (if any) to be used for fonts and lines (but not fills). See <code>X11</code>.  The default is set by <code>X11.options</code>.  Also for <code>type = 'quartz'</code>, where antialiasing is used unless <code>antialias = 'none'</code>.</p> </td> </tr> </table> "	FALSE
"boxplot.stats"	"grDevices"	"Box Plot Statistics"	"<p>This function is typically called by another function to gather the statistics necessary for producing box plots, but may be invoked separately. </p>"	"<pre>boxplot.stats(x, coef = 1.5, do.conf = TRUE, do.out = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector for which the boxplot will be constructed (<code>NA</code>s and <code>NaN</code>s are allowed and omitted).</p> </td> </tr> <tr valign='top'> <td><code>coef</code></td> <td> <p>this determines how far the plot ‘whiskers’ extend out from the box.  If <code>coef</code> is positive, the whiskers extend to the most extreme data point which is no more than <code>coef</code> times the length of the box away from the box. A value of zero causes the whiskers to extend to the data extremes (and no outliers be returned).</p> </td> </tr> <tr valign='top'> <td><code>do.conf, do.out</code></td> <td> <p>logicals; if <code>FALSE</code>, the <code>conf</code> or <code>out</code> component respectively will be empty in the result.</p> </td> </tr> </table> "	FALSE
"cairo"	"grDevices"	"Cairographics-based SVG, PDF and PostScript Graphics Devices"	"<p>Graphics devices for SVG, PDF and PostScript graphics files using the cairo graphics API. </p>"	"<pre>svg(filename = if(onefile) 'Rplots.svg' else 'Rplot%03d.svg',<br />     width = 7, height = 7, pointsize = 12,<br />     onefile = FALSE, family = 'sans', bg = 'white',<br />     antialias = c('default', 'none', 'gray', 'subpixel'))<br />cairo_pdf(filename = if(onefile) 'Rplots.pdf' else 'Rplot%03d.pdf',<br />           width = 7, height = 7, pointsize = 12,<br />           onefile = FALSE, family = 'sans', bg = 'white',<br />           antialias = c('default', 'none', 'gray', 'subpixel'),<br />           fallback_resolution = 300)<br />cairo_ps(filename = if(onefile) 'Rplots.ps' else 'Rplot%03d.ps',<br />          width = 7, height = 7, pointsize = 12,<br />          onefile = FALSE, family = 'sans', bg = 'white',<br />          antialias = c('default', 'none', 'gray', 'subpixel'),<br />          fallback_resolution = 300) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>filename</code></td> <td> <p>the name of the output file. The page number is substituted if a C integer format is included in the character string, as in the default.  (The result must be less than <code>PATH_MAX</code> characters long, and may be truncated if not. See <code>postscript</code> for further details.)  Tilde expansion is performed where supported by the platform.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>the width of the device in inches.</p> </td> </tr> <tr valign='top'> <td><code>height</code></td> <td> <p>the height of the device in inches.</p> </td> </tr> <tr valign='top'> <td><code>pointsize</code></td> <td> <p>the default pointsize of plotted text (in big points).</p> </td> </tr> <tr valign='top'> <td><code>onefile</code></td> <td> <p>should all plots appear in one file or in separate files?</p> </td> </tr> <tr valign='top'> <td><code>family</code></td> <td> <p>one of the device-independent font families, <code>'sans'</code>, <code>'serif'</code> and <code>'mono'</code>, or a character string specify a font family to be searched for in a system-dependent way. See, the ‘Cairo fonts’ section in the help for <code>X11</code>. </p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>the initial background colour: can be overridden by setting par('bg').</p> </td> </tr> <tr valign='top'> <td><code>antialias</code></td> <td> <p>string, the type of anti-aliasing (if any) to be used; defaults to <code>'default'</code>.</p> </td> </tr> <tr valign='top'> <td><code>fallback_resolution</code></td> <td> <p>numeric: the resolution in dpi used when falling back to bitmap output.  Prior to <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> 3.3.0 this depended on the cairo implementation but was commonly 300.</p> </td> </tr> </table> "	FALSE
"check.options"	"grDevices"	"Set Options with Consistency Checks"	"<p>Utility function for setting options with some consistency checks. The <code>attributes</code> of the new settings in <code>new</code> are checked for consistency with the <em>model</em> (often default) list in <code>name.opt</code>. </p>"	"<pre>check.options(new, name.opt, reset = FALSE, assign.opt = FALSE,<br />               envir = .GlobalEnv,<br />               check.attributes = c('mode', 'length'),<br />               override.check = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>new</code></td> <td> <p>a <em>named</em> list</p> </td> </tr> <tr valign='top'> <td><code>name.opt</code></td> <td> <p>character with the name of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object containing the default list.</p> </td> </tr> <tr valign='top'> <td><code>reset</code></td> <td> <p>logical; if <code>TRUE</code>, reset the options from <code>name.opt</code>.  If there is more than one <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object with name <code>name.opt</code>, remove the first one in the <code>search()</code> path.</p> </td> </tr> <tr valign='top'> <td><code>assign.opt</code></td> <td> <p>logical; if <code>TRUE</code>, assign the ...</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the <code>environment</code> used for <code>get</code> and <code>assign</code>.</p> </td> </tr> <tr valign='top'> <td><code>check.attributes</code></td> <td> <p>character containing the attributes which <code>check.options</code> should check.</p> </td> </tr> <tr valign='top'> <td><code>override.check</code></td> <td> <p>logical vector of length <code>length(new)</code> (or 1 which entails recycling). For those <code>new[i]</code> where <code>override.check[i] == TRUE</code>, the checks are overridden and the changes made anyway.</p> </td> </tr> </table> "	FALSE
"chull"	"grDevices"	"Compute Convex Hull of a Set of Points"	"<p>Computes the subset of points which lie on the convex hull of the set of points specified. </p>"	"<pre>chull(x, y = NULL) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x, y</code></td> <td> <p>coordinate vectors of points. This can be specified as two vectors <code>x</code> and <code>y</code>, a 2-column matrix <code>x</code>, a list <code>x</code> with two components, etc, see <code>xy.coords</code>.</p> </td> </tr></table> "	FALSE
"Type1Font"	"grDevices"	"Type 1 and CID Fonts"	"<p>These functions are used to define the translation of a <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> graphics font family name to a Type 1 or CID font descriptions, used by both the <code>postscript</code> and <code>pdf</code> graphics devices. </p>"	"<pre>Type1Font(family, metrics, encoding = 'default')<br />CIDFont(family, cmap, cmapEncoding, pdfresource = '') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>family</code></td> <td> <p>a character string giving the name to be used internally for a Type 1 or CID-keyed font family.  This needs to uniquely identify each family, so if you modify a family which is in use (see <code>postscriptFonts</code>) you need to change the family name.</p> </td> </tr> <tr valign='top'> <td><code>metrics</code></td> <td> <p>a character vector of four or five strings giving paths to the afm (Adobe Font Metric) files for the font.</p> </td> </tr> <tr valign='top'> <td><code>cmap</code></td> <td> <p>the name of a CMap file for a CID-keyed font.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>for <code>Type1Font</code>, the name of an encoding file. Defaults to <code>'default'</code>, which maps on Unix-alikes to <code>'ISOLatin1.enc'</code> and on Windows to <code>'WinAnsi.enc'</code>. Otherwise, a file name in the ‘<span class='file'>enc</span>’ directory of the <span class='pkg'>grDevices</span> package, which is used if the path does not contain a path separator.  An extension <code>'.enc'</code> can be omitted.</p> </td> </tr> <tr valign='top'> <td><code>cmapEncoding</code></td> <td><br /><p>The name of a character encoding to be used with the named CMap file: strings will be translated to this encoding when written to the file.</p> </td> </tr> <tr valign='top'> <td><code>pdfresource</code></td> <td> <p>A chunk of PDF code;  only required for using a CID-keyed font on <code>pdf</code>; users should not be expected to provide this.</p> </td> </tr> </table> "	FALSE
"cm"	"grDevices"	"Unit Transformation"	"<p>Translates from inches to cm (centimeters). </p>"	"<pre>cm(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>numeric vector</p> </td> </tr></table> "	FALSE
"palettes"	"grDevices"	"Color Palettes"	"<p>Create a vector of <code>n</code> contiguous colors. </p>"	"<pre>rainbow(n, s = 1, v = 1, start = 0, end = max(1, n - 1)/n, alpha = 1) heat.colors(n, alpha = 1) terrain.colors(n, alpha = 1) topo.colors(n, alpha = 1) cm.colors(n, alpha = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>the number of colors (<i>≥ 1</i>) to be in the palette.</p> </td> </tr> <tr valign='top'> <td><code>s, v</code></td> <td> <p>the ‘saturation’ and ‘value’ to be used to complete the HSV color descriptions.</p> </td> </tr> <tr valign='top'> <td><code>start</code></td> <td> <p>the (corrected) hue in [0,1] at which the rainbow begins.</p> </td> </tr> <tr valign='top'> <td><code>end</code></td> <td> <p>the (corrected) hue in [0,1] at which the rainbow ends.</p> </td> </tr> <tr valign='top'> <td><code>alpha</code></td> <td> <p>the alpha transparency, a number in [0,1], see argument <code>alpha</code> in <code>hsv</code>.</p> </td> </tr> </table> "	FALSE
"col2rgb"	"grDevices"	"Color to RGB Conversion"	"<p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> color to RGB (red/green/blue) conversion. </p>"	"<pre>col2rgb(col, alpha = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>col</code></td> <td> <p>vector of any of the three kinds of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> color specifications, i.e., either a color name (as listed by <code>colors()</code>), a hexadecimal string of the form <code>'#rrggbb'</code> or <code>'#rrggbbaa'</code> (see <code>rgb</code>), or a positive integer <code>i</code> meaning <code>palette()[i]</code>.</p> </td> </tr> <tr valign='top'> <td><code>alpha</code></td> <td> <p>logical value indicating whether the alpha channel (opacity) values should be returned.</p> </td> </tr> </table> "	FALSE
"make.rgb"	"grDevices"	"Create colour spaces "	"<p>These functions specify colour spaces for use in <code>convertColor</code>. </p>"	"<pre>make.rgb(red, green, blue, name = NULL, white = 'D65',<br />          gamma = 2.2)<br />colorConverter(toXYZ, fromXYZ, name, white = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>red,green,blue</code></td> <td> <p>Chromaticity (xy or xyY) of RGB primaries</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>Name for the colour space</p> </td> </tr> <tr valign='top'> <td><code>white</code></td> <td> <p>Character string specifying the reference white (see ‘Details’.)</p> </td> </tr> <tr valign='top'> <td><code>gamma</code></td> <td> <p>Display gamma (nonlinearity). A positive number or the string <code>'sRGB'</code> </p> </td> </tr> <tr valign='top'> <td><code>fromXYZ</code></td> <td> <p>Function to convert from XYZ tristimulus coordinates to this space</p> </td> </tr> <tr valign='top'> <td><code>toXYZ</code></td> <td> <p>Function to convert from this space to XYZ tristimulus coordinates.</p> </td> </tr> </table> "	FALSE
"colorRamp"	"grDevices"	"Color interpolation"	"<p>These functions return functions that interpolate a set of given colors to create new color palettes (like <code>topo.colors</code>) and color ramps, functions that map the interval <i>[0, 1]</i> to colors (like <code>grey</code>). </p>"	"<pre>colorRamp(colors, bias = 1, space = c('rgb', 'Lab'),<br />           interpolate = c('linear', 'spline'), alpha = FALSE) colorRampPalette(colors, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>colors</code></td> <td> <p>colors to interpolate; must be a valid argument to <code>col2rgb()</code>.</p> </td> </tr> <tr valign='top'> <td><code>bias</code></td> <td> <p>a positive number.  Higher values give more widely spaced colors at the high end.</p> </td> </tr> <tr valign='top'> <td><code>space</code></td> <td> <p>a character string; interpolation in RGB or CIE Lab color spaces.</p> </td> </tr> <tr valign='top'> <td><code>interpolate</code></td> <td> <p>use spline or linear interpolation.</p> </td> </tr> <tr valign='top'> <td><code>alpha</code></td> <td> <p>logical: should alpha channel (opacity) values be returned?<br />   It is an error to give a true value if <code>space</code> is specified.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to pass to <code>colorRamp</code>.</p> </td> </tr> </table> "	FALSE
"colors"	"grDevices"	"Color Names"	"<p>Returns the built-in color names which <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> knows about. </p>"	"<pre>colors (distinct = FALSE) colours(distinct = FALSE) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>distinct</code></td> <td> <p>logical indicating if the colors returned should all be distinct; e.g., <code>'snow'</code> and <code>'snow1'</code> are effectively the same point in the <i>(0:255)^3</i> RGB space.</p> </td> </tr></table> "	FALSE
"convertColor"	"grDevices"	"Convert between Colour Spaces"	"<p>Convert colours between their representations in standard colour spaces. </p>"	"<pre>convertColor(color, from, to, from.ref.white, to.ref.white,<br />              scale.in = 1, scale.out = 1, clip = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>color</code></td> <td> <p>A matrix whose rows specify colors.</p> </td> </tr> <tr valign='top'> <td><code>from, to</code></td> <td> <p>Input and output color spaces.  See ‘Details’ below.</p> </td> </tr> <tr valign='top'> <td><code>from.ref.white, to.ref.white</code></td> <td> <p>Reference whites or <code>NULL</code> if these are built in to the definition, as for RGB spaces. <code>D65</code> is the default, see ‘Details’ for others. </p> </td> </tr> <tr valign='top'> <td><code>scale.in, scale.out</code></td> <td> <p>Input is divided by <code>scale.in</code>, output is multiplied by <code>scale.out</code>. Use <code>NULL</code> to suppress scaling when input or output is not numeric.</p> </td> </tr> <tr valign='top'> <td><code>clip</code></td> <td> <p>If <code>TRUE</code>, truncate RGB output to [0,1], <code>FALSE</code> return out-of-range RGB, <code>NA</code> set out of range colors to <code>NaN</code>.</p> </td> </tr> </table> "	FALSE
"contourLines"	"grDevices"	"Calculate Contour Lines"	"<p>Calculate contour lines for a given set of data. </p>"	"<pre>contourLines(x = seq(0, 1, length.out = nrow(z)),<br />              y = seq(0, 1, length.out = ncol(z)),<br />              z, nlevels = 10,<br />              levels = pretty(range(z, na.rm = TRUE), nlevels)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>locations of grid lines at which the values in <code>z</code> are measured.  These must be in ascending order.  By default, equally spaced values from 0 to 1 are used.  If <code>x</code> is a <code>list</code>, its components <code>x$x</code> and <code>x$y</code> are used for <code>x</code> and <code>y</code>, respectively. If the list has component <code>z</code> this is used for <code>z</code>.</p> </td> </tr> <tr valign='top'> <td><code>z</code></td> <td> <p>a matrix containing the values to be plotted (<code>NA</code>s are allowed).  Note that <code>x</code> can be used instead of <code>z</code> for convenience.</p> </td> </tr> <tr valign='top'> <td><code>nlevels</code></td> <td> <p>number of contour levels desired <b>iff</b> <code>levels</code> is not supplied.</p> </td> </tr> <tr valign='top'> <td><code>levels</code></td> <td> <p>numeric vector of levels at which to draw contour lines.</p> </td> </tr> </table> "	FALSE
"dev.capabilities"	"grDevices"	"Query Capabilities of the Current Graphics Device"	"<p>Query the capabilities of the current graphics device. </p>"	"<pre>dev.capabilities(what = NULL) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>what</code></td> <td> <p>a character vector partially matching the names of the components listed in section ‘Value’, or <code>NULL</code> which lists all available capabilities.</p> </td> </tr></table> "	FALSE
"dev.capture"	"grDevices"	"Capture device output as a raster image"	"<p><code>dev.capture</code> captures the current contents of a graphics device as a raster (bitmap) image. </p>"	"<pre>dev.capture(native = FALSE) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>native</code></td> <td> <p>Logical. If <code>FALSE</code> the result is a matrix of R color names, if <code>TRUE</code> the output is returned as a <code>nativeRaster</code> object which is more efficient for plotting, but not portable.</p> </td> </tr></table> "	FALSE
"dev2"	"grDevices"	"Copy Graphics Between Multiple Devices"	"<p><code>dev.copy</code> copies the graphics contents of the current device to the device specified by <code>which</code> or to a new device which has been created by the function specified by <code>device</code> (it is an error to specify both <code>which</code> and <code>device</code>).  (If recording is off on the current device, there are no contents to copy: this will result in no plot or an empty plot.) The device copied to becomes the current device. </p> <p><code>dev.print</code> copies the graphics contents of the current device to a new device which has been created by the function specified by <code>device</code> and then shuts the new device. </p> <p><code>dev.copy2eps</code> is similar to <code>dev.print</code> but produces an EPSF output file in portrait orientation (<code>horizontal = FALSE</code>). <code>dev.copy2pdf</code> is the analogue for PDF output. </p> <p><code>dev.control</code> allows the user to control the recording of graphics operations in a device.  If <code>displaylist</code> is <code>'inhibit'</code> (<code>'enable'</code>) then recording is turned off (on). It is only safe to change this at the beginning of a plot (just before or just after a new page).  Initially recording is on for screen devices, and off for print devices. </p>"	"<pre>dev.copy(device, ..., which = dev.next()) dev.print(device = postscript, ...) dev.copy2eps(...) dev.copy2pdf(..., out.type = 'pdf') dev.control(displaylist = c('inhibit', 'enable')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>device</code></td> <td> <p>A device function (e.g., <code>x11</code>, <code>postscript</code>, ...)</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Arguments to the <code>device</code> function above: for <code>dev.copy2eps</code> arguments to <code>postscript</code> and for <code>dev.copy2pdf</code>, arguments to <code>pdf</code>. For <code>dev.print</code>, this includes <code>which</code> and by default any <code>postscript</code> arguments.</p> </td> </tr> <tr valign='top'> <td><code>which</code></td> <td> <p>A device number specifying the device to copy to.</p> </td> </tr> <tr valign='top'> <td><code>out.type</code></td> <td> <p>The name of the output device: can be <code>'pdf'</code>, or <code>'quartz'</code> (some macOS builds) or <code>'cairo'</code> (Windows and some Unix-alikes, see <code>cairo_pdf</code>).</p> </td> </tr> <tr valign='top'> <td><code>displaylist</code></td> <td> <p>A character string: the only valid values are <code>'inhibit'</code> and <code>'enable'</code>.</p> </td> </tr> </table> "	FALSE
"dev"	"grDevices"	"Control Multiple Devices"	"<p>These functions provide control over multiple graphics devices. </p>"	"<pre>dev.cur() dev.list() dev.next(which = dev.cur()) dev.prev(which = dev.cur()) dev.off(which = dev.cur()) dev.set(which = dev.next()) dev.new(..., noRStudioGD = FALSE) graphics.off() </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>which</code></td> <td> <p>An integer specifying a device number.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to the device selected.</p> </td> </tr> <tr valign='top'> <td><code>noRStudioGD</code></td> <td> <p>Do not use the RStudio graphics device even if specified as the default device: it does not accept arguments such as <code>width</code> and <code>height</code>.</p> </td> </tr> </table> "	FALSE
"dev.flush"	"grDevices"	"Hold or Flush Output on an On-Screen Graphics Device."	"<p>This gives a way to hold/flush output on certain on-screen devices, and is ignored by other devices. </p>"	"<pre>dev.hold(level = 1L) dev.flush(level = 1L) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>level</code></td> <td> <p>Integer &gt;= 0.  The amount by which to change the hold level.  Negative values will be silently replaced by zero.</p> </td> </tr></table> "	FALSE
"dev.interactive"	"grDevices"	"Is the Current Graphics Device Interactive?"	"<p>Test if the current graphics device (or that which would be opened) is interactive. </p>"	"<pre>dev.interactive(orNone = FALSE)<br />deviceIsInteractive(name = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>orNone</code></td> <td> <p>logical; if <code>TRUE</code>, the function also returns <code>TRUE</code> when <code>.Device == 'null device'</code> and <code>getOption('device')</code> is among the known interactive devices.</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>one or more device names as a character vector, or <code>NULL</code> to give the existing list.</p> </td> </tr> </table> "	FALSE
"dev.size"	"grDevices"	" Find Size of Device Surface "	"<p>Find the dimensions of the device surface of the current device. </p>"	"<pre>dev.size(units = c('in', 'cm', 'px')) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>units</code></td> <td> <p>the units in which to return the value – inches, cm, or pixels (device units).</p> </td> </tr></table> "	FALSE
"devAskNewPage"	"grDevices"	" Prompt before New Page "	"<p>This function can be used to control (for the current device) whether the user is prompted before starting a new page of output. </p>"	"<pre>devAskNewPage(ask = NULL) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>ask</code></td> <td> <p><code>NULL</code> or a logical value.  If <code>TRUE</code>, the user will in future be prompted before a new page of output is started.</p> </td> </tr></table> "	FALSE
"Devices"	"grDevices"	"List of Graphical Devices"	"<p>The following graphics devices are currently available: </p> <ul> <li> <p><code>pdf</code> Write PDF graphics commands to a file </p> </li> <li> <p><code>postscript</code> Writes PostScript graphics commands to a file </p> </li> <li> <p><code>xfig</code> Device for XFIG graphics file format </p> </li> <li> <p><code>bitmap</code> bitmap pseudo-device via <code>Ghostscript</code> (if available). </p> </li> <li> <p><code>pictex</code> Writes TeX/PicTeX graphics commands to a file (of historical interest only) </p> </li> </ul>  <p>The following devices will be functional if <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> was compiled to use them (they exist but will return with a warning on other systems): </p> <ul> <li> <p><code>X11</code> The graphics device for the X11 windowing system </p> </li> <li> <p><code>cairo_pdf</code>, <code>cairo_ps</code> PDF and PostScript devices based on cairo graphics. </p> </li> <li> <p><code>svg</code> SVG device based on cairo graphics. </p> </li> <li> <p><code>png</code> PNG bitmap device </p> </li> <li> <p><code>jpeg</code> JPEG bitmap device </p> </li> <li> <p><code>bmp</code> BMP bitmap device </p> </li> <li> <p><code>tiff</code> TIFF bitmap device </p> </li> <li> <p><code>quartz</code> The graphics device for the macOS native Quartz 2d graphics system.  (This is only functional on macOS where it can be used from the <code>R.app</code> GUI and from the command line: but it will display on the local screen even for a remote session.) </p> </li> </ul> "	NA	NA	FALSE
"embedFonts"	"grDevices"	"Embed Fonts in PostScript and PDF"	"<p>Runs Ghostscript to process a PDF or PostScript file and embed all fonts in the file. </p>"	"<pre>embedFonts(file, format, outfile = file,<br />            fontpaths = character(), options = character()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>a character string giving the name of the original file.</p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p>the format for the new file (with fonts embedded) given as the name of a ghostscript output device. If not specified, it is guessed from the suffix of <code>file</code>.</p> </td> </tr> <tr valign='top'> <td><code>outfile</code></td> <td> <p>the name of the new file (with fonts embedded).</p> </td> </tr> <tr valign='top'> <td><code>fontpaths</code></td> <td> <p>a character vector giving directories that Ghostscript will search for fonts.</p> </td> </tr> <tr valign='top'> <td><code>options</code></td> <td> <p>a character vector containing further options to Ghostscript.</p> </td> </tr> </table> "	FALSE
"extendrange"	"grDevices"	"Extend a Numerical Range by a Small Percentage"	"<p>Extends a numerical range by a small percentage, i.e., fraction, <em>on both sides</em>. </p>"	"<pre>extendrange(x, r = range(x, na.rm = TRUE), f = 0.05) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric vector; not used if <code>r</code> is specified.</p> </td> </tr> <tr valign='top'> <td><code>r</code></td> <td> <p>numeric vector of length 2; defaults to the <code>range</code> of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>f</code></td> <td> <p>number specifying the fraction by which the range should be extended.</p> </td> </tr> </table> "	FALSE
"getGraphicsEvent"	"grDevices"	"Wait for a mouse or keyboard event from a graphics window"	"<p>This function waits for input from a graphics window in the form of a mouse or keyboard event. </p>"	"<pre>getGraphicsEvent(prompt = 'Waiting for input',<br />                  onMouseDown = NULL, onMouseMove = NULL,<br />                  onMouseUp = NULL, onKeybd = NULL,<br />                  consolePrompt = prompt) setGraphicsEventHandlers(which = dev.cur(), ...) getGraphicsEventEnv(which = dev.cur()) setGraphicsEventEnv(which = dev.cur(), env)<br /></pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>prompt</code></td> <td> <p>prompt to be displayed to the user in the graphics window</p> </td> </tr> <tr valign='top'> <td><code>onMouseDown</code></td> <td> <p>a function to respond to mouse clicks</p> </td> </tr> <tr valign='top'> <td><code>onMouseMove</code></td> <td> <p>a function to respond to mouse movement</p> </td> </tr> <tr valign='top'> <td><code>onMouseUp</code></td> <td> <p>a function to respond to mouse button releases</p> </td> </tr> <tr valign='top'> <td><code>onKeybd</code></td> <td> <p>a function to respond to key presses</p> </td> </tr> <tr valign='top'> <td><code>consolePrompt</code></td> <td> <p>prompt to be displayed to the user in the console</p> </td> </tr> <tr valign='top'> <td><code>which</code></td> <td> <p>which graphics device does the call apply to?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>items including handlers to be placed in the event environment</p> </td> </tr> <tr valign='top'> <td><code>env</code></td> <td> <p>an environment to be used as the event environment</p> </td> </tr> </table> "	FALSE
"gray"	"grDevices"	"Gray Level Specification"	"<p>Create a vector of colors from a vector of gray levels. </p>"	"<pre>gray(level, alpha = NULL) grey(level, alpha = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>level</code></td> <td> <p>a vector of desired gray levels between <code>0</code> and <code>1</code>; zero indicates <code>'black'</code> and one indicates <code>'white'</code>.</p> </td> </tr> <tr valign='top'> <td><code>alpha</code></td> <td> <p>the opacity, if specified.</p> </td> </tr> </table> "	FALSE
"gray.colors"	"grDevices"	"Gray Color Palette"	"<p>Create a vector of <code>n</code> gamma-corrected gray colors. </p>"	"<pre>gray.colors(n, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL) grey.colors(n, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>the number of gray colors (<i>≥ 1</i>) to be in the palette.</p> </td> </tr> <tr valign='top'> <td><code>start</code></td> <td> <p>starting gray level in the palette (should be between <code>0</code> and <code>1</code> where zero indicates <code>'black'</code> and one indicates <code>'white'</code>).</p> </td> </tr> <tr valign='top'> <td><code>end</code></td> <td> <p>ending gray level in the palette.</p> </td> </tr> <tr valign='top'> <td><code>gamma</code></td> <td> <p>the gamma correction.</p> </td> </tr> <tr valign='top'> <td><code>alpha</code></td> <td> <p>the opacity, is specified.</p> </td> </tr> </table> "	FALSE
"grSoftVersion"	"grDevices"	"Report Versions of Graphics Software"	"<p>Report versions of third-party graphics software. </p>"	"<pre>grSoftVersion() </pre>"	NA	FALSE
"hcl"	"grDevices"	"HCL Color Specification"	"<p>Create a vector of colors from vectors specifying hue, chroma and luminance. </p>"	"<pre>hcl(h = 0, c = 35, l = 85, alpha, fixup = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>h</code></td> <td> <p>The hue of the color specified as an angle in the range [0,360].  0 yields red, 120 yields green 240 yields blue, etc.</p> </td> </tr> <tr valign='top'> <td><code>c</code></td> <td> <p>The chroma of the color.  The upper bound for chroma depends on hue and luminance.</p> </td> </tr> <tr valign='top'> <td><code>l</code></td> <td> <p>A value in the range [0,100] giving the luminance of the colour.  For a given combination of hue and chroma, only a subset of this range is possible.</p> </td> </tr> <tr valign='top'> <td><code>alpha</code></td> <td> <p>numeric vector of values in the range <code>[0,1]</code> for alpha transparency channel (0 means transparent and 1 means opaque).</p> </td> </tr> <tr valign='top'> <td><code>fixup</code></td> <td> <p>a logical value which indicates whether the resulting RGB values should be corrected to ensure that a real color results. if <code>fixup</code> is <code>FALSE</code> RGB components lying outside the range [0,1] will result in an <code>NA</code> value.</p> </td> </tr> </table> "	FALSE
"Hershey"	"grDevices"	"Hershey Vector Fonts in R"	"<p>If the <code>family</code> graphical parameter (see <code>par</code>) has been set to one of the Hershey fonts (see ‘Details’) Hershey vector fonts are used to render text. </p> <p>When using the <code>text</code> and <code>contour</code> functions Hershey fonts may be selected via the <code>vfont</code> argument, which is a character vector of length 2 (see ‘Details’ for valid values).  This allows Cyrillic to be selected, which is not available via the font families. </p>"	"<pre>Hershey </pre>"	NA	FALSE
"hsv"	"grDevices"	"HSV Color Specification"	"<p>Create a vector of colors from vectors specifying hue, saturation and value. </p>"	"<pre>hsv(h = 1, s = 1, v = 1, alpha) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>h,s,v</code></td> <td> <p>numeric vectors of values in the range <code>[0, 1]</code> for ‘hue’, ‘saturation’ and ‘value’ to be combined to form a vector of colors.  Values in shorter arguments are recycled.</p> </td> </tr> <tr valign='top'> <td><code>alpha</code></td> <td> <p>numeric vector of values in the range <code>[0, 1]</code> for alpha transparency channel (0 means transparent and 1 means opaque).</p> </td> </tr> </table> "	FALSE
"Japanese"	"grDevices"	"Japanese characters in R"	"<p>The implementation of Hershey vector fonts provides a large number of Japanese characters (Hiragana, Katakana, and Kanji). </p>"	NA	NA	FALSE
"n2mfrow"	"grDevices"	"Compute Default mfrow From Number of Plots"	"<p>Easy setup for plotting multiple figures (in a rectangular layout) on one page.  This computes a sensible default for <code>par(mfrow)</code>. </p>"	"<pre>n2mfrow(nr.plots) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>nr.plots</code></td> <td> <p>integer; the number of plot figures you'll want to draw.</p> </td> </tr></table> "	FALSE
"nclass"	"grDevices"	"Compute the Number of Classes for a Histogram"	"<p>Compute the number of classes for a histogram. </p>"	"<pre>nclass.Sturges(x) nclass.scott(x) nclass.FD(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td><br /><p>A data vector. </p> </td> </tr></table> "	FALSE
"palette"	"grDevices"	"Set or View the Graphics Palette"	"<p>View or manipulate the color palette which is used when a <code>col=</code> has a numeric index. </p>"	"<pre>palette(value) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>value</code></td> <td> <p>an optional character vector.</p> </td> </tr></table> "	FALSE
"pdf"	"grDevices"	"PDF Graphics Device"	"<p><code>pdf</code> starts the graphics device driver for producing PDF graphics. </p>"	"<pre>pdf(file = if(onefile) 'Rplots.pdf' else 'Rplot%03d.pdf',<br />     width, height, onefile, family, title, fonts, version,<br />     paper, encoding, bg, fg, pointsize, pagecentre, colormodel,<br />     useDingbats, useKerning, fillOddEven, compress) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>a character string giving the name of the file. If it is of the form <code>'|cmd'</code>, the output is piped to the command given by <code>cmd</code>.  If it is <code>NULL</code>, then no external file is created (effectively, no drawing occurs), but the device may still be queried (e.g., for size of text). </p> <p>For use with <code>onefile = FALSE</code> give a C integer format such as <code>'Rplot%03d.pdf'</code> (the default in that case). (See <code>postscript</code> for further details.) </p> <p>Tilde expansion (see <code>path.expand</code>) is done. </p> </td> </tr> <tr valign='top'> <td><code>width, height</code></td> <td> <p>the width and height of the graphics region in inches.  The default values are <code>7</code>.</p> </td> </tr> <tr valign='top'> <td><code>onefile</code></td> <td> <p>logical: if true (the default) allow multiple figures in one file.  If false, generate a file with name containing the page number for each page.  Defaults to <code>TRUE</code>, and forced to true if <code>file</code> is a pipe.</p> </td> </tr> <tr valign='top'> <td><code>family</code></td> <td> <p>the font family to be used, see <code>postscript</code>.  Defaults to <code>'Helvetica'</code>.</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>title string to embed as the <span class='samp'>/Title</span> field in the file.  Defaults to <code>'R Graphics Output'</code>.</p> </td> </tr> <tr valign='top'> <td><code>fonts</code></td> <td> <p>a character vector specifying <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> graphics font family names for additional fonts which will be included in the PDF file. Defaults to <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>version</code></td> <td> <p>a string describing the PDF version that will be required to view the output.  This is a minimum, and will be increased (with a warning) if necessary.  Defaults to <code>'1.4'</code>, but see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>paper</code></td> <td> <p>the target paper size.  The choices are <code>'a4'</code>, <code>'letter'</code>, <code>'legal'</code> (or <code>'us'</code>) and <code>'executive'</code> (and these can be capitalized), or <code>'a4r'</code> and <code>'USr'</code> for rotated (‘landscape’). The default is <code>'special'</code>, which means that the <code>width</code> and <code>height</code> specify the paper size.  A further choice is <code>'default'</code>; if this is selected, the papersize is taken from the option <code>'papersize'</code> if that is set and as <code>'a4'</code> if it is unset or empty. Defaults to <code>'special'</code>. </p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>the name of an encoding file.  See <code>postscript</code> for details.  Defaults to <code>'default'</code>.</p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>the initial background color to be used.  Defaults to <code>'transparent'</code>.</p> </td> </tr> <tr valign='top'> <td><code>fg</code></td> <td> <p>the initial foreground color to be used.  Defaults to <code>'black'</code>.</p> </td> </tr> <tr valign='top'> <td><code>pointsize</code></td> <td> <p>the default point size to be used.  Strictly speaking, in bp, that is 1/72 of an inch, but approximately in points.  Defaults to <code>12</code>.</p> </td> </tr> <tr valign='top'> <td><code>pagecentre</code></td> <td> <p>logical: should the device region be centred on the page? – is only relevant for <code>paper != 'special'</code>. Defaults to <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>colormodel</code></td> <td> <p>a character string describing the color model: currently allowed values are <code>'srgb'</code>, <code>'gray'</code> (or <code>'grey'</code>) and <code>'cmyk'</code>.  Defaults to <code>'srgb'</code>.  See section ‘Color models’.</p> </td> </tr> <tr valign='top'> <td><code>useDingbats</code></td> <td> <p>logical.  Should small circles be rendered <em>via</em> the Dingbats font?  Defaults to <code>TRUE</code>, which produces smaller and better output.  Setting this to <code>FALSE</code> can work around font display problems in broken PDF viewers: although this font is one of the 14 guaranteed to be available in all PDF viewers, that guarantee is not always honoured. See the ‘Note’ for a possible fix for some viewers. </p> </td> </tr> <tr valign='top'> <td><code>useKerning</code></td> <td> <p>logical.  Should kerning corrections be included in setting text and calculating string widths?  Defaults to <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>fillOddEven</code></td> <td> <p>logical controlling the polygon fill mode:  see <code>polygon</code> for details.  Defaults to <code>FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>compress</code></td> <td> <p>logical.  Should PDF streams be generated with Flate compression?  Defaults to <code>TRUE</code>.</p> </td> </tr> </table> "	FALSE
"pdf.options"	"grDevices"	"Auxiliary Function to Set/View Defaults for Arguments of pdf"	"<p>The auxiliary function <code>pdf.options</code> can be used to set or view (if called without arguments) the default values for some of the arguments to <code>pdf</code>. </p> <p><code>pdf.options</code> needs to be called before calling <code>pdf</code>, and the default values it sets can be overridden by supplying arguments to <code>pdf</code>. </p>"	"<pre>pdf.options(..., reset = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments <code>width</code>, <code>height</code>, <code>onefile</code>, <code>family</code>, <code>title</code>, <code>fonts</code>, <code>paper</code>, <code>encoding</code>, <code>pointsize</code>, <code>bg</code>, <code>fg</code>, <code>pagecentre</code>, <code>useDingbats</code>, <code>colormodel</code>, <code>fillOddEven</code> and <code>compress</code> can be supplied.</p> </td> </tr> <tr valign='top'> <td><code>reset</code></td> <td> <p>logical: should the defaults be reset to their ‘factory-fresh’ values?</p> </td> </tr> </table> "	FALSE
"postscriptFonts"	"grDevices"	"PostScript and PDF Font Families"	"<p>These functions handle the translation of a <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> graphics font family name to a PostScript or PDF font description, used by the <code>postscript</code> or <code>pdf</code> graphics devices. </p>"	"<pre>postscriptFonts(...) pdfFonts(...) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>...</code></td> <td> <p>either character strings naming mappings to display, or named arguments specifying mappings to add or change.</p> </td> </tr></table> "	FALSE
"pictex"	"grDevices"	"A PicTeX Graphics Driver"	"<p>This function produces simple graphics suitable for inclusion in TeX and LaTeX documents.  It dates from the very early days of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> and is for historical interest only. </p>"	"<pre>pictex(file = 'Rplots.tex', width = 5, height = 4, debug = FALSE,<br />        bg = 'white', fg = 'black') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>the file where output will appear.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>The width of the plot in inches.</p> </td> </tr> <tr valign='top'> <td><code>height</code></td> <td> <p>the height of the plot in inches.</p> </td> </tr> <tr valign='top'> <td><code>debug</code></td> <td> <p>should debugging information be printed.</p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>the background color for the plot.  Ignored.</p> </td> </tr> <tr valign='top'> <td><code>fg</code></td> <td> <p>the foreground color for the plot.  Ignored.</p> </td> </tr> </table> "	FALSE
"postscript"	"grDevices"	"PostScript Graphics"	"<p><code>postscript</code> starts the graphics device driver for producing PostScript graphics. </p>"	"<pre>postscript(file = if(onefile) 'Rplots.ps' else 'Rplot%03d.ps',<br />            onefile, family, title, fonts, encoding, bg, fg,<br />            width, height, horizontal, pointsize,<br />            paper, pagecentre, print.it, command,<br />            colormodel, useKerning, fillOddEven) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>a character string giving the name of the file.  If it is <code>''</code>, the output is piped to the command given by the argument <code>command</code>. If it is of the form <code>'|cmd'</code>, the output is piped to the command given by <code>cmd</code>. </p> <p>For use with <code>onefile = FALSE</code> give a <code>printf</code> format such as <code>'Rplot%03d.ps'</code> (the default in that case).  The string should not otherwise contain a <code>%</code>: if it is really necessary, use <code>%%</code> in the string for <code>%</code> in the file name. A single integer format matching the regular expression <code>'%[#0 +=-]*[0-9.]*[diouxX]'</code> is allowed. </p> <p>Tilde expansion (see <code>path.expand</code>) is done. </p> </td> </tr> <tr valign='top'> <td><code>onefile</code></td> <td> <p>logical: if true (the default) allow multiple figures in one file.  If false, generate a file name containing the page number for each page and use an EPSF header and no <code>DocumentMedia</code> comment.  Defaults to <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>family</code></td> <td> <p>the initial font family to be used, normally as a character string.  See the section ‘Families’.  Defaults to <code>'Helvetica'</code>.</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>title string to embed as the <code>Title</code> comment in the file.  Defaults to <code>'R Graphics Output'</code>.</p> </td> </tr> <tr valign='top'> <td><code>fonts</code></td> <td> <p>a character vector specifying additional <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> graphics font family names for font families whose declarations will be included in the PostScript file and are available for use with the device. See ‘Families’ below.  Defaults to <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>the name of an encoding file.  Defaults to <code>'default'</code>.  The latter is interpreted as ‘<span class='file'>'ISOLatin1.enc'</span>’ unless the locale is recognized as corresponding to a language using ISO 8859-{2,5,7,13,15} or KOI8-{R,U}. The file is looked for in the ‘<span class='file'>enc</span>’ directory of package <span class='pkg'>grDevices</span> if the path does not contain a path separator.  An extension <code>'.enc'</code> can be omitted. </p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>the initial background color to be used.  If <code>'transparent'</code> (or any other non-opaque colour), no background is painted.  Defaults to <code>'transparent'</code>.</p> </td> </tr> <tr valign='top'> <td><code>fg</code></td> <td> <p>the initial foreground color to be used.  Defaults to <code>'black'</code>.</p> </td> </tr> <tr valign='top'> <td><code>width, height</code></td> <td> <p>the width and height of the graphics region in inches.  Default to <code>0</code>. </p> <p>If <code>paper != 'special'</code> and <code>width</code> or <code>height</code> is less than <code>0.1</code> or too large to give a total margin of 0.5 inch, the graphics region is reset to the corresponding paper dimension minus 0.5. </p> </td> </tr> <tr valign='top'> <td><code>horizontal</code></td> <td> <p>the orientation of the printed image, a logical. Defaults to true, that is landscape orientation on paper sizes with width less than height.</p> </td> </tr> <tr valign='top'> <td><code>pointsize</code></td> <td> <p>the default point size to be used.  Strictly speaking, in bp, that is 1/72 of an inch, but approximately in points.  Defaults to <code>12</code>.</p> </td> </tr> <tr valign='top'> <td><code>paper</code></td> <td> <p>the size of paper in the printer.  The choices are <code>'a4'</code>, <code>'letter'</code> (or <code>'us'</code>), <code>'legal'</code> and <code>'executive'</code> (and these can be capitalized). Also, <code>'special'</code> can be used, when arguments <code>width</code> and <code>height</code> specify the paper size.  A further choice is <code>'default'</code> (the default): If this is selected, the papersize is taken from the option <code>'papersize'</code> if that is set and to <code>'a4'</code> if it is unset or empty.</p> </td> </tr> <tr valign='top'> <td><code>pagecentre</code></td> <td> <p>logical: should the device region be centred on the page?  Defaults to true.</p> </td> </tr> <tr valign='top'> <td><code>print.it</code></td> <td> <p>logical: should the file be printed when the device is closed?  (This only applies if <code>file</code> is a real file name.) Defaults to false.</p> </td> </tr> <tr valign='top'> <td><code>command</code></td> <td> <p>the command to be used for ‘printing’.  Defaults to <code>'default'</code>, the value of option <code>'printcmd'</code>.  The length limit is <code>2*PATH_MAX</code>, typically 8096 bytes. </p> </td> </tr> <tr valign='top'> <td><code>colormodel</code></td> <td> <p>a character string describing the color model: currently allowed values as <code>'srgb'</code>, <code>'srgb+gray'</code>, <code>'rgb'</code>, <code>'rgb-nogray'</code>, <code>'gray'</code> (or <code>'grey')</code> and <code>'cmyk'</code>.  Defaults to <code>'srgb'</code>.  See section ‘Color models’.</p> </td> </tr> <tr valign='top'> <td><code>useKerning</code></td> <td> <p>logical.  Should kerning corrections be included in setting text and calculating string widths?  Defaults to <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>fillOddEven</code></td> <td> <p>logical controlling the polygon fill mode:  see <code>polygon</code> for details.  Default <code>FALSE</code>.</p> </td> </tr> </table> "	FALSE
"pretty.Date"	"grDevices"	"Pretty Breakpoints for Date-Time Classes"	"<p>Compute a sequence of about <code>n+1</code> equally spaced ‘nice’ values which cover the range of the values in <code>x</code>, possibly of length one, when <code>min.n = 0</code> and there is only one unique <code>x</code>. </p>"	"<pre>## S3 method for class 'Date' pretty(x, n = 5, min.n = n %/% 2, sep = ' ', ...) ## S3 method for class 'POSIXt' pretty(x, n = 5, min.n = n %/% 2, sep = ' ', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'Date'</code> or <code>'POSIXt'</code> (i.e., <code>'POSIXct'</code> or <code>'POSIXlt'</code>). </p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>integer giving the <em>desired</em> number of intervals.</p> </td> </tr> <tr valign='top'> <td><code>min.n</code></td> <td> <p>nonnegative integer giving the <em>minimal</em> number of intervals.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>character string, serving as a separator for certain formats (e.g., between month and year). </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments for compatibility with the generic, ignored.</p> </td> </tr> </table> "	FALSE
"recordplot"	"grDevices"	"Record and Replay Plots"	"<p>Functions to save the current plot in an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> variable, and to replay it. </p>"	"<pre>recordPlot(load=NULL, attach=NULL) replayPlot(x, reloadPkgs=FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>load</code></td> <td> <p>If not <code>NULL</code>, a character vector of package names, which are saved as part of the recorded plot.</p> </td> </tr> <tr valign='top'> <td><code>attach</code></td> <td> <p>If not <code>NULL</code>, a character vector of package names, which are saved as part of the recorded plot.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>A saved plot.</p> </td> </tr> <tr valign='top'> <td><code>reloadPkgs</code></td> <td> <p>A logical indicating whether to reload and/or reattach any packages that were saved as part of the recorded plot.</p> </td> </tr> </table> "	FALSE
"ps.options"	"grDevices"	"Auxiliary Function to Set/View Defaults for Arguments of postscript"	"<p>The auxiliary function <code>ps.options</code> can be used to set or view (if called without arguments) the default values for some of the arguments to <code>postscript</code>. </p> <p><code>ps.options</code> needs to be called before calling <code>postscript</code>, and the default values it sets can be overridden by supplying arguments to <code>postscript</code>. </p>"	"<pre>ps.options(..., reset = FALSE, override.check = FALSE)<br />setEPS(...) setPS(...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments <code>onefile</code>, <code>family</code>, <code>title</code>, <code>fonts</code>, <code>encoding</code>, <code>bg</code>, <code>fg</code>, <code>width</code>, <code>height</code>, <code>horizontal</code>, <code>pointsize</code>,  <code>paper</code>, <code>pagecentre</code>, <code>print.it</code>, <code>command</code>, <code>colormodel</code> and <code>fillOddEven</code> can be supplied.  <code>onefile</code>, <code>horizontal</code> and <code>paper</code> are <em>ignored</em> for <code>setEPS</code> and <code>setPS</code>.</p> </td> </tr> <tr valign='top'> <td><code>reset</code></td> <td> <p>logical: should the defaults be reset to their ‘factory-fresh’ values?</p> </td> </tr> <tr valign='top'> <td><code>override.check</code></td> <td> <p>logical argument passed to <code>check.options</code>.  See the Examples.</p> </td> </tr> </table> "	FALSE
"quartz"	"grDevices"	"macOS Quartz Device"	"<p><code>quartz</code> starts a graphics device driver for the macOS System. It supports plotting both to the screen (the default) and to various graphics file formats. </p>"	"<pre>quartz(title, width, height, pointsize, family, antialias, type,<br />       file = NULL, bg, canvas, dpi)<br />quartz.options(..., reset = FALSE)<br />quartz.save(file, type = 'png', device = dev.cur(), dpi = 100, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>title</code></td> <td> <p>title for the Quartz window (applies to on-screen output only), default <code>'Quartz %d'</code>.  A C-style format for an integer will be substituted by the device number (see the <code>file</code> argument to <code>postscript</code> for further details).</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>the width of the plotting area in inches.  Default <code>7</code>.</p> </td> </tr> <tr valign='top'> <td><code>height</code></td> <td> <p>the height of the plotting area in inches.  Default <code>7</code>.</p> </td> </tr> <tr valign='top'> <td><code>pointsize</code></td> <td> <p>the default pointsize to be used.  Default <code>12</code>.</p> </td> </tr> <tr valign='top'> <td><code>family</code></td> <td> <p>this is the family name of the font that will be used by the device.  Default <code>'Arial'</code>.  This will be the base name of a font as  shown in Font Book.</p> </td> </tr> <tr valign='top'> <td><code>antialias</code></td> <td> <p>whether to use antialiasing.  Default <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the type of output to use.  See ‘Details’ for more information.  Default <code>'native'</code>.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>an optional target for the graphics device. The default, <code>NULL</code>, selects a default name where one is needed.  See ‘Details’ for more information.</p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>the initial background colour to use for the device.  Default <code>'transparent'</code>.  An opaque colour such as <code>'white'</code> will normally be required on off-screen types that support transparency such as <code>'png'</code> and <code>'tiff'</code>.</p> </td> </tr> <tr valign='top'> <td><code>canvas</code></td> <td> <p>canvas colour to use for an on-screen device.  Default <code>'white'</code>, and will be forced to be an opaque colour.</p> </td> </tr> <tr valign='top'> <td><code>dpi</code></td> <td> <p>resolution of the output.  The default (<code>NA_real_</code>) for an on-screen display defaults to the resolution of the main screen, and to 72 dpi otherwise.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Any of the arguments to <code>quartz</code> except <code>file</code>.</p> </td> </tr> <tr valign='top'> <td><code>reset</code></td> <td> <p>logical: should the defaults be reset to their defaults?</p> </td> </tr> <tr valign='top'> <td><code>device</code></td> <td> <p>device number to copy from.</p> </td> </tr> </table> "	FALSE
"quartzFonts"	"grDevices"	"quartz Fonts"	"<p>These functions handle the translation of a device-independent R graphics font family name to a quartz font description. </p>"	"<pre>quartzFont(family)<br />quartzFonts(...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>family</code></td> <td> <p>a character vector containing the four PostScript font names for plain, bold, italic, and bolditalic versions of a font family.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>either character strings naming mappings to display, or new (named) mappings to define.</p> </td> </tr> </table> "	FALSE
"recordGraphics"	"grDevices"	"Record Graphics Operations"	"<p>Records arbitrary code on the graphics engine display list. Useful for encapsulating calculations with graphical output that depends on the calculations. Intended <em>only</em> for expert use. </p>"	"<pre>recordGraphics(expr, list, env) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>object of mode <code>expression</code> or <code>call</code> or an unevaluated expression.</p> </td> </tr> <tr valign='top'> <td><code>list</code></td> <td> <p>a list defining the environment in which <code>expr</code> is to be evaluated.</p> </td> </tr> <tr valign='top'> <td><code>env</code></td> <td> <p>An <code>environment</code> specifying where <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> looks for objects not found in <code>envir</code>.</p> </td> </tr> </table> "	FALSE
"rgb"	"grDevices"	"RGB Color Specification"	"<p>This function creates colors corresponding to the given intensities (between 0 and <code>max</code>) of the red, green and blue primaries.  The colour specification refers to the standard sRGB colorspace (IEC standard 61966). </p> <p>An alpha transparency value can also be specified (as an opacity, so <code>0</code> means fully transparent and <code>max</code> means opaque).  If <code>alpha</code> is not specified, an opaque colour is generated. </p> <p>The <code>names</code> argument may be used to provide names for the colors. </p> <p>The values returned by these functions can be used with a <code>col=</code> specification in graphics functions or in <code>par</code>. </p>"	"<pre>rgb(red, green, blue, alpha, names = NULL, maxColorValue = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>red, blue, green, alpha</code></td> <td> <p>numeric vectors with values in <i>[0, M]</i> where <i>M</i> is <code>maxColorValue</code>.  When this is <code>255</code>, the <code>red</code>, <code>blue</code>, <code>green</code>, and <code>alpha</code> values are coerced to integers in <code>0:255</code> and the result is computed most efficiently.</p> </td> </tr> <tr valign='top'> <td><code>names</code></td> <td> <p>character vector. The names for the resulting vector.</p> </td> </tr> <tr valign='top'> <td><code>maxColorValue</code></td> <td> <p>number giving the maximum of the color values range, see above.</p> </td> </tr> </table> "	FALSE
"rgb2hsv"	"grDevices"	"RGB to HSV Conversion"	"<p><code>rgb2hsv</code> transforms colors from RGB space (red/green/blue) into HSV space (hue/saturation/value). </p>"	"<pre>rgb2hsv(r, g = NULL, b = NULL, maxColorValue = 255) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>r</code></td> <td> <p>vector of ‘red’ values in <i>[0, M]</i>, (<i>M<br />       = </i><code>maxColorValue</code>) or 3-row rgb matrix.</p> </td> </tr> <tr valign='top'> <td><code>g</code></td> <td> <p>vector of ‘green’ values, or <code>NULL</code> when <code>r</code> is a matrix.</p> </td> </tr> <tr valign='top'> <td><code>b</code></td> <td> <p>vector of ‘blue’ values, or <code>NULL</code> when <code>r</code> is a matrix.</p> </td> </tr> <tr valign='top'> <td><code>maxColorValue</code></td> <td> <p>number giving the maximum of the RGB color values range.  The default <code>255</code> corresponds to the typical <code>0:255</code> RGB coding as in <code>col2rgb()</code>.</p> </td> </tr> </table> "	FALSE
"savePlot"	"grDevices"	"Save Cairo X11 Plot to File"	"<p>Save the current page of a cairo <code>X11()</code> device to a file. </p>"	"<pre>savePlot(filename = paste('Rplot', type, sep = '.'),<br />          type = c('png', 'jpeg', 'tiff', 'bmp'),<br />          device = dev.cur()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>filename</code></td> <td> <p>filename to save to.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>file type: only <code>'png'</code> will be accepted for cairo version 1.0.</p> </td> </tr> <tr valign='top'> <td><code>device</code></td> <td> <p>the device to save from.</p> </td> </tr> </table> "	FALSE
"trans3d"	"grDevices"	"3D to 2D Transformation for Perspective Plots"	"<p>Projection of 3-dimensional to 2-dimensional points using a 4x4 viewing transformation matrix.  Mainly for adding to perspective plots such as <code>persp</code>. </p>"	"<pre>trans3d(x, y, z, pmat) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y, z</code></td> <td> <p>numeric vectors of equal length, specifying points in 3D space.</p> </td> </tr> <tr valign='top'> <td><code>pmat</code></td> <td> <p>a <i>4 x 4</i> <em>viewing transformation matrix</em>, suitable for projecting the 3D coordinates <i>(x,y,z)</i> into the 2D plane using homogeneous 4D coordinates <i>(x,y,z,t)</i>; such matrices are returned by <code>persp()</code>.</p> </td> </tr> </table> "	FALSE
"x11"	"grDevices"	"X Window System Graphics"	"<p><code>X11</code> starts a graphics device driver for the X Window System (version 11).  This can only be done on machines/accounts that have access to an X server. </p> <p><code>x11</code> is recognized as a synonym for <code>X11</code>. </p> <p>The <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> function is a wrapper for two devices, one based on Xlib (<a href='https://en.wikipedia.org/wiki/Xlib'>https://en.wikipedia.org/wiki/Xlib</a>) and one using cairographics (<a href='http://www.cairographics.org'>http://www.cairographics.org</a>). </p>"	"<pre>X11(display = '', width, height, pointsize, gamma, bg, canvas,<br />     fonts, family, xpos, ypos, title, type, antialias)<br />X11.options(..., reset = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>display</code></td> <td> <p>the display on which the graphics window will appear. The default is to use the value in the user's environment variable <span class='env'>DISPLAY</span>.  This is ignored (with a warning) if an X11 device is already open on another display.</p> </td> </tr> <tr valign='top'> <td><code>width, height</code></td> <td> <p>the width and height of the plotting window, in inches.  If <code>NA</code>, taken from the resources and if not specified there defaults to <code>7</code> inches.  See also ‘Resources’.</p> </td> </tr> <tr valign='top'> <td><code>pointsize</code></td> <td> <p>the default pointsize to be used.  Defaults to <code>12</code>.</p> </td> </tr> <tr valign='top'> <td><code>gamma</code></td> <td> <p>gamma correction fudge factor. Colours in R are sRGB;  if your monitor does not conform to sRGB, you might be able to improve things by tweaking this parameter to apply additional gamma correction to the RGB channels. By default 1 (no additional gamma correction).</p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>colour, the initial background colour.  Default <code>'transparent'</code>.</p> </td> </tr> <tr valign='top'> <td><code>canvas</code></td> <td> <p>colour.  The colour of the canvas, which is visible only when the background colour is transparent.  Should be an opaque colour (and any alpha value will be ignored).  Default <code>'white'</code>.</p> </td> </tr> <tr valign='top'> <td><code>fonts</code></td> <td> <p>for <code>type = 'Xlib'</code> only: X11 font description strings into which weight, slant and size will be substituted.  There are two, the first for fonts 1 to 4 and the second for font 5, the symbol font.  See section ‘Fonts’.</p> </td> </tr> <tr valign='top'> <td><code>family</code></td> <td> <p>The default family: a length-one character string.  This is primarily intended for cairo-based devices, but for <code>type =<br />     'Xlib'</code>, the <code>X11Fonts()</code> database is used to map family names to <code>fonts</code> (and this argument takes precedence over that one).</p> </td> </tr> <tr valign='top'> <td><code>xpos, ypos</code></td> <td> <p>integer: initial position of the top left corner of the window, in pixels.  Negative values are from the opposite corner, e.g. <code>xpos = -100</code> says the top right corner should be 100 pixels from the right edge of the screen.  If <code>NA</code> (the default), successive devices are cascaded in 20 pixel steps from the top left. See also ‘Resources’.</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>character string, up to 100 bytes.  With the default, <code>''</code>, a suitable title is created internally.  A C-style format for an integer will be substituted by the device number (see the <code>file</code> argument to <code>postscript</code> for further details).  How non-ASCII titles are handled is implementation-dependent.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string, one of <code>'Xlib'</code>, <code>'cairo'</code>, <code>'nbcairo'</code> or <code>'dbcairo'</code>.  Only the first will be available if the system was compiled without support for cairographics.  The default is <code>'cairo'</code> where available except on macOS, otherwise <code>'Xlib'</code>.</p> </td> </tr> <tr valign='top'> <td><code>antialias</code></td> <td> <p>for cairo types, the type of anti-aliasing (if any) to be used.  One of <code>c('default', 'none', 'gray', 'subpixel')</code>.</p> </td> </tr> <tr valign='top'> <td><code>reset</code></td> <td> <p>logical: should the defaults be reset to their defaults?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Any of the arguments to <code>X11</code>, plus <code>colortype</code> and <code>maxcubesize</code> (see section ‘Colour Rendering’).</p> </td> </tr> </table> "	FALSE
"x11Fonts"	"grDevices"	"X11 Fonts"	"<p>These functions handle the translation of a device-independent R graphics font family name to an X11 font description. </p>"	"<pre>X11Font(font)<br />X11Fonts(...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>font</code></td> <td> <p>a character string containing an X11 font description.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>either character strings naming mappings to display, or new (named) mappings to define.</p> </td> </tr> </table> "	FALSE
"xfig"	"grDevices"	"XFig Graphics Device"	"<p><code>xfig</code> starts the graphics device driver for producing XFig (version 3.2) graphics. </p> <p>The auxiliary function <code>ps.options</code> can be used to set and view (if called without arguments) default values for the arguments to <code>xfig</code> and <code>postscript</code>. </p>"	"<pre>xfig(file = if(onefile) 'Rplots.fig' else 'Rplot%03d.fig',<br />      onefile = FALSE, encoding = 'none',<br />      paper = 'default', horizontal = TRUE,<br />      width = 0, height = 0, family = 'Helvetica',<br />      pointsize = 12, bg = 'transparent', fg = 'black',<br />      pagecentre = TRUE, defaultfont = FALSE, textspecial = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>a character string giving the name of the file.<br />   For use with <code>onefile = FALSE</code> give a C integer format such as <code>'Rplot%03d.fig'</code> (the default in that case). (See <code>postscript</code> for further details.) </p> </td> </tr> <tr valign='top'> <td><code>onefile</code></td> <td> <p>logical: if true allow multiple figures in one file. If false, assume only one page per file and generate a file number containing the page number.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>The encoding in which to write text strings.  The default is not to re-encode.  This can be any encoding recognized by <code>iconv</code>: in a Western UTF-8 locale you probably want to select an 8-bit encoding such as <code>latin1</code>, and in an East Asian locale an <code>EUC</code> encoding.  If re-encoding fails, the text strings will be written in the current encoding with a warning.</p> </td> </tr> <tr valign='top'> <td><code>paper</code></td> <td> <p>the size of paper region.  The choices are <code>'A4'</code>, <code>'Letter'</code> and <code>'Legal'</code> (and these can be lowercase).  A further choice is <code>'default'</code>, which is the default.  If this is selected, the papersize is taken from the option <code>'papersize'</code> if that is set to a non-empty value, otherwise <code>'A4'</code>.</p> </td> </tr> <tr valign='top'> <td><code>horizontal</code></td> <td> <p>the orientation of the printed image, a logical.  Defaults to true, that is landscape orientation.</p> </td> </tr> <tr valign='top'> <td><code>width, height</code></td> <td> <p>the width and height of the graphics region in inches.  The default is to use the entire page less a 0.5 inch overall margin in each direction.  (See <code>postscript</code> for further details.)</p> </td> </tr> <tr valign='top'> <td><code>family</code></td> <td> <p>the font family to be used.  This must be one of <code>'AvantGarde'</code>, <code>'Bookman'</code>, <code>'Courier'</code>, <code>'Helvetica'</code> (the default), <code>'Helvetica-Narrow'</code>, <code>'NewCenturySchoolbook'</code>, <code>'Palatino'</code> or <code>'Times'</code>.  Any other value is replaced by <code>'Helvetica'</code>, with a warning.</p> </td> </tr> <tr valign='top'> <td><code>pointsize</code></td> <td> <p>the default point size to be used.</p> </td> </tr> <tr valign='top'> <td><code>bg</code></td> <td> <p>the initial background color to be used.</p> </td> </tr> <tr valign='top'> <td><code>fg</code></td> <td> <p>the initial foreground color to be used.</p> </td> </tr> <tr valign='top'> <td><code>pagecentre</code></td> <td> <p>logical: should the device region be centred on the page?</p> </td> </tr> <tr valign='top'> <td><code>defaultfont</code></td> <td> <p>logical: should the device use xfig's default font?</p> </td> </tr> <tr valign='top'> <td><code>textspecial</code></td> <td> <p>logical: should the device set the textspecial flag for all text elements. This is useful when generating pstex from xfig figures.</p> </td> </tr> </table> "	FALSE
"xy.coords"	"grDevices"	"Extracting Plotting Structures"	"<p><code>xy.coords</code> is used by many functions to obtain x and y coordinates for plotting.  The use of this common mechanism across all relevant <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> functions produces a measure of consistency. </p>"	"<pre>xy.coords(x, y = NULL, xlab = NULL, ylab = NULL, log = NULL,<br />           recycle = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>the x and y coordinates of a set of points. Alternatively, a single argument <code>x</code> can be provided.</p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab</code></td> <td> <p>names for the x and y variables to be extracted.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>character, <code>'x'</code>, <code>'y'</code> or both, as for <code>plot</code>.  Sets negative values to <code>NA</code> and gives a warning.</p> </td> </tr> <tr valign='top'> <td><code>recycle</code></td> <td> <p>logical; if <code>TRUE</code>, recycle (<code>rep</code>) the shorter of <code>x</code> or <code>y</code> if their lengths differ.</p> </td> </tr> </table> "	FALSE
"xyTable"	"grDevices"	"Multiplicities of (x,y) Points, e.g., for a Sunflower Plot"	"<p>Given (x,y) points, determine their multiplicity – checking for equality only up to some (crude kind of) noise.  Note that this is special kind of 2D binning. </p>"	"<pre>xyTable(x, y = NULL, digits) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric vectors of the same length; alternatively other (x, y) argument combinations as allowed by <code>xy.coords(x, y)</code>.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>integer specifying the significant digits to be used for determining equality of coordinates.  These are compared after rounding them via <code>signif(*, digits)</code>.</p> </td> </tr> </table> "	FALSE
"xyz.coords"	"grDevices"	"Extracting Plotting Structures"	"<p>Utility for obtaining consistent x, y and z coordinates and labels for three dimensional (3D) plots. </p>"	"<pre>xyz.coords(x, y = NULL, z = NULL,<br />            xlab = NULL, ylab = NULL, zlab = NULL,<br />            log = NULL, recycle = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y, z</code></td> <td> <p>the x, y and z coordinates of a set of points. Both <code>y</code> and <code>z</code> can be left at <code>NULL</code>.  In this case, an attempt is made to interpret <code>x</code> in a way suitable for plotting. </p> <p>If the argument is a formula <code>zvar ~ xvar + yvar</code>, <code>xvar</code>, <code>yvar</code> and <code>zvar</code> are used as x, y and z variables; if the argument is a list containing components <code>x</code>, <code>y</code> and <code>z</code>, these are assumed to define plotting coordinates; if the argument is a matrix or <code>data.frame</code> with three or more columns, the first is assumed to contain the x values, the 2nd the y ones, and the 3rd the z ones – independently of any column names that <code>x</code> may have. </p> <p>Alternatively two arguments <code>x</code> and <code>y</code> can be provided (leaving <code>z = NULL</code>).  One may be real, the other complex; in any other case, the arguments are coerced to vectors and the values plotted against their indices. </p> </td> </tr> <tr valign='top'> <td><code>xlab, ylab, zlab</code></td> <td> <p>names for the x, y and z variables to be extracted.</p> </td> </tr> <tr valign='top'> <td><code>log</code></td> <td> <p>character, <code>'x'</code>, <code>'y'</code>, <code>'z'</code> or combinations. Sets negative values to <code>NA</code> and gives a warning.</p> </td> </tr> <tr valign='top'> <td><code>recycle</code></td> <td> <p>logical; if <code>TRUE</code>, recycle (<code>rep</code>) the shorter ones of <code>x</code>, <code>y</code> or <code>z</code> if their lengths differ.</p> </td> </tr> </table> "	FALSE
"utils-package"	"utils"	"The R Utils Package"	"<p>R utility functions </p>"	NA	NA	FALSE
"adist"	"utils"	"Approximate String Distances"	"<p>Compute the approximate string distance between character vectors. The distance is a generalized Levenshtein (edit) distance, giving the minimal possibly weighted number of insertions, deletions and substitutions needed to transform one string into another. </p>"	"<pre>adist(x, y = NULL, costs = NULL, counts = FALSE, fixed = TRUE,<br />       partial = !fixed, ignore.case = FALSE, useBytes = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector.  Long vectors are not supported.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>a character vector, or <code>NULL</code> (default) indicating taking <code>x</code> as <code>y</code>.</p> </td> </tr> <tr valign='top'> <td><code>costs</code></td> <td> <p>a numeric vector or list with names partially matching <span class='samp'>insertions</span>, <span class='samp'>deletions</span> and <span class='samp'>substitutions</span> giving the respective costs for computing the Levenshtein distance, or <code>NULL</code> (default) indicating using unit cost for all three possible transformations.</p> </td> </tr> <tr valign='top'> <td><code>counts</code></td> <td> <p>a logical indicating whether to optionally return the transformation counts (numbers of insertions, deletions and substitutions) as the <code>'counts'</code> attribute of the return value.</p> </td> </tr> <tr valign='top'> <td><code>fixed</code></td> <td> <p>a logical.  If <code>TRUE</code> (default), the <code>x</code> elements are used as string literals.  Otherwise, they are taken as regular expressions and <code>partial = TRUE</code> is implied (corresponding to the approximate string distance used by <code>agrep</code> with <code>fixed = FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>partial</code></td> <td> <p>a logical indicating whether the transformed <code>x</code> elements must exactly match the complete <code>y</code> elements, or only substrings of these.  The latter corresponds to the approximate string distance used by <code>agrep</code> (by default).</p> </td> </tr> <tr valign='top'> <td><code>ignore.case</code></td> <td> <p>a logical.  If <code>TRUE</code>, case is ignored for computing the distances.</p> </td> </tr> <tr valign='top'> <td><code>useBytes</code></td> <td> <p>a logical.  If <code>TRUE</code> distance computations are done byte-by-byte rather than character-by-character.</p> </td> </tr> </table> "	FALSE
"alarm"	"utils"	"Alert the User"	"<p>Gives an audible or visual signal to the user. </p>"	"<pre>alarm() </pre>"	NA	FALSE
"apropos"	"utils"	"Find Objects by (Partial) Name"	"<p><code>apropos()</code> returns a character vector giving the names of objects in the search list matching (as a regular expression) <code>what</code>. </p> <p><code>find()</code> returns where objects of a given name can be found. </p>"	"<pre>apropos(what, where = FALSE, ignore.case = TRUE, mode = 'any')<br />find(what, mode = 'any', numeric = FALSE, simple.words = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>what</code></td> <td> <p>character string.  For <code>simple.words = FALSE</code> the name of an object; otherwise a regular expression to match object names against.</p> </td> </tr> <tr valign='top'> <td><code>where, numeric</code></td> <td> <p>a logical indicating whether positions in the search list should also be returned</p> </td> </tr> <tr valign='top'> <td><code>ignore.case</code></td> <td> <p>logical indicating if the search should be case-insensitive, <code>TRUE</code> by default.</p> </td> </tr> <tr valign='top'> <td><code>mode</code></td> <td> <p>character; if not <code>'any'</code>, only objects whose <code>mode</code> equals <code>mode</code> are searched.</p> </td> </tr> <tr valign='top'> <td><code>simple.words</code></td> <td> <p>logical; if <code>TRUE</code>, the <code>what</code> argument is only searched as a whole word.</p> </td> </tr> </table> "	FALSE
"aregexec"	"utils"	"Approximate String Match Positions"	"<p>Determine positions of approximate string matches. </p>"	"<pre>aregexec(pattern, text, max.distance = 0.1, costs = NULL,<br />          ignore.case = FALSE, fixed = FALSE, useBytes = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pattern</code></td> <td> <p>a non-empty character string or a character string containing a regular expression (for <code>fixed = FALSE</code>) to be matched. Coerced by <code>as.character</code> to a string if possible.</p> </td> </tr> <tr valign='top'> <td><code>text</code></td> <td> <p>character vector where matches are sought. Coerced by <code>as.character</code> to a character vector if possible.</p> </td> </tr> <tr valign='top'> <td><code>max.distance</code></td> <td> <p>maximum distance allowed for a match. See <code>agrep</code>.</p> </td> </tr> <tr valign='top'> <td><code>costs</code></td> <td> <p>cost of transformations. See <code>agrep</code>.</p> </td> </tr> <tr valign='top'> <td><code>ignore.case</code></td> <td> <p>a logical.  If <code>TRUE</code>, case is ignored for computing the distances.</p> </td> </tr> <tr valign='top'> <td><code>fixed</code></td> <td> <p>If <code>TRUE</code>, the pattern is matched literally (as is). Otherwise (default), it is matched as a regular expression.</p> </td> </tr> <tr valign='top'> <td><code>useBytes</code></td> <td> <p>a logical.  If <code>TRUE</code> comparisons are byte-by-byte rather than character-by-character.</p> </td> </tr> </table> "	FALSE
"getAnywhere"	"utils"	"Retrieve an R Object, Including from a Namespace"	"<p>These functions locate all objects with name matching their argument, whether visible on the search path, registered as an S3 method or in a namespace but not exported.  <code>getAnywhere()</code> returns the objects and <code>argsAnywhere()</code> returns the arguments of any objects that are functions. </p>"	"<pre>getAnywhere(x) argsAnywhere(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a character string or name.</p> </td> </tr></table> "	FALSE
"person"	"utils"	"Persons"	"<p>A class and utility methods for holding information about persons like name and email address. </p>"	"<pre>person(given = NULL, family = NULL, middle = NULL,<br />        email = NULL, role = NULL, comment = NULL,<br />        first = NULL, last = NULL) ## Default S3 method: as.person(x) ## S3 method for class 'person' format(x,<br />        include = c('given', 'family', 'email', 'role', 'comment'),<br />        braces = list(given = '', family = '', email = c('&lt;', '&gt;'),<br />                      role = c('[', ']'), comment = c('(', ')')),<br />        collapse = list(given = ' ', family = ' ', email = ', ',<br />                        role = ', ', comment = ', '),<br />        ...,<br />        style = c('text', 'R')<br />        ) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>given</code></td> <td> <p>a character vector with the <em>given</em> names, or a list thereof.</p> </td> </tr> <tr valign='top'> <td><code>family</code></td> <td> <p>a character string with the <em>family</em> name, or a list thereof.</p> </td> </tr> <tr valign='top'> <td><code>middle</code></td> <td> <p>a character string with the collapsed middle name(s). Deprecated, see <b>Details</b>.</p> </td> </tr> <tr valign='top'> <td><code>email</code></td> <td> <p>a character string giving the email address, or a list thereof.</p> </td> </tr> <tr valign='top'> <td><code>role</code></td> <td> <p>a character string specifying the role of the person (see <b>Details</b>), or a list thereof.</p> </td> </tr> <tr valign='top'> <td><code>comment</code></td> <td> <p>a character string providing a comment, or a list thereof.</p> </td> </tr> <tr valign='top'> <td><code>first</code></td> <td> <p>a character string giving the first name. Deprecated, see <b>Details</b>.</p> </td> </tr> <tr valign='top'> <td><code>last</code></td> <td> <p>a character string giving the last name. Deprecated, see <b>Details</b>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a character string for the <code>as.person</code> default method; an object of class <code>'person'</code> otherwise.</p> </td> </tr> <tr valign='top'> <td><code>include</code></td> <td> <p>a character vector giving the fields to be included when formatting.</p> </td> </tr> <tr valign='top'> <td><code>braces</code></td> <td> <p>a list of characters (see <b>Details</b>).</p> </td> </tr> <tr valign='top'> <td><code>collapse</code></td> <td> <p>a list of characters (see <b>Details</b>).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>currently not used.</p> </td> </tr> <tr valign='top'> <td><code>style</code></td> <td> <p>a character string specifying the print style, with  <code>'R'</code> yielding formatting as R code.</p> </td> </tr> </table> "	FALSE
"relist"	"utils"	"Allow Re-Listing an unlist()ed Object"	"<p><code>relist()</code> is an S3 generic function with a few methods in order to allow easy inversion of <code>unlist(obj)</code> when that is used with an object <code>obj</code> of (S3) class <code>'relistable'</code>. </p>"	"<pre>relist(flesh, skeleton) ## Default S3 method: relist(flesh, skeleton = attr(flesh, 'skeleton')) ## S3 method for class 'factor' relist(flesh, skeleton = attr(flesh, 'skeleton')) ## S3 method for class 'list' relist(flesh, skeleton = attr(flesh, 'skeleton')) ## S3 method for class 'matrix' relist(flesh, skeleton = attr(flesh, 'skeleton'))<br />as.relistable(x) is.relistable(x)<br />## S3 method for class 'relistable' unlist(x, recursive = TRUE, use.names = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>flesh</code></td> <td> <p>a vector to be relisted</p> </td> </tr> <tr valign='top'> <td><code>skeleton</code></td> <td> <p>a list, the structure of which determines the structure of the result</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically a list (or vector).</p> </td> </tr> <tr valign='top'> <td><code>recursive</code></td> <td> <p>logical.  Should unlisting be applied to list components of <code>x</code>?</p> </td> </tr> <tr valign='top'> <td><code>use.names</code></td> <td> <p>logical.  Should names be preserved?</p> </td> </tr> </table> "	FALSE
"roman"	"utils"	"Roman Numerals"	"<p>Simple manipulation of (a small set of) integer numbers as roman numerals. </p>"	"<pre>as.roman(x) .romans </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a numeric or character vector of arabic or roman numerals.</p> </td> </tr></table> "	FALSE
"aspell"	"utils"	"Spell Check Interface"	"<p>Spell check given files via Aspell, Hunspell or Ispell. </p>"	"<pre>aspell(files, filter, control = list(), encoding = 'unknown',<br />        program = NULL, dictionaries = character()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>files</code></td> <td> <p>a character vector with the names of files to be checked.</p> </td> </tr> <tr valign='top'> <td><code>filter</code></td> <td> <p>an optional filter for processing the files before spell checking, given as either a function (with formals <code>ifile</code> and <code>encoding</code>), or a character string specifying a built-in filter, or a list with the name of a built-in filter and additional arguments to be passed to it.  See <b>Details</b> for available filters.  If missing or <code>NULL</code>, no filtering is performed.</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>a list or character vector of control options for the spell checker.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>the encoding of the files.  Recycled as needed.</p> </td> </tr> <tr valign='top'> <td><code>program</code></td> <td> <p>a character string giving the name (if on the system path) or full path of the spell check program to be used, or <code>NULL</code> (default).  By default, the system path is searched for <code>aspell</code>, <code>hunspell</code> and <code>ispell</code> (in that order), and the first one found is used.</p> </td> </tr> <tr valign='top'> <td><code>dictionaries</code></td> <td> <p>a character vector of names or file paths of additional R level dictionaries to use.  Elements with no path separator specify R system dictionaries (in subdirectory ‘<span class='file'>share/dictionaries</span>’ of the R home directory).  The file extension (currently, only ‘<span class='file'>.rds</span>’) can be omitted.</p> </td> </tr> </table> "	FALSE
"aspell-utils"	"utils"	"Spell Check Utilities"	"<p>Utilities for spell checking packages via Aspell, Hunspell or Ispell. </p>"	"<pre>aspell_package_Rd_files(dir, drop = c('\\author', '\\references'),<br />                         control = list(), program = NULL,<br />                         dictionaries = character()) aspell_package_vignettes(dir,<br />                          control = list(), program = NULL,<br />                          dictionaries = character()) aspell_package_R_files(dir, ignore = character(), control = list(),<br />                        program = NULL, dictionaries = character()) aspell_package_C_files(dir, ignore = character(), control = list(),<br />                        program = NULL, dictionaries = character())<br />aspell_write_personal_dictionary_file(x, out, language = 'en',<br />                                       program = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>dir</code></td> <td> <p>a character string specifying the path to a package's root directory.</p> </td> </tr> <tr valign='top'> <td><code>drop</code></td> <td> <p>a character vector naming additional Rd sections to drop when selecting text via <code>RdTextFilter</code>.</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>a list or character vector of control options for the spell checker.</p> </td> </tr> <tr valign='top'> <td><code>program</code></td> <td> <p>a character string giving the name (if on the system path) or full path of the spell check program to be used, or <code>NULL</code> (default).  By default, the system path is searched for <code>aspell</code>, <code>hunspell</code> and <code>ispell</code> (in that order), and the first one found is used.</p> </td> </tr> <tr valign='top'> <td><code>dictionaries</code></td> <td> <p>a character vector of names or file paths of additional R level dictionaries to use.  See <code>aspell</code>.</p> </td> </tr> <tr valign='top'> <td><code>ignore</code></td> <td> <p>a character vector with regular expressions to be replaced by blanks when filtering the message strings.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector, or the result of a call to <code>aspell()</code>.</p> </td> </tr> <tr valign='top'> <td><code>out</code></td> <td> <p>a character string naming the personal dictionary file to write to.</p> </td> </tr> <tr valign='top'> <td><code>language</code></td> <td> <p>a character string indicating a language as used by Aspell.</p> </td> </tr> </table> "	FALSE
"getFromNamespace"	"utils"	"Utility functions for Developing Namespaces"	"<p>Utility functions to access and replace the non-exported functions in a namespace, for use in developing packages with namespaces. </p> <p>They should not be used in production code (except perhaps <code>assignInMyNamespace</code>, but see the ‘Note’). </p>"	"<pre>getFromNamespace(x, ns, pos = -1, envir = as.environment(pos))<br />assignInNamespace(x, value, ns, pos = -1,<br />                   envir = as.environment(pos))<br />assignInMyNamespace(x, value)<br />fixInNamespace(x, ns, pos = -1, envir = as.environment(pos), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object name (given as a character string).</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>ns</code></td> <td> <p>a namespace, or character string giving the namespace.</p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td> <p>where to look for the object: see <code>get</code>.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>an alternative way to specify an environment to look in.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to pass to the editor: see <code>edit</code>.</p> </td> </tr> </table> "	FALSE
"available.packages"	"utils"	"List Available Packages at CRAN-like Repositories"	"<p><code>available.packages</code> returns a matrix of details corresponding to packages currently available at one or more repositories. The current list of packages is downloaded over the internet (or copied from a local mirror). </p>"	"<pre>available.packages(contriburl = contrib.url(repos, type), method,<br />                    fields = NULL, type = getOption('pkgType'),<br />                    filters = NULL, repos = getOption('repos')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>contriburl</code></td> <td><br /><p>URL(s) of the ‘<span class='file'>contrib</span>’ sections of the repositories. Specify this argument only if your repository mirror is incomplete, e.g., because you burned only the ‘<span class='file'>contrib</span>’ section on a CD. </p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td><br /><p>download method, see <code>download.file</code>. </p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td><br /><p>character string, indicate which type of packages: see <code>install.packages</code>. </p> <p>If <code>type = 'both'</code> this will use the source repository. </p> </td> </tr> <tr valign='top'> <td><code>fields</code></td> <td><br /><p>a character vector giving the fields to extract from the ‘<span class='file'>PACKAGES</span>’ file(s) in addition to the default ones, or <code>NULL</code> (default).  Unavailable fields result in <code>NA</code> values. </p> </td> </tr> <tr valign='top'> <td><code>filters</code></td> <td><br /><p>a character vector or list or <code>NULL</code> (default). See ‘Details’. </p> </td> </tr> <tr valign='top'> <td><code>repos</code></td> <td><br /><p>character vector, the base URL(s) of the repositories to use. </p> </td> </tr> </table> "	FALSE
"BATCH"	"utils"	"Batch Execution of R"	"<p>Run <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> non-interactively with input from <code>infile</code> and send output (stdout/stderr) to another file.</p>"	"<pre>R CMD BATCH [options] infile [outfile] </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>infile</code></td> <td> <p>the name of a file with <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> code to be executed.</p> </td> </tr> <tr valign='top'> <td><code>options</code></td> <td> <p>a list of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> command line options, e.g., for setting the amount of memory available and controlling the load/save process. If <code>infile</code> starts with a <span class='samp'>-</span>, use <span class='option'>--</span> as the final option. The default options are <span class='option'>--restore --save --no-readline</span>. (Without <span class='option'>--no-readline</span> on Windows.) </p> </td> </tr> <tr valign='top'> <td><code>outfile</code></td> <td> <p>the name of a file to which to write output.  If not given, the name used is that of <code>infile</code>, with a possible ‘<span class='file'>.R</span>’ extension stripped, and ‘<span class='file'>.Rout</span>’ appended.</p> </td> </tr> </table> "	FALSE
"bibentry"	"utils"	"Bibliography Entries"	"<p>Functionality for representing and manipulating bibliographic information in enhanced BibTeX style. </p>"	"<pre>bibentry(bibtype, textVersion = NULL, header = NULL, footer = NULL,<br />          key = NULL, ..., other = list(),<br />          mheader = NULL, mfooter = NULL) ## S3 method for class 'bibentry' print(x, style = 'text', .bibstyle, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>bibtype</code></td> <td> <p>a character string with a BibTeX entry type. See <b>Entry Types</b> for details. </p> </td> </tr> <tr valign='top'> <td><code>textVersion</code></td> <td> <p>a character string with a text representation of the reference to optionally be employed for printing.</p> </td> </tr> <tr valign='top'> <td><code>header</code></td> <td> <p>a character string with optional header text.</p> </td> </tr> <tr valign='top'> <td><code>footer</code></td> <td> <p>a character string with optional footer text.</p> </td> </tr> <tr valign='top'> <td><code>key</code></td> <td> <p>a character string giving the citation key for the entry.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>for <code>bibentry</code>: arguments of the form <code><var>tag</var>=<var>value</var></code> giving the fields of the entry, with <var>tag</var> and <var>value</var> the name and value of the field, respectively.  Arguments with empty values are dropped. See <b>Entry Fields</b> for details. </p> <p>For the <code>print</code> method, extra parameters to pass to the renderer.</p> </td> </tr> <tr valign='top'> <td><code>other</code></td> <td> <p>a list of arguments as in <code>...</code> (useful in particular for fields named the same as formals of <code>bibentry</code>).</p> </td> </tr> <tr valign='top'> <td><code>mheader</code></td> <td> <p>a character string with optional “outer” header text.</p> </td> </tr> <tr valign='top'> <td><code>mfooter</code></td> <td> <p>a character string with optional “outer” footer text.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object inheriting from class <code>'bibentry'</code>.</p> </td> </tr> <tr valign='top'> <td><code>style</code></td> <td> <p>an optional character string specifying the print style. If present, must be a unique abbreviation (with case ignored) of the available styles, see <b>Details</b>.</p> </td> </tr> <tr valign='top'> <td><code>.bibstyle</code></td> <td> <p>a character string naming a bibliography style.</p> </td> </tr> </table> "	FALSE
"browseEnv"	"utils"	"Browse Objects in Environment"	"<p>The <code>browseEnv</code> function opens a browser with list of objects currently in <code>sys.frame()</code> environment. </p>"	"<pre>browseEnv(envir = .GlobalEnv, pattern,<br />           excludepatt = '^last\\.warning',<br />           html = .Platform$GUI != 'AQUA',<br />           expanded = TRUE, properties = NULL,<br />           main = NULL, debugMe = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>envir</code></td> <td> <p>an <code>environment</code> the objects of which are to be browsed.</p> </td> </tr> <tr valign='top'> <td><code>pattern</code></td> <td> <p>a regular expression for object subselection is passed to the internal <code>ls()</code> call.</p> </td> </tr> <tr valign='top'> <td><code>excludepatt</code></td> <td> <p>a regular expression for <em>dropping</em> objects with matching names.</p> </td> </tr> <tr valign='top'> <td><code>html</code></td> <td> <p>is used to display the workspace on a HTML page in your favorite browser.  The default except when running from <code>R.app</code> on macOS.</p> </td> </tr> <tr valign='top'> <td><code>expanded</code></td> <td> <p>whether to show one level of recursion.  It can be useful to switch it to <code>FALSE</code> if your workspace is large.  This option is ignored if <code>html</code> is set to <code>FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>properties</code></td> <td> <p>a named list of global properties (of the objects chosen) to be showed in the browser;  when <code>NULL</code> (as per default), user, date, and machine information is used.</p> </td> </tr> <tr valign='top'> <td><code>main</code></td> <td> <p>a title string to be used in the browser; when <code>NULL</code> (as per default) a title is constructed.</p> </td> </tr> <tr valign='top'> <td><code>debugMe</code></td> <td> <p>logical switch; if true, some diagnostic output is produced.</p> </td> </tr> </table> "	FALSE
"browseURL"	"utils"	"Load URL into an HTML Browser"	"<p>Load a given URL into an HTML browser. </p>"	"<pre>browseURL(url, browser = getOption('browser'),<br />           encodeIfNeeded = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>url</code></td> <td> <p>a non-empty character string giving the URL to be loaded.</p> </td> </tr> <tr valign='top'> <td><code>browser</code></td> <td> <p>a non-empty character string giving the name of the program to be used as the HTML browser.  It should be in the PATH, or a full path specified.  Alternatively, an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> function to be called to invoke the browser. </p> <p>Under Windows <code>NULL</code> is also allowed (and is the default), and implies that the file association mechanism will be used. </p> </td> </tr> <tr valign='top'> <td><code>encodeIfNeeded</code></td> <td> <p>Should the URL be encoded by <code>URLencode</code> before passing to the browser?  This is not needed (and might be harmful) if the <code>browser</code> program/function itself does encoding, and can be harmful for <span class='samp'>file://</span> URLs on some systems and for <span class='samp'>http://</span> URLs passed to some CGI applications. Fortunately, most URLs do not need encoding.</p> </td> </tr> </table> "	FALSE
"browseVignettes"	"utils"	"List Vignettes in an HTML Browser"	"<p>List available vignettes in an HTML browser with links to PDF, LaTeX/noweb source, and (tangled) R code (if available). </p>"	"<pre>browseVignettes(package = NULL, lib.loc = NULL, all = TRUE)<br />## S3 method for class 'browseVignettes' print(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>package</code></td> <td> <p>a character vector with the names of packages to search through, or <code>NULL</code> in which 'all' packages (as defined by argument <code>all</code>) are searched.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector of directory names of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> libraries, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.</p> </td> </tr> <tr valign='top'> <td><code>all</code></td> <td> <p>logical; if <code>TRUE</code> search all available packages in the library trees specified by <code>lib.loc</code>, and if <code>FALSE</code>, search only attached packages.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>Object of class <code>browseVignettes</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments, ignored by the <code>print</code> method. </p> </td> </tr> </table> "	FALSE
"bug.report"	"utils"	"Send a Bug Report"	"<p>Invokes an editor or email program to write a bug report or opens a web page for bug submission.  Some standard information on the current version and configuration of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> are included automatically. </p>"	"<pre>bug.report(subject = '',  address,<br />            file = 'R.bug.report', package = NULL, lib.loc = NULL,<br />            ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>subject</code></td> <td> <p>Subject of the email.</p> </td> </tr> <tr valign='top'> <td><code>address</code></td> <td> <p>Recipient's email address, where applicable: for package bug reports sent by email this defaults to the address of the package maintainer (the first if more than one is listed).</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>filename to use (if needed) for setting up the email.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>Optional character vector naming a single package which is the subject of the bug report.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>A character vector describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees in which to search for the package, or <code>NULL</code>. The default value of <code>NULL</code> corresponds to all libraries currently known.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional named arguments such as <code>method</code> and <code>ccaddress</code> to pass to <code>create.post</code>.</p> </td> </tr> </table> "	FALSE
"PkgUtils"	"utils"	"Utilities for Building and Checking Add-on Packages"	"<p>Utilities for checking whether the sources of an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> add-on package work correctly, and for building a source package from them. </p>"	"<pre>R CMD check [options] pkgdirs R CMD build [options] pkgdirs </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pkgdirs</code></td> <td> <p>a list of names of directories with sources of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> add-on packages.  For <code>check</code> these can also be the filenames of compressed <code>tar</code> archives with extension ‘<span class='file'>.tar.gz</span>’, ‘<span class='file'>.tgz</span>’, ‘<span class='file'>.tar.bz2</span>’ or ‘<span class='file'>.tar.xz</span>’.</p> </td> </tr> <tr valign='top'> <td><code>options</code></td> <td> <p>further options to control the processing, or for obtaining information about usage and version of the utility.</p> </td> </tr> </table> "	FALSE
"capture.output"	"utils"	"Send Output to a Character String or File"	"<p>Evaluates its arguments with the output being returned as a character string or sent to a file.  Related to <code>sink</code> in the same way that <code>with</code> is related to <code>attach</code>. </p>"	"<pre>capture.output(..., file = NULL, append = FALSE,<br />                type = c('output', 'message'), split = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>Expressions to be evaluated.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>A file name or a connection, or <code>NULL</code> to return the output as a character vector.  If the connection is not open, it will be opened initially and closed on exit.</p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td> <p>logical.  If <code>file</code> a file name or unopened connection, append or overwrite?</p> </td> </tr> <tr valign='top'> <td><code>type, split</code></td> <td> <p>are passed to <code>sink()</code>, see there.</p> </td> </tr> </table> "	FALSE
"changedFiles"	"utils"	"Detect which files have changed"	"<p><code>fileSnapshot</code> takes a snapshot of a selection of files, recording summary information about each.  <code>changedFiles</code> compares two snapshots, or compares one snapshot to the current state of the file system.  The snapshots need not be the same directory; this could be used to compare two directories. </p>"	"<pre>fileSnapshot(path = '.', file.info = TRUE, timestamp = NULL,  <br />	<br />    md5sum = FALSE, digest = NULL, full.names = length(path) &gt; 1, <br />	<br />    ...) <br />changedFiles(before, after, path = before$path, timestamp = before$timestamp,  <br />	<br />    check.file.info = c('size', 'isdir', 'mode', 'mtime'),  <br />	<br />    md5sum = before$md5sum, digest = before$digest,  <br />	<br />    full.names = before$full.names, ...) <br />	<br />     ## S3 method for class 'fileSnapshot' print(x, verbose = FALSE, ...)<br />## S3 method for class 'changedFiles' print(x, verbose = FALSE, ...)  </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>path</code></td> <td> <p>character vector; the path(s) to record. </p> </td> </tr> <tr valign='top'> <td><code>file.info</code></td> <td> <p>logical; whether to record <code>file.info</code> values for each file. </p> </td> </tr> <tr valign='top'> <td><code>timestamp</code></td> <td> <p>character string or <code>NULL</code>; the name of a file to write at the time the snapshot is taken.  This gives a quick test for modification, but may be unreliable; see the Details. </p> </td> </tr> <tr valign='top'> <td><code>md5sum</code></td> <td> <p>logical; whether MD5 summaries of each file should be taken as part of the snapshot. </p> </td> </tr> <tr valign='top'> <td><code>digest</code></td> <td> <p>a function or <code>NULL</code>; a function with header <code>function(filename)</code> which will take a vector of filenames and produce a vector of values of the same length, or a matrix with that number of rows. </p> </td> </tr> <tr valign='top'> <td><code>full.names</code></td> <td> <p>logical; whether full names (as in <code>list.files</code>) should be recorded. Must be <code>TRUE</code> if <code>length(path) &gt; 1</code>. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p> additional parameters to pass to <code>list.files</code> to control the set of files in the snapshots. </p> </td> </tr> <tr valign='top'> <td><code>before, after</code></td> <td> <p>objects produced by <code>fileSnapshot</code>; two snapshots to compare.  If <code>after</code> is missing, a new snapshot of the current file system will be produced for comparison, using arguments recorded in <code>before</code> as defaults. </p> </td> </tr> <tr valign='top'> <td><code>check.file.info</code></td> <td> <p>character vector; which columns from <code>file.info</code> should be compared. </p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>the object to print. </p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>logical; whether to list all data when printing. </p> </td> </tr> </table> "	FALSE
"mirrorAdmin"	"utils"	"Managing Repository Mirrors"	"<p>Functions helping to maintain CRAN, some of them may also be useful for administrators of other repository networks. </p>"	"<pre>mirror2html(mirrors = NULL, file = 'mirrors.html',<br />   head = 'mirrors-head.html', foot = 'mirrors-foot.html') checkCRAN(method) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>mirrors</code></td> <td> <p>A data frame, by default the CRAN list of mirrors is used.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>A connection or a character string.</p> </td> </tr> <tr valign='top'> <td><code>head</code></td> <td> <p>Name of optional header file.</p> </td> </tr> <tr valign='top'> <td><code>foot</code></td> <td> <p>Name of optional footer file.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>Download method, see <code>download.file</code>.</p> </td> </tr> </table> "	FALSE
"chooseBioCmirror"	"utils"	"Select a Bioconductor Mirror"	"<p>Interact with the user to choose a Bioconductor mirror. </p>"	"<pre>chooseBioCmirror(graphics = getOption('menu.graphics'), ind = NULL,<br />                  useHTTPS = getOption('useHTTPS', TRUE),<br />                  local.only = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>graphics</code></td> <td> <p>Logical.  If true, use a graphical list: on Windows or the macOS GUI use a list box, and on a Unix-alike use a Tk widget if package <span class='pkg'>tcltk</span> and an X server are available.  Otherwise use a text <code>menu</code>.</p> </td> </tr> <tr valign='top'> <td><code>ind</code></td> <td> <p>Optional numeric value giving which entry to select.</p> </td> </tr> <tr valign='top'> <td><code>useHTTPS</code></td> <td> <p>Whether to prefer HTTPS mirrors (see <code>chooseCRANmirror</code>).</p> </td> </tr> <tr valign='top'> <td><code>local.only</code></td> <td> <p>Logical, try to get most recent list from the Bioconductor master or use file on local disk only.</p> </td> </tr> </table> "	FALSE
"chooseCRANmirror"	"utils"	"Select a CRAN Mirror"	"<p>Interact with the user to choose a CRAN mirror. </p>"	"<pre>chooseCRANmirror(graphics = getOption('menu.graphics'), ind = NULL,<br />                  useHTTPS = getOption('useHTTPS', TRUE),<br />                  local.only = FALSE)<br />getCRANmirrors(all = FALSE, local.only = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>graphics</code></td> <td> <p>Logical.  If true, use a graphical list: on Windows or the macOS GUI use a list box, and on a Unix-alike  use a Tk widget if package <span class='pkg'>tcltk</span> and an X server are available.  Otherwise use a text <code>menu</code>.</p> </td> </tr> <tr valign='top'> <td><code>ind</code></td> <td> <p>Optional numeric value giving which entry to select.</p> </td> </tr> <tr valign='top'> <td><code>useHTTPS</code></td> <td> <p>Whether to prefer HTTPS mirrors.</p> </td> </tr> <tr valign='top'> <td><code>all</code></td> <td> <p>Logical, get all known mirrors or only the ones flagged as OK.</p> </td> </tr> <tr valign='top'> <td><code>local.only</code></td> <td> <p>Logical, try to get most recent list from the CRAN master or use file on local disk only.</p> </td> </tr> </table> "	FALSE
"citation"	"utils"	"Citing R and R Packages in Publications"	"<p>How to cite <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> and <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> packages in publications. </p>"	"<pre>citation(package = 'base', lib.loc = NULL, auto = NULL) readCitationFile(file, meta = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>package</code></td> <td> <p>a character string with the name of a single package. An error occurs if more than one package name is given.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector with path names of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> libraries, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.  If the default is used, the loaded packages are searched before the libraries.</p> </td> </tr> <tr valign='top'> <td><code>auto</code></td> <td> <p>a logical indicating whether the default citation auto-generated from the package ‘<span class='file'>DESCRIPTION</span>’ metadata should be used or not, or <code>NULL</code> (default), indicating that a ‘<span class='file'>CITATION</span>’ file is used if it exists, or an object of class <code>'packageDescription'</code> with package metadata (see below).</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>a file name.</p> </td> </tr> <tr valign='top'> <td><code>meta</code></td> <td> <p>a list of package metadata as obtained by <code>packageDescription</code>, or <code>NULL</code> (the default).</p> </td> </tr> </table> "	FALSE
"cite"	"utils"	"Cite a bibliography entry."	"<p>Cite a <code>bibentry</code> object in text.  The <code>cite()</code> function uses the <code>cite()</code> function from the default <code>bibstyle</code> if present, or <code>citeNatbib()</code> if not. <code>citeNatbib()</code> uses a style similar to that used by the LaTeX package <span class='pkg'>natbib</span>. </p>"	"<pre>cite(keys, bib, ...) citeNatbib(keys, bib, textual = FALSE, before = NULL, after = NULL,<br />            mode = c('authoryear', 'numbers', 'super'),<br />            abbreviate = TRUE, longnamesfirst = TRUE,<br />            bibpunct = c('(', ')', ';', 'a', '', ','), previous) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>keys</code></td> <td><br /><p>A character vector of keys of entries to cite.  May contain multiple keys in a single entry, separated by commas. </p> </td> </tr> <tr valign='top'> <td><code>bib</code></td> <td><br /><p>A <code>'bibentry'</code> object containing the list of documents in which to find the keys. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td><br /><p>Additional arguments to pass to the <code>cite()</code> function for the default style. </p> </td> </tr> <tr valign='top'> <td><code>textual</code></td> <td><br /><p>Produce a “textual” style of citation, i.e. what <code>\citet</code> would produce in LaTeX. </p> </td> </tr> <tr valign='top'> <td><code>before</code></td> <td><br /><p>Optional text to display before the citation. </p> </td> </tr> <tr valign='top'> <td><code>after</code></td> <td><br /><p>Optional text to display after the citation. </p> </td> </tr> <tr valign='top'> <td><code>mode</code></td> <td><br /><p>The “mode” of citation. </p> </td> </tr> <tr valign='top'> <td><code>abbreviate</code></td> <td><br /><p>Whether to abbreviate long author lists. </p> </td> </tr> <tr valign='top'> <td><code>longnamesfirst</code></td> <td><br /><p>If <code>abbreviate == TRUE</code>, whether to leave the first citation long. </p> </td> </tr> <tr valign='top'> <td><code>bibpunct</code></td> <td><br /><p>A vector of punctuation to use in the citation, as used in <span class='pkg'>natbib</span>.  See the Details section. </p> </td> </tr> <tr valign='top'> <td><code>previous</code></td> <td><br /><p>A list of keys that have been previously cited, to be used when <code>abbreviate == TRUE</code> and <code>longnamesfirst == TRUE</code> </p> </td> </tr> </table> "	FALSE
"citEntry"	"utils"	"Bibliography Entries (Older Interface)"	"<p>Functionality for specifying bibliographic information in enhanced BibTeX style. </p>"	"<pre>citEntry(entry, textVersion, header = NULL, footer = NULL, ...) citHeader(...) citFooter(...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>entry</code></td> <td> <p>a character string with a BibTeX entry type. See section <b>Entry Types</b> in <code>bibentry</code> for details. </p> </td> </tr> <tr valign='top'> <td><code>textVersion</code></td> <td> <p>a character string with a text representation of the reference.</p> </td> </tr> <tr valign='top'> <td><code>header</code></td> <td> <p>a character string with optional header text.</p> </td> </tr> <tr valign='top'> <td><code>footer</code></td> <td> <p>a character string with optional footer text.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>for <code>citEntry</code>, arguments of the form <code><var>tag</var>=<var>value</var></code> giving the fields of the entry, with <var>tag</var> and <var>value</var> the name and value of the field, respectively. See section <b>Entry Fields</b> in <code>bibentry</code> for details. </p> <p>For <code>citHeader</code> and <code>citFooter</code>, character strings. </p> </td> </tr> </table> "	FALSE
"close.socket"	"utils"	"Close a Socket"	"<p>Closes the socket and frees the space in the file descriptor table.  The port may not be freed immediately. </p>"	"<pre>close.socket(socket, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>socket</code></td> <td> <p>a <code>socket</code> object</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"txtProgressBar"	"utils"	"Text Progress Bar"	"<p>Text progress bar in the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> console. </p>"	"<pre>txtProgressBar(min = 0, max = 1, initial = 0, char = '=',<br />                width = NA, title, label, style = 1, file = '')<br />getTxtProgressBar(pb) setTxtProgressBar(pb, value, title = NULL, label = NULL) ## S3 method for class 'txtProgressBar' close(con, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>min, max</code></td> <td> <p>(finite) numeric values for the extremes of the progress bar. Must have <code>min &lt; max</code>.</p> </td> </tr> <tr valign='top'> <td><code>initial, value</code></td> <td> <p>initial or new value for the progress bar.  See ‘Details’ for what happens with invalid values.</p> </td> </tr> <tr valign='top'> <td><code>char</code></td> <td> <p>the character (or character string) to form the progress bar.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>the width of the progress bar, as a multiple of the width of <code>char</code>.  If <code>NA</code>, the default, the number of characters is that which fits into <code>getOption('width')</code>.</p> </td> </tr> <tr valign='top'> <td><code>style</code></td> <td> <p>the ‘style’ of the bar – see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>an open connection object or <code>''</code> which indicates the console: <code>stderr()</code> might be useful here.</p> </td> </tr> <tr valign='top'> <td><code>pb, con</code></td> <td> <p>an object of class <code>'txtProgressBar'</code>.</p> </td> </tr> <tr valign='top'> <td><code>title, label</code></td> <td> <p>ignored, for compatibility with other progress bars.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>for consistency with the generic.</p> </td> </tr> </table> "	FALSE
"combn"	"utils"	"Generate All Combinations of n Elements, Taken m at a Time"	"<p>Generate all combinations of the elements of <code>x</code> taken <code>m</code> at a time.  If <code>x</code> is a positive integer, returns all combinations of the elements of <code>seq(x)</code> taken <code>m</code> at a time.  If argument <code>FUN</code> is not <code>NULL</code>, applies a function given by the argument to each point.  If simplify is FALSE,  returns a list; otherwise returns an <code>array</code>, typically a <code>matrix</code>.  <code>...</code> are passed unchanged to the <code>FUN</code> function, if specified. </p>"	"<pre>combn(x, m, FUN = NULL, simplify = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>vector source for combinations, or integer <code>n</code> for <code>x &lt;- seq_len(n)</code>.</p> </td> </tr> <tr valign='top'> <td><code>m</code></td> <td> <p>number of elements to choose.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>function to be applied to each combination; default <code>NULL</code> means the identity, i.e., to return the combination (vector of length <code>m</code>).</p> </td> </tr> <tr valign='top'> <td><code>simplify</code></td> <td> <p>logical indicating if the result should be simplified to an <code>array</code> (typically a <code>matrix</code>); if FALSE, the function returns a <code>list</code>.  Note that when <code>simplify = TRUE</code> as by default, the dimension of the result is simply determined from <code>FUN(<var>1st combination</var>)</code> (for efficiency reasons).  This will badly fail if <code>FUN(u)</code> is not of constant length.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optionally, further arguments to <code>FUN</code>.</p> </td> </tr> </table> "	FALSE
"compareVersion"	"utils"	"Compare Two Package Version Numbers"	"<p>Compare two package version numbers to see which is later. </p>"	"<pre>compareVersion(a, b) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>a, b</code></td> <td> <p>Character strings representing package version numbers.</p> </td> </tr></table> "	FALSE
"COMPILE"	"utils"	"Compile Files for Use with R"	"<p>Compile given source files so that they can subsequently be collected into a shared object using <code>R CMD SHLIB</code> or an executable program using <code>R CMD LINK</code>. </p>"	"<pre>R CMD COMPILE [options] srcfiles </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>srcfiles</code></td> <td> <p>A list of the names of source files to be compiled. Currently, C, C++, Objective C, Objective C++ and Fortran are supported; the corresponding files should have the extensions ‘<span class='file'>.c</span>’, ‘<span class='file'>.cc</span>’ (or ‘<span class='file'>.cpp</span>’), ‘<span class='file'>.m</span>’, ‘<span class='file'>.mm</span>’ (or ‘<span class='file'>.M</span>’), ‘<span class='file'>.f</span>’ and ‘<span class='file'>.f90</span>’ or ‘<span class='file'>.f95</span>’, respectively.</p> </td> </tr> <tr valign='top'> <td><code>options</code></td> <td> <p>A list of compile-relevant settings, or for obtaining information about usage and version of the utility.</p> </td> </tr> </table> "	FALSE
"rcompgen"	"utils"	"A Completion Generator for R"	"<p>This page documents a mechanism to generate relevant completions from a partially completed command line.  It is not intended to be useful by itself, but rather in conjunction with other mechanisms that use it as a backend.  The functions listed in the usage section provide a simple control and query mechanism.  The actual interface consists of a few unexported functions described further down. </p>"	"<pre><br />rc.settings(ops, ns, args, func, ipck, S3, data, help,<br />             argdb, fuzzy, quotes, files)<br />rc.status() rc.getOption(name) rc.options(...)<br />.DollarNames(x, pattern)<br />## Default S3 method: .DollarNames(x, pattern = '') ## S3 method for class 'list' .DollarNames(x, pattern = '') ## S3 method for class 'environment' .DollarNames(x, pattern = '')<br /></pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>ops, ns, args, func, ipck, S3, data, help, argdb, fuzzy, quotes, files</code></td> <td><br /><p>logical, turning some optional completion features on and off. </p><br /><dl> <dt> <code>ops</code>:</dt> <dd> <p> Activates completion after the <code>$</code> and <code>@</code> operators. </p> </dd> <dt> <code>ns</code>:</dt> <dd> <p> Controls namespace related completions. </p> </dd> <dt> <code>args</code>:</dt> <dd> <p> Enables completion of function arguments. </p> </dd> <dt> <code>func</code>:</dt> <dd> <p> Enables detection of functions.  If enabled, a customizable extension (<code>'('</code> by default) is appended to function names.  The process of determining whether a potential completion is a function requires evaluation, including for lazy loaded symbols.  This is undesirable for large objects, because of potentially wasteful use of memory in addition to the time overhead associated with loading.  For this reason, this feature is disabled by default. </p> </dd> <dt> <code>S3</code>:</dt> <dd> <p> When <code>args = TRUE</code>, activates completion on arguments of all S3 methods (otherwise just the generic, which usually has very few arguments). </p> </dd> <dt> <code>ipck</code>:</dt> <dd> <p> Enables completion of installed package names inside <code>library</code> and <code>require</code>. </p> </dd> <dt> <code>data</code>:</dt> <dd> <p> Enables completion of data sets (including those already visible) inside <code>data</code>. </p> </dd> <dt> <code>help</code>:</dt> <dd> <p> Enables completion of help requests starting with a question mark, by looking inside help index files. </p> </dd> <dt> <code>argdb</code>:</dt> <dd> <p> When <code>args = TRUE</code>, completion is attempted on function arguments.  Generally, the list of valid arguments is determined by dynamic calls to <code>args</code>. While this gives results that are technically correct, the use of the <code>...</code> argument often hides some useful arguments. To give more flexibility in this regard, an optional table of valid arguments names for specific functions is retained internally.  Setting <code>argdb = TRUE</code> enables preferential lookup in this internal data base for functions with an entry in it.  Of course, this is useful only when the data base contains information about the function of interest.  Some functions are already included, and more can be added by the user through the unexported function <code>.addFunctionInfo</code> (see below).  </p> </dd> <dt> <code>fuzzy</code>:</dt> <dd> <p> Enables fuzzy matching, where close but non-exact matches (e.g., with different case) are considered if no exact matches are found.  This feature is experimental and the details can change.  </p> </dd> <dt> <code>quotes</code>:</dt> <dd> <p> Enables completion in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> code when inside quotes.  This normally leads to filename completion, but can be otherwise depending on context (for example, when the open quote is preceded by <code>?</code>, help completion is invoked.  Setting this to <code>FALSE</code> relegates completion to the underlying completion front-end, which may do its own processing (for example, <code>readline</code> on Unix-alikes will do filename completion.  </p> </dd> <dt> <code>files</code>:</dt> <dd> <p> Deprecated.  Use <code>quotes</code> instead.  </p> </dd> </dl> <p>All settings are turned on by default except <code>ipck</code>, <code>func</code>, and <code>fuzzy</code>.  Turn more off if your CPU cycles are valuable; you will still retain basic completion on names of objects in the search list.  See below for additional details. </p> </td> </tr> <tr valign='top'> <td><code>name, ...</code></td> <td> <p> user-settable options.  Currently valid names are </p><br /><dl> <dt> <code>function.suffix</code>:</dt> <dd> <p> default <code>'('</code> </p> </dd> <dt> <code>funarg.suffix</code>:</dt> <dd> <p> default <code>' = '</code> </p> </dd> <dt><code>package.suffix</code></dt> <dd> <p> default <code>'::'</code> </p> </dd> </dl> <p>Usage is similar to that of <code>options</code>. </p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p> An R object for which valid names after <code>'$'</code> are computed and returned. </p> </td> </tr> <tr valign='top'> <td><code>pattern</code></td> <td> <p> A regular expression.  Only matching names are returned. </p> </td> </tr> </table> "	FALSE
"contrib.url"	"utils"	"Find Appropriate Paths in CRAN-like Repositories"	"<p><code>contrib.url</code> adds the appropriate type-specific path within a repository to each URL in <code>repos</code>. </p>"	"<pre>contrib.url(repos, type = getOption('pkgType')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>repos</code></td> <td> <p>character vector, the base URL(s) of the repositories to use. </p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string, indicating which type of packages: see <code>install.packages</code>. </p> </td> </tr> </table> "	FALSE
"count.fields"	"utils"	"Count the Number of Fields per Line"	"<p><code>count.fields</code> counts the number of fields, as separated by <code>sep</code>, in each of the lines of <code>file</code> read. </p>"	"<pre>count.fields(file, sep = '', quote = '\''', skip = 0,<br />              blank.lines.skip = TRUE, comment.char = '#') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>a character string naming an ASCII data file, or a <code>connection</code>, which will be opened if necessary, and if so closed at the end of the function call.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>the field separator character.  Values on each line of the file are separated by this character.  By default, arbitrary amounts of whitespace can separate fields.</p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>the set of quoting characters</p> </td> </tr> <tr valign='top'> <td><code>skip</code></td> <td> <p>the number of lines of the data file to skip before beginning to read data.</p> </td> </tr> <tr valign='top'> <td><code>blank.lines.skip</code></td> <td> <p>logical: if <code>TRUE</code> blank lines in the input are ignored.</p> </td> </tr> <tr valign='top'> <td><code>comment.char</code></td> <td> <p>character: a character vector of length one containing a single character or an empty string.</p> </td> </tr> </table> "	FALSE
"create.post"	"utils"	"Ancillary Function for Preparing Emails and Postings"	"<p>An ancillary function used by <code>bug.report</code> and <code>help.request</code> to prepare emails for submission to package maintainers or to <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> mailing lists. </p>"	"<pre>create.post(instructions = character(), description = 'post',<br />             subject = '',<br />             method = getOption('mailer'),<br />             address = 'the relevant mailing list',<br />             ccaddress = getOption('ccaddress', ''),<br />             filename = 'R.post', info = character()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>instructions</code></td> <td> <p>Character vector of instructions to put at the top of the template email.</p> </td> </tr> <tr valign='top'> <td><code>description</code></td> <td> <p>Character string: a description to be incorporated into messages.</p> </td> </tr> <tr valign='top'> <td><code>subject</code></td> <td> <p>Subject of the email. Optional except for the <code>'mailx'</code> method.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>Submission method, one of <code>'none'</code>, <code>'mailto'</code>, <code>'gnudoit'</code>, <code>'ess'</code> or (Unix only) <code>'mailx'</code>. See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>address</code></td> <td> <p>Recipient's email address, where applicable: for package bug reports sent by email this defaults to the address of the package maintainer (the first if more than one is listed).</p> </td> </tr> <tr valign='top'> <td><code>ccaddress</code></td> <td> <p>Optional email address for copies with the <code>'mailx'</code> and <code>'mailto'</code> methods. Use <code>ccaddress = ''</code> for no copy.</p> </td> </tr> <tr valign='top'> <td><code>filename</code></td> <td> <p>Filename to use for setting up the email (or storing it when method is <code>'none'</code> or sending mail fails).</p> </td> </tr> <tr valign='top'> <td><code>info</code></td> <td> <p>character vector of information to include in the template email below the ‘please do not edit the information below’ line.</p> </td> </tr> </table> "	FALSE
"data"	"utils"	"Data Sets"	"<p>Loads specified data sets, or list the available data sets. </p>"	"<pre>data(..., list = character(), package = NULL, lib.loc = NULL,<br />      verbose = getOption('verbose'), envir = .GlobalEnv) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>literal character strings or names.</p> </td> </tr> <tr valign='top'> <td><code>list</code></td> <td> <p>a character vector.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td><br /><p>a character vector giving the package(s) to look in for data sets, or <code>NULL</code>. </p> <p>By default, all packages in the search path are used, then the ‘<span class='file'>data</span>’ subdirectory (if present) of the current working directory. </p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector of directory names of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> libraries, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>a logical.  If <code>TRUE</code>, additional diagnostics are printed.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the environment where the data should be loaded.</p> </td> </tr> </table> "	FALSE
"dataentry"	"utils"	"Spreadsheet Interface for Entering Data"	"<p>A spreadsheet-like editor for entering or editing data. </p>"	"<pre>data.entry(..., Modes = NULL, Names = NULL) dataentry(data, modes) de(..., Modes = list(), Names = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>A list of variables: currently these should be numeric or character vectors or list containing such vectors.</p> </td> </tr> <tr valign='top'> <td><code>Modes</code></td> <td> <p>The modes to be used for the variables.</p> </td> </tr> <tr valign='top'> <td><code>Names</code></td> <td> <p>The names to be used for the variables.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>A list of numeric and/or character vectors.</p> </td> </tr> <tr valign='top'> <td><code>modes</code></td> <td> <p>A list of length up to that of <code>data</code> giving the modes of (some of) the variables. <code>list()</code> is allowed.</p> </td> </tr> </table> "	FALSE
"debugger"	"utils"	"Post-Mortem Debugging"	"<p>Functions to dump the evaluation environments (frames) and to examine dumped frames. </p>"	"<pre>dump.frames(dumpto = 'last.dump', to.file = FALSE) debugger(dump = last.dump) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>dumpto</code></td> <td> <p>a character string. The name of the object or file to dump to.</p> </td> </tr> <tr valign='top'> <td><code>to.file</code></td> <td> <p>logical. Should the dump be to an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object or to a file?</p> </td> </tr> <tr valign='top'> <td><code>dump</code></td> <td> <p>An <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> dump object created by <code>dump.frames</code>.</p> </td> </tr> </table> "	FALSE
"demo"	"utils"	"Demonstrations of R Functionality"	"<p><code>demo</code> is a user-friendly interface to running some demonstration <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> scripts.  <code>demo()</code> gives the list of available topics. </p>"	"<pre>demo(topic, package = NULL, lib.loc = NULL,<br />      character.only = FALSE, verbose = getOption('verbose'),<br />      echo = TRUE, ask = getOption('demo.ask'),<br />      encoding = getOption('encoding')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>topic</code></td> <td> <p>the topic which should be demonstrated, given as a name or literal character string, or a character string, depending on whether <code>character.only</code> is <code>FALSE</code> (default) or <code>TRUE</code>.  If omitted, the list of available topics is displayed.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>a character vector giving the packages to look into for demos, or <code>NULL</code>.  By default, all packages in the search path are used.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector of directory names of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> libraries, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.  If the default is used, the loaded packages are searched before the libraries.</p> </td> </tr> <tr valign='top'> <td><code>character.only</code></td> <td> <p>logical; if <code>TRUE</code>, use <code>topic</code> as character string.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>a logical.  If <code>TRUE</code>, additional diagnostics are printed.</p> </td> </tr> <tr valign='top'> <td><code>echo</code></td> <td> <p>a logical.  If <code>TRUE</code>, show the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> input when sourcing.</p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td> <p>a logical (or <code>'default'</code>) indicating if <code>devAskNewPage(ask = TRUE)</code> should be called before graphical output happens from the demo code.  The value <code>'default'</code> (the factory-fresh default) means to ask if <code>echo == TRUE</code> and the graphics device appears to be interactive.  This parameter applies both to any currently opened device and to any devices opened by the demo code.  If this is evaluated to <code>TRUE</code> and the session is interactive, the user is asked to press RETURN to start.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>See <code>source</code>.  If the package has a declared encoding, that takes preference.</p> </td> </tr> </table> "	FALSE
"download.file"	"utils"	"Download File from the Internet"	"<p>This function can be used to download a file from the Internet. </p>"	"<pre>download.file(url, destfile, method, quiet = FALSE, mode = 'w',<br />               cacheOK = TRUE,<br />               extra = getOption('download.file.extra')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>url</code></td> <td> <p>A character string naming the URL of a resource to be downloaded.</p> </td> </tr> <tr valign='top'> <td><code>destfile</code></td> <td> <p>A character string with the name where the downloaded file is saved.  Tilde-expansion is performed.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>Method to be used for downloading files.  Current download methods are <code>'internal'</code>, <code>'wininet'</code> (Windows only) <code>'libcurl'</code>, <code>'wget'</code> and <code>'curl'</code>, and there is a value <code>'auto'</code>: see ‘Details’ and ‘Note’. </p> <p>The method can also be set through the option <code>'download.file.method'</code>: see <code>options()</code>. </p> </td> </tr> <tr valign='top'> <td><code>quiet</code></td> <td> <p>If <code>TRUE</code>, suppress status messages (if any), and the progress bar.</p> </td> </tr> <tr valign='top'> <td><code>mode</code></td> <td> <p>character.  The mode with which to write the file.  Useful values are <code>'w'</code>, <code>'wb'</code> (binary), <code>'a'</code> (append) and <code>'ab'</code>.  Only used for the <code>'internal'</code> method. </p> </td> </tr> <tr valign='top'> <td><code>cacheOK</code></td> <td> <p>logical.  Is a server-side cached value acceptable?</p> </td> </tr> <tr valign='top'> <td><code>extra</code></td> <td> <p>character vector of additional command-line arguments for the <code>'wget'</code> and <code>'curl'</code> methods.</p> </td> </tr> </table> "	FALSE
"download.packages"	"utils"	"Download Packages from CRAN-like Repositories"	"<p>These functions can be used to automatically compare the version numbers of installed packages with the newest available version on the repositories and update outdated packages on the fly. </p>"	"<pre>download.packages(pkgs, destdir, available = NULL,<br />                   repos = getOption('repos'),<br />                   contriburl = contrib.url(repos, type),<br />                   method, type = getOption('pkgType'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pkgs</code></td> <td><br /><p>character vector of the names of packages whose latest available versions should be downloaded from the repositories. </p> </td> </tr> <tr valign='top'> <td><code>destdir</code></td> <td><br /><p>directory where downloaded packages are to be stored. </p> </td> </tr> <tr valign='top'> <td><code>available</code></td> <td><br /><p>an object as returned by <code>available.packages</code> listing packages available at the repositories, or <code>NULL</code> which makes an internal call to <code>available.packages</code>. </p> </td> </tr> <tr valign='top'> <td><code>repos</code></td> <td><br /><p>character vector, the base URL(s) of the repositories to use, i.e., the URL of the CRAN master such as <code>'https://cran.r-project.org'</code> or its Statlib mirror, <code>'http://lib.stat.cmu.edu/R/CRAN'</code>. </p> </td> </tr> <tr valign='top'> <td><code>contriburl</code></td> <td><br /><p>URL(s) of the contrib sections of the repositories.  Use this argument only if your repository mirror is incomplete, e.g., because you burned only the ‘<span class='file'>contrib</span>’ section on a CD.  Overrides argument <code>repos</code>. </p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td><br /><p>Download method, see <code>download.file</code>. </p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td><br /><p>character string, indicate which type of packages: see <code>install.packages</code>. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td><br /><p>additional arguments to be passed to <code>download.file</code>. </p> </td> </tr> </table> "	FALSE
"edit"	"utils"	"Invoke a Text Editor"	"<p>Invoke a text editor on an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object. </p>"	"<pre>## Default S3 method: edit(name = NULL, file = '', title = NULL,<br />      editor = getOption('editor'), ...)<br />vi(name = NULL, file = '') emacs(name = NULL, file = '') pico(name = NULL, file = '') xemacs(name = NULL, file = '') xedit(name = NULL, file = '') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p>a named object that you want to edit. If name is missing then the file specified by <code>file</code> is opened for editing.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>a string naming the file to write the edited version to.</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>a display name for the object being edited.</p> </td> </tr> <tr valign='top'> <td><code>editor</code></td> <td> <p>usually a string naming the text editor you want to use. On Unix the default is set from the environment variables <span class='env'>EDITOR</span> or <span class='env'>VISUAL</span> if either is set, otherwise <code>vi</code> is used.  On Windows it defaults to <code>'internal'</code>, the script editor.  On the macOS GUI the argument is ignored and the document editor is always used. </p> <p><code>editor</code> can also be a function, in which case it is called with the arguments <code>name</code>, <code>file</code>, and <code>title</code>.  Note that such a function will need to independently implement all desired functionality. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"edit.data.frame"	"utils"	"Edit Data Frames and Matrices"	"<p>Use data editor on data frame or matrix contents. </p>"	"<pre>## S3 method for class 'data.frame' edit(name, factor.mode = c('character', 'numeric'),<br />      edit.row.names = any(row.names(name) != 1:nrow(name)), ...)<br />## S3 method for class 'matrix' edit(name, edit.row.names = !is.null(dn[[1]]), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p>A data frame or (numeric, logical or character) matrix.</p> </td> </tr> <tr valign='top'> <td><code>factor.mode</code></td> <td> <p>How to handle factors (as integers or using character levels) in a data frame.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>edit.row.names</code></td> <td> <p>logical. Show the row names (if they exist) be displayed as a separate editable column?  It is an error to ask for this on a matrix with <code>NULL</code> row names.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"vignette"	"utils"	"View, List or Get R Source of Package Vignettes"	"<p>View a specified package vignette, or list the available ones; display it rendered in a viewer, and get or edit its <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> source file. </p>"	"<pre>vignette(topic, package = NULL, lib.loc = NULL, all = TRUE)<br />## S3 method for class 'vignette' print(x, ...) ## S3 method for class 'vignette' edit(name, ...)<br /></pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>topic</code></td> <td> <p>a character string giving the (base) name of the vignette to view.  If omitted, all vignettes from all installed packages are listed.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>a character vector with the names of packages to search through, or <code>NULL</code> in which ‘all’ packages (as defined by argument <code>all</code>) are searched.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector of directory names of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> libraries, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.</p> </td> </tr> <tr valign='top'> <td><code>all</code></td> <td> <p>logical; if <code>TRUE</code> search all available packages in the library trees specified by <code>lib.loc</code>, and if <code>FALSE</code>, search only attached packages.</p> </td> </tr> <tr valign='top'> <td><code>x, name</code></td> <td> <p>object of class <code>vignette</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>ignored by the <code>print</code> method, passed on to <code>file.edit</code> by the <code>edit</code> method.</p> </td> </tr> </table> "	FALSE
"example"	"utils"	"Run an Examples Section from the Online Help"	"<p>Run all the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> code from the <b>Examples</b> part of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>'s online help topic <code>topic</code> with possible exceptions <code>dontrun</code>, <code>dontshow</code>, and <code>donttest</code>, see ‘Details’ below. </p>"	"<pre>example(topic, package = NULL, lib.loc = NULL,<br />         character.only = FALSE, give.lines = FALSE, local = FALSE,<br />         echo = TRUE, verbose = getOption('verbose'),<br />         setRNG = FALSE, ask = getOption('example.ask'),<br />         prompt.prefix = abbreviate(topic, 6),<br />         run.dontrun = FALSE, run.donttest = interactive()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>topic</code></td> <td> <p>name or literal character string: the online <code>help</code> topic the examples of which should be run.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>a character vector giving the package names to look into for the topic, or <code>NULL</code> (the default), when all packages on the search path are used.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector of directory names of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> libraries, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.  If the default is used, the loaded packages are searched before the libraries.</p> </td> </tr> <tr valign='top'> <td><code>character.only</code></td> <td> <p>a logical indicating whether <code>topic</code> can be assumed to be a character string.</p> </td> </tr> <tr valign='top'> <td><code>give.lines</code></td> <td> <p>logical: if true, the <em>lines</em> of the example source code are returned as a character vector.</p> </td> </tr> <tr valign='top'> <td><code>local</code></td> <td> <p>logical: if <code>TRUE</code> evaluate locally, if <code>FALSE</code> evaluate in the workspace.</p> </td> </tr> <tr valign='top'> <td><code>echo</code></td> <td> <p>logical;  if <code>TRUE</code>, show the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> input when sourcing.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>logical;  if <code>TRUE</code>, show even more when running example code.</p> </td> </tr> <tr valign='top'> <td><code>setRNG</code></td> <td> <p>logical or expression;  if not <code>FALSE</code>, the random number generator state is saved, then initialized to a specified state, the example is run and the (saved) state is restored. <code>setRNG = TRUE</code> sets the same state as <code>R CMD check</code> does for running a package's examples.  This is currently equivalent to <code>setRNG = {RNGkind('default', 'default'); set.seed(1)}</code>.</p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td> <p>logical (or <code>'default'</code>) indicating if <code>devAskNewPage(ask = TRUE)</code> should be called before graphical output happens from the example code.  The value <code>'default'</code> (the factory-fresh default) means to ask if <code>echo == TRUE</code> and the graphics device appears to be interactive.  This parameter applies both to any currently opened device and to any devices opened by the example code.</p> </td> </tr> <tr valign='top'> <td><code>prompt.prefix</code></td> <td> <p>character; prefixes the prompt to be used if <code>echo = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>run.dontrun</code></td> <td> <p>logical indicating that <code style='white-space: pre;'>\dontrun</code> should be ignored.</p> </td> </tr> <tr valign='top'> <td><code>run.donttest</code></td> <td> <p>logical indicating that <code style='white-space: pre;'>\donttest</code> should be ignored.</p> </td> </tr> </table> "	FALSE
"file.edit"	"utils"	"Edit One or More Files"	"<p>Edit one or more files in a text editor.</p>"	"<pre>file.edit(..., title = file, editor = getOption('editor'),<br />           fileEncoding = '') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>one or more character vectors containing the names of the files to be displayed.  These will be tilde-expanded: see <code>path.expand</code>.</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>the title to use in the editor; defaults to the filename.</p> </td> </tr> <tr valign='top'> <td><code>editor</code></td> <td> <p>the text editor to be used.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>fileEncoding</code></td> <td> <p>the encoding to assume for the file: the default is to assume the native encoding.  See the ‘Encoding’ section of the help for <code>file</code>.</p> </td> </tr> </table> "	FALSE
"filetest"	"utils"	"Shell-style Tests on Files"	"<p>Utility for shell-style file tests. </p>"	"<pre>file_test(op, x, y) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>op</code></td> <td> <p>a character string specifying the test to be performed. Unary tests (only <code>x</code> is used) are <code>'-f'</code> (existence and not being a directory), <code>'-d'</code> (existence and directory) and <code>'-x'</code> (executable as a file or searchable as a directory). Binary tests are <code>'-nt'</code> (strictly newer than, using the modification dates) and <code>'-ot'</code> (strictly older than): in both cases the test is false unless both files exist.</p> </td> </tr> <tr valign='top'> <td><code>x, y</code></td> <td> <p>character vectors giving file paths.</p> </td> </tr> </table> "	FALSE
"findLineNum"	"utils"	"Find the Location of a Line of Source Code, or Set a Breakpoint There."	"<p>These functions locate objects containing particular lines of source code, using the information saved when the code was parsed with <code>keep.source = TRUE</code>. </p>"	"<pre>findLineNum(srcfile, line, nameonly = TRUE,<br />             envir = parent.frame(), lastenv)<br />setBreakpoint(srcfile, line, nameonly = TRUE,<br />               envir = parent.frame(), lastenv, verbose = TRUE,<br />               tracer, print = FALSE, clear = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>srcfile</code></td> <td> <p>The name of the file containing the source code.</p> </td> </tr> <tr valign='top'> <td><code>line</code></td> <td> <p>The line number within the file.  See Details for an alternate way to specify this.</p> </td> </tr> <tr valign='top'> <td><code>nameonly</code></td> <td> <p>If <code>TRUE</code> (the default), we require only a match to <code>basename(srcfile)</code>, not to the full path.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>Where do we start looking for function objects?</p> </td> </tr> <tr valign='top'> <td><code>lastenv</code></td> <td> <p>Where do we stop?  See the Details.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>Should we print information on where breakpoints were set?</p> </td> </tr> <tr valign='top'> <td><code>tracer</code></td> <td> <p>An optional <code>tracer</code> function to pass to <code>trace</code>.  By default, a call to <code>browser</code> is inserted.</p> </td> </tr> <tr valign='top'> <td><code>print</code></td> <td> <p>The <code>print</code> argument to pass to <code>trace</code>.</p> </td> </tr> <tr valign='top'> <td><code>clear</code></td> <td> <p>If <code>TRUE</code>, call <code>untrace</code> rather than <code>trace</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Additional arguments to pass to <code>trace</code>.</p> </td> </tr> </table> "	FALSE
"fix"	"utils"	"Fix an Object"	"<p><code>fix</code> invokes <code>edit</code> on <code>x</code> and then assigns the new (edited) version of <code>x</code> in the user's workspace. </p>"	"<pre>fix(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the name of an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, as a name or a character string.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to pass to editor: see <code>edit</code>.</p> </td> </tr> </table> "	FALSE
"flush.console"	"utils"	"Flush Output to A Console"	"<p>This does nothing except on console-based versions of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. On the macOS and Windows GUIs, it ensures that the display of output in the console is current, even if output buffering is on. </p>"	"<pre>flush.console() </pre>"	NA	FALSE
"object.size"	"utils"	"Report the Space Allocated for an Object"	"<p>Provides an estimate of the memory that is being used to store an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object. </p>"	"<pre>object.size(x)<br />## S3 method for class 'object_size' format(x, units = 'b', ...) ## S3 method for class 'object_size' print(x, quote = FALSE, units = 'b', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>logical, indicating whether or not the result should be printed with surrounding quotes.</p> </td> </tr> <tr valign='top'> <td><code>units</code></td> <td> <p>the units to be used in printing the size.  Allowed values are <code>'b'</code>, <code>'Kb'</code>, <code>'Mb'</code>, <code>'Gb'</code>, <code>'Tb'</code>, <code>'Pb'</code>, <code>'B'</code>, <code>'KB'</code>, <code>'MB'</code>, <code>'GB'</code>, <code>'TB'</code>, <code>'PB'</code>, <code>'KiB'</code>, <code>'MiB'</code>, <code>'GiB'</code>, <code>'TiB'</code>, <code>'PiB'</code>, <code>'EiB'</code>, <code>'ZiB'</code>, <code>'YiB'</code>, and <code>'auto'</code> (see ‘Details’).  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"format"	"utils"	"Format Unordered and Ordered Lists"	"<p>Format unordered (itemize) and ordered (enumerate) lists. </p>"	"<pre>formatUL(x, label = '*', offset = 0,<br />          width = 0.9 * getOption('width')) formatOL(x, type = 'arabic', offset = 0, start = 1,<br />          width = 0.9 * getOption('width')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector of list items.</p> </td> </tr> <tr valign='top'> <td><code>label</code></td> <td> <p>a character string used for labelling the items.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td> <p>a non-negative integer giving the offset (indentation) of the list.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>a positive integer giving the target column for wrapping lines in the output.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>a character string specifying the ‘type’ of the labels in the ordered list.  If <code>'arabic'</code> (default), arabic numerals are used.  For <code>'Alph'</code> or <code>'alph'</code>, single upper or lower case letters are employed (in this case, the number of the last item must not exceed 26.  Finally, for <code>'Roman'</code> or <code>'roman'</code>, the labels are given as upper or lower case roman numerals (with the number of the last item maximally 3899). <code>type</code> can be given as a unique abbreviation of the above, or as one of the <acronym><span class='acronym'>HTML</span></acronym> style tokens <code>'1'</code> (arabic), <code>'A'</code>/<code>'a'</code> (alphabetic), or <code>'I'</code>/<code>'i'</code> (roman), respectively.</p> </td> </tr> <tr valign='top'> <td><code>start</code></td> <td> <p>a positive integer specifying the starting number of the first item in an ordered list.</p> </td> </tr> </table> "	FALSE
"getParseData"	"utils"	"Get detailed parse information from object."	"<p>If the <code>'keep.source'</code> option is <code>TRUE</code>, <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>'s parser will attach detailed information on the object it has parsed.  These functions retrieve that information. </p>"	"<pre>getParseData(x, includeText = NA) getParseText(parseData, id) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td><br /><p>an expression returned from <code>parse</code>, or a function or other object with source reference information </p> </td> </tr> <tr valign='top'> <td><code>includeText</code></td> <td><br /><p>logical; whether to include the text of parsed items in the result </p> </td> </tr> <tr valign='top'> <td><code>parseData</code></td> <td><br /><p>a data frame returned from <code>getParseData</code> </p> </td> </tr> <tr valign='top'> <td><code>id</code></td> <td><br /><p>a vector of item identifiers whose text is to be retrieved </p> </td> </tr> </table> "	FALSE
"getS3method"	"utils"	"Get an S3 Method"	"<p>Get a method for an S3 generic, possibly from a namespace or the generic's registry. </p>"	"<pre>getS3method(f, class, optional = FALSE, envir = parent.frame()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>character: name of the generic.</p> </td> </tr> <tr valign='top'> <td><code>class</code></td> <td> <p>character: name of the class.</p> </td> </tr> <tr valign='top'> <td><code>optional</code></td> <td> <p>logical: should failure to find the generic or a method be allowed?</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the <code>environment</code> in which the method and its generic are searched first.</p> </td> </tr> </table> "	FALSE
"sourceutils"	"utils"	"Source Reference Utilities"	"<p>These functions extract information from source references. </p>"	"<pre>getSrcFilename(x, full.names = FALSE, unique = TRUE) getSrcDirectory(x, unique = TRUE) getSrcref(x) getSrcLocation(x, which = c('line', 'column', 'byte', 'parse'),<br />                first = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td><br /><p>An object (typically a function) containing source references. </p> </td> </tr> <tr valign='top'> <td><code>full.names</code></td> <td><br /><p>Whether to include the full path in the filename result. </p> </td> </tr> <tr valign='top'> <td><code>unique</code></td> <td><br /><p>Whether to list only unique filenames/directories. </p> </td> </tr> <tr valign='top'> <td><code>which</code></td> <td><br /><p>Which part of a source reference to extract.  Can be abbreviated. </p> </td> </tr> <tr valign='top'> <td><code>first</code></td> <td><br /><p>Whether to show the first (or last) location of the object. </p> </td> </tr> </table> "	FALSE
"glob2rx"	"utils"	"Change Wildcard or Globbing Pattern into Regular Expression"	"<p>Change <em>wildcard</em> aka <em>globbing</em> patterns into the corresponding regular expressions (<code>regexp</code>). </p>"	"<pre>glob2rx(pattern, trim.head = FALSE, trim.tail = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pattern</code></td> <td> <p>character vector</p> </td> </tr> <tr valign='top'> <td><code>trim.head</code></td> <td> <p>logical specifying if leading <code>'^.*'</code> should be trimmed from the result.</p> </td> </tr> <tr valign='top'> <td><code>trim.tail</code></td> <td> <p>logical specifying if trailing <code>'.*$'</code> should be trimmed from the result.</p> </td> </tr> </table> "	FALSE
"globalVariables"	"utils"	"Declarations Used in Checking a Package"	"<p>For <code>globalVariables</code>, the names supplied are of functions or other objects that should be regarded as defined globally when the <code>check</code> tool is applied to this package.  The call to <code>globalVariables</code> will be included in the package's source. Repeated calls in the same package accumulate the names of the global variables. </p> <p>Typical examples are the fields and methods in reference classes, which appear to be global objects to <code>codetools</code>. (This case is handled automatically by <code>setRefClass()</code> and friends, using the supplied field and method names.) </p> <p>For <code>suppressForeignCheck</code>, the names supplied are of variables used as <code>.NAME</code> in foreign function calls which should not be checked by <code>checkFF(registration = TRUE)</code>.  Without this declaration, expressions other than simple character strings are assumed to evaluate to registered native symbol objects.  The type of call (<code>.Call</code>, <code>.External</code>, etc.) and argument counts will be checked.  With this declaration, checks on those names will usually be suppressed.  (If the code uses an expression that should only be evaluated at runtime, the message can be suppressed by wrapping it in a <code>dontCheck</code> function call, or by saving it to a local variable, and suppressing messages about that variable. See the example below.) </p>"	"<pre>globalVariables(names, package, add = TRUE) suppressForeignCheck(names, package, add = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>names</code></td> <td><br /><p>The character vector of object names.  If omitted, the current list of global variables declared in the package will be returned, unchanged. </p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td><br /><p>The relevant package, usually the character string name of the package but optionally its corresponding namespace environment. </p> <p>When the call to <code>globalVariables</code> or <code>suppressForeignCheck</code> comes in the package's source file, the argument is normally omitted, as in the example below. </p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td><br /><p>Should the contents of <code>names</code> be added to the current global variables or replace it? </p> </td> </tr> </table> "	FALSE
"head"	"utils"	"Return the First or Last Part of an Object"	"<p>Returns the first or last parts of a vector, matrix, table, data frame or function.  Since <code>head()</code> and <code>tail()</code> are generic functions, they may also have been extended to other classes. </p>"	"<pre>head(x, ...) ## Default S3 method: head(x, n = 6L, ...) ## S3 method for class 'data.frame' head(x, n = 6L, ...) ## S3 method for class 'matrix' head(x, n = 6L, ...) ## S3 method for class 'ftable' head(x, n = 6L, ...) ## S3 method for class 'table' head(x, n = 6L, ...) ## S3 method for class 'function' head(x, n = 6L, ...)<br />tail(x, ...) ## Default S3 method: tail(x, n = 6L, ...) ## S3 method for class 'data.frame' tail(x, n = 6L, ...) ## S3 method for class 'matrix' tail(x, n = 6L, addrownums = TRUE, ...) ## S3 method for class 'ftable' tail(x, n = 6L, addrownums = FALSE, ...) ## S3 method for class 'table' tail(x, n = 6L, addrownums = TRUE, ...) ## S3 method for class 'function' tail(x, n = 6L, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>a single integer. If positive, size for the resulting object: number of elements for a vector (including lists), rows for a matrix or data frame or lines for a function. If negative, all but the <code>n</code> last/first number of elements of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>addrownums</code></td> <td> <p>if there are no row names, create them from the row numbers.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"help"	"utils"	"Documentation"	"<p><code>help</code> is the primary interface to the help systems. </p>"	"<pre>help(topic, package = NULL, lib.loc = NULL,<br />      verbose = getOption('verbose'),<br />      try.all.packages = getOption('help.try.all.packages'),<br />      help_type = getOption('help_type')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>topic</code></td> <td> <p>usually, a name or character string specifying the topic for which help is sought.  A character string (enclosed in explicit single or double quotes) is always taken as naming a topic. </p> <p>If the value of <code>topic</code> is a length-one character vector the topic is taken to be the value of the only element.  Otherwise <code>topic</code> must be a name or a reserved word (if syntactically valid) or character string. </p> <p>See ‘Details’ for what happens if this is omitted. </p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>a name or character vector giving the packages to look into for documentation, or <code>NULL</code>.  By default, all packages  whose namespaces are loaded are used.  To avoid a name being deparsed use e.g. <code>(pkg_ref)</code> (see the examples).</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector of directory names of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> libraries, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.  If the default is used, the loaded packages are searched before the libraries.  This is not used for HTML help (see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>logical; if <code>TRUE</code>, the file name is reported.</p> </td> </tr> <tr valign='top'> <td><code>try.all.packages</code></td> <td> <p>logical; see <code>Note</code>.</p> </td> </tr> <tr valign='top'> <td><code>help_type</code></td> <td> <p>character string: the type of help required. Possible values are <code>'text'</code>, <code>'html'</code> and <code>'pdf'</code>. Case is ignored, and partial matching is allowed.</p> </td> </tr> </table> "	FALSE
"help.request"	"utils"	"Send a Post to R-help"	"<p>Prompts the user to check they have done all that is expected of them before sending a post to the R-help mailing list, provides a template for the post with session information included and optionally sends the email (on Unix systems). </p>"	"<pre>help.request(subject = '',<br />              address = 'r-help@R-project.org',<br />              file = 'R.help.request', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>subject</code></td> <td> <p>subject of the email.  Please do not use single quotes (<kbd>'</kbd>) in the subject!  Post separate help requests for multiple queries.</p> </td> </tr> <tr valign='top'> <td><code>address</code></td> <td> <p>recipient's email address.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>filename to use (if needed) for setting up the email.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional named arguments such as <code>method</code> and <code>ccaddress</code> to pass to <code>create.post</code>.</p> </td> </tr> </table> "	FALSE
"help.search"	"utils"	"Search the Help System"	"<p>Allows for searching the help system for documentation matching a given character string in the (file) name, alias, title, concept or keyword entries (or any combination thereof), using either fuzzy matching or regular expression matching.  Names and titles of the matched help entries are displayed nicely formatted. </p> <p>Vignette names, titles and keywords and demo names and titles may also be searched. </p>"	"<pre>help.search(pattern, fields = c('alias', 'concept', 'title'),<br />             apropos, keyword, whatis, ignore.case = TRUE,<br />             package = NULL, lib.loc = NULL,<br />             help.db = getOption('help.db'),<br />             verbose = getOption('verbose'),<br />             rebuild = FALSE, agrep = NULL, use_UTF8 = FALSE,<br />             types = getOption('help.search.types')) ??pattern field??pattern </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pattern</code></td> <td> <p>a character string to be matched in the specified fields.  If this is given, the arguments <code>apropos</code>, <code>keyword</code>, and <code>whatis</code> are ignored.</p> </td> </tr> <tr valign='top'> <td><code>fields</code></td> <td> <p>a character vector specifying the fields of the help database to be searched.  The entries must be abbreviations of <code>'name'</code>, <code>'title'</code>, <code>'alias'</code>, <code>'concept'</code>, and <code>'keyword'</code>, corresponding to the help page's (file) name, its title, the topics and concepts it provides documentation for, and the keywords it can be classified to.  See below for details and how vignettes and demos are searched.</p> </td> </tr> <tr valign='top'> <td><code>apropos</code></td> <td> <p>a character string to be matched in the help page topics and title.</p> </td> </tr> <tr valign='top'> <td><code>keyword</code></td> <td> <p>a character string to be matched in the help page ‘keywords’. ‘Keywords’ are really categories: the standard categories are listed in file ‘<span class='file'>R.home('doc')/KEYWORDS</span>’ (see also the example) and some package writers have defined their own.  If <code>keyword</code> is specified, <code>agrep</code> defaults to <code>FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>whatis</code></td> <td> <p>a character string to be matched in the help page topics.</p> </td> </tr> <tr valign='top'> <td><code>ignore.case</code></td> <td> <p>a logical.  If <code>TRUE</code>, case is ignored during matching; if <code>FALSE</code>, pattern matching is case sensitive.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>a character vector with the names of packages to search through, or <code>NULL</code> in which case <em>all</em> available packages in the library trees specified by <code>lib.loc</code> are searched.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees to search through, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.</p> </td> </tr> <tr valign='top'> <td><code>help.db</code></td> <td> <p>a character string giving the file path to a previously built and saved help database, or <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>logical; if <code>TRUE</code>, the search process is traced. Integer values are also accepted, with <code>TRUE</code> being equivalent to <code>2</code>, and <code>1</code> being less verbose.  On Windows a progress bar is shown during rebuilding, and on Unix a heartbeat is shown for <code>verbose = 1</code> and a package-by-package list for <code>verbose &gt;= 2</code>.</p> </td> </tr> <tr valign='top'> <td><code>rebuild</code></td> <td> <p>a logical indicating whether the help database should be rebuilt.  This will be done automatically if <code>lib.loc</code> or the search path is changed, or if <code>package</code> is used and a value is not found.</p> </td> </tr> <tr valign='top'> <td><code>agrep</code></td> <td> <p>if <code>NULL</code> (the default unless <code>keyword</code> is used) and the character string to be matched consists of alphanumeric characters, whitespace or a dash only, approximate (fuzzy) matching via <code>agrep</code> is used unless the string has fewer than 5 characters; otherwise, it is taken to contain a regular expression to be matched via <code>grep</code>.  If <code>FALSE</code>, approximate matching is not used.  Otherwise, one can give a numeric or a list specifying the maximal distance for the approximate match, see argument <code>max.distance</code> in the documentation for <code>agrep</code>.</p> </td> </tr> <tr valign='top'> <td><code>use_UTF8</code></td> <td> <p>logical: should results be given in UTF-8 encoding? Also changes the meaning of regexps in <code>agrep</code> to be Perl regexps.</p> </td> </tr> <tr valign='top'> <td><code>types</code></td> <td> <p>a character vector listing the types of documentation to search.  The entries must be abbreviations of <code>'vignette'</code> <code>'help'</code> or <code>'demo'</code>. Results will be presented in the order specified.</p> </td> </tr> <tr valign='top'> <td><code>field</code></td> <td> <p>a single value of <code>fields</code> to search.</p> </td> </tr> </table> "	FALSE
"help.start"	"utils"	"Hypertext Documentation"	"<p>Start the hypertext (currently HTML) version of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>'s online documentation. </p>"	"<pre>help.start(update = FALSE, gui = 'irrelevant',<br />            browser = getOption('browser'), remote = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>update</code></td> <td> <p>logical: should this attempt to update the package index to reflect the currently available packages.  (Not attempted if <code>remote</code> is non-<code>NULL</code>.)</p> </td> </tr> <tr valign='top'> <td><code>gui</code></td> <td> <p>just for compatibility with S-PLUS.</p> </td> </tr> <tr valign='top'> <td><code>browser</code></td> <td> <p>the name of the program to be used as hypertext browser.  It should be in the <span class='env'>PATH</span>, or a full path specified. Alternatively, it can be an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> function which will be called with a URL as its only argument. This option is normally unset on Windows, when the file-association mechanism will be used.</p> </td> </tr> <tr valign='top'> <td><code>remote</code></td> <td> <p>A character string giving a valid URL for the ‘<span class='file'><var>R_HOME</var></span>’ directory on a remote location.</p> </td> </tr> </table> "	FALSE
"savehistory"	"utils"	"Load or Save or Display the Commands History"	"<p>Load or save or display the commands history. </p>"	"<pre>loadhistory(file = '.Rhistory') savehistory(file = '.Rhistory')<br />history(max.show = 25, reverse = FALSE, pattern, ...)<br />timestamp(stamp = date(),<br />           prefix = '##------ ', suffix = ' ------##',<br />           quiet = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>The name of the file in which to save the history, or from which to load it. The path is relative to the current working directory.</p> </td> </tr> <tr valign='top'> <td><code>max.show</code></td> <td> <p>The maximum number of lines to show. <code>Inf</code> will give all of the currently available history.</p> </td> </tr> <tr valign='top'> <td><code>reverse</code></td> <td> <p>logical. If true, the lines are shown in reverse order. Note: this is not useful when there are continuation lines.</p> </td> </tr> <tr valign='top'> <td><code>pattern</code></td> <td> <p>A character string to be matched against the lines of the history.  When supplied, only <em>unique</em> matching lines are shown.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Arguments to be passed to <code>grep</code> when doing the matching.</p> </td> </tr> <tr valign='top'> <td><code>stamp</code></td> <td> <p>A value or vector of values to be written into the history.</p> </td> </tr> <tr valign='top'> <td><code>prefix</code></td> <td> <p>A prefix to apply to each line.</p> </td> </tr> <tr valign='top'> <td><code>suffix</code></td> <td> <p>A suffix to apply to each line.</p> </td> </tr> <tr valign='top'> <td><code>quiet</code></td> <td> <p>If <code>TRUE</code>, suppress printing timestamp to the console.</p> </td> </tr> </table> "	FALSE
"hsearch-utils"	"utils"	"Help Search Utilities"	"<p>Utilities for searching the help system. </p>"	"<pre>hsearch_db(package = NULL, lib.loc = NULL,<br />            types = getOption('help.search.types'),<br />             verbose = getOption('verbose'),<br />            rebuild = FALSE, use_UTF8 = FALSE) hsearch_db_concepts(db = hsearch_db()) hsearch_db_keywords(db = hsearch_db()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>package</code></td> <td> <p>a character vector with the names of packages to search through, or <code>NULL</code> in which case <em>all</em> available packages in the library trees specified by <code>lib.loc</code> are searched.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees to search through, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.</p> </td> </tr> <tr valign='top'> <td><code>types</code></td> <td> <p>a character vector listing the types of documentation to search. See <code>help.search</code> for details.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>a logical controlling the verbosity of building the help search database. See <code>help.search</code> for details.</p> </td> </tr> <tr valign='top'> <td><code>rebuild</code></td> <td> <p>a logical indicating whether the help search database should be rebuilt. See <code>help.search</code> for details.</p> </td> </tr> <tr valign='top'> <td><code>use_UTF8</code></td> <td> <p>logical: should results be given in UTF-8 encoding?</p> </td> </tr> <tr valign='top'> <td><code>db</code></td> <td> <p>a help search database as obtained by calls to <code>hsearch_db()</code>.</p> </td> </tr> </table> "	FALSE
"INSTALL"	"utils"	"Install Add-on Packages"	"<p>Utility for installing add-on packages.</p>"	"<pre>R CMD INSTALL [options] [-l lib] pkgs </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pkgs</code></td> <td> <p>a space-separated list with the path names of the packages to be installed.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>lib</code></td> <td> <p>the path name of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library tree to install to.  Also accepted in the form <span class='samp'>--library=lib</span>.  Paths including spaces should be quoted, using the conventions for the shell in use.</p> </td> </tr> <tr valign='top'> <td><code>options</code></td> <td> <p>a space-separated list of options through which in particular the process for building the help files can be controlled. Use <code>R CMD INSTALL --help</code> for the full current list of options.</p> </td> </tr> </table> "	FALSE
"install.packages"	"utils"	"Install Packages from Repositories or Local Files"	"<p>Download and install packages from CRAN-like repositories or from local files. </p>"	"<pre>install.packages(pkgs, lib, repos = getOption('repos'),<br />                  contriburl = contrib.url(repos, type),<br />                  method, available = NULL, destdir = NULL,<br />                  dependencies = NA, type = getOption('pkgType'),<br />                  configure.args = getOption('configure.args'),<br />                  configure.vars = getOption('configure.vars'),<br />                  clean = FALSE, Ncpus = getOption('Ncpus', 1L),<br />                  verbose = getOption('verbose'),<br />                  libs_only = FALSE, INSTALL_opts, quiet = FALSE,<br />                  keep_outputs = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pkgs</code></td> <td> <p>character vector of the names of packages whose current versions should be downloaded from the repositories. </p> <p>If <code>repos = NULL</code>, a character vector of file paths.  These can be source directories or archives or binary package archive files (as created by <code>R CMD build<br />       --binary</code>).  (<code>http://</code> and <code>file://</code> URLs are also accepted and the files will be downloaded and installed from local copies.)  On a CRAN build of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> for macOS these can be ‘<span class='file'>.tgz</span>’ files containing binary package archives. Tilde-expansion will be done on file paths. </p> <p>If this is missing or a zero-length character vector, a listbox of available packages is presented where possible in an interactive <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> session. </p> </td> </tr> <tr valign='top'> <td><code>lib</code></td> <td><br /><p>character vector giving the library directories where to install the packages.  Recycled as needed.  If missing, defaults to the first element of <code>.libPaths()</code>. </p> </td> </tr> <tr valign='top'> <td><code>repos</code></td> <td><br /><p>character vector, the base URL(s) of the repositories to use, e.g., the URL of a CRAN mirror such as <code>'https://cloud.r-project.org'</code>.  For more details on supported URL schemes see <code>url</code>. </p> <p>Can be <code>NULL</code> to install from local files, directories or URLs: this will be inferred by extension from <code>pkgs</code> if of length one. </p> </td> </tr> <tr valign='top'> <td><code>contriburl</code></td> <td><br /><p>URL(s) of the contrib sections of the repositories.  Use this argument if your repository mirror is incomplete, e.g., because you burned only the ‘<span class='file'>contrib</span>’ section on a CD, or only have binary packages.  Overrides argument <code>repos</code>. Incompatible with <code>type = 'both'</code>. </p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td><br /><p>download method, see <code>download.file</code>.  Unused if a non-<code>NULL</code> <code>available</code> is supplied. </p> </td> </tr> <tr valign='top'> <td><code>available</code></td> <td><br /><p>a matrix as returned by <code>available.packages</code> listing packages available at the repositories, or <code>NULL</code> when the function makes an internal call to <code>available.packages</code>. Incompatible with <code>type = 'both'</code>. </p> </td> </tr> <tr valign='top'> <td><code>destdir</code></td> <td><br /><p>directory where downloaded packages are stored.  If it is <code>NULL</code> (the default) a subdirectory <code>downloaded_packages</code> of the session temporary directory will be used (and the files will be deleted at the end of the session). </p> </td> </tr> <tr valign='top'> <td><code>dependencies</code></td> <td> <p>logical indicating whether to also install uninstalled packages which these packages depend on/link to/import/suggest (and so on recursively).  Not used if <code>repos<br />     = NULL</code>.  Can also be a character vector, a subset of <code>c('Depends', 'Imports', 'LinkingTo', 'Suggests', 'Enhances')</code>. </p> <p>Only supported if <code>lib</code> is of length one (or missing), so it is unambiguous where to install the dependent packages.  If this is not the case it is ignored, with a warning. </p> <p>The default, <code>NA</code>, means <code>c('Depends', 'Imports', 'LinkingTo')</code>. </p> <p><code>TRUE</code> means to use <code>c('Depends', 'Imports', 'LinkingTo', 'Suggests')</code> for <code>pkgs</code> and <code>c('Depends', 'Imports', 'LinkingTo')</code> for added dependencies: this installs all the packages needed to run <code>pkgs</code>, their examples, tests and vignettes (if the package author specified them correctly). </p> <p>In all of these, <code>'LinkingTo'</code> is omitted for binary packages. </p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character, indicating the type of package to download and install.  Will be <code>'source'</code> except on Windows and some macOS builds: see the section on ‘Binary packages’ for those. </p> </td> </tr> <tr valign='top'> <td><code>configure.args</code></td> <td><br /><p>(Used only for source installs.) A character vector or a named list. If a character vector with no names is supplied, the elements are concatenated into a single string (separated by a space) and used as the value for the <span class='option'>--configure-args</span> flag in the call to <code>R CMD INSTALL</code>.  If the character vector has names these are assumed to identify values for <span class='option'>--configure-args</span> for individual packages.  This allows one to specify settings for an entire collection of packages which will be used if any of those packages are to be installed.  (These settings can therefore be re-used and act as default settings.) </p> <p>A named list can be used also to the same effect, and that allows multi-element character strings for each package which are concatenated to a single string to be used as the value for <span class='option'>--configure-args</span>. </p> </td> </tr> <tr valign='top'> <td><code>configure.vars</code></td> <td><br /><p>(Used only for source installs.) Analogous to <code>configure.args</code> for flag <span class='option'>--configure-vars</span>, which is used to set environment variables for the <code>configure</code> run. </p> </td> </tr> <tr valign='top'> <td><code>clean</code></td> <td> <p>a logical value indicating whether to add the <span class='option'>--clean</span> flag to the call to <code>R CMD INSTALL</code>. This is sometimes used to perform additional operations at the end of the package installation in addition to removing intermediate files. </p> </td> </tr> <tr valign='top'> <td><code>Ncpus</code></td> <td> <p>the number of parallel processes to use for a parallel install of more than one source package.  Values greater than one are supported if the <code>make</code> command specified by <code>Sys.getenv('MAKE', 'make')</code> accepts argument <code>-k -j<br />     <var>Ncpus</var></code>. </p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td><br /><p>a logical indicating if some “progress report” should be given. </p> </td> </tr> <tr valign='top'> <td><code>libs_only</code></td> <td><br /><p>a logical value: should the <span class='option'>--libs-only</span> option be used to install only additional sub-architectures for source installs?  (See also <code>INSTALL_opts</code>.)  This can also be used on Windows to install just the DLL(s) from a binary package, e.g. to add 64-bit DLLs to a 32-bit install. </p> </td> </tr> <tr valign='top'> <td><code>INSTALL_opts</code></td> <td><br /><p>an optional character vector of additional option(s) to be passed to <code>R CMD INSTALL</code> for a source package install.  E.g., <code>c('--html', '--no-multiarch')</code>. </p> <p>Can also be a named list of character vectors to be used as additional options, with names the respective package names. </p> </td> </tr> <tr valign='top'> <td><code>quiet</code></td> <td><br /><p>logical: if true, reduce the amount of output. </p> </td> </tr> <tr valign='top'> <td><code>keep_outputs</code></td> <td><br /><p>a logical: if true, keep the outputs from installing source packages in the current working directory, with the names of the output files the package names with ‘<span class='file'>.out</span>’ appended.  Alternatively, a character string giving the directory in which to save the outputs. Ignored when installing from local files. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td><br /><p>Arguments to be passed to <code>download.file</code> or to the functions for binary installs on macOS and Windows (which accept an argument <code>'lock'</code>: see the section on ‘Locking’). </p> </td> </tr> </table> "	FALSE
"installed.packages"	"utils"	"Find Installed Packages"	"<p>Find (or retrieve) details of all packages installed in the specified libraries. </p>"	"<pre>installed.packages(lib.loc = NULL, priority = NULL,<br />                    noCache = FALSE, fields = NULL,<br />                    subarch = .Platform$r_arch) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>lib.loc</code></td> <td><br /><p>character vector describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees to search through, or <code>NULL</code> for all known trees (see <code>.libPaths</code>). </p> </td> </tr> <tr valign='top'> <td><code>priority</code></td> <td><br /><p>character vector or <code>NULL</code> (default).  If non-null, used to select packages; <code>'high'</code> is equivalent to <code>c('base', 'recommended')</code>.  To select all packages without an assigned priority use <code>priority = 'NA'</code>. </p> </td> </tr> <tr valign='top'> <td><code>noCache</code></td> <td> <p>Do not use cached information, nor cache it.</p> </td> </tr> <tr valign='top'> <td><code>fields</code></td> <td> <p>a character vector giving the fields to extract from each package's <code>DESCRIPTION</code> file in addition to the default ones, or <code>NULL</code> (default).  Unavailable fields result in <code>NA</code> values.</p> </td> </tr> <tr valign='top'> <td><code>subarch</code></td> <td> <p>character string or <code>NULL</code>.  If non-null and non-empty, used to select packages which are installed for that sub-architecture. </p> </td> </tr> </table> "	FALSE
"isS3method"	"utils"	"Is 'method' the Name of an S3 Method?"	"<p>Checks if <code>method</code> is the name of a valid / registered S3 method.  Alternatively, when <code>f</code> and <code>class</code> are specified, it is checked if <code>f</code> is the name of an S3 generic function and <code>paste(f, class, sep='.')</code> is a valid S3 method. </p>"	"<pre>isS3method(method, f, class, envir = parent.frame()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>method</code></td> <td> <p>a character string, typically of the form <code>'&lt;fn&gt;.&lt;class&gt;'</code>.  If omitted, <code>f</code> and <code>class</code> have to be specified instead.</p> </td> </tr> <tr valign='top'> <td><code>f</code></td> <td> <p>optional character string, typically specifying an S3 generic function.  Used, when <code>method</code> is not specified.</p> </td> </tr> <tr valign='top'> <td><code>class</code></td> <td> <p>optional character string, typically specifying an S3 class name.  Used, when <code>method</code> is not specified.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the <code>environment</code> in which the method and its generic are searched first, as in <code>getS3method()</code>.</p> </td> </tr> </table> "	FALSE
"recover"	"utils"	"Browsing after an Error"	"<p>This function allows the user to browse directly on any of the currently active function calls, and is suitable as an error option. The expression <code>options(error = recover)</code> will make this the error option. </p>"	"<pre>recover() </pre>"	NA	FALSE
"LINK"	"utils"	"Create Executable Programs"	"<p>Front-end for creating executable programs. </p>"	"<pre>R CMD LINK [options] linkcmd </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>linkcmd</code></td> <td> <p>a list of commands to link together suitable object files (include library objects) to create the executable program.</p> </td> </tr> <tr valign='top'> <td><code>options</code></td> <td> <p>further options to control the linking, or for obtaining information about usage and version.</p> </td> </tr> </table> "	FALSE
"localeToCharset"	"utils"	"Select a Suitable Encoding Name from a Locale Name"	"<p>This functions aims to find a suitable coding for the locale named, by default the current locale, and if it is a UTF-8 locale a suitable single-byte encoding. </p>"	"<pre>localeToCharset(locale = Sys.getlocale('LC_CTYPE')) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>locale</code></td> <td> <p>character string naming a locale.</p> </td> </tr></table> "	FALSE
"ls_str"	"utils"	"List Objects and their Structure"	"<p><code>ls.str</code> and <code>lsf.str</code> are variations of <code>ls</code> applying <code>str()</code> to each matched name: see section Value. </p>"	"<pre>ls.str(pos = -1, name, envir, all.names = FALSE,<br />        pattern, mode = 'any')<br />lsf.str(pos = -1, envir, ...)<br />## S3 method for class 'ls_str' print(x, max.level = 1, give.attr = FALSE, ...,<br />       digits = max(1, getOption('str')$digits.d)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pos</code></td> <td> <p>integer indicating <code>search</code> path position, or <code>-1</code> for the current environment.</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>optional name indicating <code>search</code> path position, see <code>ls</code>.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>environment to use, see <code>ls</code>.</p> </td> </tr> <tr valign='top'> <td><code>all.names</code></td> <td> <p>logical indicating if names which begin with a <code>.</code> are omitted; see <code>ls</code>.</p> </td> </tr> <tr valign='top'> <td><code>pattern</code></td> <td> <p>a regular expression passed to <code>ls</code>. Only names matching <code>pattern</code> are considered.</p> </td> </tr> <tr valign='top'> <td><code>max.level</code></td> <td> <p>maximal level of nesting which is applied for displaying nested structures, e.g., a list containing sub lists. Default 1: Display only the first nested level.</p> </td> </tr> <tr valign='top'> <td><code>give.attr</code></td> <td> <p>logical; if <code>TRUE</code> (default), show attributes as sub structures.</p> </td> </tr> <tr valign='top'> <td><code>mode</code></td> <td> <p>character specifying the <code>mode</code> of objects to consider.  Passed to <code>exists</code> and <code>get</code>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'ls_str'</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to pass.  <code>lsf.str</code> passes them to <code>ls.str</code> which passes them on to <code>ls</code>.  The (non-exported) print method <code>print.ls_str</code> passes them to <code>str</code>.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>the number of significant digits to use for printing.</p> </td> </tr> </table> "	FALSE
"maintainer"	"utils"	"Show Package Maintainer"	"<p>Show the name and email address of the maintainer of a package. </p>"	"<pre>maintainer(pkg) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>pkg</code></td> <td> <p>Character string.  The name of a single package.</p> </td> </tr></table> "	FALSE
"make.packages.html"	"utils"	"Update HTML Package List"	"<p>Re-create the HTML list of packages. </p>"	"<pre>make.packages.html(lib.loc = .libPaths(), temp = FALSE,<br />                    verbose = TRUE, docdir = R.home('doc')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>character vector.  List of libraries to be included.</p> </td> </tr> <tr valign='top'> <td><code>temp</code></td> <td> <p>logical: should the package indices be created in a temporary location for use by the HTTP server?</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>logical.  If true, print out a message. </p> </td> </tr> <tr valign='top'> <td><code>docdir</code></td> <td> <p>If <code>temp</code> is false, directory in whose ‘<span class='file'>html</span>’ directory the ‘<span class='file'>packages.html</span>’ file is to be created/updated.</p> </td> </tr> </table> "	FALSE
"make.socket"	"utils"	"Create a Socket Connection"	"<p>With <code>server = FALSE</code> attempts to open a client socket to the specified port and host.  With <code>server = TRUE</code> the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> process listens on the specified port for a connection and then returns a server socket.  It is a good idea to use <code>on.exit</code> to ensure that a socket is closed, as you only get 64 of them. </p>"	"<pre>make.socket(host = 'localhost', port, fail = TRUE, server = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>host</code></td> <td> <p>name of remote host</p> </td> </tr> <tr valign='top'> <td><code>port</code></td> <td> <p>port to connect to/listen on</p> </td> </tr> <tr valign='top'> <td><code>fail</code></td> <td> <p>failure to connect is an error?</p> </td> </tr> <tr valign='top'> <td><code>server</code></td> <td> <p>a server socket?</p> </td> </tr> </table> "	FALSE
"memory.size"	"utils"	"Report on Memory Allocation"	"<p><code>memory.size</code> and <code>memory.limit</code> are used to manage the total memory allocation on Windows.  On other platforms these are stubs which report infinity with a warning. </p>"	"<pre>memory.size(max = FALSE)<br />memory.limit(size = NA) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>max</code></td> <td> <p>logical. If true the maximum amount of memory obtained from the OS is reported, otherwise the amount currently in use.</p> </td> </tr> <tr valign='top'> <td><code>size</code></td> <td> <p>numeric. If <code>NA</code> report the memory size, otherwise request a new limit, in Mb.</p> </td> </tr> </table> "	FALSE
"menu"	"utils"	"Menu Interaction Function"	"<p><code>menu</code> presents the user with a menu of choices labelled from 1 to the number of choices.  To exit without choosing an item one can select <span class='samp'>0</span>. </p>"	"<pre>menu(choices, graphics = FALSE, title = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>choices</code></td> <td> <p>a character vector of choices</p> </td> </tr> <tr valign='top'> <td><code>graphics</code></td> <td> <p>a logical indicating whether a graphics menu should be used if available.</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>a character string to be used as the title of the menu. <code>NULL</code> is also accepted.</p> </td> </tr> </table> "	FALSE
"methods"	"utils"	"List Methods for S3 Generic Functions or Classes"	"<p>List all available methods for a S3 and S4 generic function, or all methods for an S3 or S4 class. </p>"	"<pre>methods(generic.function, class) .S3methods(generic.function, class, envir=parent.frame())<br />## S3 method for class 'MethodsFunction' print(x, byclass = attr(x, 'byclass'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>generic.function</code></td> <td> <p>a generic function, or a character string naming a generic function.</p> </td> </tr> <tr valign='top'> <td><code>class</code></td> <td> <p>a symbol or character string naming a class: only used if <code>generic.function</code> is not supplied.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the environment in which to look for the definition of the generic function, when the generic function is passed as a character string.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>typically the result of <code>methods(..)</code>, an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object of  class <code>'MethodsFunction'</code>, see ‘Value’ below.</p> </td> </tr> <tr valign='top'> <td><code>byclass</code></td> <td> <p>an optional <code>logical</code> allowing to override the <code>'byclass'</code> attribute determining how the result is printed, see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>potentially further arguments passed to and from methods; unused currently.</p> </td> </tr> </table> "	FALSE
"modifyList"	"utils"	"Recursively Modify Elements of a List"	"<p>Modifies a possibly nested list recursively by changing a subset of elements at each level to match a second list. </p>"	"<pre>modifyList(x, val, keep.null = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A named <code>list</code>, possibly empty.</p> </td> </tr> <tr valign='top'> <td><code>val</code></td> <td> <p>A named list with components to replace corresponding components in <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>keep.null</code></td> <td> <p> If <code>TRUE</code>, <code>NULL</code> elements in <code>val</code> become <code>NULL</code> elements in <code>x</code>.  Otherwise, the corresponding element, if present, is deleted from <code>x</code>. </p> </td> </tr> </table> "	FALSE
"update.packages"	"utils"	"Compare Installed Packages with CRAN-like Repositories"	"<p><code>old.packages</code> indicates packages which have a (suitable) later version on the repositories whereas <code>update.packages</code> offers to download and install such packages. </p> <p><code>new.packages</code> looks for (suitable) packages on the repositories that are not already installed, and optionally offers them for installation. </p>"	"<pre>update.packages(lib.loc = NULL, repos = getOption('repos'),<br />                 contriburl = contrib.url(repos, type),<br />                 method, instlib = NULL,<br />                 ask = TRUE, available = NULL,<br />                 oldPkgs = NULL, ..., checkBuilt = FALSE,<br />                 type = getOption('pkgType'))<br />old.packages(lib.loc = NULL, repos = getOption('repos'),<br />              contriburl = contrib.url(repos, type),<br />              instPkgs = installed.packages(lib.loc = lib.loc),<br />              method, available = NULL, checkBuilt = FALSE,<br />              type = getOption('pkgType'))<br />new.packages(lib.loc = NULL, repos = getOption('repos'),<br />              contriburl = contrib.url(repos, type),<br />              instPkgs = installed.packages(lib.loc = lib.loc),<br />              method, available = NULL, ask = FALSE, ...,<br />              type = getOption('pkgType')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>character vector describing the location of R library trees to search through (and update packages therein), or <code>NULL</code> for all known trees (see <code>.libPaths</code>).</p> </td> </tr> <tr valign='top'> <td><code>repos</code></td> <td><br /><p>character vector, the base URL(s) of the repositories to use, e.g., the URL of a CRAN mirror such as <code>'https://cloud.r-project.org'</code>. </p> </td> </tr> <tr valign='top'> <td><code>contriburl</code></td> <td> <p>URL(s) of the contrib sections of the repositories.  Use this argument if your repository is incomplete.  Overrides argument <code>repos</code>. Incompatible with <code>type = 'both'</code>. </p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>Download method, see <code>download.file</code>. Unused if a non-<code>NULL</code> <code>available</code> is supplied.</p> </td> </tr> <tr valign='top'> <td><code>instlib</code></td> <td> <p>character string giving the library directory where to install the packages.</p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td> <p>logical indicating whether to ask the user to select packages before they are downloaded and installed, or the character string <code>'graphics'</code>, which brings up a widget to allow the user to (de-)select from the list of packages which could be updated. (The latter value only works on systems with a GUI version of <code>select.list</code>, and is otherwise equivalent to <code>ask = TRUE</code>.) </p> </td> </tr> <tr valign='top'> <td><code>available</code></td> <td><br /><p>an object as returned by <code>available.packages</code> listing packages available at the repositories, or <code>NULL</code> which makes an internal call to <code>available.packages</code>. Incompatible with <code>type = 'both'</code>. </p> </td> </tr> <tr valign='top'> <td><code>checkBuilt</code></td> <td> <p>If <code>TRUE</code>, a package built under an earlier major.minor version of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> (e.g., <code>3.1</code>) is considered to be ‘old’.</p> </td> </tr> <tr valign='top'> <td><code>oldPkgs</code></td> <td><br /><p>if specified as non-NULL, <code>update.packages()</code> only considers these packages for updating. This may be a character vector of package names or a matrix as returned by <code>old.packages</code>. </p> </td> </tr> <tr valign='top'> <td><code>instPkgs</code></td> <td><br /><p>by default all installed packages, <code>installed.packages(lib.loc = lib.loc)</code>.  A subset can be specified; currently this must be in the same (character matrix) format as returned by <code>installed.packages()</code>. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td><br /><p>Arguments such as <code>destdir</code> and <code>dependencies</code> to be passed to <code>install.packages</code>. </p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character, indicating the type of package to download and install.  See <code>install.packages</code>. </p> </td> </tr> </table> "	FALSE
"news"	"utils"	"Build and Query R or Package News Information"	"<p>Build and query the news data base for <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> or add-on packages. </p>"	"<pre>news(query, package = 'R', lib.loc = NULL, format = NULL,<br />      reader = NULL, db = NULL)<br />## S3 method for class 'news_db' print(x, doBrowse = interactive(),<br />       browser = getOption('browser'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>query</code></td> <td> <p>an expression for selecting news entries</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>a character string giving the name of an installed add-on package, or <code>'R'</code>.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector of directory names of R libraries, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.</p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p>Not yet used.</p> </td> </tr> <tr valign='top'> <td><code>reader</code></td> <td> <p>Not yet used.</p> </td> </tr> <tr valign='top'> <td><code>db, x</code></td> <td> <p>a news db obtained from <code>news()</code>.</p> </td> </tr> <tr valign='top'> <td><code>doBrowse</code></td> <td> <p>logical specifying that the news should be opened in the browser (by <code>browseURL</code>, accessible as via <code>help.start</code>) instead of printed to the console.</p> </td> </tr> <tr valign='top'> <td><code>browser</code></td> <td> <p>the browser to be used, see <code>browseURL</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>potentially further arguments passed to <code>print()</code>.</p> </td> </tr> </table> "	FALSE
"nsl"	"utils"	"Look up the IP Address by Hostname"	"<p>Interface to <code>gethostbyname</code>. </p>"	"<pre>nsl(hostname) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>hostname</code></td> <td> <p>the name of the host.</p> </td> </tr></table> "	FALSE
"package.skeleton"	"utils"	"Create a Skeleton for a New Source Package"	"<p><code>package.skeleton</code> automates some of the setup for a new source package.  It creates directories, saves functions, data, and R code files to appropriate places, and creates skeleton help files and a ‘<span class='file'>Read-and-delete-me</span>’ file describing further steps in packaging. </p>"	"<pre>package.skeleton(name = 'anRpackage', list,<br />                  environment = .GlobalEnv,<br />                  path = '.', force = FALSE,<br />                  code_files = character()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p>character string: the package name and directory name for your package.</p> </td> </tr> <tr valign='top'> <td><code>list</code></td> <td> <p>character vector naming the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects to put in the package.  Usually, at most one of <code>list</code>, <code>environment</code>, or <code>code_files</code> will be supplied.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>environment</code></td> <td> <p>an environment where objects are looked for.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>path</code></td> <td> <p>path to put the package directory in.</p> </td> </tr> <tr valign='top'> <td><code>force</code></td> <td> <p>If <code>FALSE</code> will not overwrite an existing directory.</p> </td> </tr> <tr valign='top'> <td><code>code_files</code></td> <td> <p>a character vector with the paths to R code files to build the package around.  See ‘Details’.</p> </td> </tr> </table> "	FALSE
"packageDescription"	"utils"	"Package Description"	"<p>Parses and returns the ‘<span class='file'>DESCRIPTION</span>’ file of a package. </p>"	"<pre>packageDescription(pkg, lib.loc = NULL, fields = NULL,<br />                    drop = TRUE, encoding = '') packageVersion(pkg, lib.loc = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pkg</code></td> <td> <p>a character string with the package name.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector of directory names of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> libraries, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.  If the default is used, the loaded packages and namespaces are searched before the libraries.</p> </td> </tr> <tr valign='top'> <td><code>fields</code></td> <td> <p>a character vector giving the tags of fields to return (if other fields occur in the file they are ignored).</p> </td> </tr> <tr valign='top'> <td><code>drop</code></td> <td> <p>If <code>TRUE</code> and the length of <code>fields</code> is 1, then a single character string with the value of the respective field is returned instead of an object of class <code>'packageDescription'</code>.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>If there is an <code>Encoding</code> field, to what encoding should re-encoding be attempted?  If <code>NA</code>, no re-encoding.  The other values are as used by <code>iconv</code>, so the default <code>''</code> indicates the encoding of the current locale.</p> </td> </tr> </table> "	FALSE
"packageName"	"utils"	"Find package associated with an environment."	"<p>Many environments are associated with a package; this function attempts to determine that package. </p>"	"<pre>packageName(env = parent.frame()) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>env</code></td> <td><br /><p>The environment whose name we seek. </p> </td> </tr></table> "	FALSE
"packageStatus"	"utils"	"Package Management Tools"	"<p>Summarize information about installed packages and packages available at various repositories, and automatically upgrade outdated packages. </p>"	"<pre>packageStatus(lib.loc = NULL, repositories = NULL, method,<br />               type = getOption('pkgType'))<br />## S3 method for class 'packageStatus' summary(object, ...)<br />## S3 method for class 'packageStatus' update(object, lib.loc = levels(object$inst$LibPath),<br />        repositories = levels(object$avail$Repository), ...)<br />## S3 method for class 'packageStatus' upgrade(object, ask = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees to search through, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.</p> </td> </tr> <tr valign='top'> <td><code>repositories</code></td> <td> <p>a character vector of URLs describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> package repositories on the Internet or on the local machine.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>Download method, see <code>download.file</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>type of package distribution: see <code>install.packages</code>.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>an object of class <code>'packageStatus'</code> as returned by <code>packageStatus</code>.</p> </td> </tr> <tr valign='top'> <td><code>ask</code></td> <td> <p>if <code>TRUE</code>, the user is prompted which packages should be upgraded and which not.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>currently not used.</p> </td> </tr> </table> "	FALSE
"page"	"utils"	"Invoke a Pager on an R Object"	"<p>Displays a representation of the object named by <code>x</code> in a pager <em>via</em> <code>file.show</code>. </p>"	"<pre>page(x, method = c('dput', 'print'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>An <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, or a character string naming an object.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>The default method is to dump the object <em>via</em> <code>dput</code>.  An alternative is to use <code>print</code> and capture the output to be shown in the pager.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments for <code>dput</code>, <code>print</code> or <code>file.show</code> (such as <code>title</code>).</p> </td> </tr> </table> "	FALSE
"toLatex"	"utils"	"Converting R Objects to BibTeX or LaTeX"	"<p>These methods convert <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects to character vectors with BibTeX or LaTeX markup. </p>"	"<pre>toBibtex(object, ...) toLatex(object, ...) ## S3 method for class 'Bibtex' print(x, prefix = '', ...) ## S3 method for class 'Latex' print(x, prefix = '', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>object of a class for which a <code>toBibtex</code> or <code>toLatex</code> method exists.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>object of class <code>'Bibtex'</code> or <code>'Latex'</code>.</p> </td> </tr> <tr valign='top'> <td><code>prefix</code></td> <td> <p>a character string which is printed at the beginning of each line, mostly used to insert whitespace for indentation.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>in the print methods, passed to <code>writeLines</code>.</p> </td> </tr> </table> "	FALSE
"sessionInfo"	"utils"	"Collect Information About the Current R Session"	"<p>Print version information about <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>, the OS and attached or loaded packages. </p>"	"<pre>sessionInfo(package = NULL) ## S3 method for class 'sessionInfo' print(x, locale = TRUE, ...) ## S3 method for class 'sessionInfo' toLatex(object, locale = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>package</code></td> <td> <p>a character vector naming installed packages, or <code>NULL</code> (the default) meaning all attached packages.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'sessionInfo'</code>.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>an object of class <code>'sessionInfo'</code>.</p> </td> </tr> <tr valign='top'> <td><code>locale</code></td> <td> <p>show locale information?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>currently not used.</p> </td> </tr> </table> "	FALSE
"process.events"	"utils"	"Trigger event handling"	"<p>R front ends like the Windows GUI handle key presses and mouse clicks through “events” generated by the OS. These are processed automatically by R at intervals during computations, but in some cases it may be desirable to trigger immediate event handling.  The <code>process.events</code> function does that. </p>"	"<pre>process.events() </pre>"	NA	FALSE
"prompt"	"utils"	"Produce Prototype of an R Documentation File"	"<p>Facilitate the constructing of files documenting <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects. </p>"	"<pre>prompt(object, filename = NULL, name = NULL, ...)<br />## Default S3 method: prompt(object, filename = NULL, name = NULL,<br />        force.function = FALSE, ...)<br />## S3 method for class 'data.frame' prompt(object, filename = NULL, name = NULL, ...)<br />promptImport(object, filename = NULL, name = NULL,  <br />	importedFrom = NULL, importPage = name, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically a function for the default method.  Can be <code>missing</code> when <code>name</code> is specified.</p> </td> </tr> <tr valign='top'> <td><code>filename</code></td> <td> <p>usually, a connection or a character string giving the name of the file to which the documentation shell should be written. The default corresponds to a file whose name is <code>name</code> followed by <code>'.Rd'</code>.  Can also be <code>NA</code> (see below).</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>a character string specifying the name of the object.</p> </td> </tr> <tr valign='top'> <td><code>force.function</code></td> <td> <p>a logical.  If <code>TRUE</code>, treat <code>object</code> as function in any case.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> <tr valign='top'> <td><code>importedFrom</code></td> <td> <p>a character string naming the package from which <code>object</code> was imported.  Defaults to the environment of <code>object</code> if <code>object</code> is a function.</p> </td> </tr> <tr valign='top'> <td><code>importPage</code></td> <td> <p>a character string naming the help page in the package from which <code>object</code> was imported.</p> </td> </tr> </table> "	FALSE
"promptData"	"utils"	"Generate Outline Documentation for a Data Set"	"<p>Generates a shell of documentation for a data set. </p>"	"<pre>promptData(object, filename = NULL, name = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object to be documented as a data set.</p> </td> </tr> <tr valign='top'> <td><code>filename</code></td> <td> <p>usually, a connection or a character string giving the name of the file to which the documentation shell should be written. The default corresponds to a file whose name is <code>name</code> followed by <code>'.Rd'</code>.  Can also be <code>NA</code> (see below).</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>a character string specifying the name of the object.</p> </td> </tr> </table> "	FALSE
"promptPackage"	"utils"	"Generate a Shell for Documentation of a Package"	"<p>Generates a shell of documentation for an installed or source package. </p>"	"<pre>promptPackage(package, lib.loc = NULL, filename = NULL,<br />               name = NULL, final = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>package</code></td> <td> <p>a <code>character</code> string with the name of an <em>installed</em> or <em>source</em> package to be documented.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees to search through, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known.  For a source package this should specify the parent directory of the package's sources.</p> </td> </tr> <tr valign='top'> <td><code>filename</code></td> <td> <p>usually, a connection or a character string giving the name of the file to which the documentation shell should be written. The default corresponds to a file whose name is <code>name</code> followed by <code>'.Rd'</code>.  Can also be <code>NA</code> (see below).</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>a character string specifying the name of the help topic, typically of the form <span class='samp'>&lt;pkg&gt;-package</span>.</p> </td> </tr> <tr valign='top'> <td><code>final</code></td> <td> <p>a logical value indicating whether to attempt to create a usable version of the help topic, rather than just a shell.</p> </td> </tr> </table> "	FALSE
"Question"	"utils"	"Documentation Shortcuts"	"<p>These functions provide access to documentation. Documentation on a topic with name <code>name</code> (typically, an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object or a data set) can be displayed by either <code>help('name')</code> or <code>?name</code>. </p>"	"<pre>?topic<br />type?topic </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>topic</code></td> <td> <p>Usually, a name or character string specifying the topic for which help is sought. </p> <p>Alternatively, a function call to ask for documentation on a corresponding S4 method: see the section on S4 method documentation. The calls <code><var>pkg</var>::<var>topic</var></code> and <code><var>pkg</var>:::<var>topic</var></code> are treated specially, and look for help on <code>topic</code> in package <span class='pkg'><var>pkg</var></span>. </p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the special type of documentation to use for this topic; for example, if the type is <code>class</code>, documentation is provided for the class with name <code>topic</code>. See the Section ‘S4 Method Documentation’ for the uses of <code>type</code> to get help on formal methods, including <code>methods?<var>function</var></code> and <code>method?<var>call</var></code>. </p> </td> </tr> </table> "	FALSE
"read.DIF"	"utils"	"Data Input from Spreadsheet"	"<p>Reads a file in Data Interchange Format (DIF) and creates a data frame from it.  DIF is a format for data matrices such as single spreadsheets. </p>"	"<pre>read.DIF(file, header = FALSE,<br />          dec = '.', numerals = c('allow.loss', 'warn.loss', 'no.loss'),<br />          row.names, col.names, as.is = !stringsAsFactors,<br />          na.strings = 'NA', colClasses = NA, nrows = -1,<br />          skip = 0, check.names = TRUE, blank.lines.skip = TRUE,<br />          stringsAsFactors = default.stringsAsFactors(),<br />          transpose = FALSE, fileEncoding = '') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>the name of the file which the data are to be read from, or a connection, or a complete URL. </p> <p>The name <code>'clipboard'</code> may also be used on Windows, in which case <code>read.DIF('clipboard')</code> will look for a DIF format entry in the Windows clipboard. </p> </td> </tr> <tr valign='top'> <td><code>header</code></td> <td> <p>a logical value indicating whether the spreadsheet contains the names of the variables as its first line.  If missing, the value is determined from the file format: <code>header</code> is set to <code>TRUE</code> if and only if the first row contains only character values and the top left cell is empty.</p> </td> </tr> <tr valign='top'> <td><code>dec</code></td> <td> <p>the character used in the file for decimal points.</p> </td> </tr> <tr valign='top'> <td><code>numerals</code></td> <td> <p>string indicating how to convert numbers whose conversion to double precision would lose accuracy, see <code>type.convert</code>.</p> </td> </tr> <tr valign='top'> <td><code>row.names</code></td> <td> <p>a vector of row names.  This can be a vector giving the actual row names, or a single number giving the column of the table which contains the row names, or character string giving the name of the table column containing the row names. </p> <p>If there is a header and the first row contains one fewer field than the number of columns, the first column in the input is used for the row names.  Otherwise if <code>row.names</code> is missing, the rows are numbered. </p> <p>Using <code>row.names = NULL</code> forces row numbering. </p> </td> </tr> <tr valign='top'> <td><code>col.names</code></td> <td> <p>a vector of optional names for the variables. The default is to use <code>'V'</code> followed by the column number.</p> </td> </tr> <tr valign='top'> <td><code>as.is</code></td> <td> <p>the default behavior of <code>read.DIF</code> is to convert character variables to factors.  The variable <code>as.is</code> controls the conversion of columns not otherwise specified by <code>colClasses</code>. Its value is either a vector of logicals (values are recycled if necessary), or a vector of numeric or character indices which specify which columns should not be converted to factors. </p> <p>Note: In releases prior to <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> 2.12.1, cells marked as being of character type were converted to logical, numeric or complex using <code>type.convert</code> as in <code>read.table</code>. </p> <p>Note: to suppress all conversions including those of numeric columns, set <code>colClasses = 'character'</code>. </p> <p>Note that <code>as.is</code> is specified per column (not per variable) and so includes the column of row names (if any) and any columns to be skipped. </p> </td> </tr> <tr valign='top'> <td><code>na.strings</code></td> <td> <p>a character vector of strings which are to be interpreted as <code>NA</code> values.  Blank fields are also considered to be missing values in logical, integer, numeric and complex fields.</p> </td> </tr> <tr valign='top'> <td><code>colClasses</code></td> <td> <p>character.  A vector of classes to be assumed for the columns.  Recycled as necessary, or if the character vector is named, unspecified values are taken to be <code>NA</code>. </p> <p>Possible values are <code>NA</code> (when <code>type.convert</code> is used), <code>'NULL'</code> (when the column is skipped), one of the atomic vector classes (logical, integer, numeric, complex, character, raw), or <code>'factor'</code>, <code>'Date'</code> or <code>'POSIXct'</code>.  Otherwise there needs to be an <code>as</code> method (from package <span class='pkg'>methods</span>) for conversion from <code>'character'</code> to the specified formal class. </p> <p>Note that <code>colClasses</code> is specified per column (not per variable) and so includes the column of row names (if any). </p> </td> </tr> <tr valign='top'> <td><code>nrows</code></td> <td> <p>the maximum number of rows to read in.  Negative values are ignored.</p> </td> </tr> <tr valign='top'> <td><code>skip</code></td> <td> <p>the number of lines of the data file to skip before beginning to read data.</p> </td> </tr> <tr valign='top'> <td><code>check.names</code></td> <td> <p>logical.  If <code>TRUE</code> then the names of the variables in the data frame are checked to ensure that they are syntactically valid variable names.  If necessary they are adjusted (by <code>make.names</code>) so that they are, and also to ensure that there are no duplicates.</p> </td> </tr> <tr valign='top'> <td><code>blank.lines.skip</code></td> <td> <p>logical: if <code>TRUE</code> blank lines in the input are ignored.</p> </td> </tr> <tr valign='top'> <td><code>stringsAsFactors</code></td> <td> <p>logical: should character vectors be converted to factors?</p> </td> </tr> <tr valign='top'> <td><code>transpose</code></td> <td> <p>logical, indicating if the row and column interpretation should be transposed.  Microsoft's Excel has been known to produce (non-standard conforming) DIF files which would need <code>transpose = TRUE</code> to be read correctly.</p> </td> </tr> <tr valign='top'> <td><code>fileEncoding</code></td> <td> <p>character string: if non-empty declares the encoding used on a file (not a connection or clipboard) so the character data can be re-encoded.  See the ‘Encoding’ section of the help for <code>file</code>, the ‘R Data Import/Export Manual’ and ‘Note’.</p> </td> </tr> </table> "	FALSE
"read.fortran"	"utils"	"Read Fixed-Format Data in a Fortran-like Style"	"<p>Read fixed-format data files using Fortran-style format specifications. </p>"	"<pre>read.fortran(file, format, ..., as.is = TRUE, colClasses = NA) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>File or connection to read from.</p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p>Character vector or list of vectors.  See ‘Details’ below.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Other arguments for <code>read.fwf</code>.</p> </td> </tr> <tr valign='top'> <td><code>as.is</code></td> <td> <p>Keep characters as characters?</p> </td> </tr> <tr valign='top'> <td><code>colClasses</code></td> <td> <p>Variable classes to override defaults. See <code>read.table</code> for details.</p> </td> </tr> </table> "	FALSE
"read.fwf"	"utils"	"Read Fixed Width Format Files"	"<p>Read a table of <b>f</b>ixed <b>w</b>idth <b>f</b>ormatted data into a <code>data.frame</code>. </p>"	"<pre>read.fwf(file, widths, header = FALSE, sep = '\t',<br />          skip = 0, row.names, col.names, n = -1,<br />          buffersize = 2000, fileEncoding = '', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td><br /><p>the name of the file which the data are to be read from. </p> <p>Alternatively, <code>file</code> can be a connection, which will be opened if necessary, and if so closed at the end of the function call. </p> </td> </tr> <tr valign='top'> <td><code>widths</code></td> <td> <p>integer vector, giving the widths of the fixed-width fields (of one line), or list of integer vectors giving widths for multiline records.</p> </td> </tr> <tr valign='top'> <td><code>header</code></td> <td> <p>a logical value indicating whether the file contains the names of the variables as its first line.  If present, the names must be delimited by <code>sep</code>.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>character; the separator used internally; should be a character that does not occur in the file (except in the header).</p> </td> </tr> <tr valign='top'> <td><code>skip</code></td> <td> <p>number of initial lines to skip; see <code>read.table</code>.</p> </td> </tr> <tr valign='top'> <td><code>row.names</code></td> <td> <p>see <code>read.table</code>.</p> </td> </tr> <tr valign='top'> <td><code>col.names</code></td> <td> <p>see <code>read.table</code>.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>the maximum number of records (lines) to be read, defaulting to no limit.</p> </td> </tr> <tr valign='top'> <td><code>buffersize</code></td> <td> <p>Maximum number of lines to read at one time</p> </td> </tr> <tr valign='top'> <td><code>fileEncoding</code></td> <td> <p>character string: if non-empty declares the encoding used on a file (not a connection) so the character data can be re-encoded.  See the ‘Encoding’ section of the help for <code>file</code>, the ‘R Data Import/Export Manual’ and ‘Note’.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to <code>read.table</code>.  Useful such arguments include <code>as.is</code>, <code>na.strings</code>, <code>colClasses</code> and <code>strip.white</code>.</p> </td> </tr> </table> "	FALSE
"read.socket"	"utils"	" Read from or Write to a Socket"	"<p><code>read.socket</code> reads a string from the specified socket, <code>write.socket</code> writes to the specified socket.  There is very little error checking done by either. </p>"	"<pre>read.socket(socket, maxlen = 256L, loop = FALSE) write.socket(socket, string) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>socket</code></td> <td> <p>a socket object.</p> </td> </tr> <tr valign='top'> <td><code>maxlen</code></td> <td> <p>maximum length (in bytes) of string to read.</p> </td> </tr> <tr valign='top'> <td><code>loop</code></td> <td> <p>wait for ever if there is nothing to read?</p> </td> </tr> <tr valign='top'> <td><code>string</code></td> <td> <p>string to write to socket.</p> </td> </tr> </table> "	FALSE
"read.table"	"utils"	"Data Input"	"<p>Reads a file in table format and creates a data frame from it, with cases corresponding to lines and variables to fields in the file. </p>"	"<pre>read.table(file, header = FALSE, sep = '', quote = '\''',<br />            dec = '.', numerals = c('allow.loss', 'warn.loss', 'no.loss'),<br />            row.names, col.names, as.is = !stringsAsFactors,<br />            na.strings = 'NA', colClasses = NA, nrows = -1,<br />            skip = 0, check.names = TRUE, fill = !blank.lines.skip,<br />            strip.white = FALSE, blank.lines.skip = TRUE,<br />            comment.char = '#',<br />            allowEscapes = FALSE, flush = FALSE,<br />            stringsAsFactors = default.stringsAsFactors(),<br />            fileEncoding = '', encoding = 'unknown', text, skipNul = FALSE)<br />read.csv(file, header = TRUE, sep = ',', quote = '\'',<br />          dec = '.', fill = TRUE, comment.char = '', ...)<br />read.csv2(file, header = TRUE, sep = ';', quote = '\'',<br />           dec = ',', fill = TRUE, comment.char = '', ...)<br />read.delim(file, header = TRUE, sep = '\t', quote = '\'',<br />            dec = '.', fill = TRUE, comment.char = '', ...)<br />read.delim2(file, header = TRUE, sep = '\t', quote = '\'',<br />             dec = ',', fill = TRUE, comment.char = '', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>the name of the file which the data are to be read from. Each row of the table appears as one line of the file.  If it does not contain an <em>absolute</em> path, the file name is <em>relative</em> to the current working directory, <code>getwd()</code>. Tilde-expansion is performed where supported. This can be a compressed file (see <code>file</code>). </p> <p>Alternatively, <code>file</code> can be a readable text-mode connection (which will be opened for reading if necessary, and if so <code>close</code>d (and hence destroyed) at the end of the function call).  (If <code>stdin()</code> is used, the prompts for lines may be somewhat confusing.  Terminate input with a blank line or an EOF signal, <code>Ctrl-D</code> on Unix and <code>Ctrl-Z</code> on Windows.  Any pushback on <code>stdin()</code> will be cleared before return.) </p> <p><code>file</code> can also be a complete URL.  (For the supported URL schemes, see the ‘URLs’ section of the help for <code>url</code>.) </p> </td> </tr> <tr valign='top'> <td><code>header</code></td> <td> <p>a logical value indicating whether the file contains the names of the variables as its first line.  If missing, the value is determined from the file format: <code>header</code> is set to <code>TRUE</code> if and only if the first row contains one fewer field than the number of columns.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>the field separator character.  Values on each line of the file are separated by this character.  If <code>sep = ''</code> (the default for <code>read.table</code>) the separator is ‘white space’, that is one or more spaces, tabs, newlines or carriage returns.</p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>the set of quoting characters. To disable quoting altogether, use <code>quote = ''</code>.  See <code>scan</code> for the behaviour on quotes embedded in quotes.  Quoting is only considered for columns read as character, which is all of them unless <code>colClasses</code> is specified.</p> </td> </tr> <tr valign='top'> <td><code>dec</code></td> <td> <p>the character used in the file for decimal points.</p> </td> </tr> <tr valign='top'> <td><code>numerals</code></td> <td> <p>string indicating how to convert numbers whose conversion to double precision would lose accuracy, see <code>type.convert</code>. Can be abbreviated.  (Applies also to complex-number inputs.)</p> </td> </tr> <tr valign='top'> <td><code>row.names</code></td> <td> <p>a vector of row names.  This can be a vector giving the actual row names, or a single number giving the column of the table which contains the row names, or character string giving the name of the table column containing the row names. </p> <p>If there is a header and the first row contains one fewer field than the number of columns, the first column in the input is used for the row names.  Otherwise if <code>row.names</code> is missing, the rows are numbered. </p> <p>Using <code>row.names = NULL</code> forces row numbering. Missing or <code>NULL</code> <code>row.names</code> generate row names that are considered to be ‘automatic’ (and not preserved by <code>as.matrix</code>). </p> </td> </tr> <tr valign='top'> <td><code>col.names</code></td> <td> <p>a vector of optional names for the variables. The default is to use <code>'V'</code> followed by the column number.</p> </td> </tr> <tr valign='top'> <td><code>as.is</code></td> <td> <p>the default behavior of <code>read.table</code> is to convert character variables (which are not converted to logical, numeric or complex) to factors.  The variable <code>as.is</code> controls the conversion of columns not otherwise specified by <code>colClasses</code>. Its value is either a vector of logicals (values are recycled if necessary), or a vector of numeric or character indices which specify which columns should not be converted to factors. </p> <p>Note: to suppress all conversions including those of numeric columns, set <code>colClasses = 'character'</code>. </p> <p>Note that <code>as.is</code> is specified per column (not per variable) and so includes the column of row names (if any) and any columns to be skipped. </p> </td> </tr> <tr valign='top'> <td><code>na.strings</code></td> <td> <p>a character vector of strings which are to be interpreted as <code>NA</code> values.  Blank fields are also considered to be missing values in logical, integer, numeric and complex fields.  Note that the test happens <em>after</em>  white space is stripped from the input, so <code>na.strings</code>  values may need their own white space stripped in advance.</p> </td> </tr> <tr valign='top'> <td><code>colClasses</code></td> <td> <p>character.  A vector of classes to be assumed for the columns.  If unnamed, recycled as necessary.  If named, names are matched with unspecified values being taken to be <code>NA</code>. </p> <p>Possible values are <code>NA</code> (the default, when <code>type.convert</code> is used), <code>'NULL'</code> (when the column is skipped), one of the atomic vector classes (logical, integer, numeric, complex, character, raw), or <code>'factor'</code>, <code>'Date'</code> or <code>'POSIXct'</code>.  Otherwise there needs to be an <code>as</code> method (from package <span class='pkg'>methods</span>) for conversion from <code>'character'</code> to the specified formal class. </p> <p>Note that <code>colClasses</code> is specified per column (not per variable) and so includes the column of row names (if any). </p> </td> </tr> <tr valign='top'> <td><code>nrows</code></td> <td> <p>integer: the maximum number of rows to read in.  Negative and other invalid values are ignored.</p> </td> </tr> <tr valign='top'> <td><code>skip</code></td> <td> <p>integer: the number of lines of the data file to skip before beginning to read data.</p> </td> </tr> <tr valign='top'> <td><code>check.names</code></td> <td> <p>logical.  If <code>TRUE</code> then the names of the variables in the data frame are checked to ensure that they are syntactically valid variable names.  If necessary they are adjusted (by <code>make.names</code>) so that they are, and also to ensure that there are no duplicates.</p> </td> </tr> <tr valign='top'> <td><code>fill</code></td> <td> <p>logical. If <code>TRUE</code> then in case the rows have unequal length, blank fields are implicitly added.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>strip.white</code></td> <td> <p>logical. Used only when <code>sep</code> has been specified, and allows the stripping of leading and trailing white space from unquoted <code>character</code> fields (<code>numeric</code> fields are always stripped).  See <code>scan</code> for further details (including the exact meaning of ‘white space’), remembering that the columns may include the row names.</p> </td> </tr> <tr valign='top'> <td><code>blank.lines.skip</code></td> <td> <p>logical: if <code>TRUE</code> blank lines in the input are ignored.</p> </td> </tr> <tr valign='top'> <td><code>comment.char</code></td> <td> <p>character: a character vector of length one containing a single character or an empty string.  Use <code>''</code> to turn off the interpretation of comments altogether.</p> </td> </tr> <tr valign='top'> <td><code>allowEscapes</code></td> <td> <p>logical.  Should C-style escapes such as <span class='samp'>\n</span> be processed or read verbatim (the default)?<br />   Note that if not within quotes these could be interpreted as a delimiter (but not as a comment character).  For more details see <code>scan</code>.</p> </td> </tr> <tr valign='top'> <td><code>flush</code></td> <td> <p>logical: if <code>TRUE</code>, <code>scan</code> will flush to the end of the line after reading the last of the fields requested. This allows putting comments after the last field.</p> </td> </tr> <tr valign='top'> <td><code>stringsAsFactors</code></td> <td> <p>logical: should character vectors be converted to factors?  Note that this is overridden by <code>as.is</code> and <code>colClasses</code>, both of which allow finer control.</p> </td> </tr> <tr valign='top'> <td><code>fileEncoding</code></td> <td> <p>character string: if non-empty declares the encoding used on a file (not a connection) so the character data can be re-encoded.  See the ‘Encoding’ section of the help for <code>file</code>, the ‘R Data Import/Export Manual’ and ‘Note’. </p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>encoding to be assumed for input strings.  It is used to mark character strings as known to be in Latin-1 or UTF-8 (see <code>Encoding</code>): it is not used to re-encode the input, but allows <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> to handle encoded strings in their native encoding (if one of those two).  See ‘Value’ and ‘Note’. </p> </td> </tr> <tr valign='top'> <td><code>text</code></td> <td> <p>character string: if <code>file</code> is not supplied and this is, then data are read from the value of <code>text</code> via a text connection. Notice that a literal string can be used to include (small) data sets within R code. </p> </td> </tr> <tr valign='top'> <td><code>skipNul</code></td> <td> <p>logical: should nuls be skipped?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to be passed to <code>read.table</code>.</p> </td> </tr> </table> "	FALSE
"REMOVE"	"utils"	"Remove Add-on Packages"	"<p>Utility for removing add-on packages.</p>"	"<pre>R CMD REMOVE [options] [-l lib] pkgs </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pkgs</code></td> <td> <p>a space-separated list with the names of the packages to be removed.</p> </td> </tr> <tr valign='top'> <td><code>lib</code></td> <td> <p>the path name of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library tree to remove from.  May be absolute or relative.  Also accepted in the form <span class='samp'>--library=lib</span>.</p> </td> </tr> <tr valign='top'> <td><code>options</code></td> <td> <p>further options for help or version.</p> </td> </tr> </table> "	FALSE
"remove.packages"	"utils"	"Remove Installed Packages"	"<p>Removes installed packages/bundles and updates index information as necessary. </p>"	"<pre>remove.packages(pkgs, lib) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pkgs</code></td> <td> <p>a character vector with the names of the packages to be removed.</p> </td> </tr> <tr valign='top'> <td><code>lib</code></td> <td> <p>a character vector giving the library directories to remove the packages from.  If missing, defaults to the first element in <code>.libPaths()</code>.</p> </td> </tr> </table> "	FALSE
"removeSource"	"utils"	"Remove Stored Source from a Function."	"<p>When <code>options('keep.source')</code> is <code>TRUE</code>, a copy of the original source code to a function is stored with it.  This function removes that copy. </p>"	"<pre>removeSource(fn) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>fn</code></td> <td><br /><p>A single function from which to remove the source. </p> </td> </tr></table> "	FALSE
"RHOME"	"utils"	"R Home Directory"	"<p>Returns the location of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> home directory, which is the root of the installed <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> tree. </p>"	"<pre>R RHOME </pre>"	NA	FALSE
"Rprof"	"utils"	"Enable Profiling of R's Execution"	"<p>Enable or disable profiling of the execution of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expressions. </p>"	"<pre>Rprof(filename = 'Rprof.out', append = FALSE, interval = 0.02,<br />        memory.profiling = FALSE, gc.profiling = FALSE,<br />         line.profiling = FALSE, numfiles = 100L, bufsize = 10000L) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>filename</code></td> <td><br /><p>The file to be used for recording the profiling results. Set to <code>NULL</code> or <code>''</code> to disable profiling. </p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td><br /><p>logical: should the file be over-written or appended to? </p> </td> </tr> <tr valign='top'> <td><code>interval</code></td> <td><br /><p>real: time interval between samples. </p> </td> </tr> <tr valign='top'> <td><code>memory.profiling</code></td> <td> <p>logical: write memory use information to the file?</p> </td> </tr> <tr valign='top'> <td><code>gc.profiling</code></td> <td> <p>logical:  record whether GC is running?</p> </td> </tr> <tr valign='top'> <td><code>line.profiling</code></td> <td> <p>logical:  write line locations to the file?</p> </td> </tr> <tr valign='top'> <td><code>numfiles, bufsize</code></td> <td> <p>integers: line profiling memory allocation</p> </td> </tr> </table> "	FALSE
"Rprofmem"	"utils"	"Enable Profiling of R's Memory Use"	"<p>Enable or disable reporting of memory allocation in R. </p>"	"<pre>Rprofmem(filename = 'Rprofmem.out', append = FALSE, threshold = 0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>filename</code></td> <td> <p>The file to be used for recording the memory allocations. Set to <code>NULL</code> or <code>''</code> to disable reporting. </p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td> <p>logical: should the file be over-written or appended to? </p> </td> </tr> <tr valign='top'> <td><code>threshold</code></td> <td> <p>numeric: allocations on R's 'large vector' heap larger than this number of bytes will be reported. </p> </td> </tr> </table> "	FALSE
"Rscript"	"utils"	"Scripting Front-End for R"	"<p>This is an alternative front end for use in <span class='samp'>#!</span> scripts and other scripting applications. </p>"	"<pre>Rscript [options] [-e expr [-e expr2 ...] | file] [args] </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>options</code></td> <td> <p>a list of options, all beginning with <span class='samp'>--</span>.  These can be any of the options of the standard <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> front-end, and also those described in the details.</p> </td> </tr> <tr valign='top'> <td><code>expr, expr2</code></td> <td> <p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expression(s), properly quoted.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>the name of a file containing <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> commands.  <span class='samp'>-</span> indicates ‘<span class='file'>stdin</span>’.</p> </td> </tr> <tr valign='top'> <td><code>args</code></td> <td> <p>arguments to be passed to the script in <code>file</code>.</p> </td> </tr> </table> "	FALSE
"RShowDoc"	"utils"	"Show R Manuals and Other Documentation"	"<p>Utility function to find and display <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> documentation. </p>"	"<pre>RShowDoc(what, type = c('pdf', 'html', 'txt'), package) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>what</code></td> <td> <p>a character string: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>an optional character string giving the preferred format. Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>an optional character string specifying the name of a package within which to look for documentation.</p> </td> </tr> </table> "	FALSE
"RSiteSearch"	"utils"	"Search for Key Words or Phrases in Documentation"	"<p>Search for key words or phrases in help pages, vignettes or task views, using the search engine at <a href='http://search.r-project.org'>http://search.r-project.org</a> and view them in a web browser. </p>"	"<pre>RSiteSearch(string,<br />             restrict = c('functions', 'vignettes', 'views'),<br />             format = c('normal', 'short'),<br />             sortby = c('score', 'date:late', 'date:early',<br />                        'subject', 'subject:descending',<br />                        'from', 'from:descending',<br />                        'size', 'size:descending'),<br />             matchesPerPage = 20) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>string</code></td> <td> <p>A character string specifying word(s) or a phrase to search.  If the words are to be searched as one entity, enclose all words in braces (see the first example).</p> </td> </tr> <tr valign='top'> <td><code>restrict</code></td> <td> <p>a character vector, typically of length greater than one. Values can be abbreviated. Possible areas to search in: <code>functions</code> for help pages, <code>views</code> for task views and <code>vignettes</code> for package vignettes.</p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p><code>normal</code> or <code>short</code> (no excerpts); can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>sortby</code></td> <td> <p>character string (can be abbreviated) indicating how to sort the search results:<br> (<code>score</code>, <code>date:late</code> for sorting by date with latest results first, <code>date:early</code> for earliest first, <code>subject</code> for subject in alphabetical order, <code>subject:descending</code> for reverse alphabetical order, <code>from</code> or <code>from:descending</code> for sender (when applicable), <code>size</code> or <code>size:descending</code> for size.)</p> </td> </tr> <tr valign='top'> <td><code>matchesPerPage</code></td> <td> <p>How many items to show per page.</p> </td> </tr> </table> "	FALSE
"rtags"	"utils"	" An Etags-like Tagging Utility for R "	"<p><code>rtags</code> provides etags-like indexing capabilities for R code, using R's own parser. </p>"	"<pre>rtags(path = '.', pattern = '\\.[RrSs]$',<br />       recursive = FALSE,<br />       src = list.files(path = path, pattern = pattern,<br />                        full.names = TRUE,<br />                        recursive = recursive),<br />       keep.re = NULL,<br />       ofile = '', append = FALSE,<br />       verbose = getOption('verbose')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>path, pattern, recursive</code></td> <td><br /><p>Arguments passed on to <code>list.files</code> to determine the files to be tagged.  By default, these are all files with extension <code>.R</code>, <code>.r</code>, <code>.S</code>, and <code>.s</code> in the current directory.  These arguments are ignored if <code>src</code> is specified. </p> </td> </tr> <tr valign='top'> <td><code>src</code></td> <td><br /><p>A vector of file names to be indexed. </p> </td> </tr> <tr valign='top'> <td><code>keep.re</code></td> <td> <p> A regular expression further restricting <code>src</code> (the files to be indexed).  For example, specifying <code>keep.re = '/R/[^/]*\\.R$'</code> will only retain files with extension <code>.R</code> inside a directory named <code>R</code>. </p> </td> </tr> <tr valign='top'> <td><code>ofile</code></td> <td> <p> Passed on to <code>cat</code> as the <code>file</code> argument; typically the output file where the tags will be written (<code>'TAGS'</code> by convention).  By default, the output is written to the R console (unless redirected). </p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td> <p> Logical, indicating whether the output should overwrite an existing file, or append to it. </p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p> Logical.  If <code>TRUE</code>, file names are echoed to the R console as they are processed. </p> </td> </tr> </table> "	FALSE
"Rtangle"	"utils"	"R Driver for Stangle"	"<p>A driver for <code>Stangle</code> that extracts <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> code chunks. </p>"	"<pre>Rtangle() RtangleSetup(file, syntax, output = NULL, annotate = TRUE,<br />              split = FALSE, quiet = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>Name of Sweave source file.  See the description of the corresponding argument of <code>Sweave</code>.</p> </td> </tr> <tr valign='top'> <td><code>syntax</code></td> <td> <p>An object of class <code>SweaveSyntax</code>.</p> </td> </tr> <tr valign='top'> <td><code>output</code></td> <td> <p>Name of output file used unless <code>split = TRUE</code>: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>annotate</code></td> <td> <p>By default, code chunks are separated by comment lines specifying the names and numbers of the code chunks.  If <code>FALSE</code> the decorating comments are omitted.</p> </td> </tr> <tr valign='top'> <td><code>split</code></td> <td> <p>Split output into a file for each code chunk?</p> </td> </tr> <tr valign='top'> <td><code>quiet</code></td> <td> <p>If <code>TRUE</code> all progress messages are suppressed.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Additional named arguments setting defaults for further options.</p> </td> </tr> </table> "	FALSE
"RweaveLatex"	"utils"	"R/LaTeX Driver for Sweave"	"<p>A driver for <code>Sweave</code> that translates R code chunks in LaTeX files. </p>"	"<pre>RweaveLatex()<br />RweaveLatexSetup(file, syntax, output = NULL, quiet = FALSE,<br />                  debug = FALSE, stylepath, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>Name of Sweave source file.  See the description of the corresponding argument of <code>Sweave</code>.</p> </td> </tr> <tr valign='top'> <td><code>syntax</code></td> <td> <p>An object of class <code>SweaveSyntax</code>.</p> </td> </tr> <tr valign='top'> <td><code>output</code></td> <td> <p>Name of output file.  The default is to remove extension ‘<span class='file'>.nw</span>’, ‘<span class='file'>.Rnw</span>’ or ‘<span class='file'>.Snw</span>’ and to add extension ‘<span class='file'>.tex</span>’.  Any directory paths in <code>file</code> are also removed such that the output is created in the current working directory.</p> </td> </tr> <tr valign='top'> <td><code>quiet</code></td> <td> <p>If <code>TRUE</code> all progress messages are suppressed.</p> </td> </tr> <tr valign='top'> <td><code>debug</code></td> <td> <p>If <code>TRUE</code>, input and output of all code chunks is copied to the console.</p> </td> </tr> <tr valign='top'> <td><code>stylepath</code></td> <td> <p>See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>named values for the options listed in ‘Supported Options’.</p> </td> </tr> </table> "	FALSE
"select.list"	"utils"	"Select Items from a List"	"<p>Select item(s) from a character vector. </p>"	"<pre>select.list(choices, preselect = NULL, multiple = FALSE,<br />             title = NULL, graphics = getOption('menu.graphics')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>choices</code></td> <td> <p>a character vector of items.</p> </td> </tr> <tr valign='top'> <td><code>preselect</code></td> <td> <p>a character vector, or <code>NULL</code>.  If non-null and if the string(s) appear in the list, the item(s) are selected initially.</p> </td> </tr> <tr valign='top'> <td><code>multiple</code></td> <td> <p>logical: can more than one item be selected?</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>optional character string for window title, or <code>NULL</code> for no title.</p> </td> </tr> <tr valign='top'> <td><code>graphics</code></td> <td> <p>logical: should a graphical widget be used?</p> </td> </tr> </table> "	FALSE
"setRepositories"	"utils"	"Select Package Repositories"	"<p>Interact with the user to choose the package repositories to be used. </p>"	"<pre>setRepositories(graphics = getOption('menu.graphics'),<br />                 ind = NULL, addURLs = character()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>graphics</code></td> <td> <p>Logical. If true, use a graphical list: on Windows or macOS GUI use a list box, and on a Unix-alike if <span class='pkg'>tcltk</span> and an X server are available, use Tk widget. Otherwise use a text <code>menu</code>.</p> </td> </tr> <tr valign='top'> <td><code>ind</code></td> <td> <p><code>NULL</code> or a vector of integer indices, which have the same effect as if they were entered at the prompt for <code>graphics = FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>addURLs</code></td> <td> <p>A character vector of additional URLs: it is often helpful to use a named vector.</p> </td> </tr> </table> "	FALSE
"SHLIB"	"utils"	"Build Shared Object/DLL for Dynamic Loading"	"<p>Compile the given source files and then link all specified object files into a shared object aka DLL which can be loaded into <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> using <code>dyn.load</code> or <code>library.dynam</code>. </p>"	"<pre>R CMD SHLIB [options] [-o dllname] files </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>files</code></td> <td> <p>a list specifying the object files to be included in the shared object/DLL.  You can also include the name of source files (for which the object files are automagically made from their sources) and library linking commands. </p> </td> </tr> <tr valign='top'> <td><code>dllname</code></td> <td> <p>the full name of the shared object/DLL to be built, including the extension (typically ‘<span class='file'>.so</span>’ on Unix systems, and ‘<span class='file'>.dll</span>’ on Windows).  If not given, the basename of the object/DLL is taken from the basename of the first file.</p> </td> </tr> <tr valign='top'> <td><code>options</code></td> <td> <p>Further options to control the processing.  Use <code>R CMD SHLIB --help</code> for a current list. </p> </td> </tr> </table> "	FALSE
"stack"	"utils"	"Stack or Unstack Vectors from a Data Frame or List"	"<p>Stacking vectors concatenates multiple vectors into a single vector along with a factor indicating where each observation originated. Unstacking reverses this operation. </p>"	"<pre>stack(x, ...) ## Default S3 method: stack(x, ...) ## S3 method for class 'data.frame' stack(x, select, ...)<br />unstack(x, ...) ## Default S3 method: unstack(x, form, ...) ## S3 method for class 'data.frame' unstack(x, form, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a list or data frame to be stacked or unstacked.</p> </td> </tr> <tr valign='top'> <td><code>select</code></td> <td> <p>an expression, indicating which variable(s) to select from a data frame.</p> </td> </tr> <tr valign='top'> <td><code>form</code></td> <td> <p>a two-sided formula whose left side evaluates to the vector to be unstacked and whose right side evaluates to the indicator of the groups to create.  Defaults to <code>formula(x)</code> in the data frame method for <code>unstack</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"Sweave"	"utils"	"Automatic Generation of Reports"	"<p><code>Sweave</code> provides a flexible framework for mixing text and R/S code for automatic report generation.  The basic idea is to replace the code with its output, such that the final document only contains the text and the output of the statistical analysis: however, the source code can also be included. </p>"	"<pre>Sweave(file, driver = RweaveLatex(),<br />        syntax = getOption('SweaveSyntax'), encoding = '', ...)<br />Stangle(file, driver = Rtangle(),<br />         syntax = getOption('SweaveSyntax'), encoding = '', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>Path to Sweave source file.  Note that this can be supplied without the extension, but the function will only proceed if there is exactly one Sweave file in the directory whose basename matches <code>file</code>.</p> </td> </tr> <tr valign='top'> <td><code>driver</code></td> <td> <p>The actual workhorse, see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>syntax</code></td> <td> <p><code>NULL</code> or an object of class <code>SweaveSyntax</code> or a character string with its name. See the section ‘Syntax Definition’.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>The default encoding to assume for <code>file</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments passed to the driver's setup function: see section ‘Drivers’, <code>RweaveLatex</code> and <code>Rtangle</code>.</p> </td> </tr> </table> "	FALSE
"str"	"utils"	"Compactly Display the Structure of an Arbitrary R Object"	"<p>Compactly display the internal <b>str</b>ucture of an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, a diagnostic function and an alternative to <code>summary</code> (and to some extent, <code>dput</code>).  Ideally, only one line for each ‘basic’ structure is displayed.  It is especially well suited to compactly display the (abbreviated) contents of (possibly nested) lists.  The idea is to give reasonable output for <b>any</b> <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.  It calls <code>args</code> for (non-primitive) function objects. </p> <p><code>strOptions()</code> is a convenience function for setting <code>options(str = .)</code>, see the examples. </p>"	"<pre>str(object, ...)<br />## S3 method for class 'data.frame' str(object, ...)<br />## Default S3 method: str(object, max.level = NA,<br />     vec.len  = strO$vec.len, digits.d = strO$digits.d,<br />     nchar.max = 128, give.attr = TRUE,<br />     give.head = TRUE, give.length = give.head,<br />     width = getOption('width'), nest.lev = 0,<br />     indent.str = paste(rep.int(' ', max(0, nest.lev + 1)),<br />                        collapse = '..'),<br />     comp.str = '$ ', no.list = FALSE, envir = baseenv(),<br />     strict.width = strO$strict.width,<br />     formatNum = strO$formatNum, list.len = 99, ...)<br />strOptions(strict.width = 'no', digits.d = 3, vec.len = 4,<br />            formatNum = function(x, ...)<br />                        format(x, trim = TRUE, drop0trailing = TRUE, ...)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object about which you want to have some information.</p> </td> </tr> <tr valign='top'> <td><code>max.level</code></td> <td> <p>maximal level of nesting which is applied for displaying nested structures, e.g., a list containing sub lists. Default NA: Display all nesting levels.</p> </td> </tr> <tr valign='top'> <td><code>vec.len</code></td> <td> <p>numeric (&gt;= 0) indicating how many ‘first few’ elements are displayed of each vector.  The number is multiplied by different factors (from .5 to 3) depending on the kind of vector.  Defaults to the <code>vec.len</code> component of option <code>'str'</code> (see <code>options</code>) which defaults to 4.</p> </td> </tr> <tr valign='top'> <td><code>digits.d</code></td> <td> <p>number of digits for numerical components (as for <code>print</code>).  Defaults to the <code>digits.d</code> component of option <code>'str'</code> which defaults to 3.</p> </td> </tr> <tr valign='top'> <td><code>nchar.max</code></td> <td> <p>maximal number of characters to show for <code>character</code> strings.  Longer strings are truncated, see <code>longch</code> example below.</p> </td> </tr> <tr valign='top'> <td><code>give.attr</code></td> <td> <p>logical; if <code>TRUE</code> (default), show attributes as sub structures.</p> </td> </tr> <tr valign='top'> <td><code>give.length</code></td> <td> <p>logical; if <code>TRUE</code> (default), indicate length (as <code>[1:...]</code>).</p> </td> </tr> <tr valign='top'> <td><code>give.head</code></td> <td> <p>logical; if <code>TRUE</code> (default), give (possibly abbreviated) mode/class and length (as <code>&lt;type&gt;[1:...]</code>).</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>the page width to be used.  The default is the currently active <code>options('width')</code>; note that this has only a weak effect, unless <code>strict.width</code> is not <code>'no'</code>.</p> </td> </tr> <tr valign='top'> <td><code>nest.lev</code></td> <td> <p>current nesting level in the recursive calls to <code>str</code>.</p> </td> </tr> <tr valign='top'> <td><code>indent.str</code></td> <td> <p>the indentation string to use.</p> </td> </tr> <tr valign='top'> <td><code>comp.str</code></td> <td> <p>string to be used for separating list components.</p> </td> </tr> <tr valign='top'> <td><code>no.list</code></td> <td> <p>logical; if true, no ‘list of ...’ nor the class are printed.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the environment to be used for <em>promise</em> (see <code>delayedAssign</code>) objects only.</p> </td> </tr> <tr valign='top'> <td><code>strict.width</code></td> <td> <p>string indicating if the <code>width</code> argument's specification should be followed strictly, one of the values <code>c('no', 'cut', 'wrap')</code>, which can be abbreviated. Defaults to the <code>strict.width</code> component of option <code>'str'</code> (see <code>options</code>) which defaults to <code>'no'</code> for back compatibility reasons; <code>'wrap'</code> uses <code>strwrap(*, width = width)</code> whereas <code>'cut'</code> cuts directly to <code>width</code>.  Note that a small <code>vec.length</code> may be better than setting <code>strict.width = 'wrap'</code>.</p> </td> </tr> <tr valign='top'> <td><code>formatNum</code></td> <td> <p>a function such as <code>format</code> for formatting numeric vectors.  It defaults to the <code>formatNum</code> component of option <code>'str'</code>, see “Usage” of <code>strOptions()</code> above, which is almost back compatible to <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> &lt;= 2.7.x, however, using <code>formatC</code> may be slightly better.</p> </td> </tr> <tr valign='top'> <td><code>list.len</code></td> <td> <p>numeric; maximum number of list elements to display within a level.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>potential further arguments (required for Method/Generic reasons).</p> </td> </tr> </table> "	FALSE
"summaryRprof"	"utils"	"Summarise Output of R Sampling Profiler"	"<p>Summarise the output of the <code>Rprof</code> function to show the amount of time used by different <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> functions. </p>"	"<pre>summaryRprof(filename = 'Rprof.out', chunksize = 5000,<br />               memory = c('none', 'both', 'tseries', 'stats'),<br />               lines = c('hide', 'show', 'both'),<br />               index = 2, diff = TRUE, exclude = NULL,<br />               basenames = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>filename</code></td> <td> <p>Name of a file produced by <code>Rprof()</code>.</p> </td> </tr> <tr valign='top'> <td><code>chunksize</code></td> <td> <p>Number of lines to read at a time.</p> </td> </tr> <tr valign='top'> <td><code>memory</code></td> <td> <p>Summaries for memory information.  See ‘Memory profiling’ below.<br />   Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>lines</code></td> <td> <p>Summaries for line information.  See ‘Line profiling’ below.<br />   Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>index</code></td> <td> <p>How to summarize the stack trace for memory information.  See ‘Details’ below.</p> </td> </tr> <tr valign='top'> <td><code>diff</code></td> <td> <p>If <code>TRUE</code> memory summaries use change in memory rather than current memory.</p> </td> </tr> <tr valign='top'> <td><code>exclude</code></td> <td> <p>Functions to exclude when summarizing the stack trace for memory summaries.</p> </td> </tr> <tr valign='top'> <td><code>basenames</code></td> <td> <p>Number of components of the path to filenames to display.</p> </td> </tr> </table> "	FALSE
"SweaveSyntConv"	"utils"	"Convert Sweave Syntax"	"<p>This function converts the syntax of files in <code>Sweave</code> format to another Sweave syntax definition. </p>"	"<pre>SweaveSyntConv(file, syntax, output = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>Name of Sweave source file.</p> </td> </tr> <tr valign='top'> <td><code>syntax</code></td> <td> <p>An object of class <code>SweaveSyntax</code> or a character string with its name giving the target syntax to which the file is converted.</p> </td> </tr> <tr valign='top'> <td><code>output</code></td> <td> <p>Name of output file, default is to remove the extension from the input file and to add the default extension of the target syntax. Any directory names in <code>file</code> are also removed such that the output is created in the current working directory.</p> </td> </tr> </table> "	FALSE
"tar"	"utils"	"Create a Tar Archive"	"<p>Create a tar archive. </p>"	"<pre>tar(tarfile, files = NULL,<br />     compression = c('none', 'gzip', 'bzip2', 'xz'),<br />     compression_level = 6, tar = Sys.getenv('tar'),<br />     extra_flags = '') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>tarfile</code></td> <td> <p>The pathname of the tar file: tilde expansion (see <code>path.expand</code>) will be performed.  Alternatively, a connection that can be used for binary writes.</p> </td> </tr> <tr valign='top'> <td><code>files</code></td> <td> <p>A character vector of filepaths to be archived: the default is to archive all files under the current directory.</p> </td> </tr> <tr valign='top'> <td><code>compression</code></td> <td> <p>character string giving the type of compression to be used (default none).  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>compression_level</code></td> <td> <p>integer: the level of compression.  Only used for the internal method.</p> </td> </tr> <tr valign='top'> <td><code>tar</code></td> <td> <p>character string: the path to the command to be used.  If the command itself contains spaces it needs to be quoted (e.g., by <code>shQuote</code>) – but argument <code>tar</code> can also contain flags separated from the command by spaces.</p> </td> </tr> <tr valign='top'> <td><code>extra_flags</code></td> <td> <p>any extra flags for an external <code>tar</code>.</p> </td> </tr> </table> "	FALSE
"type.convert"	"utils"	"Type Conversion on Character Variables"	"<p>Convert a character vector to logical, integer, numeric, complex or factor as appropriate. </p>"	"<pre>type.convert(x, na.strings = 'NA', as.is = FALSE, dec = '.',<br />              numerals = c('allow.loss', 'warn.loss', 'no.loss')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector.</p> </td> </tr> <tr valign='top'> <td><code>na.strings</code></td> <td> <p>a vector of strings which are to be interpreted as <code>NA</code> values.  Blank fields are also considered to be missing values in logical, integer, numeric or complex vectors.</p> </td> </tr> <tr valign='top'> <td><code>as.is</code></td> <td> <p>logical.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>dec</code></td> <td> <p>the character to be assumed for decimal points.</p> </td> </tr> <tr valign='top'> <td><code>numerals</code></td> <td> <p>string indicating how to convert numbers whose conversion to double precision would lose accuracy, typically when <code>x</code> has more digits than can be stored in a <code>double</code>. Can be abbreviated.  Possible values are </p><br /><dl> <dt> <code>numerals = 'allow.loss'</code>, default:</dt> <dd> <p>the conversion happens with some accuracy loss.  This has been the only behavior of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> versions 3.0.3 and earlier.</p> </dd> <dt> <code>numerals = 'warn.loss'</code>:</dt> <dd> <p>a <code>warning</code> about accuracy loss is signalled and the conversion happens as with <code>numerals = 'allow.loss'</code>.</p> </dd> <dt> <code>numerals = 'no.loss'</code>:</dt> <dd> <p><code>x</code> is <em>not</em> converted to a number, but to a <code>factor</code> or left as character, depending on <code>as.is</code>.  This has been the only behavior of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> version 3.1.0.</p> </dd> </dl> </td> </tr> </table> "	FALSE
"untar"	"utils"	"Extract or List Tar Archives"	"<p>Extract files from or list the contents of a tar archive. </p>"	"<pre>untar(tarfile, files = NULL, list = FALSE, exdir = '.',<br />       compressed = NA, extras = NULL, verbose = FALSE,<br />       restore_times =  TRUE, tar = Sys.getenv('TAR')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>tarfile</code></td> <td> <p>The pathname of the tar file: tilde expansion (see <code>path.expand</code>) will be performed.  Alternatively, a connection that can be used for binary reads.</p> </td> </tr> <tr valign='top'> <td><code>files</code></td> <td> <p>A character vector of recorded filepaths to be extracted: the default is to extract all files.</p> </td> </tr> <tr valign='top'> <td><code>list</code></td> <td> <p>If <code>TRUE</code>, list the files (the equivalent of <code>tar -tf</code>).  Otherwise extract the files (the equivalent of <code>tar -xf</code>).</p> </td> </tr> <tr valign='top'> <td><code>exdir</code></td> <td> <p>The directory to extract files to (the equivalent of <code>tar -C</code>).  It will be created if necessary.</p> </td> </tr> <tr valign='top'> <td><code>compressed</code></td> <td> <p>logical or character string.  Values <code>'gzip'</code>, <code>'bzip2'</code> and <code>'xz'</code> select that form of compression (and may be abbreviated to the first letter).  <code>TRUE</code> indicates gzip compression, <code>FALSE</code> no known compression (but an external <code>tar</code> command may detect compression automagically), and <code>NA</code> (the default) indicates that the type is inferred from the file header.</p> </td> </tr> <tr valign='top'> <td><code>extras</code></td> <td> <p><code>NULL</code> or a character string: further command-line flags such as <span class='option'>-p</span> to be passed to an external <code>tar</code> program.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>logical: if true echo the command used.</p> </td> </tr> <tr valign='top'> <td><code>restore_times</code></td> <td> <p>logical.  If true (default) restore file modification times.  If false, the equivalent of the <span class='option'>-m</span> flag.  Times in tarballs are supposed to be in UTC, but tarballs have been submitted to CRAN with times in the future or far past: this argument allows such times to be discarded. </p> <p>Note that file times in a tarball are stored with a resolution of 1 second, and can only be restored to the resolution supported by the file system (which on a FAT system is 2 seconds). </p> </td> </tr> <tr valign='top'> <td><code>tar</code></td> <td> <p>character string: the path to the command to be used.  If the command itself contains spaces it needs to be quoted – but <code>tar</code> can also contain flags separated from the command by spaces.</p> </td> </tr> </table> "	FALSE
"unzip"	"utils"	"Extract or List Zip Archives"	"<p>Extract files from or list a zip archive. </p>"	"<pre>unzip(zipfile, files = NULL, list = FALSE, overwrite = TRUE,<br />       junkpaths = FALSE, exdir = '.', unzip = 'internal',<br />       setTimes = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>zipfile</code></td> <td> <p>The pathname of the zip file: tilde expansion (see <code>path.expand</code>) will be performed.</p> </td> </tr> <tr valign='top'> <td><code>files</code></td> <td> <p>A character vector of recorded filepaths to be extracted: the default is to extract all files.</p> </td> </tr> <tr valign='top'> <td><code>list</code></td> <td> <p>If <code>TRUE</code>, list the files and extract none.  The equivalent of <code>unzip -l</code>.</p> </td> </tr> <tr valign='top'> <td><code>overwrite</code></td> <td> <p>If <code>TRUE</code>, overwrite existing files, otherwise ignore such files.  The equivalent of <code>unzip -o</code>.</p> </td> </tr> <tr valign='top'> <td><code>junkpaths</code></td> <td> <p>If <code>TRUE</code>, use only the basename of the stored filepath when extracting.  The equivalent of <code>unzip -j</code>.</p> </td> </tr> <tr valign='top'> <td><code>exdir</code></td> <td> <p>The directory to extract files to (the equivalent of <code>unzip -d</code>).  It will be created if necessary.</p> </td> </tr> <tr valign='top'> <td><code>unzip</code></td> <td> <p>The method to be used.  An alternative is to use <code>getOption('unzip')</code>, which on a Unix-alike may be set to the path to a <code>unzip</code> program.</p> </td> </tr> <tr valign='top'> <td><code>setTimes</code></td> <td> <p>logical.  For the internal method only, should the file times be set based on the times in the zip file?  (NB: this applies to included files, not to directories.)</p> </td> </tr> </table> "	FALSE
"url.show"	"utils"	"Display a text URL"	"<p>Extension of <code>file.show</code> to display text files from a remote server. </p>"	"<pre>url.show(url, title = url, file = tempfile(),<br />          delete.file = TRUE, method, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>url</code></td> <td> <p>The URL to read from.</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>Title for the browser.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>File to copy to.</p> </td> </tr> <tr valign='top'> <td><code>delete.file</code></td> <td> <p>Delete the file afterwards?</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>File transfer method: see <code>download.file</code></p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Arguments to pass to <code>file.show</code>.</p> </td> </tr> </table> "	FALSE
"URLencode"	"utils"	"Encode or Decode a (partial) URL"	"<p>Functions to percent-encode or decode characters in URLs. </p>"	"<pre>URLencode(URL, reserved = FALSE, repeated = FALSE) URLdecode(URL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>URL</code></td> <td> <p>a character string.</p> </td> </tr> <tr valign='top'> <td><code>reserved</code></td> <td> <p>logical: should ‘reserved’ characters be encoded? See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>repeated</code></td> <td> <p>logical: should apparently already-encoded URLs be encoded again?</p> </td> </tr> </table> "	FALSE
"utils-deprecated"	"utils"	"Deprecated Functions in Package utils"	"<p>These functions are provided for compatibility with older versions of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> only, and may be defunct as soon as of the next release. </p>"	NA	NA	FALSE
"View"	"utils"	"Invoke a Data Viewer"	"<p>Invoke a spreadsheet-style data viewer on a matrix-like <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object. </p>"	"<pre>View(x, title) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object which can be coerced to a data frame with non-zero numbers of rows and columns.</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>title for viewer window.  Defaults to name of <code>x</code> prefixed by <code>Data:</code>.</p> </td> </tr> </table> "	FALSE
"write.table"	"utils"	"Data Output"	"<p><code>write.table</code> prints its required argument <code>x</code> (after converting it to a data frame if it is not one nor a matrix) to a file or connection. </p>"	"<pre>write.table(x, file = '', append = FALSE, quote = TRUE, sep = ' ',<br />             eol = '\n', na = 'NA', dec = '.', row.names = TRUE,<br />             col.names = TRUE, qmethod = c('escape', 'double'),<br />             fileEncoding = '')<br />write.csv(...) write.csv2(...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the object to be written, preferably a matrix or data frame. If not, it is attempted to coerce <code>x</code> to a data frame.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>either a character string naming a file or a connection open for writing.  <code>''</code> indicates output to the console.</p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td> <p>logical. Only relevant if <code>file</code> is a character string.  If <code>TRUE</code>, the output is appended to the file.  If <code>FALSE</code>, any existing file of the name is destroyed.</p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>a logical value (<code>TRUE</code> or <code>FALSE</code>) or a numeric vector.  If <code>TRUE</code>, any character or factor columns will be surrounded by double quotes.  If a numeric vector, its elements are taken as the indices of columns to quote.  In both cases, row and column names are quoted if they are written.  If <code>FALSE</code>, nothing is quoted.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>the field separator string.  Values within each row of <code>x</code> are separated by this string.</p> </td> </tr> <tr valign='top'> <td><code>eol</code></td> <td> <p>the character(s) to print at the end of each line (row). For example, <code>eol = '\r\n'</code> will produce Windows' line endings on a Unix-alike OS, and <code>eol = '\r'</code> will produce files as expected by Excel:mac 2004.</p> </td> </tr> <tr valign='top'> <td><code>na</code></td> <td> <p>the string to use for missing values in the data.</p> </td> </tr> <tr valign='top'> <td><code>dec</code></td> <td> <p>the string to use for decimal points in numeric or complex columns: must be a single character.</p> </td> </tr> <tr valign='top'> <td><code>row.names</code></td> <td> <p>either a logical value indicating whether the row names of <code>x</code> are to be written along with <code>x</code>, or a character vector of row names to be written.</p> </td> </tr> <tr valign='top'> <td><code>col.names</code></td> <td> <p>either a logical value indicating whether the column names of <code>x</code> are to be written along with <code>x</code>, or a character vector of column names to be written.  See the section on ‘CSV files’ for the meaning of <code>col.names = NA</code>.</p> </td> </tr> <tr valign='top'> <td><code>qmethod</code></td> <td> <p>a character string specifying how to deal with embedded double quote characters when quoting strings.  Must be one of <code>'escape'</code> (default for <code>write.table</code>), in which case the quote character is escaped in C style by a backslash, or <code>'double'</code> (default for <code>write.csv</code> and <code>write.csv2</code>), in which case it is doubled.  You can specify just the initial letter.</p> </td> </tr> <tr valign='top'> <td><code>fileEncoding</code></td> <td> <p>character string: if non-empty declares the encoding to be used on a file (not a connection) so the character data can be re-encoded as they are written.  See <code>file</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to <code>write.table</code>: <code>append</code>, <code>col.names</code>, <code>sep</code>, <code>dec</code> and <code>qmethod</code> cannot be altered. </p> </td> </tr> </table> "	FALSE
"zip"	"utils"	"Create Zip archives"	"<p>A wrapper for an external <code>zip</code> command to create zip archives. </p>"	"<pre>zip(zipfile, files, flags = '-r9X', extras = '',<br />     zip = Sys.getenv('R_ZIPCMD', 'zip')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>zipfile</code></td> <td> <p>The pathname of the zip file: tilde expansion (see <code>path.expand</code>) will be performed.</p> </td> </tr> <tr valign='top'> <td><code>files</code></td> <td> <p>A character vector of recorded filepaths to be included.</p> </td> </tr> <tr valign='top'> <td><code>flags</code></td> <td> <p>A character string of flags to be passed to the command: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>extras</code></td> <td> <p>An optional character vector: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>zip</code></td> <td> <p>A character string specifying the external command to be used.</p> </td> </tr> </table> "	FALSE
"methods-package"	"methods"	"Formal Methods and Classes"	"<p>Formally defined methods and classes for R objects, plus other programming tools, as described in the references. </p>"	NA	NA	FALSE
"refClass"	"methods"	"Objects With Fields Treated by Reference (OOP-style)"	"<p>The software described here allows packages to define <em>reference classes</em> that behave in the style of “OOP” languages such as Java and C++. This model for OOP differs from the functional model implemented by S4 (and S3) classes and methods, in which methods are defined for generic functions. Methods for reference classes are “encapsulated” in the class definition. </p> <p>Computations with objects from reference classes invoke methods on them and extract or set their fields, using  the <code>`$`</code> operator in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. The field and method computations potentially modify the object. All computations referring to the objects see the modifications, in contrast to the usual functional programming model in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p> <p>A call to <code>setRefClass</code> in the source code for a package defines the class and returns a generator object. Subsequent calls to the <code>$methods()</code>  method of the generator will define methods for the class. As with functional classes, if the class is exported from the package, it will be available when the package is loaded. </p> <p>Methods are <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> functions.  In their usual implementation, they refer to fields and other methods of the class directly by name. See the section on “Writing Reference Methods”. </p> <p>As with functional classes, reference classes can inherit from other reference classes via a <code>contains=</code> argument to <code>setRefClass</code>.  Fields and methods will be inherited, except where the new class overrides method definitions.  See the section on “Inheritance”. </p>"	"<pre>setRefClass(Class, fields = , contains = , methods =,<br />      where =, inheritPackage =, ...)<br />getRefClass(Class, where =) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>Class</code></td> <td><br /><p>character string name for the class. </p> <p>In the call to <code>getRefClass()</code> this argument can also be any object from the relevant class. </p> </td> </tr> <tr valign='top'> <td><code>fields</code></td> <td><br /><p>either a character vector of field names or a named list of the fields.  The resulting fields will be accessed with reference semantics (see the  section on “Reference Objects”).  If the argument is a list, each element of the list should usually be the character string name of a class, in which case the object in the field must be from that class or a subclass.  An alternative, but not generally recommended, is to supply an  <em>accessor function</em>; see the section on “Implementation” for accessor functions and the related internal mechanism. </p> <p>Note that fields are distinct from slots.  Reference classes should not define class-specific slots. See the note on slots in the “Implementation” section. </p> </td> </tr> <tr valign='top'> <td><code>contains</code></td> <td><br /><p>optional vector of superclasses for this class.  If a superclass is also a reference class, the fields and class-based methods will be inherited. </p> </td> </tr> <tr valign='top'> <td><code>methods</code></td> <td><br /><p>a named list of function definitions that can be invoked on objects from this class.  These can also be created by invoking the <code>$methods</code> method on the generator object returned.  See the section on “Writing Reference Methods” for details. </p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td><br /><p>for <code>setRefClass</code>, the environment in which to store the class definition.  Should be omitted in calls from a package's source code. </p> <p>For <code>getRefClass</code>, the environment from which to search for the definition.  If the package is not loaded or you need to be specific, use <code>asNamespace</code> with the package name. </p> </td> </tr> <tr valign='top'> <td><code>inheritPackage</code></td> <td><br /><p>Should objects from the new class inherit the package environment of a contained superclass?  Default <code>FALSE</code>.  See the Section “Inter-Package Superclasses and External Methods”. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td><br /><p>other arguments to be passed to <code>setClass</code>. </p> </td> </tr> </table> "	FALSE
"setOldClass"	"methods"	"Register Old-Style (S3) Classes and Inheritance"	"<p>Register an old-style (a.k.a. ‘S3’) class as a formally defined class. Simple usage will be of the form: </p> <p><code>setOldClass(Classes)</code> </p> <p>where <code>Classes</code> is the character vector that would be the <code>class</code> attribute of the S3 object. Calls to <code>setOldClass()</code> in the code for a package allow the class to be used as a slot in formal (S4) classes and in signatures for methods (see Methods_for_S3). Formal classes can also contain a registered S3 class (see S3Part for details). </p> <p>If the S3 class has a known set of attributes, an equivalent S4 class can be specified by <code>S4Class=</code> in the call to <code>setOldClass()</code>; see the section  “Known Attributes”. </p>"	"<pre>setOldClass(Classes, prototype, where, test = FALSE, S4Class) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>Classes</code></td> <td><br /><p>A character vector, giving the names for S3 classes, as they would appear on the right side of an assignment of the <code>class</code> attribute in S3 computations. </p> <p>In addition to S3 classes, an object type or other valid data part can be specified, if the S3 class is known to require its data to be of that form. </p> </td> </tr> <tr valign='top'> <td><code>S4Class</code></td> <td> <p> optionally, the class definition or the class name of an S4 class.  The new class will have all the slots and other properties of this class, plus any S3 inheritance implied by multiple names in the <code>Classes</code> argument.  See the section on “S3 classes with known attributes” below. </p> </td> </tr> <tr valign='top'> <td><code>prototype, where, test</code></td> <td> <p><em>These arguments are currently allowed, but not recommended in typical applications.</em> </p> <p><code>prototype</code>: An optional object to use as the prototype.  If the S3 class is not to be <code>VIRTUAL</code> (the default), the use of <code>S4Class=</code> is preferred.  </p> <p><code>where</code>: Where to store the class definitions. Should be the default (the package namespace) for normal use in an application package. </p> <p><code>test</code>: flag, if <code>TRUE</code>, arrange to test inheritance explicitly for each object, needed if the S3 class can have a different set of class strings, with the same first string. Such classes are inherently malformed, are rare, and should be avoided. </p> </td> </tr> </table> "	FALSE
"BasicClasses"	"methods"	"Classes Corresponding to Basic Data Types "	"<p>Formal classes exist corresponding to the basic R object types, allowing these types to be used in method signatures, as slots in class definitions, and to be extended by new classes.</p>"	"<pre>### The following are all basic vector classes. ### They can appear as class names in method signatures, ### in calls to as(), is(), and new(). 'character' 'complex' 'double' 'expression' 'integer' 'list' 'logical' 'numeric' 'single' 'raw'<br />### the class 'vector' ### is a virtual class, extended by all the above<br />### the class 'S4' ### is an object type for S4 objects that do not extend ### any of the basic vector classes.  It is a virtual class.<br />### The following are additional basic classes 'NULL'<br />     #  NULL objects 'function' #  function objects, including primitives 'externalptr' # raw external pointers for use in C code<br />'ANY'  # virtual classes used by the methods package itself 'VIRTUAL' 'missing'<br />'namedList' # the alternative to 'list' that preserves<br />             # the names attribute </pre>"	NA	FALSE
"S4groupGeneric"	"methods"	"S4 Group Generic Functions"	"<p>Methods can be defined for <em>group generic functions</em>.  Each group generic function has a number of <em>member</em> generic functions associated with it. </p> <p>Methods  defined for a group generic function cause the same method to be defined for each member of the group, but a method explicitly defined for a  member of the group takes precedence over a method defined, with the same signature, for the group generic. </p> <p>The functions shown in this documentation page all reside in the <span class='pkg'>methods</span> package, but the mechanism is available to any programmer, by calling <code>setGroupGeneric</code> (provided package <span class='pkg'>methods</span> is attached). </p>"	"<pre>## S4 group generics: Arith(e1, e2) Compare(e1, e2) Ops(e1, e2) Logic(e1, e2) Math(x) Math2(x, digits) Summary(x, ..., na.rm = FALSE) Complex(z) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, z, e1, e2</code></td> <td> <p>objects.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>number of digits to be used in <code>round</code> or <code>signif</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from methods.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical: should missing values be removed?</p> </td> </tr> </table> "	FALSE
"StructureClasses"	"methods"	"Classes Corresponding to Basic Structures"	"<p>The virtual class <code>structure</code> and classes that extend it are formal classes analogous to S language structures such as arrays and time-series. </p>"	"<pre>## The following class names can appear in method signatures, ## as the class in as() and is() expressions, and, except for ## the classes commented as VIRTUAL, in calls to new()<br />'matrix' 'array' 'ts'<br />'structure' ## VIRTUAL </pre>"	NA	FALSE
"as"	"methods"	"Force an Object to Belong to a Class"	NA	"<pre>as(object, Class, strict=TRUE, ext)<br />as(object, Class) &lt;- value<br /></pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>Class</code></td> <td> <p>the name of the class to which <code>object</code> should be coerced. </p> </td> </tr> <tr valign='top'> <td><code>strict</code></td> <td> <p>logical flag.  If <code>TRUE</code>, the returned object must be strictly from the target class (unless that class is a virtual class, in which case the object will be from the closest actual class, in particular the original object, if that class extends the virtual class directly). </p> <p>If <code>strict = FALSE</code>, any simple extension of the target class will be returned, without further change.  A simple extension is, roughly, one that just adds slots to an existing class.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>The value to use to modify <code>object</code> (see the discussion below).  You should supply an object with class <code>Class</code>; some coercion is done, but you're unwise to rely on it.</p> </td> </tr> <tr valign='top'> <td><code>ext</code></td> <td> <p>an optional object defining how <code>Class</code> is extended by the class of the object (as returned by <code>possibleExtends</code>). This argument is used internally; do not use it directly. </p> </td> </tr> </table> "	FALSE
"LanguageClasses"	"methods"	"Classes to Represent Unevaluated Language Objects "	"<p>  The virtual class <code>'language'</code> and the specific classes that extend it represent unevaluated objects, as produced for example by the parser or by functions such as <code>quote</code>. </p>"	"<pre>### each of these classes corresponds to an unevaluated object ### in the S language. ### The class name can appear in method signatures, ### and in a few other contexts (such as some calls to as()).<br />'(' '&lt;-' 'call' 'for' 'if' 'repeat' 'while' 'name' '{'<br />### Each of the classes above extends the virtual class 'language' </pre>"	NA	FALSE
"callGeneric"	"methods"	"Call the Current Generic Function from a Method"	"<p>A call to <code>callGeneric</code> can only appear inside a method definition.  It then results in a call to the current generic function.  The value of that call is the value of <code>callGeneric</code>. While it can be called from any method, it is useful and typically used in methods for group generic functions. </p>"	"<pre>callGeneric(...) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>...</code></td> <td><br /><p>Optionally, the arguments to the function in its next call. </p> <p>If no arguments are included in the call to <code>callGeneric</code>, the effect is to call the function with the current arguments. See the detailed description for what this really means. </p> </td> </tr></table> "	FALSE
"NextMethod"	"methods"	"Call an Inherited Method"	"<p>A call to <code>callNextMethod</code> can only appear inside a method definition.  It then results in a call to the first inherited method after the current method, with the arguments to the current method passed down to the next method.  The value of that method call is the value of <code>callNextMethod</code>. </p>"	"<pre>callNextMethod(...) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>...</code></td> <td><br /><p>Optionally, the arguments to the function in its next call (but note that the dispatch is as in the detailed description below; the arguments have no effect on selecting the next method.) </p> <p>If no arguments are included in the call to <code>callNextMethod</code>, the effect is to call the method with the current arguments. See the detailed description for what this really means. </p> <p>Calling with no arguments is often the natural way to use <code>callNextMethod</code>; see the examples. </p> </td> </tr></table> "	FALSE
"canCoerce"	"methods"	"Can an Object be Coerced to a Certain S4 Class?"	"<p>Test if an object can be coerced to a given S4 class. Maybe useful inside <code>if()</code> to ensure that calling <code>as(object, Class)</code> will find a method. </p>"	"<pre>canCoerce(object, Class) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically of a formal S4 class.</p> </td> </tr> <tr valign='top'> <td><code>Class</code></td> <td> <p>an S4 class (see <code>isClass</code>).</p> </td> </tr> </table> "	FALSE
"cbind2"	"methods"	"Combine two Objects by Columns or Rows"	"<p>Combine two matrix-like <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects by columns (<code>cbind2</code>) or rows (<code>rbind2</code>).  These are (S4) generic functions with default methods. </p>"	"<pre>cbind2(x, y, ...) rbind2(x, y, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically matrix-like.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically similar to <code>x</code>, or missing completely.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional arguments for methods.</p> </td> </tr> </table> "	FALSE
"Classes"	"methods"	"S4 Class Documentation"	"<p>You have navigated to an old link to documentation of S4 classes. </p> <p>For basic use of classes and methods, see Introduction; to create new class definitions, see <code>setClass</code>; for technical details on S4 classes, see Classes_Details. </p>"	NA	NA	FALSE
"classesToAM"	"methods"	"Compute an Adjacency Matrix for Superclasses of Class Definitions"	"<p>Given a vector of class names or a list of class definitions, the function returns an adjacency matrix of the superclasses of these classes; that is, a matrix with class names as the row and column names and with element [i, j] being 1 if the class in column j is a direct superclass of the class in row i, and 0 otherwise. </p> <p>The matrix has the information implied by the <code>contains</code> slot of the class definitions, but in a form that is often more convenient for further analysis; for example, an adjacency matrix is used in packages and other software to construct graph representations of relationships. </p>"	"<pre>classesToAM(classes, includeSubclasses = FALSE,<br />        abbreviate = 2) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>classes</code></td> <td><br /><p>Either a character vector of class names or a list, whose elements can be either class names or class definitions.  The list is convenient, for example, to include the package slot for the class name. See the examples. </p> </td> </tr> <tr valign='top'> <td><code>includeSubclasses</code></td> <td><br /><p>A logical flag; if <code>TRUE</code>, then the matrix will include all the known subclasses of the specified classes as well as the superclasses.  The argument can also be a logical vector of the same length as <code>classes</code>, to include subclasses for some but not all the classes. </p> </td> </tr> <tr valign='top'> <td><code>abbreviate</code></td> <td><br /><p>Control of the abbreviation of the row and/or  column labels of the matrix returned: values 0, 1, 2, or 3 abbreviate neither, rows, columns or both.  The default, 2, is useful for printing the matrix, since class names tend to be more than one character long, making for spread-out printing.  Values of 0 or 3 would be appropriate for making a graph (3 avoids the tendency of some graph plotting software to produce labels in minuscule font size). </p> </td> </tr> </table> "	FALSE
"Classes_Details"	"methods"	"Class Definitions"	"<p>Class definitions are objects that contain the formal definition of a class of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects, usually referred to as an S4 class, to distinguish them from the informal S3 classes. This document gives an overview of S4 classes; for details of the class representation objects, see help for the class <code>classRepresentation</code>. </p>"	NA	NA	FALSE
"setClass"	"methods"	"Create a Class Definition"	"<p>Create  a class definition and return a generator function to create objects from the class.  Standard usage will be of the form: </p> <p><code>setClass(Class, slots= , contains =)</code> </p> <p>where <code>Class</code> is the name of the new class and, if supplied, the arguments<br />     <code>slots=</code> and <code>contains=</code> specify the slots in the new class and existing classes from which the new class should inherit.  Calls to <code>setClass()</code> are normally found in the source of a package; when the package is loaded the class will be defined in the package's namespace. </p>"	"<pre>setClass(Class, representation, prototype, contains=character(),<br />          validity, access, where, version, sealed, package,<br />          S3methods = FALSE, slots) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>Class</code></td> <td> <p>character string name for the class.</p> </td> </tr> <tr valign='top'> <td><code>slots</code></td> <td> <p>  A named vector with the names being those of the slots in the new class.  Each element of the vector specifies an existing class; the corresponding slot must be from this class or a subclass of it.  This argument must be supplied by name, <code>slots=</code>, in the call, for back compatibility with other arguments no longer recommended. </p> <p>It is allowed to provide an unnamed character vector as a limiting case, with the elements taken as slot names and all slots having the unrestricted class <code>'ANY'</code>. </p> </td> </tr> <tr valign='top'> <td><code>contains</code></td> <td> <p> A vector specifying existing classes from which this class should inherit. The new class will have all the slots of the superclasses, with the same requirements on the classes of these slots.  This argument must be supplied by name, <code>contains=</code>, in the call, for back compatibility with other arguments no longer recommended. </p> <p>See the section ‘Virtual Classes’ for the special superclass  <code>'VIRTUAL'</code>. </p> </td> </tr> <tr valign='top'> <td><code>prototype, where, validity, sealed, package</code></td> <td><br /><p><em>These arguments are currently allowed, but either they are unlikely to be useful or there are modern alternatives that are preferred.</em> </p> <p><code>prototype</code>: supplies an object with the default data for the slots in this class.  A more flexible approach is to write a method for <code>initialize()</code>. </p> <p><code>where</code>: supplies an environment in which to store the definition. Should not be used:  For calls to <code>setClass()</code> appearing in the source code for a package the definition will be stored in the namespace of the package. </p> <p><code>validity</code>: supplied a validity-checking method for objects from this class.  For clearer code, use a separate call to <code>setValidity()</code>. </p> <p><code>sealed</code>: if <code>TRUE</code>, the class definition will be sealed, so that another call to <code>setClass</code> will fail on this class name.  But the definition is automatically sealed after the namespace is loaded, so explicit sealing it is not needed. </p> <p><code>package</code>: supplies an optional package name for the class, but the class attribute should be  the package in which the class definition is assigned, as it is by default. </p> </td> </tr> <tr valign='top'> <td><code>representation, access, version, S3methods </code></td> <td> <p><em>All these arguments are deprecated from version 3.0.0 of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> and should be avoided</em>. </p> <p><code>representation</code> is an argument inherited from S that included both <code>slots</code> and <code>contains</code>, but the use of the latter two arguments is clearer and recommended. </p> <p><code>access</code> and <code>version</code> are included for historical compatibility with S-Plus, but ignored. </p> <p><code>S3methods</code> is a flag indicating that old-style methods will be written involving this class; ignored now. </p> </td> </tr> </table> "	FALSE
"className"	"methods"	"Class names including the corresponding package"	"<p>The function <code>className()</code> generates a valid references to a class, including the name of the package containing the class definition.  The object returned, from class <code>'className'</code>, is the unambiguous way to refer to a class, for example when calling <code>setMethod</code>, just in case multiple definitions of the class exist. </p> <p>Function <code>'multipleClasses'</code> returns information about multiple definitions of classes with the same name from different packages. </p>"	"<pre><br />className(class, package)<br />multipleClasses(details = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>class, package</code></td> <td><br /><p>The character string name of a class and, optionally, of the package to which it belongs.  If argument <code>package</code> is missing and the <code>class</code> argument has a package slot, that is used  (in particular, passing in an object from class <code>'className'</code> returns itself in this case, but changes the package slot if the second argument is supplied). </p> <p>If there is no package argument or slot, a definition for the class must exist and will be used to define the package.  If there are multiple definitions, one will be chosen and a warning printed giving the other possibilities. </p> </td> </tr> <tr valign='top'> <td><code>details</code></td> <td><br /><p>If <code>FALSE</code>, the default, <code>multipleClasses()</code> returns a character vector of those classes currently known with multiple definitions. </p> <p>If <code>TRUE</code>, a named list of those class definitions is returned. Each element of the list is itself a list of the corresponding class definitions, with the package names as the names of the list.  Note that identical class definitions will not be considered “multiple” definitions (see the discussion of the details below). </p> </td> </tr> </table> "	FALSE
"classRepresentation-class"	"methods"	"Class Objects "	"<p>  These are the objects that hold the definition of classes of objects.  They are constructed and stored as meta-data by calls to the function <code>setClass</code>.  Don't manipulate them directly, except perhaps to look at individual slots. </p>"	NA	NA	FALSE
"setClassUnion"	"methods"	"Classes Defined as the Union of Other Classes"	"<p>A class may be defined as the <em>union</em> of other classes; that is, as a virtual class defined as a superclass of several other classes. Class unions are useful in method signatures or as slots in other classes, when we want to allow one of several classes to be supplied. </p>"	"<pre>setClassUnion(name, members, where) isClassUnion(Class) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p> the name for the new union class. </p> </td> </tr> <tr valign='top'> <td><code>members</code></td> <td> <p> the names of the classes that should be members of this union.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p> where to save the new class definition.  In calls from a package's source code, should be omitted to save the definition in the package's namespace.</p> </td> </tr> <tr valign='top'> <td><code>Class</code></td> <td> <p> the name or definition of a class. </p> </td> </tr> </table> "	FALSE
"setAs"	"methods"	"Methods for Coercing an Object to a Class"	"<p>A call to <code>setAs</code> defines a method for coercing an object of class <code>from</code> to class <code>to</code>.  The methods will then be used by calls to <code>as</code> for objects with class <code>from</code>, including calls that replace part of the object. </p> <p>Methods for this purpose work indirectly, by defining methods for function <code>coerce</code>.  The <code>coerce</code> function is <em>not</em> to be called directly, and method selection uses class inheritance only on the first argument. </p>"	"<pre>setAs(from, to, def, replace, where = topenv(parent.frame())) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>from, to</code></td> <td> <p>The classes between which the coerce methods <code>def</code> and <code>replace</code> perform coercion. </p> </td> </tr> <tr valign='top'> <td><code>def</code></td> <td> <p>function of one argument.  It will get an object from class <code>from</code> and had better return an object of class <code>to</code>.  The convention is that the name of the argument is <code>from</code>; if another argument name is used, <code>setAs</code> will attempt to substitute <code>from</code>. </p> </td> </tr> <tr valign='top'> <td><code>replace</code></td> <td> <p>if supplied, the function to use as a replacement method, when <code>as</code> is used on the left of an assignment. Should be a function of two arguments, <code>from, value</code>, although <code>setAs</code> will attempt to substitute if the arguments differ. </p> <p><em>The remaining argument will not be used in standard applications.</em> </p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>the position or environment in which to store the resulting methods. Do not use this argument when defining a method in a package.  Only the default, the namespace of the package, should be used in normal situations. </p> </td> </tr> </table> "	FALSE
"TraceClasses"	"methods"	"Classes Used Internally to Control Tracing "	"<p> The classes described  here are used by the R function <code>trace</code> to create versions of functions and methods including browser calls, etc., and also to <code>untrace</code> the same objects.</p>"	"<pre>### Objects from the following classes are generated ### by calling trace() on an object from the corresponding ### class without the 'WithTrace' in the name.<br />'functionWithTrace' 'MethodDefinitionWithTrace' 'MethodWithNextWithTrace' 'genericFunctionWithTrace' 'groupGenericFunctionWithTrace'<br />### the following is a virtual class extended by each of the ### classes above<br />'traceable' </pre>"	NA	FALSE
"Documentation"	"methods"	"Using and Creating On-line Documentation for Classes andMethods"	"<p>Special documentation can be supplied to describe the classes and methods that are created by the software in the methods package.  Techniques to access this documentation and to create it in R help files are described here.</p>"	NA	NA	FALSE
"dotsMethods"	"methods"	"The Use of ... in Method Signatures"	"<p>The “...” argument in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> functions is treated specially, in that it matches zero, one or more actual arguments (and so, objects).  A mechanism has been added to <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> to allow “...” as the signature of a generic function.  Methods defined for such functions will be selected and called when <em>all</em>  the arguments matching “...” are from the specified class or from some subclass of that class. </p>"	NA	NA	FALSE
"GenericFunctions"	"methods"	"Tools for Managing Generic Functions"	"<p>The functions documented here manage collections of methods associated with a generic function, as well as providing information about the generic functions themselves. </p>"	"<pre>isGeneric(f, where, fdef, getName = FALSE) isGroup(f, where, fdef) removeGeneric(f, where)<br />dumpMethod(f, signature, file, where, def) findFunction(f, generic = TRUE, where = topenv(parent.frame())) dumpMethods(f, file, signature, methods, where) signature(...)<br />removeMethods(f, where = topenv(parent.frame()), all = missing(where))<br />setReplaceMethod(f, ..., where = topenv(parent.frame()))<br />getGenerics(where, searchForm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p> The character string naming the function. </p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p> The environment, namespace, or search-list position from which to search for objects.  By default, start at the top-level environment of the calling function, typically the global environment (i.e., use the search list), or the namespace of a package from which the call came.  It is important to supply this argument when calling any of these functions indirectly.  With package namespaces, the default is likely to be wrong in such calls.</p> </td> </tr> <tr valign='top'> <td><code>signature</code></td> <td> <p> The class signature of the relevant method.  A signature is a named or unnamed vector of character strings.  If named, the names must be formal argument names for the generic function.  Signatures are matched to the arguments specified in the signature slot of the generic function (see the Details section of the <code>setMethod</code> documentation). </p> <p>The <code>signature</code> argument to <code>dumpMethods</code> is ignored (it was used internally in previous implementations).</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p> The file or connection on which to dump method definitions. </p> </td> </tr> <tr valign='top'> <td><code>def</code></td> <td> <p> The function object defining the method; if omitted, the current method definition corresponding to the signature. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Named or unnamed arguments to form a signature.</p> </td> </tr> <tr valign='top'> <td><code>generic</code></td> <td> <p>In testing or finding functions, should generic functions be included.  Supply as <code>FALSE</code> to get only non-generic functions.</p> </td> </tr> <tr valign='top'> <td><code>fdef</code></td> <td> <p>Optional, the generic function definition. </p> <p>Usually omitted in calls to <code>isGeneric</code></p> </td> </tr> <tr valign='top'> <td><code>getName</code></td> <td> <p>If <code>TRUE</code>, <code>isGeneric</code> returns the name of the generic.  By default, it returns <code>TRUE</code>. </p> </td> </tr> <tr valign='top'> <td><code>methods</code></td> <td><br /><p>The methods object containing the methods to be dumped.  By default, the methods defined for this generic (optionally on the specified <code>where</code> location). </p> </td> </tr> <tr valign='top'> <td><code>all</code></td> <td> <p>in <code>removeMethods</code>, logical indicating if all (default) or only the first method found should be removed.</p> </td> </tr> <tr valign='top'> <td><code>searchForm</code></td> <td> <p>In <code>getGenerics</code>, if <code>TRUE</code>, the <code>package</code> slot of the returned result is in the form used by <code>search()</code>, otherwise as the simple package name (e.g, <code>'package:base'</code> vs <code>'base'</code>). </p> </td> </tr> </table> "	FALSE
"EnvironmentClass"	"methods"	"Class \"environment\""	"<p> A formal class for R environments.</p>"	NA	NA	FALSE
"stdRefClass"	"methods"	"Class \"envRefClass\""	"<p>Support Class to Implement R Objects using Reference Semantics </p>"	NA	NA	FALSE
"setLoadActions"	"methods"	"Set Actions For Package Loading"	"<p>These functions provide a mechanism for packages to specify computations to be done during the loading of a package namespace. Such actions are a flexible way to provide information only available at load time (such as locations in a dynamically linked library). </p> <p>A call to <code>setLoadAction()</code> or <code>setLoadActions()</code> specifies one or more functions to be called when the corresponding namespace is loaded, with the ... argument names being used as identifying names for the actions. </p> <p><code>getLoadActions</code> reports the currently defined load actions, given a package's namespace as its argument. </p> <p><code>hasLoadAction</code> returns <code>TRUE</code> if a load action corresponding to the given name has previously been set for the <code>where</code> namespace. </p> <p><code>evalOnLoad()</code> and <code>evalqOnLoad()</code> schedule a specific expression for evaluation at load time. </p>"	"<pre>setLoadAction(action, aname=, where=)<br />setLoadActions(..., .where=)<br />getLoadActions(where=)<br />hasLoadAction(aname, where=)<br />evalOnLoad(expr, where=, aname=)<br />evalqOnLoad(expr, where=, aname=) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>action, ...</code></td> <td><br /><p>functions of one or more arguments, to be called when this package is loaded. The functions will be called with one argument (the package namespace) so all following arguments must have default values. </p> <p>If the elements of ... are named, these names will be used for the corresponding load metadata. </p> </td> </tr> <tr valign='top'> <td><code>where, .where</code></td> <td><br /><p>the namespace of the package for which the list of load actions are defined. This argument is normally omitted if the call comes from the source code for the package itself, but will be needed if a package supplies load actions for another package. </p> </td> </tr> <tr valign='top'> <td><code>aname</code></td> <td> <p>the name for the action.  If an action is set without supplying a name,  the default uses the position in the sequence of actions specified (<code>'.1'</code>, etc.). </p> </td> </tr> <tr valign='top'> <td><code>expr</code></td> <td> <p>an expression to be evaluated in a load action in environment <code>where</code>.  In the case of <code>evalqOnLoad()</code>, the expression is interpreted literally, in that of <code>evalOnLoad()</code> it must be precomputed, typically as an object of type <code>'language'</code>. </p> </td> </tr> </table> "	FALSE
"evalSource"	"methods"	"Use Function Definitions from a Source File without Reinstalling a Package"	"<p>Definitions of functions and/or methods from a source file are inserted into a package, using the <code>trace</code> mechanism. Typically, this allows testing or debugging modified versions of a few functions without reinstalling a large package. </p>"	"<pre>evalSource(source, package = '', lock = TRUE, cache = FALSE)<br />insertSource(source, package = '', functions = , methods = ,<br />            force = )<br /></pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>source</code></td> <td><br /><p>A file to be parsed and evaluated by <code>evalSource</code> to find the new function and method definitions. </p> <p>The argument to <code>insertSource</code> can be an object of class <code>'sourceEnvironment'</code> returned from a previous call to <code>evalSource</code><br />   If a file name is passed to <code>insertSource</code> it calls <code>evalSource</code> to obtain the corresponding object.  See the section on the class for details. </p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td><br /><p>Optionally, the name of the package to which the new code corresponds and into which it will be inserted.  Although the computations will attempt to infer the package if it is omitted, the safe approach is to supply it.  In the case of a package that is not attached to the search list, the package name must be supplied. </p> </td> </tr> <tr valign='top'> <td><code>functions, methods</code></td> <td><br /><p>Optionally, the character-string names of the functions to be used in the insertion.  Names supplied in the <code>functions</code> argument are expected to be defined as functions in the source. For names supplied in the <code>methods</code> argument, a table of methods is expected (as generated by calls to <code>setMethod</code>, see the details section); methods from this table will be inserted by <code>insertSource</code>.  In both cases, the revised function or method is inserted only if it differs from the version in the corresponding package as loaded. </p> <p>If <code>what</code> is omitted, the results of evaluating the source file will be compared to the contents of the package (see the details section). </p> </td> </tr> <tr valign='top'> <td><code>lock, cache</code></td> <td><br /><p>Optional arguments to control the actions taken by <code>evalSource</code>. If <code>lock</code> is <code>TRUE</code>, the environment in the object returned will be locked, and so will all its bindings. If <code>cache</code> is <code>FALSE</code>, the normal caching of method and class definitions will be suppressed during evaluation of the <code>source</code> file. </p> <p>The default settings are generally recommended, the <code>lock</code> to support the credibility of the object returned as a snapshot of the source file, and the second so that method definitions can be inserted later by <code>insertSource</code> using the trace mechanism. </p> </td> </tr> <tr valign='top'> <td><code>force</code></td> <td><br /><p>If <code>FALSE</code>, only functions currently in the environment will be redefined, using <code>trace</code>.  If <code>TRUE</code>, other objects/functions will be simply assigned.  By default, <code>TRUE</code> if neither the <code>functions</code> nor the <code>methods</code> argument is supplied. </p> </td> </tr> </table> "	FALSE
"getMethod"	"methods"	"Get or Test for the Definition of a Method"	"<p>Functions to look for a method corresponding to a given generic function and signature. The functions <code>getMethod</code> and <code>selectMethod</code> return the method; the functions <code>existsMethod</code> and <code>hasMethod</code> test for its existence.  In both cases the first function only gets direct definitions and the second uses inheritance.  In all cases, the search is in the generic function itself or in the package/environment specified by argument <code>where</code>. </p> <p>The function <code>findMethod</code> returns the package(s) in the search list (or in the packages specified by the <code>where</code> argument) that contain a method for this function and signature. </p>"	"<pre>existsMethod(f, signature = character(), where)<br />  findMethod(f, signature, where)<br /><br />   getMethod(f, signature = character(), where, optional = FALSE, mlist, fdef)<br /><br />   hasMethod(f, signature = character(), where)<br />selectMethod(f, signature, optional = FALSE, useInherited =,<br />              mlist = , fdef = , verbose = , doCache = ) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>a generic function or the character-string name of one.</p> </td> </tr> <tr valign='top'> <td><code>signature</code></td> <td> <p>the signature of classes to match to the arguments of <code>f</code>.  See the details below.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>the position or environment in which to look for the method(s):  by default, the table of methods defined in the generic function itself is used.</p> </td> </tr> <tr valign='top'> <td><code>optional</code></td> <td> <p>if the selection in <code>selectMethod</code> does not find a valid method an error is generated, unless <code>optional</code> is true.  In that case, the value returned is <code>NULL</code> if no method matches.</p> </td> </tr> <tr valign='top'> <td><code>mlist, fdef, useInherited, verbose, doCache</code></td> <td> <p>optional arguments to  <code>getMethod</code> and <code>selectMethod</code> for internal use.  Avoid these: some will work as expected and others will not, and none of them is required for normal use of the functions.</p> </td> </tr> </table> "	FALSE
"is"	"methods"	"Is an Object from a Class?"	"<p>Functions to test inheritance relationships between an object and a class or between two classes (<code>extends</code>). </p>"	"<pre>is(object, class2)<br />extends(class1, class2, maybe = TRUE, fullInfo = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>class1, class2</code></td> <td><br /><p>the names of the classes between which <code>is</code> relations are to be examined defined, or (more efficiently) the class definition objects for the classes.</p> </td> </tr> <tr valign='top'> <td><code>fullInfo</code></td> <td><br /><p>In a call to <code>extends</code>, with <code>class2</code> missing, <code>fullInfo</code> is a flag, which if <code>TRUE</code> causes a list of objects of class <code>SClassExtension</code> to be returned, rather than just the names of the classes.  Only the distance slot is likely to be useful in practice; see the ‘Selecting Superclasses’ section; </p> </td> </tr> <tr valign='top'> <td><code>maybe</code></td> <td><br /><p>What to return for conditional inheritance.  But such relationships are rarely used and not recommended, so this argument should not be needed. </p> </td> </tr> </table> "	FALSE
"findClass"	"methods"	"Find Class Definitions"	"<p>Functions to find classes:  <code>isClass</code> tests for a class; <code>findClass</code> returns the name(s) of packages containing the class; <code>getClasses</code> returns the names of all the classes in an environment, typically a namespace.  To examine the definition of a class, use <code>getClass</code>. </p>"	"<pre>isClass(Class, formal=TRUE, where)<br />getClasses(where, inherits = missing(where))<br />findClass(Class, where, unique = '')<br />## The remaining functions are retained for compatibility ## but not generally recommended<br />removeClass(Class, where)<br />resetClass(Class, classDef, where)<br />sealClass(Class, where)<br /></pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>Class</code></td> <td> <p>character string name for the class.  The functions will usually take a class definition instead of the string.  To restrict the class to those defined in a particular package, set the <code>packageSlot</code> of the character string.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>the <code>environment</code> in which to search for the class definition.  Defaults to the top-level environment of the calling function.  When called from the command line, this has the effect of using all the package environments in the search list. </p> <p>To restrict the search to classes in a particular package, use <code>where =<br />       asNamespace(pkg)</code> with <code>pkg</code> the package name;  to restrict it to the <em>exported</em> classes, use <code>where = 'package:pkg'</code> after the package is attached to the search list. </p> </td> </tr> <tr valign='top'> <td><code>formal</code></td> <td> <p><code>logical</code> is a formal definition required? For S compatibility, and always treated as <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>unique</code></td> <td> <p>if <code>findClass</code> expects a unique location for the class, <code>unique</code> is a character string explaining the purpose of the search (and is used in warning and error messages).  By default, multiple locations are possible and the function always returns a list. </p> </td> </tr> <tr valign='top'> <td><code>inherits</code></td> <td> <p>in a call to <code>getClasses</code>, should the value returned include all parent environments of <code>where</code>, or that environment only?  Defaults to <code>TRUE</code> if <code>where</code> is omitted, and to <code>FALSE</code> otherwise. </p> </td> </tr> <tr valign='top'> <td><code>classDef</code></td> <td> <p> For <code>resetClass</code>, the optional class definition. </p> </td> </tr> </table> "	FALSE
"findMethods"	"methods"	"Description of the Methods Defined for a Generic Function"	"<p>The function <code>findMethods</code> converts the methods defined in a table for a generic function (as used for selection of methods) into a list, for study or display.  The list is actually from the class <code>listOfMethods</code> (see the section describing the class, below). </p> <p>The list will be limited to the methods defined in environment <code>where</code> if that argument is supplied and limited to those including one or more of the specified <code>classes</code> in the method signature if that argument is supplied. </p> <p>To see the actual table (an environment) used for methods dispatch, call <code>getMethodsForDispatch</code>. The names of the list returned by <code>findMethods</code> are the names of the objects in the table. </p> <p>The function <code>findMethodSignatures</code> returns a character matrix whose rows are the class names from the signature of the corresponding methods; it operates either from a list returned by <code>findMethods</code>, or by computing such a list itself, given the same arguments as <code>findMethods</code> . </p> <p>The function <code>hasMethods</code> returns <code>TRUE</code> or <code>FALSE</code> according to whether there is a non-empty table of methods for function <code>f</code> in the environment or search position <code>where</code> (or for the generic function generally if <code>where</code> is missing). </p> <p>The defunct function <code>getMethods</code> is an older alternative to <code>findMethods</code> , returning information in the form of an object of class <code>MethodsList</code>, previously used for method dispatch.  It is not recommended, since this class of objects is deprecated generally and will disappear in a future version of R. </p>"	"<pre>findMethods(f, where, classes = character(), inherited = FALSE,<br />       package = '')<br />findMethodSignatures(..., target = TRUE, methods = )<br />hasMethods(f, where, package)<br />## Deprecated in 2010 and defunct in 2015 for \code{table = FALSE}: getMethods(f, where, table = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>A generic function or the character-string name of one.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>Optionally, an environment or position on the search list to look for methods metadata. </p> <p>If <code>where</code> is missing,  <code>findMethods</code> uses the current table of methods in the generic function itself, and <code>hasMethods</code> looks for metadata anywhere in the search list. </p> </td> </tr> <tr valign='top'> <td><code>table</code></td> <td> <p> If <code>TRUE</code> in a call to <code>getMethods</code> the returned value is the table used for dispatch, including inherited methods discovered to date.  Used internally, but since the default result is the now unused <code>mlist</code> object, the default will likely be changed at some point. </p> </td> </tr> <tr valign='top'> <td><code>classes</code></td> <td> <p>If supplied, only methods whose signatures contain at least one of the supplied classes will be included in the value returned.</p> </td> </tr> <tr valign='top'> <td><code>inherited</code></td> <td> <p>Logical flag; if <code>TRUE</code>, the table of all methods, inherited or defined directly, will be used; otherwise, only the methods explicitly defined.  Option <code>TRUE</code> is meaningful only if <code>where</code> is missing.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>In the call to <code>findMethodSignatures</code>, any arguments that might be given to <code>findMethods</code>.</p> </td> </tr> <tr valign='top'> <td><code>target</code></td> <td> <p>Optional flag to <code>findMethodSignatures</code>; if <code>TRUE</code>, the signatures used are the target signatures (the classes for which the method will be selected); if <code>FALSE</code>, they will be the signatures are defined.  The difference is only meaningful if <code>inherited</code> is <code>TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>methods</code></td> <td> <p>In the call to <code>findMethodSignatures</code>, an optional list of methods, presumably returned by a previous call to <code>findMethods</code>.  If missing, that function will be call with the ... arguments.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>In a call to <code>hasMethods</code>, the package name for the generic function (e.g., <code>'base'</code> for primitives).  If missing this will be inferred either from the <code>'package'</code> attribute of the function name, if any, or from the package slot of the generic function.  See ‘Details’.</p> </td> </tr> </table> "	FALSE
"fixPrevious"	"methods"	"Fix Objects Saved from R Versions Previous to 1.8"	"<p>Beginning with R version 1.8.0, the class of an object contains the identification of the package in which the class is defined.  The function <code>fixPre1.8</code> fixes and re-assigns objects missing that information (typically because they were loaded from a file saved with a previous version of R.) </p>"	"<pre>fixPre1.8(names, where) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>names</code></td> <td> <p> Character vector of the names of all the objects to be fixed and re-assigned.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>The environment from which to look for the objects, and for class definitions.  Defaults to the top environment of the call to <code>fixPre1.8</code>, the global environment if the function is used interactively.</p> </td> </tr> </table> "	FALSE
"genericFunction-class"	"methods"	"Generic Function Objects "	"<p>Generic functions (objects from or extending class <code>genericFunction</code>) are extended function objects, containing information used in creating and dispatching methods for this function.  They also identify the package associated with the function and its methods. </p>"	NA	NA	FALSE
"getClass"	"methods"	"Get Class Definition "	"<p>Get the definition of a class. </p>"	"<pre>getClass<br />   (Class, .Force = FALSE, where) getClassDef(Class, where, package, inherits = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>Class</code></td> <td> <p> the character-string name of the class, often with a <code>'package'</code> attribute as noted below under <code>package</code>.</p> </td> </tr> <tr valign='top'> <td><code>.Force</code></td> <td> <p> if <code>TRUE</code>, return <code>NULL</code> if the class is undefined; otherwise, an undefined class results in an error.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p> environment from which to begin the search for the definition; by default, start at the top-level (global) environment and proceed through the search list.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p> the name of the package asserted to hold the definition.  If it is a non-empty string it is used instead of <code>where</code>, as the first place to look for the class. Note that the package must be loaded but need not be attached.  By default, the package attribute of the <code>Class</code> argument is used, if any.  There will usually be a package attribute if <code>Class</code> comes from <code>class(x)</code> for some object. </p> </td> </tr> <tr valign='top'> <td><code>inherits</code></td> <td> <p>logical; should the class definition be retrieved from any enclosing environment and also from the cache?  If <code>FALSE</code> only a definition in the environment <code>where</code> will be returned.</p> </td> </tr> </table> "	FALSE
"getPackageName"	"methods"	"The Name associated with a Given Package"	"<p>The functions below produce the package associated with a particular environment or position on the search list, or of the package containing a particular function.  They are primarily used to support computations that need to differentiate objects on multiple packages. </p>"	"<pre>getPackageName(where, create = TRUE) setPackageName(pkg, env)<br />packageSlot(object) packageSlot(object) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>where</code></td> <td> <p>the environment or position on the search list associated with the desired package.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>object providing a character string name, plus the package in which this object is to be found.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>the name of the package.</p> </td> </tr> <tr valign='top'> <td><code>create</code></td> <td> <p>flag, should a package name be created if none can be inferred?  If <code>TRUE</code> and no non-empty package name is found, the current date and time are used as a package name, and a warning is issued. The created name is stored in the environment if that environment is not locked.</p> </td> </tr> <tr valign='top'> <td><code>pkg, env</code></td> <td> <p>make the string in <code>pkg</code> the internal package name for all computations that set class and method definitions in environment <code>env</code>.</p> </td> </tr> </table> "	FALSE
"slot"	"methods"	"The Slots in an Object from a Formal Class"	"<p>These functions return or set information about the individual slots in an object. </p>"	"<pre>object@name object@name &lt;- value<br />slot(object, name) slot(object, name, check = TRUE) &lt;- value .hasSlot(object, name)<br />slotNames(x) getSlots(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>An object from a formally defined class.</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>The name of the slot. The operator takes a fixed name, which can be unquoted if it is syntactically a name in the language.  A slot name can be any non-empty string, but if the name is not made up of letters, numbers, and <code>.</code>, it needs to be quoted (by backticks or single or double quotes). </p> <p>In the case of the <code>slot</code> function, <code>name</code> can be any expression that evaluates to a valid slot in the class definition. Generally, the only reason to use the functional form rather than the simpler operator is <em>because</em> the slot name has to be computed. </p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>A new value for the named slot.  The value must be valid for this slot in this object's class.</p> </td> </tr> <tr valign='top'> <td><code>check</code></td> <td> <p>In the replacement version of <code>slot</code>, a flag.  If <code>TRUE</code>, check the assigned value for validity as the value of this slot.  User's coded should not set this to <code>FALSE</code> in normal use, since the resulting object can be invalid. </p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>either the name of a class (as character string), or a class definition.  If given an argument that is neither a character string nor a class definition, <code>slotNames</code> (only) uses <code>class(x)</code> instead.</p> </td> </tr> </table> "	FALSE
"validObject"	"methods"	" Test the Validity of an Object "	"<p>The validity of <code>object</code> related to its class definition is tested.  If the object is valid, <code>TRUE</code> is returned; otherwise, either a vector of strings describing validity failures is returned, or an error is generated (according to whether <code>test</code> is <code>TRUE</code>).  Optionally, all slots in the object can also be validated. </p> <p>The function <code>setValidity</code> sets the validity method of a class (but more normally, this method will be supplied as the <code>validity</code> argument to <code>setClass</code>).  The method should be a function of one object that returns <code>TRUE</code> or a description of the non-validity. </p>"	"<pre>validObject(object, test = FALSE, complete = FALSE)<br />setValidity(Class, method, where = topenv(parent.frame()) )<br />getValidity(ClassDef) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p> any object, but not much will happen unless the object's class has a formal definition.</p> </td> </tr> <tr valign='top'> <td><code>test</code></td> <td> <p>logical; if <code>TRUE</code> and validity fails, the function returns a vector of strings describing the problems.  If <code>test</code> is <code>FALSE</code> (the default) validity failure generates an error.</p> </td> </tr> <tr valign='top'> <td><code>complete</code></td> <td> <p>logical; if <code>TRUE</code>, validity methods will be applied recursively to any of the slots that have such methods.</p> </td> </tr> <tr valign='top'> <td><code>Class</code></td> <td> <p>the name or class definition of the class whose validity method is to be set.</p> </td> </tr> <tr valign='top'> <td><code>ClassDef</code></td> <td> <p>a class definition object, as from <code>getClassDef</code>.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>a validity method;  that is, either <code>NULL</code> or a function of one argument (<code>object</code>).  Like <code>validObject</code>, the function should return <code>TRUE</code> if the object is valid, and one or more descriptive strings if any problems are found.  Unlike <code>validObject</code>, it should never generate an error. </p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>the modified class definition will be stored in this environment.</p> </td> </tr> </table>  <p>Note that validity methods do not have to check validity of superclasses: the logic of <code>validObject</code> ensures these tests are done once only.  As a consequence, if one validity method wants to use another, it should extract and call the method from the other definition of the other class by calling <code>getValidity()</code>: it should <em>not</em> call <code>validObject</code>. </p>"	FALSE
"hasArg"	"methods"	"Look for an Argument in the Call"	"<p>Returns <code>TRUE</code> if <code>name</code> corresponds to an argument in the call, either a formal argument to the function, or a component of <code>...</code>, and <code>FALSE</code> otherwise. </p>"	"<pre>hasArg(name) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>name</code></td> <td> <p>The name of a potential argument, as an unquoted name or character string.</p> </td> </tr></table> "	FALSE
"implicitGeneric"	"methods"	"Manage Implicit Versions of Generic Functions"	"<p>The implicit generic mechanism stores generic versions of functions in a table in a package. The package does not want the current version of the function to be a generic, however, and retains the non-generic version. </p> <p>When a call to <code>setMethod</code> or <code>setGeneric</code> creates a generic version for one of these functions, the object in the table is used. This mechanism is only needed if special arguments were used to create the generic; e.g., the <code>signature</code> or the <code>valueClass</code> options. </p> <p>Function <code>implicitGeneric()</code> returns the implicit generic version, <code>setGenericImplicit()</code> turns a generic implicit, <code>prohibitGeneric()</code> prevents your function from being made generic, and <code>registerImplicitGenerics()</code> saves a set of implicit generic definitions in the cached table of the current session. </p>"	"<pre>implicitGeneric(name, where, generic) setGenericImplicit(name, where, restore = TRUE) prohibitGeneric(name, where) registerImplicitGenerics(what, where) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p> Character string name of the function.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p> Package or environment in which to register the implicit generics.  When using the functions from the top level of your own package source, this argument should be omitted.</p> </td> </tr> <tr valign='top'> <td><code>generic</code></td> <td> <p> Obsolete, and likely to be deprecated.</p> </td> </tr> <tr valign='top'> <td><code>restore</code></td> <td> <p>Should the non-generic version of the function be restored?.</p> </td> </tr> <tr valign='top'> <td><code>what</code></td> <td> <p>Optional table of the implicit generics to register, but nearly always omitted, when it defaults to a standard metadata name.</p> </td> </tr> </table> "	FALSE
"inheritedSlotNames"	"methods"	"Names of Slots Inherited From a Super Class"	"<p>For a class (or class definition, see <code>getClass</code> and the description of class <code>classRepresentation</code>), give the names which are inherited from “above”, i.e., super classes, rather than by this class' definition itself. </p>"	"<pre>inheritedSlotNames(Class, where = topenv(parent.frame())) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>Class</code></td> <td> <p>character string or <code>classRepresentation</code>, i.e., resulting from <code>getClass</code>.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>environment, to be passed further to <code>isClass</code> and <code>getClass</code>.</p> </td> </tr> </table> "	FALSE
"new"	"methods"	" Generate an Object from a Class "	"<p>Given the name or the definition of a class, plus optionally data to be included in the object, <code>new</code> returns an object from that class. </p>"	"<pre>new(Class, ...)<br />initialize(.Object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>Class</code></td> <td> <p>either the name of a class, a <code>character</code> string, (the usual case) or the object describing the class (e.g., the value returned by <code>getClass</code>).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>data to include in the new object.  Named arguments correspond to slots in the class definition. Unnamed arguments must be objects from classes that this class extends.</p> </td> </tr> <tr valign='top'> <td><code>.Object</code></td> <td> <p> An object:  see the Details section.</p> </td> </tr> </table> "	FALSE
"initialize-methods"	"methods"	"Methods to Initialize New Objects from a Class"	"<p>The arguments to function <code>new</code> to create an object from a particular class can be interpreted specially for that class, by the definition of a method for function <code>initialize</code> for the class. This documentation describes some existing methods, and also outlines how to write new ones. </p>"	NA	NA	FALSE
"Introduction"	"methods"	"Basic use of S4 Methods and Classes"	"<p>The majority of applications using methods and classes will be in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> packages implementing new computations for an application, using new <em>classes</em> of objects that represent the data and results. Computations will be implemented using <em>methods</em> that implement functional computations when one or more of the arguments is an object from these classes. </p> <p>Calls to the functions <code>setClass()</code> define the new classes; calls to <code>setMethod</code> define the methods. These, along with ordinary <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> computations, are sufficient to get started for most applications. </p> <p>Classes are defined in terms of the data in them and what other classes of data they inherit from. Section ‘Defining Classes’ outlines the basic design of new classes. </p> <p>Methods are <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> functions, often implementing basic computations as they apply to the new classes of objects. Section ‘Defining Methods’ discusses basic requirements and special tools for defining methods. </p> <p>The classes discussed here are the original functional classes. <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> also supports formal classes and methods similar to those in other languages such as Python, in which methods are part of class definitions and invoked on an object. These are more appropriate when computations expect references to objects that are persistent, making changes to the object over time. See ReferenceClasses and Chapter 9 of the reference for the choice between these and S4 classes. </p>"	NA	NA	FALSE
"isSealedMethod"	"methods"	" Check for a Sealed Method or Class "	"<p>These functions check for either a method or a class that has been <em>sealed</em> when it was defined, and which therefore cannot be re-defined. </p>"	"<pre>isSealedMethod(f, signature, fdef, where) isSealedClass(Class, where) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p> The quoted name of the generic function. </p> </td> </tr> <tr valign='top'> <td><code>signature</code></td> <td> <p> The class names in the method's signature, as they would be supplied to <code>setMethod</code>. </p> </td> </tr> <tr valign='top'> <td><code>fdef</code></td> <td> <p> Optional, and usually omitted:  the generic function definition for <code>f</code>. </p> </td> </tr> <tr valign='top'> <td><code>Class</code></td> <td> <p>The quoted name of the class.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>where to search for the method or class definition.  By default, searches from the top environment of the call to <code>isSealedMethod</code> or <code>isSealedClass</code>, typically the global environment or the namespace of a package containing a call to one of the functions.</p> </td> </tr> </table> "	FALSE
"S3Part"	"methods"	" S4 Classes that Contain S3 Classes"	"<p>A regular (S4) class may contain an S3 class, if that class has been registered (by calling <code>setOldClass</code>).  The functions described here provide information about contained S3 classes.  See the section ‘Functions’. </p> <p>In modern <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>, these functions are not usually needed to program with objects from the S4 class.  Standard computations work as expected, including method selection for both S4 and S3.  To coerce an object to its contained S3 class, use either of the expressions: </p> <p><code>as(object, S3Class); as(object, 'S3')</code>  </p> <p>where <code>S3Class</code> evaluates to the name of the contained class.  These return slightly different objects, which in rare cases may need to be distinguished.  See the section “Contained S3 Objects”. </p>"	"<pre>S3Part(object, strictS3 = FALSE, S3Class)<br />S3Class(object)<br />isXS3Class(classDef)<br />slotsFromS3(object)<br />## the replacement versions of the functions are not recommended ## Create a new object from the class or use the replacement version of as().<br /> S3Part(object, strictS3 = FALSE, needClass = ) &lt;- value<br />S3Class(object) &lt;-  value<br /></pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object from some class that extends a registered S3 class, or a basic vector, matrix or array object type. </p> <p>For most of the functions, an S3 object can also be supplied, with the interpretation that it is its own S3 part. </p> </td> </tr> <tr valign='top'> <td><code>strictS3</code></td> <td> <p>If <code>TRUE</code>, the value returned by <code>S3Part</code> will be an S3 object, with all the S4 slots removed.  Otherwise, an S4 object will always be returned; for example, from the S4 class created by <code>setOldClass</code> as a proxy for an S3 class, rather than the underlying S3 object. </p> </td> </tr> <tr valign='top'> <td><code>S3Class</code></td> <td> <p>the <code>character</code> vector to be stored as the S3 class slot in the object.  Usually, and by default, retains the slot from <code>object</code>, but an S3 superclass is allowed. </p> </td> </tr> <tr valign='top'> <td><code>classDef</code></td> <td> <p>a class definition object, as returned by <code>getClass</code>. </p> <p><em>The remaining arguments apply only to the replacement versions, which are not recommended.</em> </p> </td> </tr> <tr valign='top'> <td><code>needClass</code></td> <td> <p>Require that the replacement value be this class or a subclass of it.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>For <code>S3Part&lt;-</code>, the replacement value for the S3 part of the object. </p> <p>For <code>S3Class&lt;-</code>, the character vector that will be used as a proxy for <code>class(x)</code> in S3 method dispatch. </p> </td> </tr> </table> "	FALSE
"LinearMethodsList-class"	"methods"	"Class \"LinearMethodsList\""	"<p>A version of methods lists that has been ‘linearized’ for producing summary information.  The actual objects from class <code>'MethodsList'</code> used for method dispatch are defined recursively over the arguments involved. </p>"	NA	NA	FALSE
"localRefClass"	"methods"	"Localized Objects based on Reference Classes"	"<p>Local reference classes are modified ReferenceClasses that isolate the objects to the local frame.  Therefore, they do <em>not</em> propagate changes back to the calling environment.<br />   At the same time, they use the reference field semantics locally, avoiding the automatic duplication applied to standard <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects. </p> <p>The current implementation has no special construction.  To create a local reference class, call <code>setRefClass()</code> with a <code>contains=</code> argument that includes <code>'localRefClass'</code>.  See the example below. </p> <p>Local reference classes operate essentially as do regular, functional classes in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>; that is, changes are made by assignment and take place in the local frame. The essential difference is that replacement operations (like the change to the <code>twiddle</code> field in the example) do not cause duplication of the entire object, as would be the case for a formal class or for data with attributes or in a named list. The purpose is to allow large objects in some fields that are not changed along with potentially frequent changes to other fields, but without copying the large fields. </p>"	"<pre>setRefClass(Class, fields = , contains = c('localRefClass',....),<br />      methods =, where =, ...) </pre>"	NA	FALSE
"setSClass"	"methods"	"Create a Class Definition"	"<p>Constructs an object of class <code>classRepresentation</code> to describe a particular class.  Mostly a utility function, but you can call it to create a class definition without assigning it, as <code>setClass</code> would do. </p>"	"<pre>makeClassRepresentation(name, slots=list(), superClasses=character(),<br />                         prototype=NULL, package, validity, access,<br />                         version, sealed, virtual=NA, where) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p>character string name for the class</p> </td> </tr> <tr valign='top'> <td><code>slots</code></td> <td> <p>named list of slot classes as would be supplied to <code>setClass</code>, but <em>without</em> the unnamed arguments for superClasses if any.</p> </td> </tr> <tr valign='top'> <td><code>superClasses</code></td> <td> <p>what classes does this class extend</p> </td> </tr> <tr valign='top'> <td><code>prototype</code></td> <td> <p>an object providing the default data for the class, e.g., the result of a call to <code>prototype</code>.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>The character string name for the package in which the class will be stored; see <code>getPackageName</code>.</p> </td> </tr> <tr valign='top'> <td><code>validity</code></td> <td> <p>Optional validity method.  See <code>validObject</code>, and the discussion of validity methods in the reference.</p> </td> </tr> <tr valign='top'> <td><code>access</code></td> <td> <p>Access information.  Not currently used.</p> </td> </tr> <tr valign='top'> <td><code>version</code></td> <td> <p>Optional version key for version control.  Currently generated, but not used.</p> </td> </tr> <tr valign='top'> <td><code>sealed</code></td> <td> <p>Is the class sealed? See <code>setClass</code>.</p> </td> </tr> <tr valign='top'> <td><code>virtual</code></td> <td> <p>Is this known to be a virtual class?</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>The environment from which to look for class definitions needed (e.g., for slots or superclasses). See the discussion of this argument under GenericFunctions.</p> </td> </tr> </table> "	FALSE
"method.skeleton"	"methods"	"Create a Skeleton File for a New Method"	"<p>This function writes a source file containing a call to <code>setMethod</code> to define a method for the generic function and signature supplied.  By default the method definition is in line in the call, but can be made an external (previously assigned) function. </p>"	"<pre>method.skeleton(generic, signature, file, external = FALSE, where) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>generic</code></td> <td> <p>the character string name of the generic function, or the generic function itself.  In the first case, the function need not currently be a generic, as it would not for the resulting call to <code>setMethod</code>.</p> </td> </tr> <tr valign='top'> <td><code>signature</code></td> <td> <p>the method signature, as it would be given to <code>setMethod</code></p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>a character string name for the output file, or a writable connection.  By default the generic function name and the classes in the signature are concatenated, with separating underscore characters.  The file name should normally end in <code>'.R'</code>. </p> </td> </tr> </table>  <p>To write multiple method skeletons to one file, open the file connection first and then pass it to <code>method.skeleton()</code> in multiple calls. </p> <table summary='R argblock'> <tr valign='top'> <td><code>external</code></td> <td> <p>flag to control whether the function definition for the method should be a separate external object assigned in the source file, or included in line in the call to <code>setMethod</code>. If supplied as a character string, this will be used as the name for the external function; by default the name concatenates the generic and signature names, with separating underscores.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>The environment in which to look for the function; by default, the top-level environment of the call to <code>method.skeleton</code>.</p> </td> </tr> </table> "	FALSE
"MethodDefinition-class"	"methods"	"Classes to Represent Method Definitions"	"<p>These classes extend the basic class <code>'function'</code> when functions are to be stored and used as method definitions. </p>"	NA	NA	FALSE
"Methods"	"methods"	"S4 Class Documentation"	"<p>You have navigated to an old link to documentation of S4 methods. </p> <p>For basic use of classes and methods, see Introduction; to create new method definitions, see <code>setMethod</code>; for technical details on S4 methods, see Methods_Details. </p>"	NA	NA	FALSE
"testInheritedMethods"	"methods"	"Test for and Report about  Selection of Inherited Methods"	"<p>A set of distinct inherited signatures is generated to test inheritance for all the methods of a specified generic function.  If method selection is ambiguous for some of these, a summary of the ambiguities is attached to the returned object.  This test should be performed by package authors <em>before</em> releasing a package. </p>"	"<pre>testInheritedMethods(f, signatures, test = TRUE, virtual = FALSE,<br />                      groupMethods = TRUE, where = .GlobalEnv) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>a generic function or the character string name of one.  By default, all currently defined subclasses of all the method signatures for this generic will be examined.  The other arguments are mainly options to modify which inheritance patterns will be examined. </p> </td> </tr> <tr valign='top'> <td><code>signatures</code></td> <td><br /><p>An optional set of subclass signatures to use instead of the relevant subclasses computed by <code>testInheritedMethods</code>.  See the Details for how this is done.  This argument might be supplied after a call with <code>test = FALSE</code>, to test selection in batches. </p> </td> </tr> <tr valign='top'> <td><code>test</code></td> <td><br /><p>optional flag to control whether method selection is actually tested. If <code>FALSE</code>, returns just the list of relevant signatures for subclasses, without calling <code>selectMethod</code> for each signature. If there are a very large number of signatures, you may want to collect the full list  and then test them in batches. </p> </td> </tr> <tr valign='top'> <td><code>virtual</code></td> <td><br /><p>should virtual classes be included in the relevant subclasses. Normally not, since only the classes of actual arguments will trigger the inheritance calculation in a call to the generic function. Including virtual classes may be useful if the class has no current non-virtual subclasses but you anticipate your users may define such classes in the future. </p> </td> </tr> <tr valign='top'> <td><code>groupMethods</code></td> <td><br /><p>should methods for the group generic function be included? </p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td><br /><p>the environment in which to look for class definitions.  Nearly always, use the default global environment after attaching all the packages with relevant methods and/or class definitions. </p> </td> </tr> </table> "	FALSE
"MethodsList-class"	"methods"	"Class MethodsList, Defunct Representation of Methods "	"<p> This class of objects was used in the original implementation of the package to control method dispatch.  Its use is now defunct, but object appear as the default method slot in generic functions.  This and any other remaining uses will be removed in the future. </p> <p>For the modern alternative, see listOfMethods. </p> <p>The details in this documentation are retained to allow analysis of old-style objects. </p>"	NA	NA	FALSE
"Methods_Details"	"methods"	"General Information on Methods"	"<p>This documentation covers some general topics on how methods work and how the <span class='pkg'>methods</span> package interacts with the rest of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>.  The information is usually not needed to get started with methods and classes, but may be helpful for moderately ambitious projects, or when something doesn't work as expected. </p> <p>For additional information  see documentation for the important steps: (<code>setMethod()</code>, <code>setClass()</code> and <code>setGeneric()</code>). Also <code>Methods_for_Nongenerics</code> on defining formal methods for functions  that are not currently generic functions; Methods_for_S3 for the relation to S3 classes and methods; <code>Classes_Details</code> for class definitions and Chapters 9 and 10 of the reference. </p>"	NA	NA	FALSE
"Methods_for_Nongenerics"	"methods"	"Methods for Non-Generic Functions in Other Packages"	"<p>In writing methods for an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> package, it's common for these methods to apply to a function (in another package) that is not  generic in that package; that is, there are no formal methods for the function in its own package, although it may have S3 methods. The programming in this case involves one extra step, to call <code>setGeneric()</code> to declare that the function <em>is</em> generic in your package. </p> <p>Calls to the function in your package will then use all methods defined there or in any other loaded package that creates the same generic function. Similarly, calls to the function in those packages will use your methods. </p> <p>The original version, however, remains non-generic.  Calls in that package or in other packages that use that version will  not dispatch your methods except for special circumstances: </p> <ol> <li> <p> If the function is one of the primitive functions that accept methods, the internal C implementation will dispatch methods if one of the arguments is an S4 object, as should be the case. </p> </li> <li> <p> If the other version of the function dispatches S3 methods <em>and</em> your methods are also registered as S3 methods, the method will usually be dispatched as that S3 method. </p> </li> <li> <p> Otherwise, you will need to ensure that all calls to the function come from a package in which the function is generic, perhaps by copying code to your package. </p> </li> </ol>  <p>Details and the underlying reasons are discussed in the following sections. </p>"	NA	NA	FALSE
"Methods_for_S3"	"methods"	"Methods For S3 and S4 Dispatch"	"<p>The S3 and S4 software in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> are two generations implementing functional object-oriented programming. S3 is the original, simpler for initial programming but less general, less formal and less open to validation. The S4 formal methods and classes provide these features but require more programming. </p> <p>In modern <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>, the two versions attempt to work together.  This documentation outlines how to write methods for both systems by defining an S4 method for a function that dispatches S3 methods. </p> <p>The systems can also be combined by using an S3 class with S4 method dispatch or in S4 class definitions.  See <code>setOldClass</code>. </p>"	NA	NA	FALSE
"MethodWithNext-class"	"methods"	"Class MethodWithNext "	"<p> Class of method definitions set up for callNextMethod </p>"	NA	NA	FALSE
"nonStructure-class"	"methods"	"A non-structure S4 Class for basic types "	"<p> S4 classes that are defined to extend one of the basic vector classes should contain the class <code>structure</code> if they behave like structures; that is, if they should retain their class behavior under math functions or operators, so long as their length is unchanged. On the other hand, if their class depends on the values in the object, not just its structure, then they should lose that class under any such transformations.  In the latter case, they should be defined to contain <code>nonStructure</code>. </p> <p>If neither of these strategies applies, the class likely needs some methods of its own for <code>Ops</code>, <code>Math</code>, and/or other generic functions. What is not usually a good idea is to allow such computations to drop down to the default, base code.  This is inconsistent with most definitions of such classes.</p>"	NA	NA	FALSE
"ObjectsWithPackage-class"	"methods"	"A Vector of Object Names, with associated Package Names "	"<p>This class of objects is used to represent ordinary character string object names, extended with a <code>package</code> slot naming the package associated with each object. </p>"	NA	NA	FALSE
"promptClass"	"methods"	"Generate a Shell for Documentation of a Formal Class"	"<p>Assembles all relevant slot and method information for a class, with minimal markup for Rd processing; no QC facilities at present. </p>"	"<pre>promptClass(clName, filename = NULL, type = 'class',<br />             keywords = 'classes', where = topenv(parent.frame()),<br />             generatorName = clName) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>clName</code></td> <td> <p>a character string naming the class to be documented.</p> </td> </tr> <tr valign='top'> <td><code>filename</code></td> <td> <p>usually, a connection or a character string giving the name of the file to which the documentation shell should be written. The default corresponds to a file whose name is the topic name for the class documentation, followed by <code>'.Rd'</code>.  Can also be <code>NA</code> (see below).</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the documentation type to be declared in the output file.</p> </td> </tr> <tr valign='top'> <td><code>keywords</code></td> <td> <p>the keywords to include in the shell of the documentation.  The keyword <code>'classes'</code> should be one of them.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>where to look for the definition of the class and of methods that use it.<br /></p> </td> </tr> <tr valign='top'> <td><code>generatorName</code></td> <td> <p>the name for a generator function for this class; only required if a generator function was created <em>and</em> saved under a name different from the class name. </p> </td> </tr> </table> "	FALSE
"promptMethods"	"methods"	" Generate a Shell for Documentation of Formal Methods "	"<p>Generates a shell of documentation for the methods of a generic function. </p>"	"<pre>promptMethods(f, filename = NULL, methods) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>a character string naming the generic function whose methods are to be documented.</p> </td> </tr> <tr valign='top'> <td><code>filename</code></td> <td> <p>usually, a connection or a character string giving the name of the file to which the documentation shell should be written. The default corresponds to the coded topic name for these methods (currently, <code>f</code> followed by <code>'-methods.Rd'</code>).  Can also be <code>FALSE</code> or <code>NA</code> (see below).</p> </td> </tr> <tr valign='top'> <td><code>methods</code></td> <td> <p>Optional methods list object giving the methods to be documented.  By default, the first methods object for this generic is used (for example, if the current global environment has some methods for <code>f</code>, these would be documented). </p> <p>If this argument is supplied, it is likely to be <code>getMethods(f, where)</code>, with <code>where</code> some package containing methods for <code>f</code>.</p> </td> </tr> </table> "	FALSE
"representation"	"methods"	" Construct a Representation or a Prototype for a Class Definition"	"<p>These are old utility functions  to construct, respectively a list designed to represent the slots and superclasses and a list of prototype specifications.  The <code>representation()</code> function is no longer useful, since the arguments <code>slots</code> and <code>contains</code> to <code>setClass</code> are now recommended. </p> <p>The <code>prototype()</code> function may still be used for the corresponding argument, but a simple list of the same arguments works as well. </p>"	"<pre>representation(...) prototype(...) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>...</code></td> <td><br /><p>The call to representation takes arguments that are single character strings.  Unnamed arguments are classes that a newly defined class extends; named arguments name the explicit slots in the new class, and specify what class each slot should have. </p> <p>In the call to <code>prototype</code>, if an unnamed argument is supplied, it unconditionally forms the basis for the prototype object.  Remaining arguments are taken to correspond to slots of this object.  It is an error to supply more than one unnamed argument. </p> </td> </tr></table> "	FALSE
"removeMethod"	"methods"	" Remove a Method "	"<p>Remove the method for a given function and signature.  Obsolete for ordinary applications: Method definitions in a package should never need to remove methods and it's very bad practice to remove methods that were defined in other packages. </p>"	"<pre>removeMethod(f, signature, where) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>f, signature, where</code></td> <td> <p>  As for <code>setMethod()</code>. </p> </td> </tr></table> "	FALSE
"SClassExtension-class"	"methods"	"Class to Represent Inheritance (Extension) Relations "	"<p>  An object from this class represents a single ‘is’ relationship; lists of these objects are used to represent all the extensions (superclasses) and subclasses for a given class.  The object contains information about how the relation is defined and methods to coerce, test, and replace correspondingly. </p>"	NA	NA	FALSE
"selectSuperClasses"	"methods"	"Super Classes (of Specific Kinds) of a Class"	"<p>Return superclasses of <code>ClassDef</code>, possibly only non-virtual or direct or simple ones. </p> <p>These functions are designed to be fast, and consequently only work with the <code>contains</code> slot of the corresponding class definitions. </p>"	"<pre>selectSuperClasses(Class, dropVirtual = FALSE, namesOnly = TRUE,<br />                    directOnly = TRUE, simpleOnly = directOnly,<br />                    where = topenv(parent.frame()))<br />.selectSuperClasses(ext, dropVirtual = FALSE, namesOnly = TRUE,<br />                     directOnly = TRUE, simpleOnly = directOnly) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>Class</code></td> <td> <p>name of the class or (more efficiently) the class definition object (see <code>getClass</code>).</p> </td> </tr> <tr valign='top'> <td><code>dropVirtual</code></td> <td> <p>logical indicating if only non-virtual superclasses should be returned.</p> </td> </tr> <tr valign='top'> <td><code>namesOnly</code></td> <td> <p>logical indicating if only a vector names instead of a named list class-extensions should be returned.</p> </td> </tr> <tr valign='top'> <td><code>directOnly</code></td> <td> <p>logical indicating if only a <em>direct</em> super classes should be returned.</p> </td> </tr> <tr valign='top'> <td><code>simpleOnly</code></td> <td> <p>logical indicating if only simple class extensions should be returned.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>(only used when <code>Class</code> is not a class definition) environment where the class definition of <code>Class</code> is found.</p> </td> </tr> <tr valign='top'> <td><code>ext</code></td> <td> <p>for <code>.selectSuperClasses()</code> only, a <code>list</code> of class extensions, typically <code>getClassDef(..)@contains</code>.</p> </td> </tr> </table> "	FALSE
"setGeneric"	"methods"	"Create a Generic Version of a Function"	"<p>Create a generic version of the named function so that methods may be defined for it.  A call to <code>setMethod</code> will call <code>setGeneric</code> automatically if applied to a non-generic function. </p> <p>An explicit call to <code>setGeneric</code> is usually not required, but doesn't hurt and makes explicit that methods are being defined for a non-generic function. </p> <p>Standard calls will be of the form: </p> <p><code>setGeneric(name)</code> </p> <p>where <code>name</code> specifies an existing function, possibly in another package.  An alternative when creating a new generic function in this package is: </p> <p><code>setGeneric(name, def)</code> </p> <p>where the function definition <code>def</code> specifies the formal arguments and becomes the default method. </p>"	"<pre>setGeneric(name, def= , group=list(), valueClass=character(),<br />            where= , package= , signature= , useAsDefault= ,<br />            genericFunction= , simpleInheritanceOnly = ) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p> The character string name of the generic function. </p> </td> </tr> <tr valign='top'> <td><code>def</code></td> <td> <p>An optional function object, defining the non-generic version, to become the default method.  This is equivalent in effect to assigning <code>def</code> as the function and then using the one-argument call to <code>setGeneric</code>. </p> <p><em>The following arguments are specialized, optionally used when creating a new generic function with non-standard features. They should not be used when the non-generic is in another package.</em> </p> </td> </tr> <tr valign='top'> <td><code>group</code></td> <td> <p> The name of the group generic function to which this function belongs.  See Methods_Details for details of group generic functions in method selection and S4groupGeneric for existing groups. </p> </td> </tr> <tr valign='top'> <td><code>valueClass</code></td> <td> <p> A character vector specifying one or more class names.  The value returned by the generic function must have (or extend) this class, or one of the classes; otherwise, an error is generated. </p> </td> </tr> <tr valign='top'> <td><code>signature</code></td> <td><br /><p>The vector of names from among the formal arguments to the function, that will be allowed in the signature of methods for this function, in calls to <code>setMethod</code>.  By default and usually, this will be all formal arguments except <code>...</code>. </p> <p>A non-standard signature for the generic function may be used to exclude arguments that take advantage of lazy evaluation; in particular, if the argument may <em>not</em> be evaluated then it cannot be part of the signature. </p> <p>While <code>...</code> cannot be used as part of a general signature, it is possible to have this as the <em>only</em> element of the signature. Methods will then be selected if their signature matches all the <code>...</code> arguments.  See the documentation for topic dotsMethods for details.  It is not possible to mix <code>...</code> and other arguments in the signature. </p> <p>It's usually a mistake to omit arguments from the signature in the belief that this improves efficiency.  For method selection, the arguments that are used in the signatures for the <em>methods</em> are what counts, and then only seriously on the first call to the function with that combination of classes. </p> </td> </tr> <tr valign='top'> <td><code>simpleInheritanceOnly</code></td> <td><br /><p>Supply this argument as <code>TRUE</code> to require that methods selected be inherited through simple inheritance only; that is, from superclasses specified in the <code>contains=</code> argument to <code>setClass</code>, or by simple inheritance to a class union or other virtual class.  Generic functions should require simple inheritance if they need to be assured that they get the complete original object, not one that has been transformed.  Examples of functions requiring simple inheritance are <code>initialize</code>, because by definition it must return an object from the same class as its argument, and <code>show</code>, because it claims to give a full description of the object provided as its argument. </p> </td> </tr> <tr valign='top'> <td><code>useAsDefault</code></td> <td><br /><p>Override the usual default method mechanism.  Only relevant when defining a nonstandard generic function. See the section ‘Specialized Local Generics’. </p> <p><em>The remaining arguments are obsolete for normal applications.</em> </p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p> The name of the package with which this function is associated.  Should be determined automatically from the non-generic version. </p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p> Where to store the resulting objects as side effects. The default, to store in the package's namespace, is the only safe choice. </p> </td> </tr> <tr valign='top'> <td><code>genericFunction</code></td> <td> <p>Obsolete.</p> </td> </tr> </table> "	FALSE
"setGroupGeneric"	"methods"	"Create a Group Generic Version of a Function"	"<p>The <code>setGroupGeneric</code> function behaves like <code>setGeneric</code> except that it constructs a group generic function, differing in two ways from an ordinary generic function.  First, this function cannot be called directly, and the body of the function created will contain a stop call with this information.  Second, the group generic function contains information about the known members of the group, used to keep the members up to date when the group definition changes, through changes in the search list or direct specification of methods, etc. </p> <p>All members of the group must have the identical argument list. </p>"	"<pre>setGroupGeneric(name, def= , group=list(), valueClass=character(),<br />                 knownMembers=list(), package= , where= ) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p>the character string name of the generic function. </p> </td> </tr> <tr valign='top'> <td><code>def</code></td> <td> <p>A function object.  There isn't likely to be an existing nongeneric of this name, so some function needs to be supplied.  Any known member or other function with the same argument list will do, because the group generic cannot be called directly. </p> </td> </tr> <tr valign='top'> <td><code>group, valueClass</code></td> <td> <p>arguments to pass to <code>setGeneric</code>. </p> </td> </tr> <tr valign='top'> <td><code>knownMembers</code></td> <td> <p>the names of functions that are known to be members of this group.  This information is used to reset cached definitions of the member generics when information about the group generic is changed. </p> </td> </tr> <tr valign='top'> <td><code>package, where</code></td> <td> <p>passed to <code>setGeneric</code>, but obsolete and to be avoided.</p> </td> </tr> </table> "	FALSE
"setIs"	"methods"	"Specify a Superclass Explicitly"	"<p><code>setIs</code> is an explicit alternative to the <code>contains=</code> argument to <code>setClass</code>.  It is only needed to create relations with explicit test or coercion. These have not proved to be of much practical value, so this function should not likely be needed in applications. </p> <p>Where the programming goal is to define methods for transforming one class of objects to another, it is usually better practice to call <code>setAs()</code>, which requires the transformations to be done explicitly. </p>"	"<pre>setIs(class1, class2, test=NULL, coerce=NULL, replace=NULL,<br />       by = character(), where = topenv(parent.frame()), classDef =,<br />       extensionObject = NULL, doComplete = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>class1, class2</code></td> <td><br /><p>the names of the classes between which <code>is</code> relations are to be examined defined, or (more efficiently) the class definition objects for the classes.</p> </td> </tr> <tr valign='top'> <td><code>coerce, replace</code></td> <td><br /><p>functions optionally supplied to coerce the object to <code>class2</code>, and to alter the object so that <code>is(object, class2)</code> is identical to <code>value</code>.  See the details section below.</p> </td> </tr> <tr valign='top'> <td><code>test</code></td> <td><br /><p>a <em>conditional</em> relationship is defined by supplying this function.  Conditional relations are discouraged and are not included in selecting methods.  See the details section below. </p> <p>The remaining arguments are for internal use and/or usually omitted.</p> </td> </tr> <tr valign='top'> <td><code>extensionObject</code></td> <td> <p> alternative to the <code>test, coerce,<br />     replace, by</code> arguments; an object from class <code>SClassExtension</code> describing the relation.  (Used in internal calls.)</p> </td> </tr> <tr valign='top'> <td><code>doComplete</code></td> <td> <p>when <code>TRUE</code>, the class definitions will be augmented with indirect relations as well.  (Used in internal calls.)</p> </td> </tr> <tr valign='top'> <td><code>by</code></td> <td><br /><p>In a call to <code>setIs</code>, the name of an intermediary class. Coercion will proceed by first coercing to this class and from there to the target class.  (The intermediate coercions have to be valid.)</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td><br /><p>In a call to <code>setIs</code>, where to store the metadata defining the relationship.  Default is the global environment for calls from the top level of the session or a source file evaluated there.  When the call occurs in the top level of a file in the source of a package, the default will be the namespace or environment of the package. Other uses are tricky and not usually a good idea, unless you really know what you are doing.</p> </td> </tr> <tr valign='top'> <td><code>classDef</code></td> <td><br /><p>Optional class definition for <code>class</code> , required internally when <code>setIs</code> is called during the initial definition of the class by a call to <code>setClass</code>. <em>Don't</em> use this argument, unless you really know why you're doing so.</p> </td> </tr> </table> "	FALSE
"setMethod"	"methods"	" Create and Save a Method "	"<p>Create a method for a generic function, corresponding to a signature of classes for the arguments. Standard usage will be of the form: </p> <p><code>setMethod(f, signature, definition)</code> </p> <p>where <code>f</code> is the name of the function, <code>signature</code> specifies the argument classes for which the method applies and <code>definition</code> is the function definition for the method.  </p>"	"<pre>setMethod(f, signature=character(), definition,<br />           where = topenv(parent.frame()),<br />           valueClass = NULL, sealed = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p> The character-string name of the generic function. The unquoted name usually works as well (evaluating to the generic function), except for a few functions in the base package.</p> </td> </tr> <tr valign='top'> <td><code>signature</code></td> <td> <p> The classes required for some of the arguments. Most applications just require one or two character strings matching the first argument(s) in the signature. More complicated cases follow R's rule for argument matching. See the details below; however, if the signature is not trivial, you should use <code>method.skeleton</code> to generate a valid call to <code>setMethod</code>.</p> </td> </tr> <tr valign='top'> <td><code>definition</code></td> <td> <p> A function definition, which will become the method called when the arguments in a call to <code>f</code> match the classes in <code>signature</code>, directly or through inheritance. The definition must be a function with the same formal arguments as the generic; however, <code>setMethod()</code> will handle methods that add arguments, if <code>...</code> is a formal argument to the generic. See the Details section. </p> </td> </tr> <tr valign='top'> <td><code>where, valueClass, sealed</code></td> <td> <p><em>These arguments are allowed but either obsolete or rarely appropriate.</em> </p> <p><code>where</code>: where to store the definition; should be the default, the namespace for the package. </p> <p><code>valueClass</code> Obsolete.  </p> <p><code>sealed</code> prevents the method being redefined, but should never be needed when the method is defined in the source code of a package. </p> </td> </tr> </table> "	FALSE
"show"	"methods"	"Show an Object"	"<p>Display the object, by printing, plotting or whatever suits its class.  This function exists to be specialized by methods.  The default method calls <code>showDefault</code>. </p> <p>Formal methods for <code>show</code> will usually be invoked for automatic printing (see the details). </p>"	"<pre>show(object) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>object</code></td> <td> <p>Any R object</p> </td> </tr></table> "	FALSE
"showMethods"	"methods"	"Show all the methods for the specified function(s) or class"	"<p>Show a summary of the methods for one or more generic functions, possibly restricted to those involving specified classes. </p>"	"<pre>showMethods(f = character(), where = topenv(parent.frame()),<br />             classes = NULL, includeDefs = FALSE,<br />             inherited = !includeDefs,<br />             showEmpty, printTo = stdout(), fdef) .S4methods(generic.function, class) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>one or more function names.  If omitted, all functions will be shown that match the other arguments. </p> <p>The argument can also be an expression that evaluates to a single generic function, in which case argument <code>fdef</code> is ignored.  Providing an expression for the function allows examination of hidden or anonymous functions; see the example for <code>isDiagonal()</code>.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>Where to find the generic function, if not supplied as an argument. When <code>f</code> is missing, or length 0, this also determines which generic functions to examine.  If <code>where</code> is supplied, only the generic functions returned by <code>getGenerics(where)</code> are eligible for printing.  If <code>where</code> is also missing, all the cached generic functions are considered.</p> </td> </tr> <tr valign='top'> <td><code>classes</code></td> <td> <p>If argument <code>classes</code> is supplied, it is a vector of class names that restricts the displayed results to those methods whose signatures include one or more of those classes.</p> </td> </tr> <tr valign='top'> <td><code>includeDefs</code></td> <td> <p>If <code>includeDefs</code> is <code>TRUE</code>, include the definitions of the individual methods in the printout.</p> </td> </tr> <tr valign='top'> <td><code>inherited</code></td> <td> <p>logical indicating if methods that have been found by inheritance, so far in the session, will be included and marked as inherited.  Note that an inherited method will not usually appear until it has been used in this session.  See <code>selectMethod</code> if you want to know what method would be dispatched for particular classes of arguments.</p> </td> </tr> <tr valign='top'> <td><code>showEmpty</code></td> <td> <p>logical indicating whether methods with no defined methods matching the other criteria should be shown at all.  By default, <code>TRUE</code> if and only if argument <code>f</code> is not missing.</p> </td> </tr> <tr valign='top'> <td><code>printTo</code></td> <td> <p>The connection on which the information will be shown; by default, on standard output.</p> </td> </tr> <tr valign='top'> <td><code>fdef</code></td> <td> <p>Optionally, the generic function definition to use; if missing, one is found, looking in <code>where</code> if that is specified. See also comment in ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>generic.function, class</code></td> <td> <p>See <code>methods</code>.</p> </td> </tr> </table> "	FALSE
"signature-class"	"methods"	"Class \"signature\" For Method Definitions"	"<p>This class represents the mapping of some of the formal arguments of a function onto the corresponding classes.  It is used for two slots in the <code>MethodDefinition</code> class. </p>"	NA	NA	FALSE
"zBasicFunsList"	"methods"	"List of Builtin and Special Functions"	"<p>A named list providing instructions for turning builtin and special functions into generic functions. </p> <p>Functions in R that are defined as <code>.Primitive(&lt;name&gt;)</code> are not suitable for formal methods, because they lack the basic reflectance property.  You can't find the argument list for these functions by examining the function object itself. </p> <p>Future versions of R may fix this by attaching a formal argument list to the corresponding function.  While generally the names of arguments are not checked by the internal code implementing the function, the number of arguments frequently is. </p> <p>In any case, some definition of a formal argument list is needed if users are to define methods for these functions.  In particular, if methods are to be merged from multiple packages, the different sets of methods need to agree on the formal arguments. </p> <p>In the absence of reflectance, this list provides the relevant information  via a dummy function associated with each of the known specials for which methods are allowed. </p> <p>At the same, the list flags those specials for which methods are meaningless (e.g., <code>for</code>) or just a very bad idea (e.g., <code>.Primitive</code>). </p> <p>A generic function created via <code>setMethod</code>, for example, for one of these special functions will have the argument list from <code>.BasicFunsList</code>.  If no entry exists, the argument list <code>(x, ...)</code>  is assumed. </p>"	NA	NA	FALSE
"base-package"	"base"	"The R Base Package"	"<p>Base R functions </p>"	NA	NA	FALSE
"abbreviate"	"base"	"Abbreviate Strings"	"<p>Abbreviate strings to at least <code>minlength</code> characters, such that they remain <em>unique</em> (if they were), unless <code>strict = TRUE</code>. </p>"	"<pre>abbreviate(names.arg, minlength = 4, use.classes = TRUE,<br />            dot = FALSE, strict = FALSE,<br />            method = c('left.kept', 'both.sides'), named = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>names.arg</code></td> <td> <p>a character vector of names to be abbreviated, or an object to be coerced to a character vector by <code>as.character</code>.</p> </td> </tr> <tr valign='top'> <td><code>minlength</code></td> <td> <p>the minimum length of the abbreviations.</p> </td> </tr> <tr valign='top'> <td><code>use.classes</code></td> <td> <p>logical: should lowercase characters be removed first?</p> </td> </tr> <tr valign='top'> <td><code>dot</code></td> <td> <p>logical: should a dot (<code>'.'</code>) be appended?</p> </td> </tr> <tr valign='top'> <td><code>strict</code></td> <td> <p>logical: should <code>minlength</code> be observed strictly? Note that setting <code>strict = TRUE</code> may return <em>non</em>-unique strings.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>a character string specifying the method used with default <code>'left.kept'</code>, see ‘Details’ below.  Partial matches allowed.</p> </td> </tr> <tr valign='top'> <td><code>named</code></td> <td> <p>logical: should <code>names</code> (with original vector) be returned.</p> </td> </tr> </table> "	FALSE
"MathFun"	"base"	"Miscellaneous Mathematical Functions"	"<p><code>abs(x)</code> computes the absolute value of x, <code>sqrt(x)</code> computes the (principal) square root of x, <i>√{x}</i>. </p> <p>The naming follows the standard for computer languages such as C or Fortran. </p>"	"<pre>abs(x) sqrt(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a numeric or <code>complex</code> vector or array.</p> </td> </tr></table> "	FALSE
"Trig"	"base"	"Trigonometric Functions"	"<p>These functions give the obvious trigonometric functions.  They respectively compute the cosine, sine, tangent, arc-cosine, arc-sine, arc-tangent, and the two-argument arc-tangent. </p> <p><code>cospi(x)</code>, <code>sinpi(x)</code>, and <code>tanpi(x)</code>, compute <code>cos(pi*x)</code>, <code>sin(pi*x)</code>, and <code>tan(pi*x)</code>. </p>"	"<pre>cos(x) sin(x) tan(x)<br />acos(x) asin(x) atan(x) atan2(y, x)<br />cospi(x) sinpi(x) tanpi(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric or complex vectors.</p> </td> </tr></table> "	FALSE
"Hyperbolic"	"base"	"Hyperbolic Functions"	"<p>These functions give the obvious hyperbolic functions.  They respectively compute the hyperbolic cosine, sine, tangent, and their inverses, arc-cosine, arc-sine, arc-tangent (or ‘<em>area cosine</em>’, etc). </p>"	"<pre>cosh(x) sinh(x) tanh(x) acosh(x) asinh(x) atanh(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a numeric or complex vector</p> </td> </tr></table> "	FALSE
"factor"	"base"	"Factors"	"<p>The function <code>factor</code> is used to encode a vector as a factor (the terms ‘category’ and ‘enumerated type’ are also used for factors).  If argument <code>ordered</code> is <code>TRUE</code>, the factor levels are assumed to be ordered.  For compatibility with S there is also a function <code>ordered</code>. </p> <p><code>is.factor</code>, <code>is.ordered</code>, <code>as.factor</code> and <code>as.ordered</code> are the membership and coercion functions for these classes. </p>"	"<pre>factor(x = character(), levels, labels = levels,<br />        exclude = NA, ordered = is.ordered(x), nmax = NA)<br />ordered(x, ...)<br />is.factor(x) is.ordered(x)<br />as.factor(x) as.ordered(x)<br />addNA(x, ifany = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector of data, usually taking a small number of distinct values.</p> </td> </tr> <tr valign='top'> <td><code>levels</code></td> <td> <p>an optional vector of the values (as character strings) that <code>x</code> might have taken.  The default is the unique set of values taken by <code>as.character(x)</code>, sorted into increasing order <em>of <code>x</code></em>.  Note that this set can be specified as smaller than <code>sort(unique(x))</code>.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p><em>either</em> an optional character vector of labels for the levels (in the same order as <code>levels</code> after removing those in <code>exclude</code>), <em>or</em> a character string of length 1.</p> </td> </tr> <tr valign='top'> <td><code>exclude</code></td> <td> <p>a vector of values to be excluded when forming the set of levels.  This should be of the same type as <code>x</code>, and will be coerced if necessary.</p> </td> </tr> <tr valign='top'> <td><code>ordered</code></td> <td> <p>logical flag to determine if the levels should be regarded as ordered (in the order given).</p> </td> </tr> <tr valign='top'> <td><code>nmax</code></td> <td> <p>an upper bound on the number of levels; see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>(in <code>ordered(.)</code>): any of the above, apart from <code>ordered</code> itself.</p> </td> </tr> <tr valign='top'> <td><code>ifany</code></td> <td> <p>(only add an <code>NA</code> level if it is used, i.e. if <code>any(is.na(x))</code>.</p> </td> </tr> </table> "	FALSE
"taskCallback"	"base"	"Add or Remove a Top-Level Task Callback"	"<p><code>addTaskCallback</code> registers an R function that is to be called each time a top-level task is completed. </p> <p><code>removeTaskCallback</code> un-registers a function that was registered earlier via <code>addTaskCallback</code>. </p> <p>These provide low-level access to the internal/native mechanism for managing task-completion actions. One can use <code>taskCallbackManager</code> at the S-language level to manage S functions that are called at the completion of each task. This is easier and more direct. </p>"	"<pre>addTaskCallback(f, data = NULL, name = character()) removeTaskCallback(id) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>the function that is to be invoked each time a top-level task is successfully completed.  This is called with 5 or 4 arguments depending on whether <code>data</code> is specified or not, respectively. The return value should be a logical value indicating whether to keep the callback in the list of active callbacks or discard it.</p> </td> </tr> <tr valign='top'> <td><code>data</code></td> <td> <p>if specified, this is the 5-th argument in the call to the callback function <code>f</code>.</p> </td> </tr> <tr valign='top'> <td><code>id</code></td> <td> <p>a string or an integer identifying the element in the internal callback list to be removed. Integer indices are 1-based, i.e the first element is 1. The names of currently registered handlers is available using <code>getTaskCallbackNames</code> and is also returned in a call to <code>addTaskCallback</code>. </p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>character: names to be used.</p> </td> </tr> </table> "	FALSE
"agrep"	"base"	"Approximate String Matching (Fuzzy Matching)"	"<p>Searches for approximate matches to <code>pattern</code> (the first argument) within each element of the string <code>x</code> (the second argument) using the generalized Levenshtein edit distance (the minimal possibly weighted number of insertions, deletions and substitutions needed to transform one string into another). </p>"	"<pre>agrep(pattern, x, max.distance = 0.1, costs = NULL,<br />       ignore.case = FALSE, value = FALSE, fixed = TRUE,<br />       useBytes = FALSE)<br />agrepl(pattern, x, max.distance = 0.1, costs = NULL,<br />        ignore.case = FALSE, fixed = TRUE, useBytes = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pattern</code></td> <td> <p>a non-empty character string or a character string containing a regular expression (for <code>fixed = FALSE</code>) to be matched. Coerced by <code>as.character</code> to a string if possible.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>character vector where matches are sought. Coerced by <code>as.character</code> to a character vector if possible.</p> </td> </tr> <tr valign='top'> <td><code>max.distance</code></td> <td> <p>Maximum distance allowed for a match.  Expressed either as integer, or as a fraction of the <em>pattern</em> length times the maximal transformation cost (will be replaced by the smallest integer not less than the corresponding fraction), or a list with possible components </p><br /><dl> <dt> <code>cost</code>:</dt> <dd> <p>maximum number/fraction of match cost (generalized Levenshtein distance)</p> </dd> <dt> <code>all</code>:</dt> <dd> <p>maximal number/fraction of <em>all</em> transformations (insertions, deletions and substitutions)</p> </dd> <dt> <code>insertions</code>:</dt> <dd> <p>maximum number/fraction of insertions</p> </dd> <dt> <code>deletions</code>:</dt> <dd> <p>maximum number/fraction of deletions</p> </dd> <dt> <code>substitutions</code>:</dt> <dd> <p>maximum number/fraction of substitutions</p> </dd> </dl> <p>If <code>cost</code> is not given, <code>all</code> defaults to 10%, and the other transformation number bounds default to <code>all</code>. The component names can be abbreviated. </p> </td> </tr> <tr valign='top'> <td><code>costs</code></td> <td> <p>a numeric vector or list with names partially matching <span class='samp'>insertions</span>, <span class='samp'>deletions</span> and <span class='samp'>substitutions</span> giving the respective costs for computing the generalized Levenshtein distance, or <code>NULL</code> (default) indicating using unit cost for all three possible transformations. Coerced to integer via <code>as.integer</code> if possible.</p> </td> </tr> <tr valign='top'> <td><code>ignore.case</code></td> <td> <p>if <code>FALSE</code>, the pattern matching is <em>case sensitive</em> and if <code>TRUE</code>, case is ignored during matching.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>if <code>FALSE</code>, a vector containing the (integer) indices of the matches determined is returned and if <code>TRUE</code>, a vector containing the matching elements themselves is returned.</p> </td> </tr> <tr valign='top'> <td><code>fixed</code></td> <td> <p>logical.  If <code>TRUE</code> (default), the pattern is matched literally (as is).  Otherwise, it is matched as a regular expression.</p> </td> </tr> <tr valign='top'> <td><code>useBytes</code></td> <td> <p>logical. in a multibyte locale, should the comparison be character-by-character (the default) or byte-by-byte.</p> </td> </tr> </table> "	FALSE
"list"	"base"	"Lists – Generic and Dotted Pairs"	"<p>Functions to construct, coerce and check for both kinds of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> lists. </p>"	"<pre>list(...) pairlist(...)<br />as.list(x, ...) ## S3 method for class 'environment' as.list(x, all.names = FALSE, sorted = FALSE, ...) as.pairlist(x)<br />is.list(x) is.pairlist(x)<br />alist(...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>objects, possibly named.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>object to be coerced or tested.</p> </td> </tr> <tr valign='top'> <td><code>all.names</code></td> <td> <p>a logical indicating whether to copy all values or (default) only those whose names do not begin with a dot.</p> </td> </tr> <tr valign='top'> <td><code>sorted</code></td> <td> <p>a logical indicating whether the <code>names</code> of the resulting list should be sorted (increasingly).  Note that this is somewhat costly, but may be useful for comparison of environments.</p> </td> </tr> </table> "	FALSE
"all"	"base"	"Are All Values True?"	"<p>Given a set of logical vectors, are all of the values true? </p>"	"<pre>all(..., na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>zero or more logical vectors.  Other objects of zero length are ignored, and the rest are coerced to logical ignoring any class.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical.  If true <code>NA</code> values are removed before the result is computed.</p> </td> </tr> </table> "	FALSE
"all.equal"	"base"	"Test if Two Objects are (Nearly) Equal"	"<p><code>all.equal(x, y)</code> is a utility to compare <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects <code>x</code> and <code>y</code> testing ‘near equality’.  If they are different, comparison is still made to some extent, and a report of the differences is returned.<br />    Do not use <code>all.equal</code> directly in <code>if</code> expressions—either use <code>isTRUE(all.equal(....))</code> or <code>identical</code> if appropriate. </p>"	"<pre>all.equal(target, current, ...)<br />## S3 method for class 'numeric' all.equal(target, current,<br />           tolerance = sqrt(.Machine$double.eps), scale = NULL,<br />           ..., check.attributes = TRUE)<br />## S3 method for class 'list' all.equal(target, current, ...,<br />           check.attributes = TRUE, use.names = TRUE)<br />## S3 method for class 'environment' all.equal(target, current, all.names=TRUE, ...)<br />## S3 method for class 'POSIXt' all.equal(target, current, ..., tolerance = 1e-3, scale)<br /> attr.all.equal(target, current, ...,<br />                check.attributes = TRUE, check.names = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>target</code></td> <td> <p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>current</code></td> <td> <p>other <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, to be compared with <code>target</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments for different methods, notably the following two, for numerical comparison:</p> </td> </tr> <tr valign='top'> <td><code>tolerance</code></td> <td> <p>numeric <i>≥</i> 0.  Differences smaller than <code>tolerance</code> are not reported.  The default value is close to <code>1.5e-8</code>.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>numeric scalar &gt; 0 (or <code>NULL</code>). See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>check.attributes</code></td> <td> <p>logical indicating if the <code>attributes</code> of <code>target</code> and <code>current</code> (other than the names) should be compared.</p> </td> </tr> <tr valign='top'> <td><code>use.names</code></td> <td> <p>logical indicating if <code>list</code> comparison should report differing components by name (if matching) instead of integer index.  Note that this comes after <code>...</code> and so must be specified by its full name.</p> </td> </tr> <tr valign='top'> <td><code>all.names</code></td> <td> <p>logical passed to <code>ls</code> indicating if “hidden” objects should also be considered in the environments.</p> </td> </tr> <tr valign='top'> <td><code>check.names</code></td> <td> <p>logical indicating if the <code>names(.)</code> of <code>target</code> and <code>current</code> should be compared.</p> </td> </tr> </table> "	FALSE
"allnames"	"base"	"Find All Names in an Expression"	"<p>Return a character vector containing all the names which occur in an expression or call. </p>"	"<pre>all.names(expr, functions = TRUE, max.names = -1L, unique = FALSE)<br />all.vars(expr, functions = FALSE, max.names = -1L, unique = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>an expression or call from which the names are to be extracted.</p> </td> </tr> <tr valign='top'> <td><code>functions</code></td> <td> <p>a logical value indicating whether function names should be included in the result.</p> </td> </tr> <tr valign='top'> <td><code>max.names</code></td> <td> <p>the maximum number of names to be returned.  <code>-1</code> indicates no limit (other than vector size limits).</p> </td> </tr> <tr valign='top'> <td><code>unique</code></td> <td> <p>a logical value which indicates whether duplicate names should be removed from the value.</p> </td> </tr> </table> "	FALSE
"any"	"base"	"Are Some Values True?"	"<p>Given a set of logical vectors, is at least one of the values true? </p>"	"<pre>any(..., na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>zero or more logical vectors.  Other objects of zero length are ignored, and the rest are coerced to logical ignoring any class.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical.  If true <code>NA</code> values are removed before the result is computed.</p> </td> </tr> </table> "	FALSE
"duplicated"	"base"	"Determine Duplicate Elements"	"<p><code>duplicated()</code> determines which elements of a vector or data frame are duplicates of elements with smaller subscripts, and returns a logical vector indicating which elements (rows) are duplicates. </p> <p><code>anyDuplicated(.)</code> is a “generalized” more efficient shortcut for <code>any(duplicated(.))</code>. </p>"	"<pre>duplicated(x, incomparables = FALSE, ...)<br />## Default S3 method: duplicated(x, incomparables = FALSE,<br />            fromLast = FALSE, nmax = NA, ...)<br />## S3 method for class 'array' duplicated(x, incomparables = FALSE, MARGIN = 1,<br />            fromLast = FALSE, ...)<br />anyDuplicated(x, incomparables = FALSE, ...) ## Default S3 method: anyDuplicated(x, incomparables = FALSE,<br />            fromLast = FALSE, ...) ## S3 method for class 'array' anyDuplicated(x, incomparables = FALSE,<br />            MARGIN = 1, fromLast = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector or a data frame or an array or <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>incomparables</code></td> <td> <p>a vector of values that cannot be compared. <code>FALSE</code> is a special value, meaning that all values can be compared, and may be the only value accepted for methods other than the default.  It will be coerced internally to the same type as <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>fromLast</code></td> <td> <p>logical indicating if duplication should be considered from the reverse side, i.e., the last (or rightmost) of identical elements would correspond to <code>duplicated = FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>nmax</code></td> <td> <p>the maximum number of unique items expected (greater than one).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments for particular methods.</p> </td> </tr> <tr valign='top'> <td><code>MARGIN</code></td> <td> <p>the array margin to be held fixed: see <code>apply</code>, and note that <code>MARGIN = 0</code> maybe useful.</p> </td> </tr> </table> "	FALSE
"NA"	"base"	"‘Not Available’ / Missing Values"	"<p><code>NA</code> is a logical constant of length 1 which contains a missing value indicator.  <code>NA</code> can be coerced to any other vector type except raw.  There are also constants <code>NA_integer_</code>, <code>NA_real_</code>, <code>NA_complex_</code> and <code>NA_character_</code> of the other atomic vector types which support missing values: all of these are reserved words in the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> language. </p> <p>The generic function <code>is.na</code> indicates which elements are missing. </p> <p>The generic function <code>is.na&lt;-</code> sets elements to <code>NA</code>. </p> <p>The generic function <code>anyNA</code> implements <code>any(is.na(x))</code> in a possibly faster way (especially for atomic vectors). </p>"	"<pre>NA is.na(x) anyNA(x, recursive = FALSE)<br />## S3 method for class 'data.frame' is.na(x)<br />is.na(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object to be tested: the default method for <code>is.na</code> handles atomic vectors, lists and pairlists: that for <code>anyNA</code> also handles <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>recursive</code></td> <td> <p>logical: should <code>anyNA</code> be applied recursively to lists and pairlists?</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a suitable index vector for use with <code>x</code>.</p> </td> </tr> </table> "	FALSE
"numeric_version"	"base"	"Numeric Versions"	"<p>A simple S3 class for representing numeric versions including package versions, and associated methods.</p>"	"<pre>numeric_version(x, strict = TRUE) package_version(x, strict = TRUE) R_system_version(x, strict = TRUE) getRversion() </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector with suitable numeric version strings (see ‘Details’); for <code>package_version</code>, alternatively an R version object as obtained by <code>R.version</code>.</p> </td> </tr> <tr valign='top'> <td><code>strict</code></td> <td> <p>a logical indicating whether invalid numeric versions should results in an error (default) or not.</p> </td> </tr> </table> "	FALSE
"DateTimeClasses"	"base"	"Date-Time Classes"	"<p>Description of the classes <code>'POSIXlt'</code> and <code>'POSIXct'</code> representing calendar dates and times. </p>"	"<pre>## S3 method for class 'POSIXct' print(x, ...)<br />## S3 method for class 'POSIXct' summary(object, digits = 15, ...)<br />time + z z + time time - z time1 lop time2 </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, object</code></td> <td> <p>An object to be printed or summarized from one of the date-time classes.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>Number of significant digits for the computations: should be high enough to represent the least important time unit exactly.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to be passed from or to other methods.</p> </td> </tr> <tr valign='top'> <td><code>time</code></td> <td> <p>date-time objects</p> </td> </tr> <tr valign='top'> <td><code>time1, time2</code></td> <td> <p>date-time objects or character vectors.  (Character vectors are converted by <code>as.POSIXct</code>.)</p> </td> </tr> <tr valign='top'> <td><code>z</code></td> <td> <p>a numeric vector (in seconds)</p> </td> </tr> <tr valign='top'> <td><code>lop</code></td> <td> <p>One of <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> or <code>&gt;=</code>.</p> </td> </tr> </table> "	FALSE
"aperm"	"base"	"Array Transposition"	"<p>Transpose an array by permuting its dimensions and optionally resizing it. </p>"	"<pre>aperm(a, perm, ...) ## Default S3 method: aperm(a, perm = NULL, resize = TRUE, ...) ## S3 method for class 'table' aperm(a, perm = NULL, resize = TRUE, keep.class = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>a</code></td> <td> <p>the array to be transposed.</p> </td> </tr> <tr valign='top'> <td><code>perm</code></td> <td> <p>the subscript permutation vector, usually a permutation of the integers <code>1:n</code>, where <code>n</code> is the number of dimensions of <code>a</code>.  When <code>a</code> has named dimnames, it can be a character vector of length <code>n</code> giving a permutation of those names. The default (used whenever <code>perm</code> has zero length) is to reverse the order of the dimensions.</p> </td> </tr> <tr valign='top'> <td><code>resize</code></td> <td> <p>a flag indicating whether the vector should be resized as well as having its elements reordered (default <code>TRUE</code>).</p> </td> </tr> <tr valign='top'> <td><code>keep.class</code></td> <td> <p>logical indicating if the result should be of the same class as <code>a</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>potential further arguments of methods.</p> </td> </tr> </table> "	FALSE
"append"	"base"	"Vector Merging"	"<p>Add elements to a vector. </p>"	"<pre>append(x, values, after = length(x)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the vector to be modified.</p> </td> </tr> <tr valign='top'> <td><code>values</code></td> <td> <p>to be included in the modified vector.</p> </td> </tr> <tr valign='top'> <td><code>after</code></td> <td> <p>a subscript, after which the values are to be appended.</p> </td> </tr> </table> "	FALSE
"apply"	"base"	"Apply Functions Over Array Margins"	"<p>Returns a vector or array or list of values obtained by applying a function to margins of an array or matrix. </p>"	"<pre>apply(X, MARGIN, FUN, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>X</code></td> <td> <p>an array, including a matrix.</p> </td> </tr> <tr valign='top'> <td><code>MARGIN</code></td> <td> <p>a vector giving the subscripts which the function will be applied over.  E.g., for a matrix <code>1</code> indicates rows, <code>2</code> indicates columns, <code>c(1, 2)</code> indicates rows and columns. Where <code>X</code> has named dimnames, it can be a character vector selecting dimension names.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>the function to be applied: see ‘Details’. In the case of functions like <code>+</code>, <code>%*%</code>, etc., the function name must be backquoted or quoted.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional arguments to <code>FUN</code>.</p> </td> </tr> </table> "	FALSE
"complex"	"base"	"Complex Numbers and Basic Functionality"	"<p>Basic functions which support complex arithmetic in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>, in addition to the arithmetic operators <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, and <code>^</code>. </p>"	"<pre>complex(length.out = 0, real = numeric(), imaginary = numeric(),<br />         modulus = 1, argument = 0) as.complex(x, ...) is.complex(x)<br />Re(z) Im(z) Mod(z) Arg(z) Conj(z) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>length.out</code></td> <td> <p>numeric.  Desired length of the output vector, inputs being recycled as needed.</p> </td> </tr> <tr valign='top'> <td><code>real</code></td> <td> <p>numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>imaginary</code></td> <td> <p>numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>modulus</code></td> <td> <p>numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>argument</code></td> <td> <p>numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object, probably of mode <code>complex</code>.</p> </td> </tr> <tr valign='top'> <td><code>z</code></td> <td> <p>an object of mode <code>complex</code>, or one of a class for which a methods has been defined.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"args"	"base"	"Argument List of a Function"	"<p>Displays the argument names and corresponding default values of a function or primitive. </p>"	"<pre>args(name) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>name</code></td> <td> <p>a function (a closure or a primitive). If <code>name</code> is a character string then the function with that name is found and used.</p> </td> </tr></table> "	FALSE
"Arithmetic"	"base"	"Arithmetic Operators"	"<p>These unary and binary operators perform arithmetic on numeric or complex vectors (or objects which can be coerced to them). </p>"	"<pre>+ x - x x + y x - y x * y x / y x ^ y x %% y x %/% y </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric or complex vectors or objects which can be coerced to such, or other objects for which methods have been written.</p> </td> </tr></table> "	FALSE
"array"	"base"	"Multi-way Arrays"	"<p>Creates or tests for arrays. </p>"	"<pre>array(data = NA, dim = length(data), dimnames = NULL) as.array(x, ...) is.array(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>data</code></td> <td> <p>a vector (including a list or <code>expression</code> vector) giving data to fill the array.  Non-atomic classed objects are coerced by <code>as.vector</code>.</p> </td> </tr> <tr valign='top'> <td><code>dim</code></td> <td> <p>the dim attribute for the array to be created, that is an integer vector of length one or more giving the maximal indices in each dimension.</p> </td> </tr> <tr valign='top'> <td><code>dimnames</code></td> <td> <p>either <code>NULL</code> or the names for the dimensions. This must a list (or it will be ignored) with one component for each dimension, either <code>NULL</code> or a character vector of the length given by <code>dim</code> for that dimension.  The list can be named, and the list names will be used as names for the dimensions.  If the list is shorter than the number of dimensions, it is extended by <code>NULL</code>s to the length required.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"which"	"base"	"Which indices are TRUE?"	"<p>Give the <code>TRUE</code> indices of a logical object, allowing for array indices. </p>"	"<pre>which(x, arr.ind = FALSE, useNames = TRUE) arrayInd(ind, .dim, .dimnames = NULL, useNames = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a <code>logical</code> vector or array.  <code>NA</code>s are allowed and omitted (treated as if <code>FALSE</code>).</p> </td> </tr> <tr valign='top'> <td><code>arr.ind</code></td> <td> <p>logical; should <b>arr</b>ay <b>ind</b>ices be returned when <code>x</code> is an array?</p> </td> </tr> <tr valign='top'> <td><code>ind</code></td> <td> <p>integer-valued index vector, as resulting from <code>which(x)</code>.</p> </td> </tr> <tr valign='top'> <td><code>.dim</code></td> <td> <p><code>dim(.)</code> integer vector</p> </td> </tr> <tr valign='top'> <td><code>.dimnames</code></td> <td> <p>optional list of character <code>dimnames(.)</code>. If <code>useNames</code> is true, to be used for constructing dimnames for <code>arrayInd()</code> (and hence, <code>which(*, arr.ind=TRUE)</code>). If <code>names(.dimnames)</code> is not empty, these are used as column names.  <code>.dimnames[[1]]</code> is used as row names.</p> </td> </tr> <tr valign='top'> <td><code>useNames</code></td> <td> <p>logical indicating if the value of <code>arrayInd()</code> should have (non-null) dimnames at all.</p> </td> </tr> </table> "	FALSE
"call"	"base"	"Function Calls"	"<p>Create or test for objects of mode <code>'call'</code>. </p>"	"<pre>call(name, ...) is.call(x) as.call(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p>a non-empty character string naming the function to be called.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be part of the call.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an arbitrary <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> </table> "	FALSE
"character"	"base"	"Character Vectors"	"<p>Create or test for objects of type <code>'character'</code>. </p>"	"<pre>character(length = 0) as.character(x, ...) is.character(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>length</code></td> <td> <p>A non-negative integer specifying the desired length. Double values will be coerced to integer: supplying an argument of length other than one is an error.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>object to be coerced or tested.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"conditions"	"base"	"Condition Handling and Recovery"	"<p>These functions provide a mechanism for handling unusual conditions, including errors and warnings. </p>"	"<pre>tryCatch(expr, ..., finally) withCallingHandlers(expr, ...)<br />signalCondition(cond)<br />simpleCondition(message, call = NULL) simpleError<br />    (message, call = NULL) simpleWarning  (message, call = NULL) simpleMessage  (message, call = NULL)<br />## S3 method for class 'condition' as.character(x, ...) ## S3 method for class 'error' as.character(x, ...) ## S3 method for class 'condition' print(x, ...) ## S3 method for class 'restart' print(x, ...)<br />conditionCall(c) ## S3 method for class 'condition' conditionCall(c) conditionMessage(c) ## S3 method for class 'condition' conditionMessage(c)<br />withRestarts(expr, ...)<br />computeRestarts(cond = NULL) findRestart(name, cond = NULL) invokeRestart(r, ...) invokeRestartInteractively(r)<br />isRestart(x) restartDescription(r) restartFormals(r)<br />.signalSimpleWarning(msg, call) .handleSimpleError(h, msg, call) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>c</code></td> <td> <p>a condition object.</p> </td> </tr> <tr valign='top'> <td><code>call</code></td> <td> <p>call expression.</p> </td> </tr> <tr valign='top'> <td><code>cond</code></td> <td> <p>a condition object.</p> </td> </tr> <tr valign='top'> <td><code>expr</code></td> <td> <p>expression to be evaluated.</p> </td> </tr> <tr valign='top'> <td><code>finally</code></td> <td> <p>expression to be evaluated before returning or exiting.</p> </td> </tr> <tr valign='top'> <td><code>h</code></td> <td> <p>function.</p> </td> </tr> <tr valign='top'> <td><code>message</code></td> <td> <p>character string.</p> </td> </tr> <tr valign='top'> <td><code>msg</code></td> <td> <p>character string.</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>character string naming a restart.</p> </td> </tr> <tr valign='top'> <td><code>r</code></td> <td> <p>restart object.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>object.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments; see details below.</p> </td> </tr> </table> "	FALSE
"as.Date"	"base"	"Date Conversion Functions to and from Character"	"<p>Functions to convert between character representations and objects of class <code>'Date'</code> representing calendar dates. </p>"	"<pre>as.Date(x, ...) ## S3 method for class 'character' as.Date(x, format, ...) ## S3 method for class 'numeric' as.Date(x, origin, ...) ## S3 method for class 'POSIXct' as.Date(x, tz = 'UTC', ...)<br />## S3 method for class 'Date' format(x, ...)<br />## S3 method for class 'Date' as.character(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>An object to be converted.</p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p>A character string.  If not specified, it will try <code>'%Y-%m-%d'</code> then <code>'%Y/%m/%d'</code> on the first non-<code>NA</code> element, and give an error if neither works. Otherwise, the processing is via <code>strptime</code></p> </td> </tr> <tr valign='top'> <td><code>origin</code></td> <td> <p>a Date object, or something which can be coerced by <code>as.Date(origin, ...)</code> to such an object.</p> </td> </tr> <tr valign='top'> <td><code>tz</code></td> <td> <p>a time zone name.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to be passed from or to other methods, including <code>format</code> for <code>as.character</code> and <code>as.Date</code> methods.</p> </td> </tr> </table> "	FALSE
"hexmode"	"base"	"Display Numbers in Hexadecimal"	"<p>Convert or print integers in hexadecimal format, with as many digits as are needed to display the largest, using leading zeroes as necessary. </p>"	"<pre>as.hexmode(x)<br />## S3 method for class 'hexmode' as.character(x, ...)<br />## S3 method for class 'hexmode' format(x, width = NULL, upper.case = FALSE, ...)<br />## S3 method for class 'hexmode' print(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>An object, for the methods inheriting from class <code>'hexmode'</code>.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p><code>NULL</code> or a positive integer specifying the minimum field width to be used, with padding by leading zeroes.</p> </td> </tr> <tr valign='top'> <td><code>upper.case</code></td> <td> <p>a logical indicating whether to use upper-case letters or lower-case letters (default).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"octmode"	"base"	"Display Numbers in Octal"	"<p>Convert or print integers in octal format, with as many digits as are needed to display the largest, using leading zeroes as necessary. </p>"	"<pre>as.octmode(x)<br />## S3 method for class 'octmode' as.character(x, ...)<br />## S3 method for class 'octmode' format(x, width = NULL, ...)<br />## S3 method for class 'octmode' print(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>An object, for the methods inheriting from class <code>'octmode'</code>.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p><code>NULL</code> or a positive integer specifying the minimum field width to be used, with padding by leading zeroes.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"strptime"	"base"	"Date-time Conversion Functions to and from Character"	"<p>Functions to convert between character representations and objects of classes <code>'POSIXlt'</code> and <code>'POSIXct'</code> representing calendar dates and times. </p>"	"<pre>## S3 method for class 'POSIXct' format(x, format = '', tz = '', usetz = FALSE, ...) ## S3 method for class 'POSIXlt' format(x, format = '', usetz = FALSE, ...)<br />## S3 method for class 'POSIXt' as.character(x, ...)<br />strftime(x, format = '', tz = '', usetz = FALSE, ...) strptime(x, format, tz = '') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>An object to be converted: a character vector for <code>strptime</code>, an object which can be converted to <code>'POSIXlt'</code> for <code>strftime</code>.</p> </td> </tr> <tr valign='top'> <td><code>tz</code></td> <td> <p>A character string specifying the time zone to be used for the conversion.  System-specific (see <code>as.POSIXlt</code>), but <code>''</code> is the current time zone, and <code>'GMT'</code> is UTC. Invalid values are most commonly treated as UTC, on some platforms with a warning.</p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p>A character string.  The default for the <code>format</code> methods is <code>'%Y-%m-%d %H:%M:%S'</code> if any element has a time component which is not midnight, and <code>'%Y-%m-%d'</code> otherwise.  If <code>options('digits.secs')</code> is set, up to the specified number of digits will be printed for seconds.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to be passed from or to other methods.</p> </td> </tr> <tr valign='top'> <td><code>usetz</code></td> <td> <p>logical.  Should the time zone abbreviation be appended to the output?  This is used in printing times, and more reliable than using <code>'%Z'</code>.</p> </td> </tr> </table> "	FALSE
"srcfile"	"base"	"References to Source Files and Code"	"<p>These functions are for working with source files and more generally with “source references” (<code>'srcref'</code>), i.e., references to source code.  The resulting data is used for printing and source level debugging, and is typically available in interactive <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> sessions, namely when <code>options(keep.source = TRUE)</code>. </p>"	"<pre>srcfile(filename, encoding = getOption('encoding'), Enc = 'unknown') srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE) srcfilealias(filename, srcfile) getSrcLines(srcfile, first, last) srcref(srcfile, lloc) ## S3 method for class 'srcfile' print(x, ...) ## S3 method for class 'srcfile' summary(object, ...) ## S3 method for class 'srcfile' open(con, line, ...) ## S3 method for class 'srcfile' close(con, ...) ## S3 method for class 'srcref' print(x, useSource = TRUE, ...) ## S3 method for class 'srcref' summary(object, useSource = FALSE, ...) ## S3 method for class 'srcref' as.character(x, useSource = TRUE, to = x, ...) .isOpen(srcfile) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>filename</code></td> <td> <p> The name of a file. </p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p> The character encoding to assume for the file. </p> </td> </tr> <tr valign='top'> <td><code>Enc</code></td> <td> <p> The encoding with which to make strings: see the <code>encoding</code> argument of <code>parse</code>.</p> </td> </tr> <tr valign='top'> <td><code>lines</code></td> <td> <p> A character vector of source lines.  Other <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects will be coerced to character. </p> </td> </tr> <tr valign='top'> <td><code>timestamp</code></td> <td> <p> The timestamp to use on a copy of a file. </p> </td> </tr> <tr valign='top'> <td><code>isFile</code></td> <td> <p> Is this <code>srcfilecopy</code> known to come from a file system file? </p> </td> </tr> <tr valign='top'> <td><code>srcfile</code></td> <td> <p> A <code>srcfile</code> object. </p> </td> </tr> <tr valign='top'> <td><code>first, last, line</code></td> <td> <p> Line numbers. </p> </td> </tr> <tr valign='top'> <td><code>lloc</code></td> <td> <p> A vector of four, six or eight values giving a source location; see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>x, object, con</code></td> <td> <p> An object of the appropriate class. </p> </td> </tr> <tr valign='top'> <td><code>useSource</code></td> <td> <p> Whether to read the <code>srcfile</code> to obtain the text of a <code>srcref</code>. </p> </td> </tr> <tr valign='top'> <td><code>to</code></td> <td> <p> An optional second <code>srcref</code> object to mark the end of the character range. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p> Additional arguments to the methods; these will be ignored. </p> </td> </tr> </table> "	FALSE
"as.data.frame"	"base"	"Coerce to a Data Frame"	"<p>Functions to check if an object is a data frame, or coerce it if possible. </p>"	"<pre>as.data.frame(x, row.names = NULL, optional = FALSE, ...)<br />## S3 method for class 'character' as.data.frame(x, ...,<br />               stringsAsFactors = default.stringsAsFactors())<br />## S3 method for class 'list' as.data.frame(x, row.names = NULL, optional = FALSE, ...,<br />               cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,<br />               stringsAsFactors = default.stringsAsFactors())<br />## S3 method for class 'matrix' as.data.frame(x, row.names = NULL, optional = FALSE, ...,<br />               stringsAsFactors = default.stringsAsFactors())<br />is.data.frame(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>row.names</code></td> <td> <p><code>NULL</code> or a character vector giving the row names for the data frame.  Missing values are not allowed.</p> </td> </tr> <tr valign='top'> <td><code>optional</code></td> <td> <p>logical. If <code>TRUE</code>, setting row names and converting column names (to syntactic names: see <code>make.names</code>) is optional.  Note that all of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>'s <span class='pkg'>base</span> package <code>as.data.frame()</code> methods use <code>optional</code> only for column names treatment, basically with the meaning of <code>data.frame(*, check.names = !optional)</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments to be passed to or from methods.</p> </td> </tr> <tr valign='top'> <td><code>stringsAsFactors</code></td> <td> <p>logical: should the character vector be converted to a factor?</p> </td> </tr> </table>  <table summary='R argblock'> <tr valign='top'> <td><code>cut.names</code></td> <td> <p>logical or integer; indicating if column names with more than 256 (or <code>cut.names</code> if that is numeric) characters should be shortened (and the last 6 characters replaced by <code>' ...'</code>).</p> </td> </tr> <tr valign='top'> <td><code>col.names</code></td> <td> <p>(optional) character vector of column names.</p> </td> </tr> <tr valign='top'> <td><code>fix.empty.names</code></td> <td> <p>logical indicating if empty column names, i.e., <code>''</code> should be fixed up (in <code>data.frame</code>) or not.</p> </td> </tr> </table> "	FALSE
"Dates"	"base"	"Date Class"	"<p>Description of the class <code>'Date'</code> representing calendar dates. </p>"	"<pre>## S3 method for class 'Date' summary(object, digits = 12, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>An object summarized.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>Number of significant digits for the computations.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments to be passed from or to other methods.</p> </td> </tr> </table> "	FALSE
"table"	"base"	"Cross Tabulation and Table Creation"	"<p><code>table</code> uses the cross-classifying factors to build a contingency table of the counts at each combination of factor levels. </p>"	"<pre>table(...,<br />       exclude = if (useNA == 'no') c(NA, NaN),<br />       useNA = c('no', 'ifany', 'always'),<br />       dnn = list.names(...), deparse.level = 1)<br />as.table(x, ...) is.table(x)<br />## S3 method for class 'table' as.data.frame(x, row.names = NULL, ...,<br />               responseName = 'Freq', stringsAsFactors = TRUE,<br />               sep = '', base = list(LETTERS)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>one or more objects which can be interpreted as factors (including character strings), or a list (or data frame) whose components can be so interpreted.  (For <code>as.table</code>, arguments passed to specific methods; for <code>as.data.frame</code>, unused.)</p> </td> </tr> <tr valign='top'> <td><code>exclude</code></td> <td> <p>levels to remove for all factors in <code>...</code>. If set to <code>NULL</code>, it implies <code>useNA = 'always'</code>.  See ‘Details’ for its interpretation for non-factor arguments.</p> </td> </tr> <tr valign='top'> <td><code>useNA</code></td> <td> <p>whether to include <code>NA</code> values in the table. See ‘Details’.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>dnn</code></td> <td> <p>the names to be given to the dimensions in the result (the <em>dimnames names</em>).</p> </td> </tr> <tr valign='top'> <td><code>deparse.level</code></td> <td> <p>controls how the default <code>dnn</code> is constructed.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an arbitrary <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, or an object inheriting from class <code>'table'</code> for the <code>as.data.frame</code> method. Note that <code>as.data.frame.table(x, *)</code> may be called explicitly for non-table <code>x</code> for “reshaping” <code>array</code>s.</p> </td> </tr> <tr valign='top'> <td><code>row.names</code></td> <td> <p>a character vector giving the row names for the data frame.</p> </td> </tr> <tr valign='top'> <td><code>responseName</code></td> <td> <p>The name to be used for the column of table entries, usually counts.</p> </td> </tr> <tr valign='top'> <td><code>stringsAsFactors</code></td> <td> <p>logical: should the classifying factors be returned as factors (the default) or character vectors?</p> </td> </tr> <tr valign='top'> <td><code>sep, base</code></td> <td> <p>passed to <code>provideDimnames</code>.</p> </td> </tr> </table> "	FALSE
"difftime"	"base"	"Time Intervals / Differences"	"<p>Time intervals creation, printing, and some arithmetic.  The <code>print()</code> method calls these “time differences”. </p>"	"<pre>time1 - time2<br />difftime(time1, time2, tz,<br />          units = c('auto', 'secs', 'mins', 'hours',<br />                    'days', 'weeks'))<br />as.difftime(tim, format = '%X', units = 'auto')<br />## S3 method for class 'difftime' format(x, ...) ## S3 method for class 'difftime' units(x) ## S3 replacement method for class 'difftime' units(x) &lt;- value ## S3 method for class 'difftime' as.double(x, units = 'auto', ...)<br />## Group methods, notably for round(), signif(), floor(), ## ceiling(), trunc(), abs(); called directly, *not* as Math(): ## S3 method for class 'difftime' Math(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>time1, time2</code></td> <td> <p>date-time or date objects.</p> </td> </tr> <tr valign='top'> <td><code>tz</code></td> <td> <p>an optional time zone specification to be used for the conversion, mainly for <code>'POSIXlt'</code> objects.</p> </td> </tr> <tr valign='top'> <td><code>units</code></td> <td> <p>character string.  Units in which the results are desired.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>character string.  Like <code>units</code>, except that abbreviations are not allowed.</p> </td> </tr> <tr valign='top'> <td><code>tim</code></td> <td> <p>character string or numeric value specifying a time interval.</p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p>character specifying the format of <code>tim</code>: see <code>strptime</code>.  The default is a locale-specific time format.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object inheriting from class <code>'difftime'</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"double"	"base"	"Double-Precision Vectors"	"<p>Create, coerce to or test for a double-precision vector. </p>"	"<pre>double(length = 0) as.double(x, ...) is.double(x)<br />single(length = 0) as.single(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>length</code></td> <td> <p>A non-negative integer specifying the desired length. Double values will be coerced to integer: supplying an argument of length other than one is an error.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>object to be coerced or tested.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"as.POSIXlt"	"base"	"Date-time Conversion Functions"	"<p>Functions to manipulate objects of classes <code>'POSIXlt'</code> and <code>'POSIXct'</code> representing calendar dates and times. </p>"	"<pre>as.POSIXct(x, tz = '', ...) as.POSIXlt(x, tz = '', ...)<br />## S3 method for class 'character' as.POSIXlt(x, tz = '', format, ...)<br />## S3 method for class 'numeric' as.POSIXlt(x, tz = '', origin, ...)<br />## S3 method for class 'POSIXlt' as.double(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>An object to be converted.</p> </td> </tr> <tr valign='top'> <td><code>tz</code></td> <td> <p>A time zone specification to be used for the conversion, <em>if one is required</em>.  System-specific (see time zones), but <code>''</code> is the current time zone, and <code>'GMT'</code> is UTC (Universal Time, Coordinated). Invalid values are most commonly treated as UTC, on some platforms with a warning.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from other methods.</p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p>character string giving a date-time format as used by <code>strptime</code>.</p> </td> </tr> <tr valign='top'> <td><code>origin</code></td> <td> <p>a date-time object, or something which can be coerced by <code>as.POSIXct(tz = 'GMT')</code> to such an object.</p> </td> </tr> </table> "	FALSE
"as.environment"	"base"	" Coerce to an Environment Object "	"<p>A generic function coercing an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object to an <code>environment</code>.  A number or a character string is converted to the corresponding environment on the search path. </p>"	"<pre>as.environment(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object to convert.  If it is already an environment, just return it.  If it is a positive number, return the environment corresponding to that position on the search list. If it is <code>-1</code>, the environment it is called from.  If it is a character string, match the string to the names on the search list. </p> <p>If it is a list, the equivalent of <code>list2env(x,<br />       parent = emptyenv())</code> is returned. </p> <p>If <code>is.object(x)</code> is true and it has a <code>class</code> for which an <code>as.environment</code> method is found, that is used. </p> </td> </tr></table> "	FALSE
"expression"	"base"	"Unevaluated Expressions"	"<p>Creates or tests for objects of mode <code>'expression'</code>. </p>"	"<pre>expression(...)<br />is.expression(x) as.expression(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p><code>expression</code>: <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects, typically calls, symbols or constants.<br><code>as.expression</code>: arguments to be passed to methods.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an arbitrary <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> </table> "	FALSE
"as.function"	"base"	"Convert Object to Function"	"<p><code>as.function</code> is a generic function which is used to convert objects to functions. </p> <p><code>as.function.default</code> works on a list <code>x</code>, which should contain the concatenation of a formal argument list and an expression or an object of mode <code>'call'</code> which will become the function body. The function will be defined in a specified environment, by default that of the caller. </p>"	"<pre>as.function(x, ...)<br />## Default S3 method: as.function(x, envir = parent.frame(), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>object to convert, a list for the default method.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments, depending on object</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>environment in which the function should be defined</p> </td> </tr> </table> "	FALSE
"integer"	"base"	"Integer Vectors"	"<p>Creates or tests for objects of type <code>'integer'</code>. </p>"	"<pre>integer(length = 0) as.integer(x, ...) is.integer(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>length</code></td> <td> <p>A non-negative integer specifying the desired length. Double values will be coerced to integer: supplying an argument of length other than one is an error.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>object to be coerced or tested.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"logical"	"base"	"Logical Vectors"	"<p>Create or test for objects of type <code>'logical'</code>, and the basic logical constants. </p>"	"<pre>TRUE FALSE T; F<br />logical(length = 0) as.logical(x, ...) is.logical(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>length</code></td> <td> <p>A non-negative integer specifying the desired length. Double values will be coerced to integer: supplying an argument of length other than one is an error.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>object to be coerced or tested.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"matrix"	"base"	"Matrices"	"<p><code>matrix</code> creates a matrix from the given set of values. </p> <p><code>as.matrix</code> attempts to turn its argument into a matrix. </p> <p><code>is.matrix</code> tests if its argument is a (strict) matrix. </p>"	"<pre>matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,<br />        dimnames = NULL)<br />as.matrix(x, ...) ## S3 method for class 'data.frame' as.matrix(x, rownames.force = NA, ...)<br />is.matrix(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>data</code></td> <td> <p>an optional data vector (including a list or <code>expression</code> vector).  Non-atomic classed <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects are coerced by <code>as.vector</code> and all attributes discarded.</p> </td> </tr> <tr valign='top'> <td><code>nrow</code></td> <td> <p>the desired number of rows.</p> </td> </tr> <tr valign='top'> <td><code>ncol</code></td> <td> <p>the desired number of columns.</p> </td> </tr> <tr valign='top'> <td><code>byrow</code></td> <td> <p>logical. If <code>FALSE</code> (the default) the matrix is filled by columns, otherwise the matrix is filled by rows.</p> </td> </tr> <tr valign='top'> <td><code>dimnames</code></td> <td> <p>A <code>dimnames</code> attribute for the matrix: <code>NULL</code> or a <code>list</code> of length 2 giving the row and column names respectively.  An empty list is treated as <code>NULL</code>, and a list of length one as row names.  The list can be named, and the list names will be used as names for the dimensions.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments to be passed to or from methods.</p> </td> </tr> <tr valign='top'> <td><code>rownames.force</code></td> <td> <p>logical indicating if the resulting matrix should have character (rather than <code>NULL</code>) <code>rownames</code>.  The default, <code>NA</code>, uses <code>NULL</code> rownames if the data frame has ‘automatic’ row.names or for a zero-row data frame.</p> </td> </tr> </table> "	FALSE
"noquote"	"base"	"Class for ‘no quote’ Printing of Character Strings"	"<p>Print character strings without quotes. </p>"	"<pre>noquote(obj)<br />## S3 method for class 'noquote' print(x, ...)<br />## S3 method for class 'noquote' c(..., recursive = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>obj</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically a vector of <code>character</code> strings.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an object of class <code>'noquote'</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further options passed to next methods, such as <code>print</code>.</p> </td> </tr> <tr valign='top'> <td><code>recursive</code></td> <td> <p>for compatibility with the generic <code>c</code> function.</p> </td> </tr> </table> "	FALSE
"name"	"base"	"Names and Symbols"	"<p>A ‘name’ (also known as a ‘symbol’) is a way to refer to <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects by name (rather than the value of the object, if any, bound to that name). </p> <p><code>as.name</code> and <code>as.symbol</code> are identical: they attempt to coerce the argument to a name. </p> <p><code>is.symbol</code> and the identical <code>is.name</code> return <code>TRUE</code> or <code>FALSE</code> depending on whether the argument is a name or not. </p>"	"<pre>as.symbol(x) is.symbol(x)<br />as.name(x) is.name(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>object to be coerced or tested.</p> </td> </tr></table> "	FALSE
"NULL"	"base"	"The Null Object"	"<p><code>NULL</code> represents the null object in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>: it is a reserved word.  <code>NULL</code> is often returned by expressions and functions whose value is undefined. </p> <p><code>as.null</code> ignores its argument and returns the value <code>NULL</code>. </p> <p><code>is.null</code> returns <code>TRUE</code> if its argument is <code>NULL</code> and <code>FALSE</code> otherwise. </p>"	"<pre>NULL as.null(x, ...) is.null(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object to be tested or coerced.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>ignored.</p> </td> </tr> </table> "	FALSE
"numeric"	"base"	"Numeric Vectors"	"<p>Creates or coerces objects of type <code>'numeric'</code>. <code>is.numeric</code> is a more general test of an object being interpretable as numbers. </p>"	"<pre>numeric(length = 0) as.numeric(x, ...) is.numeric(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>length</code></td> <td> <p>A non-negative integer specifying the desired length. Double values will be coerced to integer: supplying an argument of length other than one is an error.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>object to be coerced or tested.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"qr"	"base"	"The QR Decomposition of a Matrix"	"<p><code>qr</code> computes the QR decomposition of a matrix. </p>"	"<pre>qr(x, ...) ## Default S3 method: qr(x, tol = 1e-07 , LAPACK = FALSE, ...)<br />qr.coef(qr, y) qr.qy(qr, y) qr.qty(qr, y) qr.resid(qr, y) qr.fitted(qr, y, k = qr$rank) qr.solve(a, b, tol = 1e-7) ## S3 method for class 'qr' solve(a, b, ...)<br />is.qr(x) as.qr(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric or complex matrix whose QR decomposition is to be computed.  Logical matrices are coerced to numeric.</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>the tolerance for detecting linear dependencies in the columns of <code>x</code>. Only used if <code>LAPACK</code> is false and <code>x</code> is real.</p> </td> </tr> <tr valign='top'> <td><code>qr</code></td> <td> <p>a QR decomposition of the type computed by <code>qr</code>.</p> </td> </tr> <tr valign='top'> <td><code>y, b</code></td> <td> <p>a vector or matrix of right-hand sides of equations.</p> </td> </tr> <tr valign='top'> <td><code>a</code></td> <td> <p>a QR decomposition or (<code>qr.solve</code> only) a rectangular matrix.</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>effective rank.</p> </td> </tr> <tr valign='top'> <td><code>LAPACK</code></td> <td> <p>logical.  For real <code>x</code>, if true use LAPACK otherwise use LINPACK (the default).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods</p> </td> </tr> </table> "	FALSE
"raw"	"base"	"Raw Vectors"	"<p>Creates or tests for objects of type <code>'raw'</code>. </p>"	"<pre>raw(length = 0) as.raw(x) is.raw(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>length</code></td> <td> <p>desired length.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>object to be coerced.</p> </td> </tr> </table> "	FALSE
"vector"	"base"	"Vectors"	"<p><code>vector</code> produces a vector of the given length and mode. </p> <p><code>as.vector</code>, a generic, attempts to coerce its argument into a vector of mode <code>mode</code> (the default is to coerce to whichever vector mode is most convenient): if the result is atomic all attributes are removed. </p> <p><code>is.vector</code> returns <code>TRUE</code> if <code>x</code> is a vector of the specified mode having no attributes <em>other than names</em>.  It returns <code>FALSE</code> otherwise. </p>"	"<pre>vector(mode = 'logical', length = 0) as.vector(x, mode = 'any') is.vector(x, mode = 'any') </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>mode</code></td> <td> <p>character string naming an atomic mode or <code>'list'</code> or <code>'expression'</code> or (except for <code>vector</code>) <code>'any'</code>.  Currently, <code>is.vector()</code> allows any type (see <code>typeof</code>) for <code>mode</code>, and when mode is not <code>'any'</code>, <code>is.vector(x, mode)</code> is almost the same as <code>typeof(x) == mode</code>.</p> </td> </tr></table>  <table summary='R argblock'> <tr valign='top'> <td><code>length</code></td> <td> <p>a non-negative integer specifying the desired length. For a long vector, i.e., <code>length &gt; .Machine$integer.max</code>, it has to be of type <code>'double'</code>.  Supplying an argument of length other than one is an error.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> </table> "	FALSE
"AsIs"	"base"	"Inhibit Interpretation/Conversion of Objects"	"<p>Change the class of an object to indicate that it should be treated ‘as is’. </p>"	"<pre>I(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an object</p> </td> </tr></table> "	FALSE
"isS4"	"base"	" Test for an S4 object "	"<p>Tests whether the object is an instance of an S4 class. </p>"	"<pre>isS4(object)<br />asS4(object, flag = TRUE, complete = TRUE) asS3(object, flag = TRUE, complete = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>Any R object.</p> </td> </tr> <tr valign='top'> <td><code>flag</code></td> <td> <p>Optional, logical: indicate direction of conversion.</p> </td> </tr> <tr valign='top'> <td><code>complete</code></td> <td> <p>Optional, logical: whether conversion to S3 is completed.  Not usually needed, but see the details section.</p> </td> </tr> </table> "	FALSE
"assign"	"base"	"Assign a Value to a Name"	"<p>Assign a value to a name in an environment. </p>"	"<pre>assign(x, value, pos = -1, envir = as.environment(pos),<br />        inherits = FALSE, immediate = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a variable name, given as a character string.  No coercion is done, and the first element of a character vector of length greater than one will be used, with a warning.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a value to be assigned to <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td> <p>where to do the assignment.  By default, assigns into the current environment.  See ‘Details’ for other possibilities.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the <code>environment</code> to use.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>inherits</code></td> <td> <p>should the enclosing frames of the environment be inspected?</p> </td> </tr> <tr valign='top'> <td><code>immediate</code></td> <td> <p>an ignored compatibility feature.</p> </td> </tr> </table> "	FALSE
"assignOps"	"base"	"Assignment Operators"	"<p>Assign a value to a name. </p>"	"<pre>x &lt;- value x &lt;&lt;- value value -&gt; x value -&gt;&gt; x<br />x = value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a variable name (possibly quoted).</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a value to be assigned to <code>x</code>.</p> </td> </tr> </table> "	FALSE
"attach"	"base"	"Attach Set of R Objects to Search Path"	"<p>The database is attached to the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> search path.  This means that the database is searched by <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> when evaluating a variable, so objects in the database can be accessed by simply giving their names. </p>"	"<pre>attach(what, pos = 2L, name = deparse(substitute(what)),<br />        warn.conflicts = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>what</code></td> <td> <p>‘database’.  This can be a <code>data.frame</code> or a <code>list</code> or a <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> data file created with <code>save</code> or <code>NULL</code> or an environment.  See also ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td> <p>integer specifying position in <code>search()</code> where to attach.</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>name to use for the attached database. Names starting with <code>package:</code> are reserved for <code>library</code>.</p> </td> </tr> <tr valign='top'> <td><code>warn.conflicts</code></td> <td> <p>logical.  If <code>TRUE</code>, warnings are printed about <code>conflicts</code> from attaching the database, unless that database contains an object <code>.conflicts.OK</code>.  A conflict is a function masking a function, or a non-function masking a non-function. </p> </td> </tr> </table> "	FALSE
"ns-load"	"base"	"Loading and Unloading Name Spaces"	"<p>Functions to load and unload name spaces. </p>"	"<pre>attachNamespace(ns, pos = 2L, depends = NULL) loadNamespace(package, lib.loc = NULL,<br />               keep.source = getOption('keep.source.pkgs'),<br />               partial = FALSE, versionCheck = NULL) requireNamespace(package, ..., quietly = FALSE) loadedNamespaces() unloadNamespace(ns) isNamespaceLoaded(name) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>ns</code></td> <td> <p>string or name space object.</p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td> <p>integer specifying position to attach.</p> </td> </tr> <tr valign='top'> <td><code>depends</code></td> <td> <p><code>NULL</code> or a character vector of dependencies to be recorded in object <code>.Depends</code> in the package.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>string naming the package/name space to load.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>character vector specifying library search path.</p> </td> </tr> <tr valign='top'> <td><code>keep.source</code></td> <td> <p>Now ignored except during package installation. For more details see this argument to <code>library</code>. </p> </td> </tr> <tr valign='top'> <td><code>partial</code></td> <td> <p>logical; if true, stop just after loading code.</p> </td> </tr> <tr valign='top'> <td><code>versionCheck</code></td> <td> <p><code>NULL</code> or a version specification (a list with components <code>op</code> and <code>version</code>)).</p> </td> </tr> <tr valign='top'> <td><code>quietly</code></td> <td> <p>logical: should progress and error messages be suppressed?</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>string or ‘name’, see <code>as.symbol</code>, of a package, e.g., <code>'stats'</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to <code>loadNamespace</code>.</p> </td> </tr> </table> "	FALSE
"attr"	"base"	"Object Attributes"	"<p>Get or set specific attributes of an object. </p>"	"<pre>attr(x, which, exact = FALSE) attr(x, which) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object whose attributes are to be accessed.</p> </td> </tr> <tr valign='top'> <td><code>which</code></td> <td> <p>a non-empty character string specifying which attribute is to be accessed.</p> </td> </tr> <tr valign='top'> <td><code>exact</code></td> <td> <p>logical: should <code>which</code> be matched exactly?</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>an object, the new value of the attribute, or <code>NULL</code> to remove the attribute.</p> </td> </tr> </table> "	FALSE
"attributes"	"base"	"Object Attribute Lists"	"<p>These functions access an object's attributes. The first form below returns the object's attribute list. The replacement forms uses the list on the right-hand side of the assignment as the object's attributes (if appropriate). </p>"	"<pre>attributes(obj) attributes(obj) &lt;- value mostattributes(obj) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>obj</code></td> <td> <p>an object</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>an appropriate named list of attributes, or <code>NULL</code>.</p> </td> </tr> </table> "	FALSE
"autoload"	"base"	"On-demand Loading of Packages"	"<p><code>autoload</code> creates a promise-to-evaluate <code>autoloader</code> and stores it with name <code>name</code> in <code>.AutoloadEnv</code> environment. When <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> attempts to evaluate <code>name</code>, <code>autoloader</code> is run, the package is loaded and <code>name</code> is re-evaluated in the new package's environment.  The result is that <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> behaves as if <code>file</code> was loaded but it does not occupy memory. </p> <p><code>.Autoloaded</code> contains the names of the packages for which autoloading has been promised. </p>"	"<pre>autoload(name, package, reset = FALSE, ...) autoloader(name, package, ...)<br />.AutoloadEnv .Autoloaded </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p>string giving the name of an object.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>string giving the name of a package containing the object.</p> </td> </tr> <tr valign='top'> <td><code>reset</code></td> <td> <p>logical: for internal use by <code>autoloader</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other arguments to <code>library</code>.</p> </td> </tr> </table> "	FALSE
"Quotes"	"base"	"Quotes"	"<p>Descriptions of the various uses of quoting in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p>"	NA	NA	FALSE
"backsolve"	"base"	"Solve an Upper or Lower Triangular System"	"<p>Solves a triangular system of linear equations. </p>"	"<pre><br />    backsolve(r, x, k = ncol(r), upper.tri = TRUE,<br />              transpose = FALSE) forwardsolve(l, x, k = ncol(l), upper.tri = FALSE,<br />              transpose = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>r, l</code></td> <td> <p>an upper (or lower) triangular matrix giving the coefficients for the system to be solved.  Values below (above) the diagonal are ignored.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a matrix whose columns give the right-hand sides for the equations.</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>The number of columns of <code>r</code> and rows of <code>x</code> to use.</p> </td> </tr> <tr valign='top'> <td><code>upper.tri</code></td> <td> <p>logical; if <code>TRUE</code> (default), the <em>upper</em> <em>tri</em>angular part of <code>r</code> is used.  Otherwise, the lower one.</p> </td> </tr> <tr valign='top'> <td><code>transpose</code></td> <td> <p>logical; if <code>TRUE</code>, solve <i>r' * y = x</i> for <i>y</i>, i.e., <code>t(r) %*% y == x</code>.</p> </td> </tr> </table> "	FALSE
"environment"	"base"	"Environment Access"	"<p>Get, set, test for and create environments. </p>"	"<pre>environment(fun = NULL) environment(fun) &lt;- value<br />is.environment(x)<br />.GlobalEnv globalenv() .BaseNamespaceEnv<br />emptyenv() baseenv()<br />new.env(hash = TRUE, parent = parent.frame(), size = 29L)<br />parent.env(env) parent.env(env) &lt;- value<br />environmentName(env)<br />env.profile(env) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>fun</code></td> <td> <p>a <code>function</code>, a <code>formula</code>, or <code>NULL</code>, which is the default.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>an environment to associate with the function</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an arbitrary <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>hash</code></td> <td> <p>a logical, if <code>TRUE</code> the environment will use a hash table.</p> </td> </tr> <tr valign='top'> <td><code>parent</code></td> <td> <p>an environment to be used as the enclosure of the environment created.</p> </td> </tr> <tr valign='top'> <td><code>env</code></td> <td> <p>an environment</p> </td> </tr> <tr valign='top'> <td><code>size</code></td> <td> <p>an integer specifying the initial size for a hashed environment.  An internal default value will be used if <code>size</code> is <code>NA</code> or zero.  This argument is ignored if <code>hash</code> is <code>FALSE</code>.</p> </td> </tr> </table> "	FALSE
"basename"	"base"	"Manipulate File Paths"	"<p><code>basename</code> removes all of the path up to and including the last path separator (if any). </p> <p><code>dirname</code> returns the part of the <code>path</code> up to but excluding the last path separator, or <code>'.'</code> if there is no path separator. </p>"	"<pre>basename(path) dirname(path) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>path</code></td> <td> <p>character vector, containing path names.</p> </td> </tr></table> "	FALSE
"Bessel"	"base"	"Bessel Functions"	"<p>Bessel Functions of integer and fractional order, of first and second kind, <i>J(nu)</i> and <i>Y(nu)</i>, and Modified Bessel functions (of first and third kind), <i>I(nu)</i> and <i>K(nu)</i>. </p>"	"<pre>besselI(x, nu, expon.scaled = FALSE) besselK(x, nu, expon.scaled = FALSE) besselJ(x, nu) besselY(x, nu) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric, <i>≥ 0</i>.</p> </td> </tr> <tr valign='top'> <td><code>nu</code></td> <td> <p>numeric; The <em>order</em> (maybe fractional!) of the corresponding Bessel function.</p> </td> </tr> <tr valign='top'> <td><code>expon.scaled</code></td> <td> <p>logical; if <code>TRUE</code>, the results are exponentially scaled in order to avoid overflow (<i>I(nu)</i>) or underflow (<i>K(nu)</i>), respectively.</p> </td> </tr> </table> "	FALSE
"Special"	"base"	"Special Functions of Mathematics"	"<p>Special mathematical functions related to the beta and gamma functions. </p>"	"<pre>beta(a, b) lbeta(a, b)<br />gamma(x) lgamma(x) psigamma(x, deriv = 0) digamma(x) trigamma(x)<br />choose(n, k) lchoose(n, k) factorial(x) lfactorial(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>a, b</code></td> <td> <p>non-negative numeric vectors.</p> </td> </tr> <tr valign='top'> <td><code>x, n</code></td> <td> <p>numeric vectors.</p> </td> </tr> <tr valign='top'> <td><code>k, deriv</code></td> <td> <p>integer vectors.</p> </td> </tr> </table> "	FALSE
"bindenv"	"base"	"Binding and Environment Locking, Active Bindings"	"<p>These functions represent an interface for adjustments to environments and bindings within environments.  They allow for locking environments as well as individual bindings, and for linking a variable to a function. </p>"	"<pre>lockEnvironment(env, bindings = FALSE) environmentIsLocked(env) lockBinding(sym, env) unlockBinding(sym, env) bindingIsLocked(sym, env)<br />makeActiveBinding(sym, fun, env) bindingIsActive(sym, env) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>env</code></td> <td> <p>an environment.</p> </td> </tr> <tr valign='top'> <td><code>bindings</code></td> <td> <p>logical specifying whether bindings should be locked.</p> </td> </tr> <tr valign='top'> <td><code>sym</code></td> <td> <p>a name object or character string.</p> </td> </tr> <tr valign='top'> <td><code>fun</code></td> <td> <p>a function taking zero or one arguments.</p> </td> </tr> </table> "	FALSE
"gettext"	"base"	"Translate Text Messages"	"<p>If Native Language Support was enabled in this build of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>, attempt to translate character vectors or set where the translations are to be found. </p>"	"<pre>gettext(..., domain = NULL)<br />ngettext(n, msg1, msg2, domain = NULL)<br />bindtextdomain(domain, dirname = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>One or more character vectors.</p> </td> </tr> <tr valign='top'> <td><code>domain</code></td> <td> <p>The ‘domain’ for the translation.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>a non-negative integer.</p> </td> </tr> <tr valign='top'> <td><code>msg1</code></td> <td> <p>the message to be used in English for <code>n = 1</code>.</p> </td> </tr> <tr valign='top'> <td><code>msg2</code></td> <td> <p>the message to be used in English for <code>n = 0, 2, 3, ...</code>.</p> </td> </tr> <tr valign='top'> <td><code>dirname</code></td> <td> <p>The directory in which to find translated message catalogs for the domain.</p> </td> </tr> </table> "	FALSE
"bitwise"	"base"	"Bitwise Logical Operations"	"<p>Logical operations on integer vectors with elements viewed as sets of bits. </p>"	"<pre>bitwNot(a) bitwAnd(a, b) bitwOr(a, b) bitwXor(a, b)<br />bitwShiftL(a, n) bitwShiftR(a, n) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>a, b</code></td> <td> <p>integer vectors; numeric vectors are coerced to integer vectors.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>non-negative integer vector of values up to 31.</p> </td> </tr> </table> "	FALSE
"body"	"base"	"Access to and Manipulation of the Body of a Function"	"<p>Get or set the body of a function. </p>"	"<pre>body(fun = sys.function(sys.parent())) body(fun, envir = environment(fun)) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>fun</code></td> <td> <p>a function object, or see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>environment in which the function should be defined.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>an object, usually a language object: see section ‘Value’.</p> </td> </tr> </table> "	FALSE
"bquote"	"base"	"Partial substitution in expressions"	"<p>An analogue of the LISP backquote macro.  <code>bquote</code> quotes its argument except that terms wrapped in <code>.()</code> are evaluated in the specified <code>where</code> environment. </p>"	"<pre>bquote(expr, where = parent.frame()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>A language object.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>An environment.</p> </td> </tr> </table> "	FALSE
"Control"	"base"	"Control Flow"	"<p>These are the basic control-flow constructs of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> language.  They function in much the same way as control statements in any Algol-like language.  They are all reserved words. </p>"	"<pre>if(cond) expr if(cond) cons.expr  else  alt.expr<br />for(var in seq) expr while(cond) expr repeat expr break next </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>cond</code></td> <td> <p>A length-one logical vector that is not <code>NA</code>. Conditions of length greater than one are accepted with a warning, but only the first element is used.  Other types are coerced to logical if possible, ignoring any class. </p> </td> </tr> <tr valign='top'> <td><code>var</code></td> <td> <p>A syntactical name for a variable.</p> </td> </tr> <tr valign='top'> <td><code>seq</code></td> <td> <p>An expression evaluating to a vector (including a list and an expression) or to a pairlist or <code>NULL</code>.  A factor value will be coerced to a character vector.</p> </td> </tr> <tr valign='top'> <td><code>expr, cons.expr, alt.expr</code></td> <td><br /><p>An <em>expression</em> in a formal sense.  This is either a simple expression or a so called <em>compound expression</em>, usually of the form <code>{ expr1 ; expr2 }</code>. </p> </td> </tr> </table> "	FALSE
"browser"	"base"	"Environment Browser"	"<p>Interrupt the execution of an expression and allow the inspection of the environment where <code>browser</code> was called from. </p>"	"<pre>browser(text = '', condition = NULL, expr = TRUE, skipCalls = 0L) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>text</code></td> <td> <p>a text string that can be retrieved once the browser is invoked.</p> </td> </tr> <tr valign='top'> <td><code>condition</code></td> <td> <p>a condition that can be retrieved once the browser is invoked.</p> </td> </tr> <tr valign='top'> <td><code>expr</code></td> <td> <p>An expression, which if it evaluates to <code>TRUE</code> the debugger will invoked, otherwise control is returned directly.</p> </td> </tr> <tr valign='top'> <td><code>skipCalls</code></td> <td> <p>how many previous calls to skip when reporting the calling context.</p> </td> </tr> </table> "	FALSE
"browserText"	"base"	"Functions to Retrieve Values Supplied by Calls to the Browser"	"<p>A call to browser can provide context by supplying either a text argument or a condition argument.  These functions can be used to retrieve either of these arguments. </p>"	"<pre>browserText(n = 1) browserCondition(n = 1) browserSetDebug(n = 1) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>n</code></td> <td> <p>The number of contexts to skip over, it must be non-negative.</p> </td> </tr></table> "	FALSE
"builtins"	"base"	"Returns the Names of All Built-in Objects"	"<p>Return the names of all the built-in objects.  These are fetched directly from the symbol table of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> interpreter. </p>"	"<pre>builtins(internal = FALSE)</pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>internal</code></td> <td> <p>a logical indicating whether only ‘internal’ functions (which can be called via <code>.Internal</code>) should be returned.</p> </td> </tr></table> "	FALSE
"by"	"base"	"Apply a Function to a Data Frame Split by Factors"	"<p>Function <code>by</code> is an object-oriented wrapper for <code>tapply</code> applied to data frames. </p>"	"<pre>by(data, INDICES, FUN, ..., simplify = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>data</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, normally a data frame, possibly a matrix.</p> </td> </tr> <tr valign='top'> <td><code>INDICES</code></td> <td> <p>a factor or a list of factors, each of length <code>nrow(data)</code>.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>a function to be applied to (usually data-frame) subsets of <code>data</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to <code>FUN</code>.</p> </td> </tr> <tr valign='top'> <td><code>simplify</code></td> <td> <p>logical: see <code>tapply</code>.</p> </td> </tr> </table> "	FALSE
"connections"	"base"	"Functions to Manipulate Connections (Files, URLs, ...)"	"<p>Functions to create, open and close connections, i.e., “generalized files”, such as possibly compressed files, URLs, pipes, etc. </p>"	"<pre>file(description = '', open = '', blocking = TRUE,<br />      encoding = getOption('encoding'), raw = FALSE,<br />      method = getOption('url.method', 'default'))<br />url(description, open = '', blocking = TRUE,<br />     encoding = getOption('encoding'),<br />     method = getOption('url.method', 'default'))<br />gzfile(description, open = '', encoding = getOption('encoding'),<br />        compression = 6)<br />bzfile(description, open = '', encoding = getOption('encoding'),<br />        compression = 9)<br />xzfile(description, open = '', encoding = getOption('encoding'),<br />        compression = 6)<br />unz(description, filename, open = '', encoding = getOption('encoding'))<br />pipe(description, open = '', encoding = getOption('encoding'))<br />fifo(description, open = '', blocking = FALSE,<br />      encoding = getOption('encoding'))<br />socketConnection(host = 'localhost', port, server = FALSE,<br />                  blocking = FALSE, open = 'a+',<br />                  encoding = getOption('encoding'),<br />                  timeout = getOption('timeout'))<br />open(con, ...) ## S3 method for class 'connection' open(con, open = 'r', blocking = TRUE, ...)<br />close(con, ...) ## S3 method for class 'connection' close(con, type = 'rw', ...)<br />flush(con)<br />isOpen(con, rw = '') isIncomplete(con) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>description</code></td> <td> <p>character string.  A description of the connection: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>open</code></td> <td> <p>character string.  A description of how to open the connection (if it should be opened initially).  See section ‘Modes’ for possible values.</p> </td> </tr> <tr valign='top'> <td><code>blocking</code></td> <td> <p>logical.  See the ‘Blocking’ section.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>The name of the encoding to be assumed.  See the ‘Encoding’ section.</p> </td> </tr> <tr valign='top'> <td><code>raw</code></td> <td> <p>logical.  If true, a ‘raw’ interface is used which will be more suitable for arguments which are not regular files, e.g. character devices.  This suppresses the check for a compressed file when opening for text-mode reading, and asserts that the ‘file’ may not be seekable.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>character string, partially matched to <code>c('default', 'internal', 'wininet', 'libcurl')</code>:<br />see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>compression</code></td> <td> <p>integer in 0–9.  The amount of compression to be applied when writing, from none to maximal available.  For <code>xzfile</code> can also be negative: see the ‘Compression’ section.</p> </td> </tr> <tr valign='top'> <td><code>timeout</code></td> <td> <p>numeric: the timeout (in seconds) to be used for this connection.  Beware that some OSes may treat very large values as zero: however the POSIX standard requires values up to 31 days to be supported.</p> </td> </tr> <tr valign='top'> <td><code>filename</code></td> <td> <p>a filename within a zip file.</p> </td> </tr> <tr valign='top'> <td><code>host</code></td> <td> <p>character string.  Host name for the port.</p> </td> </tr> <tr valign='top'> <td><code>port</code></td> <td> <p>integer.  The TCP port number.</p> </td> </tr> <tr valign='top'> <td><code>server</code></td> <td> <p>logical.  Should the socket be a client or a server?</p> </td> </tr> <tr valign='top'> <td><code>con</code></td> <td> <p>a connection.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string.  Currently ignored.</p> </td> </tr> <tr valign='top'> <td><code>rw</code></td> <td> <p>character string.  Empty or <code>'read'</code> or <code>'write'</code>, partial matches allowed.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"c"	"base"	"Combine Values into a Vector or List"	"<p>This is a generic function which combines its arguments. </p> <p>The default method combines its arguments to form a vector. All arguments are coerced to a common type which is the type of the returned value, and all attributes except names are removed. </p>"	"<pre>## S3 Generic function c(...)<br />## Default S3 method: c(..., recursive = FALSE, use.names = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>objects to be concatenated.</p> </td> </tr> <tr valign='top'> <td><code>recursive</code></td> <td> <p>logical.  If <code>recursive = TRUE</code>, the function recursively descends through lists (and pairlists) combining all their elements into a vector.</p> </td> </tr> <tr valign='top'> <td><code>use.names</code></td> <td> <p>logical indicating if <code>names</code> should be preserved.</p> </td> </tr> </table> "	FALSE
"warnings"	"base"	"Print Warning Messages"	"<p><code>warnings</code> and its <code>print</code> method print the variable <code>last.warning</code> in a pleasing form. </p>"	"<pre>warnings(...) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to <code>cat</code>.</p> </td> </tr></table> "	FALSE
"callCC"	"base"	"Call With Current Continuation"	"<p>A downward-only version of Scheme's call with current continuation. </p>"	"<pre>callCC(fun) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>fun</code></td> <td> <p>function of one argument, the exit procedure.</p> </td> </tr></table> "	FALSE
"capabilities"	"base"	"Report Capabilities of this Build of R"	"<p>Report on the optional features which have been compiled into this build of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p>"	"<pre>capabilities(what = NULL) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>what</code></td> <td> <p>character vector or <code>NULL</code>, specifying required components.  <code>NULL</code> implies that all are required.</p> </td> </tr></table> "	FALSE
"chartr"	"base"	"Character Translation and Casefolding"	"<p>Translate characters in character vectors, in particular from upper to lower case or vice versa. </p>"	"<pre>chartr(old, new, x) tolower(x) toupper(x) casefold(x, upper = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector, or an object that can be coerced to character by <code>as.character</code>.</p> </td> </tr> <tr valign='top'> <td><code>old</code></td> <td> <p>a character string specifying the characters to be translated.  If a character vector of length 2 or more is supplied, the first element is used with a warning.</p> </td> </tr> <tr valign='top'> <td><code>new</code></td> <td> <p>a character string specifying the translations. If a character vector of length 2 or more is supplied, the first element is used with a warning.</p> </td> </tr> <tr valign='top'> <td><code>upper</code></td> <td> <p>logical: translate to upper or lower case?.</p> </td> </tr> </table> "	FALSE
"cat"	"base"	"Concatenate and Print"	"<p>Outputs the objects, concatenating the representations.  <code>cat</code> performs much less conversion than <code>print</code>. </p>"	"<pre>cat(... , file = '', sep = ' ', fill = FALSE, labels = NULL,<br />     append = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects (see ‘Details’ for the types of objects allowed).</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>A connection, or a character string naming the file to print to.  If <code>''</code> (the default), <code>cat</code> prints to the standard output connection, the console unless redirected by <code>sink</code>. If it is <code>'|cmd'</code>, the output is piped to the command given by ‘<span class='file'>cmd</span>’, by opening a pipe connection. </p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>a character vector of strings to append after each element.</p> </td> </tr> <tr valign='top'> <td><code>fill</code></td> <td> <p>a logical or (positive) numeric controlling how the output is broken into successive lines.  If <code>FALSE</code> (default), only newlines created explicitly by <span class='samp'>'\n'</span> are printed.  Otherwise, the output is broken into lines with print width equal to the option <code>width</code> if <code>fill</code> is <code>TRUE</code>, or the value of <code>fill</code> if this is numeric.  Non-positive <code>fill</code> values are ignored, with a warning.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>character vector of labels for the lines printed. Ignored if <code>fill</code> is <code>FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td> <p>logical. Only used if the argument <code>file</code> is the name of file (and not a connection or <code>'|cmd'</code>). If <code>TRUE</code> output will be appended to <code>file</code>; otherwise, it will overwrite the contents of <code>file</code>.</p> </td> </tr> </table> "	FALSE
"cbind"	"base"	"Combine R Objects by Rows or Columns"	"<p>Take a sequence of vector, matrix or data-frame arguments and combine by <em>c</em>olumns or <em>r</em>ows, respectively.  These are generic functions with methods for other <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> classes. </p>"	"<pre>cbind(..., deparse.level = 1) rbind(..., deparse.level = 1) ## S3 method for class 'data.frame' rbind(..., deparse.level = 1, make.row.names = TRUE,<br />       stringsAsFactors = default.stringsAsFactors()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>(generalized) vectors or matrices.  These can be given as named arguments.  Other <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects may be coerced as appropriate, or S4 methods may be used: see sections ‘Details’ and ‘Value’.  (For the <code>'data.frame'</code> method of <code>cbind</code> these can be further arguments to <code>data.frame</code> such as <code>stringsAsFactors</code>.)</p> </td> </tr> <tr valign='top'> <td><code>deparse.level</code></td> <td> <p>integer controlling the construction of labels in the case of non-matrix-like arguments (for the default method):<br><code>deparse.level = 0</code> constructs no labels; the default,<br><code>deparse.level = 1 or 2</code> constructs labels from the argument names, see the ‘Value’ section below.</p> </td> </tr> <tr valign='top'> <td><code>make.row.names</code></td> <td> <p>(only for data frame method:) logical indicating if unique and valid <code>row.names</code> should be constructed from the arguments.</p> </td> </tr> <tr valign='top'> <td><code>stringsAsFactors</code></td> <td> <p>logical, passed to <code>as.data.frame</code>; only has an effect when the <code>...</code> arguments contain a (non-<code>data.frame</code>) <code>character</code>.</p> </td> </tr> </table> "	FALSE
"Round"	"base"	"Rounding of Numbers"	"<p><code>ceiling</code> takes a single numeric argument <code>x</code> and returns a numeric vector containing the smallest integers not less than the corresponding elements of <code>x</code>. </p> <p><code>floor</code> takes a single numeric argument <code>x</code> and returns a numeric vector containing the largest integers not greater than the corresponding elements of <code>x</code>. </p> <p><code>trunc</code> takes a single numeric argument <code>x</code> and returns a numeric vector containing the integers formed by truncating the values in <code>x</code> toward <code>0</code>. </p> <p><code>round</code> rounds the values in its first argument to the specified number of decimal places (default 0). </p> <p><code>signif</code> rounds the values in its first argument to the specified number of significant digits. </p>"	"<pre>ceiling(x) floor(x) trunc(x, ...)<br />round(x, digits = 0) signif(x, digits = 6) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector.  Or, for <code>round</code> and <code>signif</code>, a complex vector.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>integer indicating the number of decimal places (<code>round</code>) or significant digits (<code>signif</code>) to be used. Negative values are allowed (see ‘Details’).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to methods.</p> </td> </tr> </table> "	FALSE
"char.expand"	"base"	"Expand a String with Respect to a Target Table"	"<p>Seeks a unique match of its first argument among the elements of its second.  If successful, it returns this element; otherwise, it performs an action specified by the third argument. </p>"	"<pre>char.expand(input, target, nomatch = stop('no match'))</pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>input</code></td> <td> <p>a character string to be expanded.</p> </td> </tr> <tr valign='top'> <td><code>target</code></td> <td> <p>a character vector with the values to be matched against.</p> </td> </tr> <tr valign='top'> <td><code>nomatch</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expression to be evaluated in case expansion was not possible.</p> </td> </tr> </table> "	FALSE
"charmatch"	"base"	"Partial String Matching"	"<p><code>charmatch</code> seeks matches for the elements of its first argument among those of its second. </p>"	"<pre>charmatch(x, table, nomatch = NA_integer_) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the values to be matched: converted to a character vector by <code>as.character</code>.  Long vectors are supported.</p> </td> </tr> <tr valign='top'> <td><code>table</code></td> <td> <p>the values to be matched against: converted to a character vector.  Long vectors are not supported.</p> </td> </tr> <tr valign='top'> <td><code>nomatch</code></td> <td> <p>the (integer) value to be returned at non-matching positions.</p> </td> </tr> </table> "	FALSE
"rawConversion"	"base"	"Convert to or from Raw Vectors"	"<p>Conversion and manipulation of  objects of type <code>'raw'</code>. </p>"	"<pre>charToRaw(x) rawToChar(x, multiple = FALSE)<br />rawShift(x, n)<br />rawToBits(x) intToBits(x) packBits(x, type = c('raw', 'integer')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>object to be converted or shifted.</p> </td> </tr> <tr valign='top'> <td><code>multiple</code></td> <td> <p>logical: should the conversion be to a single character string or multiple individual characters?</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>the number of bits to shift.  Positive numbers shift right and negative numbers shift left: allowed values are <code>-8 ... 8</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>the result type, partially matched.</p> </td> </tr> </table> "	FALSE
"chkDots"	"base"	"Warn About Extraneous Arguments in the \"...\" of Its Caller"	"<p>Warn about extraneous arguments in the <code>...</code> of its caller.  A utility to be used e.g., in S3 methods which need a formal <code>...</code> argument but do not make any use of it.  This helps catching user errors in calling the function in question (which is the caller of <code>chkDots()</code>. </p>"	"<pre>chkDots(..., which.call = -1, allowed = character(0)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>“the dots”, as passed from the caller.</p> </td> </tr> <tr valign='top'> <td><code>which.call</code></td> <td> <p>passed to <code>sys.call()</code>.  A caller may use -2 if the message should mention <em>its</em> caller.</p> </td> </tr> <tr valign='top'> <td><code>allowed</code></td> <td> <p>not yet implemented: character vector of <em>named</em> elements in <code>...</code> which are “allowed” and hence not warned about.</p> </td> </tr> </table> "	FALSE
"chol"	"base"	"The Choleski Decomposition"	"<p>Compute the Choleski factorization of a real symmetric positive-definite square matrix. </p>"	"<pre>chol(x, ...)<br />## Default S3 method: chol(x, pivot = FALSE,  LINPACK = FALSE, tol = -1, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object for which a method exists.  The default method applies to numeric (or logical) symmetric, positive-definite matrices.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be based to or from methods.</p> </td> </tr> <tr valign='top'> <td><code>pivot</code></td> <td> <p>Should pivoting be used?</p> </td> </tr> <tr valign='top'> <td><code>LINPACK</code></td> <td> <p>logical.  Should LINPACK be used (now ignored)?</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>A numeric tolerance for use with <code>pivot = TRUE</code>.</p> </td> </tr> </table> "	FALSE
"chol2inv"	"base"	"Inverse from Choleski (or QR) Decomposition"	"<p>Invert a symmetric, positive definite square matrix from its Choleski decomposition.  Equivalently, compute <i>(X'X)^(-1)</i> from the (<i>R</i> part) of the QR decomposition of <i>X</i>. </p>"	"<pre>chol2inv(x, size = NCOL(x), LINPACK = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a matrix.  The first <code>size</code> columns of the upper triangle contain the Choleski decomposition of the matrix to be inverted.</p> </td> </tr> <tr valign='top'> <td><code>size</code></td> <td> <p>the number of columns of <code>x</code> containing the Choleski decomposition.</p> </td> </tr> <tr valign='top'> <td><code>LINPACK</code></td> <td> <p>logical.  Defunct and ignored (with a warning for true value).</p> </td> </tr> </table> "	FALSE
"class"	"base"	"Object Classes"	"<p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> possesses a simple generic function mechanism which can be used for an object-oriented style of programming.  Method dispatch takes place based on the class of the first argument to the generic function. </p>"	"<pre>class(x) class(x) &lt;- value unclass(x) inherits(x, what, which = FALSE)<br />oldClass(x) oldClass(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object</p> </td> </tr> <tr valign='top'> <td><code>what, value</code></td> <td> <p>a character vector naming classes.  <code>value</code> can also be <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>which</code></td> <td> <p>logical affecting return value: see ‘Details’.</p> </td> </tr> </table> "	FALSE
"pushBack"	"base"	"Push Text Back on to a Connection"	"<p>Functions to push back text lines onto a connection, and to enquire how many lines are currently pushed back. </p>"	"<pre>pushBack(data, connection, newLine = TRUE,<br />          encoding = c('', 'bytes', 'UTF-8')) pushBackLength(connection) clearPushBack(connection) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>data</code></td> <td> <p>a character vector.</p> </td> </tr> <tr valign='top'> <td><code>connection</code></td> <td> <p>A connection.</p> </td> </tr> <tr valign='top'> <td><code>newLine</code></td> <td> <p>logical.  If true, a newline is appended to each string pushed back.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>character string, partially matched.  See details.</p> </td> </tr> </table> "	FALSE
"showConnections"	"base"	"Display Connections"	"<p>Display aspects of connections. </p>"	"<pre>showConnections(all = FALSE) getConnection(what) closeAllConnections()<br />stdin() stdout() stderr()<br />isatty(con) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>all</code></td> <td> <p>logical: if true all connections, including closed ones and the standard ones are displayed.  If false only open user-created connections are included.</p> </td> </tr> <tr valign='top'> <td><code>what</code></td> <td> <p>integer: a row number of the table given by <code>showConnections</code>.</p> </td> </tr> <tr valign='top'> <td><code>con</code></td> <td> <p>a connection.</p> </td> </tr> </table> "	FALSE
"function"	"base"	"Function Definition"	"<p>These functions provide the base mechanisms for defining new functions in the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> language. </p>"	"<pre>function( arglist ) expr return(value) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>arglist</code></td> <td> <p>Empty or one or more name or name=expression terms.</p> </td> </tr> <tr valign='top'> <td><code>expr</code></td> <td> <p>An expression.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>An expression.</p> </td> </tr> </table> "	FALSE
"utf8Conversion"	"base"	"Convert Integer Vectors to or from UTF-8-encoded Character Vectors"	"<p>Conversion of UTF-8 encoded character vectors to and from integer vectors. </p>"	"<pre>utf8ToInt(x) intToUtf8(x, multiple = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>object to be converted.</p> </td> </tr> <tr valign='top'> <td><code>multiple</code></td> <td> <p>logical: should the conversion be to a single character string or multiple individual characters?</p> </td> </tr> </table> "	FALSE
"col"	"base"	"Column Indexes"	"<p>Returns a matrix of integers indicating their column number in a matrix-like object, or a factor of column labels. </p>"	"<pre>col(x, as.factor = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a matrix-like object, that is one with a two-dimensional <code>dim</code>.</p> </td> </tr> <tr valign='top'> <td><code>as.factor</code></td> <td> <p>a logical value indicating whether the value should be returned as a factor of column labels (created if necessary) rather than as numbers.</p> </td> </tr> </table> "	FALSE
"Comparison"	"base"	"Relational Operators"	"<p>Binary operators which allow the comparison of values in atomic vectors. </p>"	"<pre>x &lt; y x &gt; y x &lt;= y x &gt;= y x == y x != y </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x, y</code></td> <td> <p>atomic vectors, symbols, calls, or other objects for which methods have been written.</p> </td> </tr></table> "	FALSE
"colSums"	"base"	"Form Row and Column Sums and Means"	"<p>Form row and column sums and means for numeric arrays (or data frames). </p>"	"<pre>colSums (x, na.rm = FALSE, dims = 1) rowSums (x, na.rm = FALSE, dims = 1) colMeans(x, na.rm = FALSE, dims = 1) rowMeans(x, na.rm = FALSE, dims = 1)<br />.colSums(x, m, n, na.rm = FALSE) .rowSums(x, m, n, na.rm = FALSE) .colMeans(x, m, n, na.rm = FALSE) .rowMeans(x, m, n, na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an array of two or more dimensions, containing numeric, complex, integer or logical values, or a numeric data frame.  For <code>.colSums()</code> etc, a numeric, integer or logical matrix (or vector of length <code>m * n</code>).</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical.  Should missing values (including <code>NaN</code>) be omitted from the calculations?</p> </td> </tr> <tr valign='top'> <td><code>dims</code></td> <td> <p>integer: Which dimensions are regarded as ‘rows’ or ‘columns’ to sum over.  For <code>row*</code>, the sum or mean is over dimensions <code>dims+1, ...</code>; for <code>col*</code> it is over dimensions <code>1:dims</code>.</p> </td> </tr> <tr valign='top'> <td><code>m, n</code></td> <td> <p>the dimensions of the matrix <code>x</code> for <code>.colSums()</code> etc.</p> </td> </tr> </table> "	FALSE
"colnames"	"base"	"Row and Column Names"	"<p>Retrieve or set the row or column names of a matrix-like object. </p>"	"<pre>rownames(x, do.NULL = TRUE, prefix = 'row') rownames(x) &lt;- value<br />colnames(x, do.NULL = TRUE, prefix = 'col') colnames(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a matrix-like <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, with at least two dimensions for <code>colnames</code>.</p> </td> </tr> <tr valign='top'> <td><code>do.NULL</code></td> <td> <p>logical. If <code>FALSE</code> and names are <code>NULL</code>, names are created.</p> </td> </tr> <tr valign='top'> <td><code>prefix</code></td> <td> <p>for created names.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a valid value for that component of <code>dimnames(x)</code>.  For a matrix or array this is either <code>NULL</code> or a character vector of non-zero length equal to the appropriate dimension.</p> </td> </tr> </table> "	FALSE
"Colon"	"base"	"Colon Operator"	"<p>Generate regular sequences. </p>"	"<pre>from:to<br />    a:b </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>from</code></td> <td> <p>starting value of sequence.</p> </td> </tr> <tr valign='top'> <td><code>to</code></td> <td> <p>(maximal) end value of the sequence.</p> </td> </tr> <tr valign='top'> <td><code>a, b</code></td> <td> <p><code>factor</code>s of the same length.</p> </td> </tr> </table> "	FALSE
"commandArgs"	"base"	"Extract Command Line Arguments"	"<p>Provides access to a copy of the command line arguments supplied when this <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> session was invoked. </p>"	"<pre>commandArgs(trailingOnly = FALSE) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>trailingOnly</code></td> <td> <p>logical.  Should only arguments after <span class='option'>--args</span> be returned?</p> </td> </tr></table> "	FALSE
"comment"	"base"	"Query or Set a \"comment\" Attribute"	"<p>These functions set and query a <em>comment</em> attribute for any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects.  This is typically useful for <code>data.frame</code>s or model fits. </p> <p>Contrary to other <code>attributes</code>, the <code>comment</code> is not printed (by <code>print</code> or <code>print.default</code>). </p> <p>Assigning <code>NULL</code> or a zero-length character vector removes the comment. </p>"	"<pre>comment(x) comment(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a <code>character</code> vector, or <code>NULL</code>.</p> </td> </tr> </table> "	FALSE
"groupGeneric"	"base"	"S3 Group Generic Functions"	"<p>Group generic methods can be defined for four pre-specified groups of functions, <code>Math</code>, <code>Ops</code>, <code>Summary</code> and <code>Complex</code>. (There are no objects of these names in base <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>, but there are in the <span class='pkg'>methods</span> package.) </p> <p>A method defined for an individual member of the group takes precedence over a method defined for the group as a whole. </p>"	"<pre>## S3 methods for group generics have prototypes: Math(x, \dots) Ops(e1, e2) Complex(z) Summary(\dots, na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, z, e1, e2</code></td> <td> <p>objects.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to methods.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical: should missing values be removed?</p> </td> </tr> </table> "	FALSE
"conflicts"	"base"	"Search for Masked Objects on the Search Path"	"<p><code>conflicts</code> reports on objects that exist with the same name in two or more places on the <code>search</code> path, usually because an object in the user's workspace or a package is masking a system object of the same name.  This helps discover unintentional masking. </p>"	"<pre>conflicts(where = search(), detail = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>where</code></td> <td> <p>A subset of the search path, by default the whole search path.</p> </td> </tr> <tr valign='top'> <td><code>detail</code></td> <td> <p>If <code>TRUE</code>, give the masked or masking functions for all members of the search path.</p> </td> </tr> </table> "	FALSE
"Constants"	"base"	"Built-in Constants"	"<p>Constants built into <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p>"	"<pre>LETTERS letters month.abb month.name pi </pre>"	NA	FALSE
"contributors"	"base"	"R Project Contributors"	"<p>The <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> Who-is-who, describing who made significant contributions to the development of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p>"	"<pre>contributors() </pre>"	NA	FALSE
"copyright"	"base"	"Copyrights of Files Used to Build R"	"<p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> is released under the ‘GNU Public License’: see <code>license</code> for details.  The license describes your right to use <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>.  Copyright is concerned with ownership of intellectual rights, and some of the software used has conditions that the copyright must be explicitly stated: see the ‘Details’ section.  We are grateful to these people and other contributors (see <code>contributors</code>) for the ability to use their work. </p>"	NA	NA	FALSE
"crossprod"	"base"	"Matrix Crossproduct"	"<p>Given matrices <code>x</code> and <code>y</code> as arguments, return a matrix cross-product.  This is formally equivalent to (but usually slightly faster than) the call <code>t(x) %*% y</code> (<code>crossprod</code>) or <code>x %*% t(y)</code> (<code>tcrossprod</code>). </p>"	"<pre>crossprod(x, y = NULL)<br />tcrossprod(x, y = NULL) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric or complex matrices (or vectors): <code>y = NULL</code> is taken to be the same matrix as <code>x</code>.  Vectors are promoted to single-column or single-row matrices, depending on the context.</p> </td> </tr></table> "	FALSE
"Cstack_info"	"base"	"Report Information on C Stack Size and Usage"	"<p>Report information on the C stack size and usage (if available). </p>"	"<pre>Cstack_info() </pre>"	NA	FALSE
"cumsum"	"base"	"Cumulative Sums, Products, and Extremes"	"<p>Returns a vector whose elements are the cumulative sums, products, minima or maxima of the elements of the argument. </p>"	"<pre>cumsum(x) cumprod(x) cummax(x) cummin(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a numeric or complex (not <code>cummin</code> or <code>cummax</code>) object, or an object that can be coerced to one of these.</p> </td> </tr></table> "	FALSE
"curlGetHeaders"	"base"	"Retrieve Headers from URLs"	"<p>Retrieve the headers for a URL for a supported protocol such as <code>http://</code>, <code>ftp://</code>, <code>https://</code> and <code>ftps://</code>. An optional function not supported on all platforms. </p>"	"<pre>curlGetHeaders(url, redirect = TRUE, verify = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>url</code></td> <td> <p>character string specifying the URL.</p> </td> </tr> <tr valign='top'> <td><code>redirect</code></td> <td> <p>logical: should redirections be followed?</p> </td> </tr> <tr valign='top'> <td><code>verify</code></td> <td> <p>logical: should certificates be verified as valid and applying to that host?</p> </td> </tr> </table> "	FALSE
"cut"	"base"	"Convert Numeric to Factor"	"<p><code>cut</code> divides the range of <code>x</code> into intervals and codes the values in <code>x</code> according to which interval they fall.  The leftmost interval corresponds to level one, the next leftmost to level two and so on. </p>"	"<pre>cut(x, ...)<br />## Default S3 method: cut(x, breaks, labels = NULL,<br />     include.lowest = FALSE, right = TRUE, dig.lab = 3,<br />     ordered_result = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector which is to be converted to a factor by cutting.</p> </td> </tr> <tr valign='top'> <td><code>breaks</code></td> <td> <p>either a numeric vector of two or more unique cut points or a single number (greater than or equal to 2) giving the number of intervals into which <code>x</code> is to be cut.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>labels for the levels of the resulting category.  By default, labels are constructed using <code>'(a,b]'</code> interval notation.  If <code>labels = FALSE</code>, simple integer codes are returned instead of a factor.</p> </td> </tr> <tr valign='top'> <td><code>include.lowest</code></td> <td> <p>logical, indicating if an ‘x[i]’ equal to the lowest (or highest, for <code>right = FALSE</code>) ‘breaks’ value should be included.</p> </td> </tr> <tr valign='top'> <td><code>right</code></td> <td> <p>logical, indicating if the intervals should be closed on the right (and open on the left) or vice versa.</p> </td> </tr> <tr valign='top'> <td><code>dig.lab</code></td> <td> <p>integer which is used when labels are not given.  It determines the number of digits used in formatting the break numbers.</p> </td> </tr> <tr valign='top'> <td><code>ordered_result</code></td> <td> <p>logical: should the result be an ordered factor?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"cut.POSIXt"	"base"	"Convert a Date or Date-Time Object to a Factor"	"<p>Method for <code>cut</code> applied to date-time objects. </p>"	"<pre>## S3 method for class 'POSIXt' cut(x, breaks, labels = NULL, start.on.monday = TRUE,<br />     right = FALSE, ...)<br />## S3 method for class 'Date' cut(x, breaks, labels = NULL, start.on.monday = TRUE,<br />     right = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object inheriting from class <code>'POSIXt'</code> or <code>'Date'</code>.</p> </td> </tr> <tr valign='top'> <td><code>breaks</code></td> <td><br /><p>a vector of cut points <em>or</em> number giving the number of intervals which <code>x</code> is to be cut into <em>or</em> an interval specification, one of <code>'sec'</code>, <code>'min'</code>, <code>'hour'</code>, <code>'day'</code>, <code>'DSTday'</code>, <code>'week'</code>, <code>'month'</code>, <code>'quarter'</code> or <code>'year'</code>, optionally preceded by an integer and a space, or followed by <code>'s'</code>. (For <code>'Date'</code> objects only interval specifications using <code>'day'</code>, <code>'week'</code>, <code>'month'</code>, <code>'quarter'</code> and <code>'year'</code> are allowed.) </p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td><br /><p>labels for the levels of the resulting category.  By default, labels are constructed from the left-hand end of the intervals (which are included for the default value of <code>right</code>).  If <code>labels = FALSE</code>, simple integer codes are returned instead of a factor. </p> </td> </tr> <tr valign='top'> <td><code>start.on.monday</code></td> <td> <p>logical.  If <code>breaks = 'weeks'</code>, should the week start on Mondays or Sundays?</p> </td> </tr> <tr valign='top'> <td><code>right, ...</code></td> <td> <p>arguments to be passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"data.class"	"base"	"Object Classes"	"<p>Determine the class of an arbitrary <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object. </p>"	"<pre>data.class(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr></table> "	FALSE
"data.frame"	"base"	"Data Frames"	"<p>The function <code>data.frame()</code> creates data frames, tightly coupled collections of variables which share many of the properties of matrices and of lists, used as the fundamental data structure by most of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>'s modeling software. </p>"	"<pre>data.frame(..., row.names = NULL, check.rows = FALSE,<br />            check.names = TRUE, fix.empty.names = TRUE,<br />            stringsAsFactors = default.stringsAsFactors())<br />default.stringsAsFactors() </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>these arguments are of either the form <code>value</code> or <code>tag = value</code>.  Component names are created based on the tag (if present) or the deparsed argument itself.</p> </td> </tr> <tr valign='top'> <td><code>row.names</code></td> <td> <p><code>NULL</code> or a single integer or character string specifying a column to be used as row names, or a character or integer vector giving the row names for the data frame.</p> </td> </tr> <tr valign='top'> <td><code>check.rows</code></td> <td> <p>if <code>TRUE</code> then the rows are checked for consistency of length and names.</p> </td> </tr> <tr valign='top'> <td><code>check.names</code></td> <td> <p>logical.  If <code>TRUE</code> then the names of the variables in the data frame are checked to ensure that they are syntactically valid variable names and are not duplicated. If necessary they are adjusted (by <code>make.names</code>) so that they are.</p> </td> </tr> <tr valign='top'> <td><code>fix.empty.names</code></td> <td> <p>logical indicating if arguments which are “unnamed” (in the sense of not being formally called as <code>someName = arg</code>) get an automatically constructed name or rather name <code>''</code>.  Needs to be set to <code>FALSE</code> even when <code>check.names</code> is false if <code>''</code> names should be kept.</p> </td> </tr> <tr valign='top'> <td><code>stringsAsFactors</code></td> <td> <p>logical: should character vectors be converted to factors?  The ‘factory-fresh’ default is <code>TRUE</code>, but this can be changed by setting <code>options(stringsAsFactors<br />       = FALSE)</code>.</p> </td> </tr> </table> "	FALSE
"data.matrix"	"base"	"Convert a Data Frame to a Numeric Matrix"	"<p>Return the matrix obtained by converting all the variables in a data frame to numeric mode and then binding them together as the columns of a matrix.  Factors and ordered factors are replaced by their internal codes. </p>"	"<pre>data.matrix(frame, rownames.force = NA) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>frame</code></td> <td> <p>a data frame whose components are logical vectors, factors or numeric vectors.</p> </td> </tr> <tr valign='top'> <td><code>rownames.force</code></td> <td> <p>logical indicating if the resulting matrix should have character (rather than <code>NULL</code>) <code>rownames</code>.  The default, <code>NA</code>, uses <code>NULL</code> rownames if the data frame has ‘automatic’ row.names or for a zero-row data frame.</p> </td> </tr> </table> "	FALSE
"date"	"base"	"System Date and Time"	"<p>Returns a character string of the current system date and time. </p>"	"<pre>date()</pre>"	NA	FALSE
"debug"	"base"	"Debug a Function"	"<p>Set, unset or query the debugging flag on a function. The <code>text</code> and <code>condition</code> arguments are the same as those that can be supplied via a call to <code>browser</code>. They can be retrieved by the user once the browser has been entered, and provide a mechanism to allow users to identify which breakpoint has been activated. </p>"	"<pre>debug(fun, text = '', condition = NULL) debugonce(fun, text = '', condition = NULL) undebug(fun) isdebugged(fun) debuggingState(on = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>fun</code></td> <td> <p>any interpreted <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> function.</p> </td> </tr> <tr valign='top'> <td><code>text</code></td> <td> <p>a text string that can be retrieved when the browser is entered.</p> </td> </tr> <tr valign='top'> <td><code>condition</code></td> <td> <p>a condition that can be retrieved when the browser is entered.</p> </td> </tr> <tr valign='top'> <td><code>on</code></td> <td> <p>logical; a call to the support function <code>debuggingState</code> returns <code>TRUE</code> if debugging is globally turned on, <code>FALSE</code> otherwise.  An argument of one or the other of those values sets the state.  If the debugging state is <code>FALSE</code>, none of the debugging actions will occur (but explicit <code>browser</code> calls in functions will continue to work).</p> </td> </tr> </table> "	FALSE
"Defunct"	"base"	"Marking Objects as Defunct"	"<p>When a function is removed from <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> it should be replaced by a function which calls <code>.Defunct</code>. </p>"	"<pre>.Defunct(new, package = NULL, msg) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>new</code></td> <td><br /><p>character string: A suggestion for a replacement function. </p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td><br /><p>character string: The package to be used when suggesting where the defunct function might be listed. </p> </td> </tr> <tr valign='top'> <td><code>msg</code></td> <td><br /><p>character string: A message to be printed, if missing a default message is used. </p> </td> </tr> </table> "	FALSE
"delayedAssign"	"base"	"Delay Evaluation"	"<p><code>delayedAssign</code> creates a <em>promise</em> to evaluate the given expression if its value is requested.  This provides direct access to the <em>lazy evaluation</em> mechanism used by <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> for the evaluation of (interpreted) functions. </p>"	"<pre>delayedAssign(x, value, eval.env = parent.frame(1),<br />               assign.env = parent.frame(1)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a variable name (given as a quoted string in the function call)</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>an expression to be assigned to <code>x</code></p> </td> </tr> <tr valign='top'> <td><code>eval.env</code></td> <td> <p>an environment in which to evaluate <code>value</code></p> </td> </tr> <tr valign='top'> <td><code>assign.env</code></td> <td> <p>an environment in which to assign <code>x</code></p> </td> </tr> </table> "	FALSE
"deparse"	"base"	"Expression Deparsing"	"<p>Turn unevaluated expressions into character strings. </p>"	"<pre>deparse(expr, width.cutoff = 60L,<br />         backtick = mode(expr) %in%<br />             c('call', 'expression', '(', 'function'),<br />         control = c('keepInteger', 'showAttributes', 'keepNA'),<br />         nlines = -1L) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expression.</p> </td> </tr> <tr valign='top'> <td><code>width.cutoff</code></td> <td> <p>integer in <i>[20, 500]</i> determining the cutoff (in bytes) at which line-breaking is tried.</p> </td> </tr> <tr valign='top'> <td><code>backtick</code></td> <td> <p>logical indicating whether symbolic names should be enclosed in backticks if they do not follow the standard syntax.</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>character vector of deparsing options.  See <code>.deparseOpts</code>.</p> </td> </tr> <tr valign='top'> <td><code>nlines</code></td> <td> <p>integer: the maximum number of lines to produce. Negative values indicate no limit.</p> </td> </tr> </table> "	FALSE
"Deprecated"	"base"	"Marking Objects as Deprecated"	"<p>When an object is about to be removed from <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> it is first deprecated and should include a call to <code>.Deprecated</code>. </p>"	"<pre>.Deprecated(new, package=NULL, msg,<br />             old = as.character(sys.call(sys.parent()))[1L]) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>new</code></td> <td><br /><p>character string: A suggestion for a replacement function. </p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td><br /><p>character string: The package to be used when suggesting where the deprecated function might be listed. </p> </td> </tr> <tr valign='top'> <td><code>msg</code></td> <td><br /><p>character string: A message to be printed, if missing a default message is used.</p> </td> </tr> <tr valign='top'> <td><code>old</code></td> <td> <p>character string specifying the function (default) or usage which is being deprecated.</p> </td> </tr> </table> "	FALSE
"det"	"base"	"Calculate the Determinant of a Matrix"	"<p><code>det</code> calculates the determinant of a matrix.  <code>determinant</code> is a generic function that returns separately the modulus of the determinant, optionally on the logarithm scale, and the sign of the determinant. </p>"	"<pre>det(x, ...) determinant(x, logarithm = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric matrix: logical matrices are coerced to numeric.</p> </td> </tr> <tr valign='top'> <td><code>logarithm</code></td> <td> <p>logical; if <code>TRUE</code> (default) return the logarithm of the modulus of the determinant.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Optional arguments.  At present none are used.  Previous versions of <code>det</code> allowed an optional <code>method</code> argument. This argument will be ignored but will not produce an error.</p> </td> </tr> </table> "	FALSE
"detach"	"base"	"Detach Objects from the Search Path"	"<p>Detach a database, i.e., remove it from the <code>search()</code> path of available <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects.  Usually this is either a <code>data.frame</code> which has been <code>attach</code>ed or a package which was attached by <code>library</code>. </p>"	"<pre>detach(name, pos = 2L, unload = FALSE, character.only = FALSE,<br />        force = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td><br /><p>The object to detach.  Defaults to <code>search()[pos]</code>. This can be an unquoted name or a character string but <em>not</em> a character vector.  If a number is supplied this is taken as <code>pos</code>. </p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td><br /><p>Index position in <code>search()</code> of the database to detach.  When <code>name</code> is a number, <code>pos = name</code> is used. </p> </td> </tr> <tr valign='top'> <td><code>unload</code></td> <td> <p>A logical value indicating whether or not to attempt to unload the namespace when a package is being detached.  If the package has a namespace and <code>unload</code> is <code>TRUE</code>, then <code>detach</code> will attempt to unload the namespace <em>via</em> <code>unloadNamespace</code>: if the namespace is imported by another namespace or <code>unload</code> is <code>FALSE</code>, no unloading will occur. </p> </td> </tr> <tr valign='top'> <td><code>character.only</code></td> <td> <p>a logical indicating whether <code>name</code> can be assumed to be a character string.</p> </td> </tr> <tr valign='top'> <td><code>force</code></td> <td> <p>logical: should a package be detached even though other attached packages depend on it?</p> </td> </tr> </table> "	FALSE
"dput"	"base"	"Write an Object to a File or Recreate it"	"<p>Writes an ASCII text representation of an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object to a file or connection, or uses one to recreate the object. </p>"	"<pre>dput(x, file = '',<br />      control = c('keepNA', 'keepInteger', 'showAttributes'))<br />dget(file, keep.source = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>either a character string naming a file or a connection. <code>''</code> indicates output to the console.</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>character vector indicating deparsing options. See <code>.deparseOpts</code> for their description.</p> </td> </tr> <tr valign='top'> <td><code>keep.source</code></td> <td> <p>logical: should the source formatting be retained when parsing functions, if possible?</p> </td> </tr> </table> "	FALSE
"diag"	"base"	"Matrix Diagonals"	"<p>Extract or replace the diagonal of a matrix, or construct a diagonal matrix. </p>"	"<pre>diag(x = 1, nrow, ncol) diag(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a matrix, vector or 1D array, or missing.</p> </td> </tr> <tr valign='top'> <td><code>nrow, ncol</code></td> <td> <p>Optional dimensions for the result when <code>x</code> is not a matrix.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>either a single value or a vector of length equal to that of the current diagonal.  Should be of a mode which can be coerced to that of <code>x</code>.</p> </td> </tr> </table> "	FALSE
"diff"	"base"	"Lagged Differences"	"<p>Returns suitably lagged and iterated differences. </p>"	"<pre>diff(x, ...)<br />## Default S3 method: diff(x, lag = 1, differences = 1, ...)<br />## S3 method for class 'POSIXt' diff(x, lag = 1, differences = 1, ...)<br />## S3 method for class 'Date' diff(x, lag = 1, differences = 1, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector or matrix containing the values to be differenced.</p> </td> </tr> <tr valign='top'> <td><code>lag</code></td> <td> <p>an integer indicating which lag to use.</p> </td> </tr> <tr valign='top'> <td><code>differences</code></td> <td> <p>an integer indicating the order of the difference.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"dim"	"base"	"Dimensions of an Object"	"<p>Retrieve or set the dimension of an object. </p>"	"<pre>dim(x) dim(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, for example a matrix, array or data frame.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>For the default method, either <code>NULL</code> or a numeric vector, which is coerced to integer (by truncation).</p> </td> </tr> </table> "	FALSE
"dimnames"	"base"	"Dimnames of an Object"	"<p>Retrieve or set the dimnames of an object. </p>"	"<pre>dimnames(x) dimnames(x) &lt;- value<br />provideDimnames(x, sep = '', base = list(LETTERS), unique = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, for example a matrix, array or data frame.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a possible value for <code>dimnames(x)</code>: see the ‘Value’ section.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>a character string, used to separate <code>base</code> symbols and digits in the constructed dimnames.</p> </td> </tr> <tr valign='top'> <td><code>base</code></td> <td> <p>a non-empty <code>list</code> of character vectors.  The list components are used in turn (and recycled when needed) to construct replacements for empty dimnames components.  See also the examples.</p> </td> </tr> <tr valign='top'> <td><code>unique</code></td> <td> <p>logical indicating that the dimnames constructed are unique within each dimension in the sense of <code>make.unique</code>.</p> </td> </tr> </table> "	FALSE
"list.files"	"base"	"List the Files in a Directory/Folder"	"<p>These functions produce a character vector of the names of files or directories in the named directory. </p>"	"<pre>list.files(path = '.', pattern = NULL, all.files = FALSE,<br />            full.names = FALSE, recursive = FALSE,<br />            ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)<br /><br />       dir(path = '.', pattern = NULL, all.files = FALSE,<br />            full.names = FALSE, recursive = FALSE,<br />            ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)<br />list.dirs(path = '.', full.names = TRUE, recursive = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>path</code></td> <td> <p>a character vector of full path names; the default corresponds to the working directory, <code>getwd()</code>.  Tilde expansion (see <code>path.expand</code>) is performed.  Missing values will be ignored.</p> </td> </tr> <tr valign='top'> <td><code>pattern</code></td> <td> <p>an optional regular expression.  Only file names which match the regular expression will be returned.</p> </td> </tr> <tr valign='top'> <td><code>all.files</code></td> <td> <p>a logical value.  If <code>FALSE</code>, only the names of visible files are returned.  If <code>TRUE</code>, all file names will be returned.</p> </td> </tr> <tr valign='top'> <td><code>full.names</code></td> <td> <p>a logical value.  If <code>TRUE</code>, the directory path is prepended to the file names to give a relative file path. If <code>FALSE</code>, the file names (rather than paths) are returned.</p> </td> </tr> <tr valign='top'> <td><code>recursive</code></td> <td> <p>logical.  Should the listing recurse into directories?</p> </td> </tr> <tr valign='top'> <td><code>ignore.case</code></td> <td> <p>logical.  Should pattern-matching be case-insensitive?</p> </td> </tr> <tr valign='top'> <td><code>include.dirs</code></td> <td> <p>logical.  Should subdirectory names be included in recursive listings?  (They always are in non-recursive ones).</p> </td> </tr> <tr valign='top'> <td><code>no..</code></td> <td> <p>logical.  Should both <code>'.'</code> and <code>'..'</code> be excluded also from non-recursive listings?</p> </td> </tr> </table> "	FALSE
"files2"	"base"	"Manipulaton of Directories and File Permissions"	"<p>These functions provide a low-level interface to the computer's file system. </p>"	"<pre>dir.exists(paths) dir.create(path, showWarnings = TRUE, recursive = FALSE, mode = '0777') Sys.chmod(paths, mode = '0777', use_umask = TRUE) Sys.umask(mode = NA) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>path</code></td> <td> <p>a character vector containing a single path name.  Tilde expansion (see <code>path.expand</code>) is done.</p> </td> </tr> <tr valign='top'> <td><code>paths</code></td> <td> <p>character vectors containing file or directory paths.  Tilde expansion (see <code>path.expand</code>) is done.</p> </td> </tr> <tr valign='top'> <td><code>showWarnings</code></td> <td> <p>logical; should the warnings on failure be shown?</p> </td> </tr> <tr valign='top'> <td><code>recursive</code></td> <td> <p>logical. Should elements of the path other than the last be created?  If true, like the Unix command <code>mkdir -p</code>.</p> </td> </tr> <tr valign='top'> <td><code>mode</code></td> <td> <p>the mode to be used on Unix-alikes: it will be coerced by <code>as.octmode</code>.  For <code>Sys.chmod</code> it is recycled along <code>paths</code>.</p> </td> </tr> <tr valign='top'> <td><code>use_umask</code></td> <td> <p>logical: should the mode be restricted by the <code>umask</code> setting?</p> </td> </tr> </table> "	FALSE
"EnvVar"	"base"	"Environment Variables"	"<p>Details of some of the environment variables which affect an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> session. </p>"	NA	NA	FALSE
"getLoadedDLLs"	"base"	"Get DLLs Loaded in Current Session"	"<p>This function provides a way to get a list of all the DLLs (see <code>dyn.load</code>) that are currently loaded in the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> session. </p>"	"<pre>getLoadedDLLs() </pre>"	NA	FALSE
"do.call"	"base"	"Execute a Function Call"	"<p><code>do.call</code> constructs and executes a function call from a name or a function and a list of arguments to be passed to it. </p>"	"<pre>do.call(what, args, quote = FALSE, envir = parent.frame()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>what</code></td> <td> <p>either a function or a non-empty character string naming the function to be called.</p> </td> </tr> <tr valign='top'> <td><code>args</code></td> <td> <p>a <em>list</em> of arguments to the function call.  The <code>names</code> attribute of <code>args</code> gives the argument names.</p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>a logical value indicating whether to quote the arguments.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>an environment within which to evaluate the call.  This will be most useful if <code>what</code> is a character string and the arguments are symbols or quoted expressions.</p> </td> </tr> </table> "	FALSE
"dontCheck"	"base"	"Identity Function to Suppress Checking"	"<p>The <code>dontCheck</code> function is the same as <code>identity</code>, but  is interpreted by <code>R CMD check</code> code analysis as a directive to suppress checking of <code>x</code>.  Currently this is only used by <code>checkFF(registration = TRUE)</code> when checking the <code>.NAME</code> argument of foreign function calls. </p>"	"<pre>dontCheck(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr></table> "	FALSE
"sQuote"	"base"	"Quote Text"	"<p>Single or double quote text by combining with appropriate single or double left and right quotation marks. </p>"	"<pre>sQuote(x) dQuote(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, to be coerced to a character vector.</p> </td> </tr></table> "	FALSE
"drop"	"base"	"Drop Redundant Extent Information"	"<p>Delete the dimensions of an array which have only one level. </p>"	"<pre>drop(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an array (including a matrix).</p> </td> </tr></table> "	FALSE
"droplevels"	"base"	"droplevels"	"<p>The function <code>droplevels</code> is used to drop unused levels from a factor or, more commonly, from factors in a data frame. </p>"	"<pre>## S3 method for class 'factor' droplevels(x, ...) ## S3 method for class 'data.frame' droplevels(x, except, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object from which to drop unused factor levels.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to methods</p> </td> </tr> <tr valign='top'> <td><code>except</code></td> <td> <p>indices of columns from which <em>not</em> to drop levels</p> </td> </tr> </table> "	FALSE
"dump"	"base"	"Text Representations of R Objects"	"<p>This function takes a vector of names of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects and produces text representations of the objects on a file or connection. A <code>dump</code> file can usually be <code>source</code>d into another <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> session. </p>"	"<pre>dump(list, file = 'dumpdata.R', append = FALSE,<br />      control = 'all', envir = parent.frame(), evaluate = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>list</code></td> <td> <p>character vector.  The names of one or more <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects to be dumped.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>either a character string naming a file or a connection.  <code>''</code> indicates output to the console.</p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td> <p>if <code>TRUE</code> and <code>file</code> is a character string, output will be appended to <code>file</code>; otherwise, it will overwrite the contents of <code>file</code>.</p> </td> </tr> <tr valign='top'> <td><code>control</code></td> <td> <p>character vector indicating deparsing options. See <code>.deparseOpts</code> for their description.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the environment to search for objects.</p> </td> </tr> <tr valign='top'> <td><code>evaluate</code></td> <td> <p>logical.  Should promises be evaluated?</p> </td> </tr> </table> "	FALSE
"dynload"	"base"	"Foreign Function Interface"	"<p>Load or unload DLLs (also known as shared objects), and test whether a C function or Fortran subroutine is available. </p>"	"<pre>dyn.load(x, local = TRUE, now = TRUE, ...) dyn.unload(x)<br />is.loaded(symbol, PACKAGE = '', type = '') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character string giving the pathname to a DLL, also known as a dynamic shared object.  (See ‘Details’ for what these terms mean.)</p> </td> </tr> <tr valign='top'> <td><code>local</code></td> <td> <p>a logical value controlling whether the symbols in the DLL are stored in their own local table and not shared across DLLs, or added to the global symbol table.  Whether this has any effect is system-dependent. </p> </td> </tr> <tr valign='top'> <td><code>now</code></td> <td> <p>a logical controlling whether all symbols are resolved (and relocated) immediately the library is loaded or deferred until they are used.  This control is useful for developers testing whether a library is complete and has all the necessary symbols, and for users to ignore missing symbols.  Whether this has any effect is system-dependent. </p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other arguments for future expansion. </p> </td> </tr> <tr valign='top'> <td><code>symbol</code></td> <td> <p>a character string giving a symbol name.</p> </td> </tr> <tr valign='top'> <td><code>PACKAGE</code></td> <td> <p>if supplied, confine the search for the <code>name</code> to the DLL given by this argument (plus the conventional extension, ‘<span class='file'>.so</span>’, ‘<span class='file'>.sl</span>’, ‘<span class='file'>.dll</span>’, ...).  This is intended to add safety for packages, which can ensure by using this argument that no other package can override their external symbols.  This is used in the same way as in <code>.C</code>, <code>.Call</code>, <code>.Fortran</code> and <code>.External</code> functions.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>The type of symbol to look for: can be any (<code>''</code>, the default), <code>'Fortran'</code>, <code>'Call'</code> or <code>'External'</code>.</p> </td> </tr> </table> "	FALSE
"get"	"base"	"Return the Value of a Named Object"	"<p>Search by name for an object (<code>get</code>) or zero or more objects (<code>mget</code>). </p>"	"<pre>get(x, pos = -1, envir = as.environment(pos), mode = 'any',<br />     inherits = TRUE)<br />mget(x, envir = as.environment(-1), mode = 'any', ifnotfound,<br />      inherits = FALSE)<br />dynGet(x, ifnotfound = , minframe = 1L, inherits = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>For <code>get</code>, an object name (given as a character string).<br> For <code>mget</code>, a character vector of object names. </p> </td> </tr> <tr valign='top'> <td><code>pos, envir</code></td> <td> <p>where to look for the object (see ‘Details’); if omitted search as if the name of the object appeared unquoted in an expression.</p> </td> </tr> <tr valign='top'> <td><code>mode</code></td> <td> <p>the mode or type of object sought: see the ‘Details’ section.</p> </td> </tr> <tr valign='top'> <td><code>inherits</code></td> <td> <p>should the enclosing frames of the environment be searched?</p> </td> </tr> <tr valign='top'> <td><code>ifnotfound</code></td> <td> <p>For <code>mget</code>, a <code>list</code> of values to be used if the item is not found: it will be coerced to a list if necessary.<br> For <code>dynGet</code> any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, e.g., a call to <code>stop()</code>.</p> </td> </tr> <tr valign='top'> <td><code>minframe</code></td> <td> <p>integer specifying the minimal frame number to look into.</p> </td> </tr> </table> "	FALSE
"eapply"	"base"	"Apply a Function Over Values in an Environment"	"<p><code>eapply</code> applies <code>FUN</code> to the named values from an <code>environment</code> and returns the results as a list.  The user can request that all named objects are used (normally names that begin with a dot are not).  The output is not sorted and no enclosing environments are searched. </p> <p>This is a primitive function. </p>"	"<pre>eapply(env, FUN, ..., all.names = FALSE, USE.NAMES = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>env</code></td> <td> <p>environment to be used.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>the function to be applied, found <em>via</em> <code>match.fun</code>. In the case of functions like <code>+</code>, <code>%*%</code>, etc., the function name must be backquoted or quoted.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional arguments to <code>FUN</code>.</p> </td> </tr> <tr valign='top'> <td><code>all.names</code></td> <td> <p>a logical indicating whether to apply the function to all values.</p> </td> </tr> <tr valign='top'> <td><code>USE.NAMES</code></td> <td> <p>logical indicating whether the resulting list should have <code>names</code>.</p> </td> </tr> </table> "	FALSE
"eigen"	"base"	"Spectral Decomposition of a Matrix"	"<p>Computes eigenvalues and eigenvectors of numeric (double, integer, logical) or complex matrices. </p>"	"<pre>eigen(x, symmetric, only.values = FALSE, EISPACK = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric or complex matrix whose spectral decomposition is to be computed.  Logical matrices are coerced to numeric.</p> </td> </tr> <tr valign='top'> <td><code>symmetric</code></td> <td> <p>if <code>TRUE</code>, the matrix is assumed to be symmetric (or Hermitian if complex) and only its lower triangle (diagonal included) is used.  If <code>symmetric</code> is not specified, the matrix is inspected for symmetry.</p> </td> </tr> <tr valign='top'> <td><code>only.values</code></td> <td> <p>if <code>TRUE</code>, only the eigenvalues are computed and returned, otherwise both eigenvalues and eigenvectors are returned.</p> </td> </tr> <tr valign='top'> <td><code>EISPACK</code></td> <td> <p>logical. Defunct and ignored.</p> </td> </tr> </table> "	FALSE
"Encoding"	"base"	"Read or Set the Declared Encodings for a Character Vector"	"<p>Read or set the declared encodings for a character vector. </p>"	"<pre>Encoding(x)<br />Encoding(x) &lt;- value<br />enc2native(x) enc2utf8(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A character vector.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>A character vector of positive length.</p> </td> </tr> </table> "	FALSE
"encodeString"	"base"	"Encode Character Vector as for Printing"	"<p><code>encodeString</code> escapes the strings in a character vector in the same way <code>print.default</code> does, and optionally fits the encoded strings within a field width. </p>"	"<pre>encodeString(x, width = 0, quote = '', na.encode = TRUE,<br />              justify = c('left', 'right', 'centre', 'none')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A character vector, or an object that can be coerced to one by <code>as.character</code>.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>integer: the minimum field width.  If <code>NULL</code> or <code>NA</code>, this is taken to be the largest field width needed for any element of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>character: quoting character, if any.</p> </td> </tr> <tr valign='top'> <td><code>na.encode</code></td> <td> <p>logical: should <code>NA</code> strings be encoded?</p> </td> </tr> <tr valign='top'> <td><code>justify</code></td> <td> <p>character: partial matches are allowed.  If padding to the minimum field width is needed, how should spaces be inserted? <code>justify == 'none'</code> is equivalent to <code>width = 0</code>, for consistency with <code>format.default</code>.</p> </td> </tr> </table> "	FALSE
"startsWith"	"base"	"Does String Start or End With Another String?"	"<p>Determines if entries of <code>x</code> start or end with string (entries of) <code>prefix</code> or <code>suffix</code> respectively, where strings are recycled to common lengths. </p> <p><code>startsWith()</code> is equivalent to but much faster than </p> <pre>substring(x, 1, nchar(prefix)) == prefix</pre> <p>or also </p> <pre>grepl('^&lt;prefix&gt;', x)</pre>  <p> where <code>prefix</code> is not to contain special regular expression characters. </p>"	"<pre>startsWith(x, prefix)<br />   endsWith(x, suffix) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>vector of <code>character</code> string whose “starts” are considered.</p> </td> </tr> <tr valign='top'> <td><code>prefix, suffix</code></td> <td> <p><code>character</code> vector (often of length one).</p> </td> </tr> </table> "	FALSE
"substitute"	"base"	"Substituting and Quoting Expressions"	"<p><code>substitute</code> returns the parse tree for the (unevaluated) expression <code>expr</code>, substituting any variables bound in <code>env</code>. </p> <p><code>quote</code> simply returns its argument. The argument is not evaluated and can be any R expression. </p> <p><code>enquote</code> is a simple one-line utility which transforms a call of the form <code>Foo(....)</code> into the call <code>quote(Foo(....))</code>.  This is typically used to protect a <code>call</code> from early evaluation. </p>"	"<pre>substitute(expr, env) quote(expr) enquote(cl) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>any syntactically valid <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expression</p> </td> </tr> <tr valign='top'> <td><code>cl</code></td> <td> <p>a <code>call</code>, i.e., an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object of <code>class</code> (and <code>mode</code>) <code>'call'</code>.</p> </td> </tr> <tr valign='top'> <td><code>env</code></td> <td> <p>an environment or a list object.  Defaults to the current evaluation environment.</p> </td> </tr> </table> "	FALSE
"eval"	"base"	"Evaluate an (Unevaluated) Expression"	"<p>Evaluate an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expression in a specified environment. </p>"	"<pre>eval(expr, envir = parent.frame(),<br />            enclos = if(is.list(envir) || is.pairlist(envir))<br />                        parent.frame() else baseenv()) evalq(expr, envir, enclos) eval.parent(expr, n = 1) local(expr, envir = new.env()) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>an object to be evaluated.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the <code>environment</code> in which <code>expr</code> is to be evaluated.  May also be <code>NULL</code>, a list, a data frame, a pairlist or an integer as specified to <code>sys.call</code>.</p> </td> </tr> <tr valign='top'> <td><code>enclos</code></td> <td> <p>Relevant when <code>envir</code> is a (pair)list or a data frame. Specifies the enclosure, i.e., where <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> looks for objects not found in <code>envir</code>.  This can be <code>NULL</code> (interpreted as the base package environment, <code>baseenv()</code>) or an environment.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>number of parent generations to go back</p> </td> </tr> </table> "	FALSE
"exists"	"base"	"Is an Object Defined?"	"<p>Look for an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object of the given name and possibly return it </p>"	"<pre>exists(x, where = -1, envir = , frame, mode = 'any',<br />        inherits = TRUE)<br />get0(x, envir = pos.to.env(-1L), mode = 'any', inherits = TRUE,<br />      ifnotfound = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a variable name (given as a character string).</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>where to look for the object (see the details section); if omitted, the function will search as if the name of the object appeared unquoted in an expression.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>an alternative way to specify an environment to look in, but it is usually simpler to just use the <code>where</code> argument.</p> </td> </tr> <tr valign='top'> <td><code>frame</code></td> <td> <p>a frame in the calling list.  Equivalent to giving <code>where</code> as <code>sys.frame(frame)</code>.</p> </td> </tr> <tr valign='top'> <td><code>mode</code></td> <td> <p>the mode or type of object sought: see the ‘Details’ section.</p> </td> </tr> <tr valign='top'> <td><code>inherits</code></td> <td> <p>should the enclosing frames of the environment be searched?</p> </td> </tr> <tr valign='top'> <td><code>ifnotfound</code></td> <td> <p>the return value of <code>get0(x, *)</code> when <code>x</code> does not exist.</p> </td> </tr> </table> "	FALSE
"Log"	"base"	"Logarithms and Exponentials"	"<p><code>log</code> computes logarithms, by default natural logarithms, <code>log10</code> computes common (i.e., base 10) logarithms, and <code>log2</code> computes binary (i.e., base 2) logarithms. The general form <code>log(x, base)</code> computes logarithms with base <code>base</code>. </p> <p><code>log1p(x)</code> computes <i>log(1+x)</i> accurately also for <i>|x| &lt;&lt; 1</i>. </p> <p><code>exp</code> computes the exponential function. </p> <p><code>expm1(x)</code> computes <i>exp(x) - 1</i> accurately also for <i>|x| &lt;&lt; 1</i>. </p>"	"<pre>log(x, base = exp(1)) logb(x, base = exp(1)) log10(x) log2(x)<br />log1p(x)<br />exp(x) expm1(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric or complex vector.</p> </td> </tr> <tr valign='top'> <td><code>base</code></td> <td> <p>a positive or complex number: the base with respect to which logarithms are computed.  Defaults to <i>e</i>=<code>exp(1)</code>.</p> </td> </tr> </table> "	FALSE
"expand.grid"	"base"	"Create a Data Frame from All Combinations of Factor Variables"	"<p>Create a data frame from all combinations of the supplied vectors or factors.  See the description of the return value for precise details of the way this is done. </p>"	"<pre>expand.grid(..., KEEP.OUT.ATTRS = TRUE, stringsAsFactors = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>vectors, factors or a list containing these.</p> </td> </tr> <tr valign='top'> <td><code>KEEP.OUT.ATTRS</code></td> <td> <p>a logical indicating the <code>'out.attrs'</code> attribute (see below) should be computed and returned.</p> </td> </tr> <tr valign='top'> <td><code>stringsAsFactors</code></td> <td> <p>logical specifying if character vectors are converted to factors.</p> </td> </tr> </table> "	FALSE
"Extract"	"base"	"Extract or Replace Parts of an Object"	"<p>Operators acting on vectors, matrices, arrays and lists to extract or replace parts. </p>"	"<pre>x[i] x[i, j, ... , drop = TRUE] x[[i, exact = TRUE]] x[[i, j, ..., exact = TRUE]] x$name getElement(object, name)<br />x[i] &lt;- value x[i, j, ...] &lt;- value x[[i]] &lt;- value x$name &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, object</code></td> <td><br /><p>object from which to extract element(s) or in which to replace element(s). </p> </td> </tr> <tr valign='top'> <td><code>i, j, ...</code></td> <td><br /><p>indices specifying elements to extract or replace.  Indices are <code>numeric</code> or <code>character</code> vectors or empty (missing) or <code>NULL</code>.  Numeric values are coerced to integer as by <code>as.integer</code> (and hence truncated towards zero). Character vectors will be matched to the <code>names</code> of the object (or for matrices/arrays, the <code>dimnames</code>): see ‘Character indices’ below for further details. </p> <p>For <code>[</code>-indexing only: <code>i</code>, <code>j</code>, <code>...</code> can be logical vectors, indicating elements/slices to select.  Such vectors are recycled if necessary to match the corresponding extent. <code>i</code>, <code>j</code>, <code>...</code> can also be negative integers, indicating elements/slices to leave out of the selection. </p> <p>When indexing arrays by <code>[</code> a single argument <code>i</code> can be a matrix with as many columns as there are dimensions of <code>x</code>; the result is then a vector with elements corresponding to the sets of indices in each row of <code>i</code>. </p> <p>An index value of <code>NULL</code> is treated as if it were <code>integer(0)</code>. </p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td><br /><p>A literal character string or a name (possibly backtick quoted).  For extraction, this is normally (see under ‘Environments’) partially matched to the <code>names</code> of the object. </p> </td> </tr> <tr valign='top'> <td><code>drop</code></td> <td> <p>For matrices and arrays.  If <code>TRUE</code> the result is coerced to the lowest possible dimension (see the examples).  This only works for extracting elements, not for the replacement.  See <code>drop</code> for further details. </p> </td> </tr> <tr valign='top'> <td><code>exact</code></td> <td> <p>Controls possible partial matching of <code>[[</code> when extracting by a character vector (for most objects, but see under ‘Environments’).  The default is no partial matching.  Value <code>NA</code> allows partial matching but issues a warning when it occurs.  Value <code>FALSE</code> allows partial matching without any warning.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>typically an array-like <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object of a similar class as <code>x</code>.</p> </td> </tr> </table> "	FALSE
"extSoftVersion"	"base"	"Report Versions of Third-Party Software"	"<p>Report versions of (external) third-party software used. </p>"	"<pre>extSoftVersion() </pre>"	NA	FALSE
"file.access"	"base"	"Ascertain File Accessibility"	"<p>Utility function to access information about files on the user's file systems. </p>"	"<pre>file.access(names, mode = 0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>names</code></td> <td> <p>character vector containing file names. Tilde-expansion will be done: see <code>path.expand</code>.</p> </td> </tr> <tr valign='top'> <td><code>mode</code></td> <td> <p>integer specifying access mode required: see ‘Details’.</p> </td> </tr> </table> "	FALSE
"files"	"base"	"File Manipulation"	"<p>These functions provide a low-level interface to the computer's file system. </p>"	"<pre>file.create(..., showWarnings = TRUE) file.exists(...) file.remove(...) file.rename(from, to) file.append(file1, file2) file.copy(from, to, overwrite = recursive, recursive = FALSE,<br />           copy.mode = TRUE, copy.date = FALSE) file.symlink(from, to) file.link(from, to) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>..., file1, file2</code></td> <td> <p>character vectors, containing file names or paths.</p> </td> </tr> <tr valign='top'> <td><code>from, to</code></td> <td> <p>character vectors, containing file names or paths. For <code>file.copy</code> and <code>file.symlink</code> <code>to</code> can alternatively be the path to a single existing directory.</p> </td> </tr> <tr valign='top'> <td><code>overwrite</code></td> <td> <p>logical; should existing destination files be overwritten?</p> </td> </tr> <tr valign='top'> <td><code>showWarnings</code></td> <td> <p>logical; should the warnings on failure be shown?</p> </td> </tr> <tr valign='top'> <td><code>recursive</code></td> <td> <p>logical.  If <code>to</code> is a directory, should directories in <code>from</code> be copied (and their contents)?  (Like <code>cp -R</code> on POSIX OSes.)</p> </td> </tr> <tr valign='top'> <td><code>copy.mode</code></td> <td> <p>logical:  should file permission bits be copied where possible?</p> </td> </tr> <tr valign='top'> <td><code>copy.date</code></td> <td> <p>logical:  should file dates be preserved where possible? See <code>Sys.setFileTime</code>.</p> </td> </tr> </table> "	FALSE
"file.choose"	"base"	"Choose a File Interactively"	"<p>Choose a file interactively. </p>"	"<pre>file.choose(new = FALSE) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>new</code></td> <td> <p>Logical: choose the style of dialog box presented to the user: at present only new = FALSE is used.</p> </td> </tr></table> "	FALSE
"file.info"	"base"	"Extract File Information"	"<p>Utility function to extract information about files on the user's file systems. </p>"	"<pre>file.info(..., extra_cols = TRUE)<br />file.mode(...) file.mtime(...) file.size(...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>character vectors containing file paths.  Tilde-expansion is done: see <code>path.expand</code>.</p> </td> </tr> <tr valign='top'> <td><code>extra_cols</code></td> <td> <p>Logical: return all cols rather than just the first six.</p> </td> </tr> </table> "	FALSE
"file.path"	"base"	"Construct Path to File"	"<p>Construct the path to a file from components in a platform-independent way. </p>"	"<pre>file.path(..., fsep = .Platform$file.sep) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>character vectors.</p> </td> </tr> <tr valign='top'> <td><code>fsep</code></td> <td> <p>the path separator to use.</p> </td> </tr> </table> "	FALSE
"file.show"	"base"	"Display One or More Text Files"	"<p>Display one or more (plain) text files, in a platform specific way, typically via a ‘pager’. </p>"	"<pre>file.show(..., header = rep('', nfiles),<br />           title = 'R Information',<br />           delete.file = FALSE, pager = getOption('pager'),<br />           encoding = '') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>one or more character vectors containing the names of the files to be displayed.  Paths with have tilde expansion.</p> </td> </tr> <tr valign='top'> <td><code>header</code></td> <td> <p>character vector (of the same length as the number of files specified in <code>...</code>) giving a header for each file being displayed.  Defaults to empty strings.</p> </td> </tr> <tr valign='top'> <td><code>title</code></td> <td> <p>an overall title for the display.  If a single separate window is used for the display, <code>title</code> will be used as the window title.  If multiple windows are used, their titles should combine the title and the file-specific header.</p> </td> </tr> <tr valign='top'> <td><code>delete.file</code></td> <td> <p>should the files be deleted after display?  Used for temporary files.</p> </td> </tr> <tr valign='top'> <td><code>pager</code></td> <td> <p>the pager to be used: not used on all platforms</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>character string giving the encoding to be assumed for the file(s).</p> </td> </tr> </table> "	FALSE
"funprog"	"base"	"Common Higher-Order Functions in Functional Programming Languages"	"<p><code>Reduce</code> uses a binary function to successively combine the elements of a given vector and a possibly given initial value. <code>Filter</code> extracts the elements of a vector for which a predicate (logical) function gives true.  <code>Find</code> and <code>Position</code> give the first or last such element and its position in the vector, respectively.  <code>Map</code> applies a function to the corresponding elements of given vectors.  <code>Negate</code> creates the negation of a given function. </p>"	"<pre>Reduce(f, x, init, right = FALSE, accumulate = FALSE) Filter(f, x) Find(f, x, right = FALSE, nomatch = NULL) Map(f, ...) Negate(f) Position(f, x, right = FALSE, nomatch = NA_integer_) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>f</code></td> <td> <p>a function of the appropriate arity (binary for <code>Reduce</code>, unary for <code>Filter</code>, <code>Find</code> and <code>Position</code>, <i>k</i>-ary for <code>Map</code> if this is called with <i>k</i> arguments).  An arbitrary predicate function for <code>Negate</code>.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector.</p> </td> </tr> <tr valign='top'> <td><code>init</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object of the same kind as the elements of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>right</code></td> <td> <p>a logical indicating whether to proceed from left to right (default) or from right to left.</p> </td> </tr> <tr valign='top'> <td><code>accumulate</code></td> <td> <p>a logical indicating whether the successive reduce combinations should be accumulated.  By default, only the final combination is used.</p> </td> </tr> <tr valign='top'> <td><code>nomatch</code></td> <td> <p>the value to be returned in the case when “no match” (no element satisfying the predicate) is found.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>vectors.</p> </td> </tr> </table> "	FALSE
"reg.finalizer"	"base"	"Finalization of Objects"	"<p>Registers an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> function to be called upon garbage collection of object or (optionally) at the end of an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> session. </p>"	"<pre><br />   reg.finalizer(e, f, onexit = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>e</code></td> <td> <p>Object to finalize.  Must be an environment or an external pointer.</p> </td> </tr> <tr valign='top'> <td><code>f</code></td> <td> <p>Function to call on finalization. Must accept a single argument, which will be the object to finalize.</p> </td> </tr> <tr valign='top'> <td><code>onexit</code></td> <td> <p>logical: should the finalizer be run if the object is still uncollected at the end of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> session?</p> </td> </tr> </table> "	FALSE
"find.package"	"base"	"Find Packages"	"<p>Find the paths to one or more packages. </p>"	"<pre>find.package(package, lib.loc = NULL, quiet = FALSE,<br />              verbose = getOption('verbose'))<br />path.package(package, quiet = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>package</code></td> <td> <p>character vector: the names of packages.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees to search through, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to checking the loaded namespace, then all libraries currently known in <code>.libPaths()</code>.</p> </td> </tr> <tr valign='top'> <td><code>quiet</code></td> <td> <p>logical.  Should this not give warnings or an error if the package is not found?</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>a logical.  If <code>TRUE</code>, additional diagnostics are printed.</p> </td> </tr> </table> "	FALSE
"findInterval"	"base"	"Find Interval Numbers or Indices"	"<p>Given a vector of non-decreasing breakpoints in <code>vec</code>, find the interval containing each element of <code>x</code>; i.e., if <code>i &lt;- findInterval(x,v)</code>, for each index <code>j</code> in <code>x</code> <i>v[i[j]] ≤ x[j] &lt; v[i[j] + 1]</i> where <i>v[0] := - Inf</i>, <i>v[N+1] := + Inf</i>, and <code>N &lt;- length(v)</code>. At the two boundaries, the returned index may differ by 1, depending on the optional arguments <code>rightmost.closed</code> and <code>all.inside</code>. </p>"	"<pre>findInterval(x, vec, rightmost.closed = FALSE, all.inside = FALSE,<br />              left.open = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric.</p> </td> </tr> <tr valign='top'> <td><code>vec</code></td> <td> <p>numeric, sorted (weakly) increasingly, of length <code>N</code>, say.</p> </td> </tr> <tr valign='top'> <td><code>rightmost.closed</code></td> <td> <p>logical; if true, the rightmost interval, <code>vec[N-1] .. vec[N]</code> is treated as <em>closed</em>, see below.</p> </td> </tr> <tr valign='top'> <td><code>all.inside</code></td> <td> <p>logical; if true, the returned indices are coerced into <code>1,...,N-1</code>, i.e., <code>0</code> is mapped to <code>1</code> and <code>N</code> to <code>N-1</code>.</p> </td> </tr> <tr valign='top'> <td><code>left.open</code></td> <td> <p>logical; if true all the intervals are open at left and closed at right; in the formulas below, <i>≤</i> should be swapped with <i>&lt;</i> (and <i>&gt;</i> with <i>≥</i>), and <code>rightmost.closed</code> means ‘leftmost is closed’.  This may be useful, e.g., in survival analysis computations.</p> </td> </tr> </table> "	FALSE
"is.finite"	"base"	"Finite, Infinite and NaN Numbers"	"<p><code>is.finite</code> and <code>is.infinite</code> return a vector of the same length as <code>x</code>, indicating which elements are finite (not infinite and not missing) or infinite. </p> <p><code>Inf</code> and <code>-Inf</code> are positive and negative infinity whereas <code>NaN</code> means ‘Not a Number’.  (These apply to numeric values and real and imaginary parts of complex values but not to values of integer vectors.)  <code>Inf</code> and <code>NaN</code> are reserved words in the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> language. </p>"	"<pre>is.finite(x) is.infinite(x) is.nan(x)<br />Inf NaN </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object to be tested: the default methods handle atomic vectors.</p> </td> </tr></table> "	FALSE
"force"	"base"	"Force Evaluation of an Argument"	"<p>Forces the evaluation of a function argument. </p>"	"<pre>force(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a formal argument of the enclosing function.</p> </td> </tr></table> "	FALSE
"forceAndCall"	"base"	"Call a function with Some Arguments Forced"	"<p>Call a function with a specified number of leading arguments forced before the call if the function is a closure. </p>"	"<pre>forceAndCall(n, FUN, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>number of leading arguments to force.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>function to call.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to <code>FUN</code>.</p> </td> </tr> </table> "	FALSE
"Foreign"	"base"	"Foreign Function Interface"	"<p>Functions to make calls to compiled code that has been loaded into <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p>"	"<pre><br />        .C(.NAME, ..., NAOK = FALSE, DUP = TRUE, PACKAGE, ENCODING)  .Fortran(.NAME, ..., NAOK = FALSE, DUP = TRUE, PACKAGE, ENCODING) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>.NAME</code></td> <td> <p>a character string giving the name of a C function or Fortran subroutine, or an object of class <code>'NativeSymbolInfo'</code>, <code>'RegisteredNativeSymbol'</code> or <code>'NativeSymbol'</code> referring to such a name.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to the foreign function.  Up to 65.</p> </td> </tr> <tr valign='top'> <td><code>NAOK</code></td> <td> <p>if <code>TRUE</code> then any <code>NA</code> or <code>NaN</code> or <code>Inf</code> values in the arguments are passed on to the foreign function.  If <code>FALSE</code>, the presence of <code>NA</code> or <code>NaN</code> or <code>Inf</code> values is regarded as an error.</p> </td> </tr> <tr valign='top'> <td><code>PACKAGE</code></td> <td> <p>if supplied, confine the search for a character string <code>.NAME</code> to the DLL given by this argument (plus the conventional extension, ‘<span class='file'>.so</span>’, ‘<span class='file'>.dll</span>’, ...). </p> <p>This is intended to add safety for packages, which can ensure by using this argument that no other package can override their external symbols, and also speeds up the search (see ‘Note’).</p> </td> </tr> <tr valign='top'> <td><code>DUP, ENCODING</code></td> <td> <p>For back-compatibility, accepted but ignored.</p> </td> </tr> </table> "	FALSE
"formals"	"base"	"Access to and Manipulation of the Formal Arguments"	"<p>Get or set the formal arguments of a <code>function</code>. </p>"	"<pre>formals(fun = sys.function(sys.parent())) formals(fun, envir = environment(fun)) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>fun</code></td> <td> <p>a <code>function</code>, or see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p><code>environment</code> in which the function should be defined.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a <code>list</code> (or <code>pairlist</code>) of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expressions.</p> </td> </tr> </table> "	FALSE
"format"	"base"	"Encode in a Common Format"	"<p>Format an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object for pretty printing. </p>"	"<pre>format(x, ...)<br />## Default S3 method: format(x, trim = FALSE, digits = NULL, nsmall = 0L,<br />        justify = c('left', 'right', 'centre', 'none'),<br />        width = NULL, na.encode = TRUE, scientific = NA,<br />        big.mark<br />   = '',<br />   big.interval = 3L,<br />        small.mark = '', small.interval = 5L,<br />        decimal.mark = getOption('OutDec'),<br />        zero.print = NULL, drop0trailing = FALSE, ...)<br />## S3 method for class 'data.frame' format(x, ..., justify = 'none')<br />## S3 method for class 'factor' format(x, ...)<br />## S3 method for class 'AsIs' format(x, width = 12, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object (conceptually); typically numeric.</p> </td> </tr> <tr valign='top'> <td><code>trim</code></td> <td> <p>logical; if <code>FALSE</code>, logical, numeric and complex values are right-justified to a common width: if <code>TRUE</code> the leading blanks for justification are suppressed.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>how many significant digits are to be used for numeric and complex <code>x</code>.  The default, <code>NULL</code>, uses <code>getOption('digits')</code>.  This is a suggestion: enough decimal places will be used so that the smallest (in magnitude) number has this many significant digits, and also to satisfy <code>nsmall</code>. (For the interpretation for complex numbers see <code>signif</code>.)</p> </td> </tr> <tr valign='top'> <td><code>nsmall</code></td> <td> <p>the minimum number of digits to the right of the decimal point in formatting real/complex numbers in non-scientific formats. Allowed values are <code>0 &lt;= nsmall &lt;= 20</code>.</p> </td> </tr> <tr valign='top'> <td><code>justify</code></td> <td> <p>should a <em>character</em> vector be left-justified (the default), right-justified, centred or left alone.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p><code>default</code> method: the <em>minimum</em> field width or <code>NULL</code> or <code>0</code> for no restriction. </p> <p><code>AsIs</code> method: the <em>maximum</em> field width for non-character objects.  <code>NULL</code> corresponds to the default <code>12</code>. </p> </td> </tr> <tr valign='top'> <td><code>na.encode</code></td> <td> <p>logical: should <code>NA</code> strings be encoded?  Note this only applies to elements of character vectors, not to numerical, complex nor logical <code>NA</code>s, which are always encoded as <code>'NA'</code>.</p> </td> </tr> </table>  <table summary='R argblock'> <tr valign='top'> <td><code>scientific</code></td> <td> <p>Either a logical specifying whether elements of a real or complex vector should be encoded in scientific format, or an integer penalty (see <code>options('scipen')</code>). Missing values correspond to the current default penalty.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> <tr valign='top'> <td><code>big.mark, big.interval, small.mark, small.interval, decimal.mark, zero.print, drop0trailing</code></td> <td><br /><p>used for prettying (longish) numerical and complex sequences. Passed to <code>prettyNum</code>: that help page explains the details.</p> </td> </tr> </table> "	FALSE
"format.info"	"base"	"format(.) Information"	"<p>Information is returned on how <code>format(x, digits, nsmall)</code> would be formatted. </p>"	"<pre>format.info(x, digits = NULL, nsmall = 0) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an atomic vector; a potential argument of <code>format(x, ...)</code>.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>how many significant digits are to be used for numeric and complex <code>x</code>.  The default, <code>NULL</code>, uses <code>getOption('digits')</code>.</p> </td> </tr> <tr valign='top'> <td><code>nsmall</code></td> <td> <p> (see <code>format(..., nsmall)</code>).</p> </td> </tr> </table> "	FALSE
"library"	"base"	"Loading/Attaching and Listing of Packages"	"<p><code>library</code> and <code>require</code> load and attach add-on packages. </p>"	"<pre>library(package, help, pos = 2, lib.loc = NULL,<br />         character.only = FALSE, logical.return = FALSE,<br />         warn.conflicts = TRUE, quietly = FALSE,<br />         verbose = getOption('verbose'))<br />require(package, lib.loc = NULL, quietly = FALSE,<br />         warn.conflicts = TRUE,<br />         character.only = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>package, help</code></td> <td> <p>the name of a package, given as a name or literal character string, or a character string, depending on whether <code>character.only</code> is <code>FALSE</code> (default) or <code>TRUE</code>).</p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td> <p>the position on the search list at which to attach the loaded namespace.  Can also be the name of a position on the current search list as given by <code>search()</code>.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees to search through, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to all libraries currently known to <code>.libPaths()</code>. Non-existent library trees are silently ignored.</p> </td> </tr> <tr valign='top'> <td><code>character.only</code></td> <td> <p>a logical indicating whether <code>package</code> or <code>help</code> can be assumed to be character strings.</p> </td> </tr> <tr valign='top'> <td><code>logical.return</code></td> <td> <p>logical.  If it is <code>TRUE</code>,  <code>FALSE</code> or <code>TRUE</code> is returned to indicate success.</p> </td> </tr> <tr valign='top'> <td><code>warn.conflicts</code></td> <td> <p>logical.  If <code>TRUE</code>, warnings are printed about <code>conflicts</code> from attaching the new package.  A conflict is a function masking a function, or a non-function masking a non-function. </p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>a logical.  If <code>TRUE</code>, additional diagnostics are printed.</p> </td> </tr> <tr valign='top'> <td><code>quietly</code></td> <td> <p>a logical.  If <code>TRUE</code>, no message confirming package attaching is printed, and most often, no errors/warnings are printed if package attaching fails.</p> </td> </tr> </table> "	FALSE
"format.pval"	"base"	"Format P Values"	"<p><code>format.pval</code> is intended for formatting p-values. </p>"	"<pre>format.pval(pv, digits = max(1, getOption('digits') - 2),<br />             eps = .Machine$double.eps, na.form = 'NA', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pv</code></td> <td> <p>a numeric vector.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>how many significant digits are to be used.</p> </td> </tr> <tr valign='top'> <td><code>eps</code></td> <td> <p>a numerical tolerance: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>na.form</code></td> <td> <p>character representation of <code>NA</code>s.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to <code>format</code> such as <code>nsmall</code>.</p> </td> </tr> </table> "	FALSE
"summary"	"base"	"Object Summaries"	"<p><code>summary</code> is a generic function used to produce result summaries of the results of various model fitting functions.  The function invokes particular <code>methods</code> which depend on the <code>class</code> of the first argument. </p>"	"<pre>summary(object, ...)<br />## Default S3 method: summary(object, ..., digits = max(3, getOption('digits')-3)) ## S3 method for class 'data.frame' summary(object, maxsum = 7,<br />        digits = max(3, getOption('digits')-3), ...)<br />## S3 method for class 'factor' summary(object, maxsum = 100, ...)<br />## S3 method for class 'matrix' summary(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>an object for which a summary is desired.</p> </td> </tr> <tr valign='top'> <td><code>maxsum</code></td> <td> <p>integer, indicating how many levels should be shown for <code>factor</code>s.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>integer, used for number formatting with <code>signif()</code> (for <code>summary.default</code>) or <code>format()</code> (for <code>summary.data.frame</code>).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments affecting the summary produced.</p> </td> </tr> </table> "	FALSE
"formatc"	"base"	"Formatting Using C-style Formats"	"<p>Formatting numbers individually and flexibly, <code>formatC()</code> using <code>C</code> style format specifications. </p> <p><code>prettyNum()</code> is used for “prettifying” (possibly formatted) numbers, also in <code>format.default</code>. </p> <p><code>.format.zeros()</code>, an auxiliary function of <code>prettyNum()</code> re-formats the zeros in a vector <code>x</code> of formatted numbers. </p>"	"<pre>formatC(x, digits = NULL, width = NULL,<br />         format = NULL, flag = '', mode = NULL,<br />         big.mark = '', big.interval = 3L,<br />         small.mark = '', small.interval = 5L,<br />         decimal.mark = getOption('OutDec'),<br />         preserve.width = 'individual', zero.print = NULL,<br />         drop0trailing = FALSE)<br />prettyNum(x, big.mark = '',<br />   big.interval = 3L,<br />           small.mark  = '', small.interval = 5L,<br />           decimal.mark = getOption('OutDec'), input.d.mark = decimal.mark,<br />           preserve.width = c('common', 'individual', 'none'),<br />           zero.print = NULL, drop0trailing = FALSE, is.cmplx = NA,<br />           ...)<br />.format.zeros(x, zero.print, nx = suppressWarnings(as.numeric(x))) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an atomic numerical or character object, possibly <code>complex</code> only for <code>prettyNum()</code>, typically a vector of real numbers.  Any class is discarded, with a warning.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>the desired number of digits after the decimal point (<code>format = 'f'</code>) or <em>significant</em> digits (<code>format = 'g'</code>, <code>= 'e'</code> or <code>= 'fg'</code>). </p> <p>Default: 2 for integer, 4 for real numbers.  If less than 0, the C default of 6 digits is used.  If specified as more than 50, 50 will be used with a warning unless <code>format = 'f'</code> where it is limited to typically 324. (Not more than 15–21 digits need be accurate, depending on the OS and compiler used.  This limit is just a precaution against segfaults in the underlying C runtime.) </p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>the total field width; if both <code>digits</code> and <code>width</code> are unspecified, <code>width</code> defaults to 1, otherwise to <code>digits + 1</code>.  <code>width = 0</code> will use <code>width = digits</code>, <code>width &lt; 0</code> means left justify the number in this field (equivalent to <code>flag = '-'</code>). If necessary, the result will have more characters than <code>width</code>.  For character data this is interpreted in characters (not bytes nor display width). </p> </td> </tr> <tr valign='top'> <td><code>format</code></td> <td> <p>equal to <code>'d'</code>  (for integers), <code>'f'</code>, <code>'e'</code>, <code>'E'</code>, <code>'g'</code>, <code>'G'</code>, <code>'fg'</code> (for reals), or <code>'s'</code> (for strings).  Default is <code>'d'</code> for integers, <code>'g'</code> for reals. </p> <p><code>'f'</code> gives numbers in the usual <code>xxx.xxx</code> format;  <code>'e'</code> and <code>'E'</code> give <code>n.ddde+nn</code> or <code>n.dddE+nn</code> (scientific format); <code>'g'</code> and <code>'G'</code> put <code>x[i]</code> into scientific format only if it saves space to do so. </p> <p><code>'fg'</code> uses fixed format as <code>'f'</code>, but <code>digits</code> as the minimum number of <em>significant</em> digits.  This can lead to quite long result strings, see examples below.  Note that unlike <code>signif</code> this prints large numbers with more significant digits than <code>digits</code>.  Trailing zeros are <em>dropped</em> in this format, unless <code>flag</code> contains <code>'#'</code>.</p> </td> </tr> <tr valign='top'> <td><code>flag</code></td> <td> <p>For <code>formatC</code>, a character string giving a format modifier as in Kernighan and Ritchie (1988, page 243). <code>'0'</code>  pads leading zeros; <code>'-'</code> does left adjustment, others are <code>'+'</code>, <code>' '</code>, and <code>'#'</code>.  There can be more than one of these, in any order. </p> </td> </tr> <tr valign='top'> <td><code>mode</code></td> <td> <p><code>'double'</code> (or <code>'real'</code>), <code>'integer'</code> or <code>'character'</code>. Default: Determined from the storage mode of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>big.mark</code></td> <td> <p>character; if not empty used as mark between every <code>big.interval</code> decimals <em>before</em> (hence <code>big</code>) the decimal point.</p> </td> </tr> <tr valign='top'> <td><code>big.interval</code></td> <td> <p>see <code>big.mark</code> above; defaults to 3.</p> </td> </tr> <tr valign='top'> <td><code>small.mark</code></td> <td> <p>character; if not empty used as mark between every <code>small.interval</code> decimals <em>after</em> (hence <code>small</code>) the decimal point.</p> </td> </tr> <tr valign='top'> <td><code>small.interval</code></td> <td> <p>see <code>small.mark</code> above; defaults to 5.</p> </td> </tr> <tr valign='top'> <td><code>decimal.mark</code></td> <td> <p>the character to be used to indicate the numeric decimal point.</p> </td> </tr> <tr valign='top'> <td><code>input.d.mark</code></td> <td> <p>if <code>x</code> is <code>character</code>, the character known to have been used as the numeric decimal point in <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>preserve.width</code></td> <td> <p>string specifying if the string widths should be preserved where possible in those cases where marks (<code>big.mark</code> or <code>small.mark</code>) are added.  <code>'common'</code>, the default, corresponds to <code>format</code>-like behavior whereas <code>'individual'</code> is the default in <code>formatC()</code>. Value can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>zero.print</code></td> <td> <p>logical, character string or <code>NULL</code> specifying if and how <em>zeros</em> should be formatted specially.  Useful for pretty printing ‘sparse’ objects.</p> </td> </tr> <tr valign='top'> <td><code>drop0trailing</code></td> <td> <p>logical, indicating if trailing zeros, i.e., <code>'0'</code> <em>after</em> the decimal mark, should be removed; also drops <code>'e+00'</code> in exponential formats.</p> </td> </tr> <tr valign='top'> <td><code>is.cmplx</code></td> <td> <p>optional logical, to be used when <code>x</code> is <code>'character'</code> to indicate if it stems from <code>complex</code> vector or not.  By default (<code>NA</code>), <code>x</code> is checked to ‘look like’ complex.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to <code>format</code>.</p> </td> </tr> <tr valign='top'> <td><code>nx</code></td> <td> <p>numeric vector of the same length as <code>x</code>, typically the numbers of which the character vector <code>x</code> is the pre-format.</p> </td> </tr> </table> "	FALSE
"formatDL"	"base"	"Format Description Lists"	"<p>Format vectors of items and their descriptions as 2-column tables or LaTeX-style description lists. </p>"	"<pre>formatDL(x, y, style = c('table', 'list'),<br />          width = 0.9 * getOption('width'), indent = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector giving the items to be described, or a list of length 2 or a matrix with 2 columns giving both items and descriptions.</p> </td> </tr> <tr valign='top'> <td><code>y</code></td> <td> <p>a vector of the same length as <code>x</code> with the corresponding descriptions.  Only used if <code>x</code> does not already give the descriptions.</p> </td> </tr> <tr valign='top'> <td><code>style</code></td> <td> <p>a character string specifying the rendering style of the description information.  Can be abbreviated. If <code>'table'</code>, a two-column table with items and descriptions as columns is produced (similar to Texinfo's <code style='white-space: pre;'>@table</code> environment).  If <code>'list'</code>, a LaTeX-style tagged description list is obtained.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>a positive integer giving the target column for wrapping lines in the output.</p> </td> </tr> <tr valign='top'> <td><code>indent</code></td> <td> <p>a positive integer specifying the indentation of the second column in table style, and the indentation of continuation lines in list style.  Must not be greater than <code>width/2</code>, and defaults to <code>width/3</code> for table style and <code>width/9</code> for list style.</p> </td> </tr> </table> "	FALSE
"gc"	"base"	"Garbage Collection"	"<p>A call of <code>gc</code> causes a garbage collection to take place. <code>gcinfo</code> sets a flag so that automatic collection is either silent (<code>verbose = FALSE</code>) or prints memory usage statistics (<code>verbose = TRUE</code>). </p>"	"<pre>gc(verbose = getOption('verbose'), reset = FALSE) gcinfo(verbose) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>verbose</code></td> <td> <p>logical; if <code>TRUE</code>, the garbage collection prints statistics about cons cells and the space allocated for vectors.</p> </td> </tr> <tr valign='top'> <td><code>reset</code></td> <td> <p>logical; if <code>TRUE</code> the values for maximum space used are reset to the current values.</p> </td> </tr> </table> "	FALSE
"gc.time"	"base"	"Report Time Spent in Garbage Collection"	"<p>This function reports the time spent in garbage collection so far in the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> session while GC timing was enabled. </p>"	"<pre>gc.time(on = TRUE) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>on</code></td> <td> <p>logical; if <code>TRUE</code>, GC timing is enabled.</p> </td> </tr></table> "	FALSE
"gctorture"	"base"	"Torture Garbage Collector"	"<p>Provokes garbage collection on (nearly) every memory allocation. Intended to ferret out memory protection bugs.  Also makes <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> run <em>very</em> slowly, unfortunately. </p>"	"<pre>gctorture(on = TRUE) gctorture2(step, wait = step, inhibit_release = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>on</code></td> <td> <p>logical; turning it on/off.</p> </td> </tr> <tr valign='top'> <td><code>step</code></td> <td> <p>integer; run GC every <code>step</code> allocations; <code>step<br />       = 0</code> turns the GC torture off.</p> </td> </tr> <tr valign='top'> <td><code>wait</code></td> <td> <p>integer; number of allocations to wait before starting GC torture.</p> </td> </tr> <tr valign='top'> <td><code>inhibit_release</code></td> <td> <p>logical; do not release free objects for re-use: use with caution.</p> </td> </tr> </table> "	FALSE
"getDLLRegisteredRoutines"	"base"	"Reflectance Information for C/Fortran routines in a DLL"	"<p>This function allows us to query the set of routines in a DLL that are registered with R to enhance dynamic lookup, error handling when calling native routines, and potentially security in the future. This function provides a description of each of the registered routines in the DLL for the different interfaces, i.e. <code>.C</code>, <code>.Call</code>, <code>.Fortran</code> and <code>.External</code>. </p>"	"<pre>getDLLRegisteredRoutines(dll, addNames = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>dll</code></td> <td> <p>a character string or <code>DLLInfo</code> object. The character string specifies the file name of the DLL of interest, and is given without the file name extension (e.g., the ‘<span class='file'>.dll</span>’ or ‘<span class='file'>.so</span>’) and with no directory/path information. So a file ‘<span class='file'>MyPackage/libs/MyPackage.so</span>’ would be specified as <span class='samp'>MyPackage</span>. </p> <p>The <code>DLLInfo</code> objects can be obtained directly in calls to <code>dyn.load</code> and  <code>library.dynam</code>, or can be found after the DLL has been loaded using <code>getLoadedDLLs</code>, which returns a list of <code>DLLInfo</code> objects (index-able by DLL file name). </p> <p>The <code>DLLInfo</code> approach avoids any ambiguities related to two DLLs having the same name but corresponding to files in different directories. </p> </td> </tr> <tr valign='top'> <td><code>addNames</code></td> <td> <p>a logical value.  If this is <code>TRUE</code>, the elements of the returned lists are named using the names of the routines (as seen by R via registration or raw name).  If <code>FALSE</code>, these names are not computed and assigned to the lists.  As a result, the call should be quicker.  The name information is also available in the <code>NativeSymbolInfo</code> objects in the lists. </p> </td> </tr> </table> "	FALSE
"stop"	"base"	"Stop Function Execution"	"<p><code>stop</code> stops execution of the current expression and executes an error action. </p> <p><code>geterrmessage</code> gives the last error message. </p>"	"<pre>stop(..., call. = TRUE, domain = NULL) geterrmessage() </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>zero or more objects which can be coerced to character (and which are pasted together with no separator) or a single condition object.</p> </td> </tr> <tr valign='top'> <td><code>call.</code></td> <td> <p>logical, indicating if the call should become part of the error message.</p> </td> </tr> <tr valign='top'> <td><code>domain</code></td> <td> <p>see <code>gettext</code>.  If <code>NA</code>, messages will not be translated.</p> </td> </tr> </table> "	FALSE
"userhooks"	"base"	"Functions to Get and Set Hooks for Load, Attach, Detach and Unload"	"<p>These functions allow users to set actions to be taken before packages are attached/detached and namespaces are (un)loaded. </p>"	"<pre>getHook(hookName) setHook(hookName, value,<br />         action = c('append', 'prepend', 'replace'))<br />packageEvent(pkgname,<br />              event = c('onLoad', 'attach', 'detach', 'onUnload')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>hookName</code></td> <td> <p>character string: the hook name</p> </td> </tr> <tr valign='top'> <td><code>pkgname</code></td> <td> <p>character string: the package/namespace name</p> </td> </tr> <tr valign='top'> <td><code>event</code></td> <td> <p>character string: an event for the package.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>A function or a list of functions, or for <code>action = 'replace'</code>, <code>NULL</code> </p> </td> </tr> <tr valign='top'> <td><code>action</code></td> <td> <p>The action to be taken.  Can be abbreviated.</p> </td> </tr> </table> "	FALSE
"getNativeSymbolInfo"	"base"	"Obtain a Description of one or more Native (C/Fortran) Symbols"	"<p>This finds and returns a description of one or more dynamically loaded or ‘exported’ built-in native symbols.  For each name, it returns information about the name of the symbol, the library in which it is located and, if available, the number of arguments it expects and by which interface it should be called (i.e <code>.Call</code>, <code>.C</code>, <code>.Fortran</code>, or <code>.External</code>). Additionally, it returns the address of the symbol and this can be passed to other C routines.  Specifically, this provides a way to explicitly share symbols between different dynamically loaded package libraries.  Also, it provides a way to query where symbols were resolved, and aids diagnosing strange behavior associated with dynamic resolution. </p>"	"<pre>getNativeSymbolInfo(name, PACKAGE, unlist = TRUE,<br />                     withRegistrationInfo = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p>the name(s) of the native symbol(s).</p> </td> </tr> <tr valign='top'> <td><code>PACKAGE</code></td> <td> <p>an optional argument that specifies to which DLL to restrict the search for this symbol.  If this is <code>'base'</code>, we search in the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> executable itself.</p> </td> </tr> <tr valign='top'> <td><code>unlist</code></td> <td> <p>a logical value which controls how the result is returned if the function is called with the name of a single symbol. If <code>unlist</code> is <code>TRUE</code> and the number of symbol names in <code>name</code> is one, then the <code>NativeSymbolInfo</code> object is returned.  If it is <code>FALSE</code>, then a list of <code>NativeSymbolInfo</code> objects is returned. This is ignored if the number of symbols passed in <code>name</code> is more than one. To be compatible with earlier versions of this function, this defaults to <code>TRUE</code>. </p> </td> </tr> <tr valign='top'> <td><code>withRegistrationInfo</code></td> <td> <p>a logical value indicating whether, if <code>TRUE</code>, to return information that was registered with <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> about the symbol and its parameter types if such information is available, or if <code>FALSE</code> to return just the address of the symbol. </p> </td> </tr> </table> "	FALSE
"options"	"base"	"Options Settings"	"<p>Allow the user to set and examine a variety of global <em>options</em> which affect the way in which <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> computes and displays its results. </p>"	"<pre>options(...)<br />getOption(x, default = NULL)<br />.Options </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>any options can be defined, using <code>name = value</code>. However, only the ones below are used in base <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p> <p>Options can also be passed by giving a single unnamed argument which is a named list. </p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a character string holding an option name.</p> </td> </tr> <tr valign='top'> <td><code>default</code></td> <td> <p>if the specified option is not set in the options list, this value is returned.  This facilitates retrieving an option and checking whether it is set and setting it separately if not.</p> </td> </tr> </table> "	FALSE
"taskCallbackNames"	"base"	"Query the Names of the Current Internal Top-Level Task Callbacks"	"<p>This provides a way to get the names (or identifiers) for the currently registered task callbacks that are invoked at the conclusion of each top-level task. These identifiers can be used to remove a callback. </p>"	"<pre>getTaskCallbackNames() </pre>"	NA	FALSE
"sprintf"	"base"	"Use C-style String Formatting Commands"	"<p>A wrapper for the C function <code>sprintf</code>, that returns a character vector containing a formatted combination of text and variable values. </p>"	"<pre>sprintf(fmt, ...) gettextf(fmt, ..., domain = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>fmt</code></td> <td> <p>a character vector of format strings, each of up to 8192 bytes.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>values to be passed into <code>fmt</code>.  Only logical, integer, real and character vectors are supported, but some coercion will be done: see the ‘Details’ section. Up to 100.</p> </td> </tr> <tr valign='top'> <td><code>domain</code></td> <td> <p>see <code>gettext</code>.</p> </td> </tr> </table> "	FALSE
"getwd"	"base"	"Get or Set Working Directory"	"<p><code>getwd</code> returns an absolute filepath representing the current working directory of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> process; <code>setwd(dir)</code> is used to set the working directory to <code>dir</code>. </p>"	"<pre>getwd() setwd(dir) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>dir</code></td> <td> <p>A character string: tilde expansion will be done.</p> </td> </tr></table> "	FALSE
"gl"	"base"	"Generate Factor Levels"	"<p>Generate factors by specifying the pattern of their levels. </p>"	"<pre>gl(n, k, length = n*k, labels = seq_len(n), ordered = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>n</code></td> <td> <p>an integer giving the number of levels.</p> </td> </tr> <tr valign='top'> <td><code>k</code></td> <td> <p>an integer giving the number of replications.</p> </td> </tr> <tr valign='top'> <td><code>length</code></td> <td> <p>an integer giving the length of the result.</p> </td> </tr> <tr valign='top'> <td><code>labels</code></td> <td> <p>an optional vector of labels for the resulting factor levels.</p> </td> </tr> <tr valign='top'> <td><code>ordered</code></td> <td> <p>a logical indicating whether the result should be ordered or not.</p> </td> </tr> </table> "	FALSE
"grep"	"base"	"Pattern Matching and Replacement"	"<p><code>grep</code>, <code>grepl</code>, <code>regexpr</code>, <code>gregexpr</code> and <code>regexec</code> search for matches to argument <code>pattern</code> within each element of a character vector: they differ in the format of and amount of detail in the results. </p> <p><code>sub</code> and <code>gsub</code> perform replacement of the first and all matches respectively. </p>"	"<pre>grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,<br />      fixed = FALSE, useBytes = FALSE, invert = FALSE)<br />grepl(pattern, x, ignore.case = FALSE, perl = FALSE,<br />       fixed = FALSE, useBytes = FALSE)<br />sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,<br />     fixed = FALSE, useBytes = FALSE)<br />gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,<br />      fixed = FALSE, useBytes = FALSE)<br />regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,<br />         fixed = FALSE, useBytes = FALSE)<br />gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,<br />          fixed = FALSE, useBytes = FALSE)<br />regexec(pattern, text, ignore.case = FALSE, perl = FALSE,<br />         fixed = FALSE, useBytes = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pattern</code></td> <td> <p>character string containing a regular expression (or character string for <code>fixed = TRUE</code>) to be matched in the given character vector.  Coerced by <code>as.character</code> to a character string if possible.  If a character vector of length 2 or more is supplied, the first element is used with a warning.  Missing values are allowed except for <code>regexpr</code> and <code>gregexpr</code>.</p> </td> </tr> <tr valign='top'> <td><code>x, text</code></td> <td> <p>a character vector where matches are sought, or an object which can be coerced by <code>as.character</code> to a character vector.  Long vectors are supported.</p> </td> </tr> <tr valign='top'> <td><code>ignore.case</code></td> <td> <p>if <code>FALSE</code>, the pattern matching is <em>case sensitive</em> and if <code>TRUE</code>, case is ignored during matching.</p> </td> </tr> <tr valign='top'> <td><code>perl</code></td> <td> <p>logical.  Should Perl-compatible regexps be used?</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>if <code>FALSE</code>, a vector containing the (<code>integer</code>) indices of the matches determined by <code>grep</code> is returned, and if <code>TRUE</code>, a vector containing the matching elements themselves is returned.</p> </td> </tr> <tr valign='top'> <td><code>fixed</code></td> <td> <p>logical.  If <code>TRUE</code>, <code>pattern</code> is a string to be matched as is.  Overrides all conflicting arguments.</p> </td> </tr> <tr valign='top'> <td><code>useBytes</code></td> <td> <p>logical.  If <code>TRUE</code> the matching is done byte-by-byte rather than character-by-character.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>invert</code></td> <td> <p>logical.  If <code>TRUE</code> return indices or values for elements that do <em>not</em> match.</p> </td> </tr> <tr valign='top'> <td><code>replacement</code></td> <td> <p>a replacement for matched pattern in <code>sub</code> and <code>gsub</code>.  Coerced to character if possible.  For <code>fixed =<br />       FALSE</code> this can include backreferences <code>'\1'</code> to <code>'\9'</code> to parenthesized subexpressions of <code>pattern</code>.  For <code>perl = TRUE</code> only, it can also contain <code>'\U'</code> or <code>'\L'</code> to convert the rest of the replacement to upper or lower case and <code>'\E'</code> to end case conversion.  If a character vector of length 2 or more is supplied, the first element is used with a warning.  If <code>NA</code>, all elements in the result corresponding to matches will be set to <code>NA</code>. </p> </td> </tr> </table> "	FALSE
"grepRaw"	"base"	"Pattern Matching for Raw Vectors"	"<p><code>grepRaw</code> searches for substring <code>pattern</code> matches within a raw vector <code>x</code>. </p>"	"<pre>grepRaw(pattern, x, offset = 1L, ignore.case = FALSE,<br />         value = FALSE, fixed = FALSE, all = FALSE, invert = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pattern</code></td> <td> <p>raw vector containing a regular expression (or fixed pattern for <code>fixed = TRUE</code>) to be matched in the given raw vector.  Coerced by <code>charToRaw</code> to a character string if possible.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a raw vector where matches are sought, or an object which can be coerced by <code>charToRaw</code> to a raw vector.  Long vectors are not supported.</p> </td> </tr> <tr valign='top'> <td><code>ignore.case</code></td> <td> <p>if <code>FALSE</code>, the pattern matching is <em>case sensitive</em> and if <code>TRUE</code>, case is ignored during matching.</p> </td> </tr> <tr valign='top'> <td><code>offset</code></td> <td> <p>An integer specifying the offset from which the search should start.  Must be positive.  The beginning of line is defined to be at that offset so <code>'^'</code> will match there.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>logical.  Determines the return value: see ‘Value’.</p> </td> </tr> <tr valign='top'> <td><code>fixed</code></td> <td> <p>logical.  If <code>TRUE</code>, <code>pattern</code> is a pattern to be matched as is.</p> </td> </tr> <tr valign='top'> <td><code>all</code></td> <td> <p>logical.  If <code>TRUE</code> all matches are returned, otherwise just the first one.</p> </td> </tr> <tr valign='top'> <td><code>invert</code></td> <td> <p>logical.  If <code>TRUE</code> return indices or values for elements that do <em>not</em> match.  Ignored (with a warning) unless <code>value = TRUE</code>.</p> </td> </tr> </table> "	FALSE
"grouping"	"base"	"Grouping Permutation"	"<p><code>grouping</code> returns a permutation which rearranges its first argument such that identical values are adjacent to each other.  Also returned as attributes are the group-wise partitioning and the maximum group size. </p>"	"<pre>grouping(...) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>...</code></td> <td> <p>a sequence of numeric, character or logical vectors, all of the same length, or a classed <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr></table> "	FALSE
"gzcon"	"base"	"(De)compress I/O Through Connections"	"<p><code>gzcon</code> provides a modified connection that wraps an existing connection, and decompresses reads or compresses writes through that connection.  Standard <code>gzip</code> headers are assumed. </p>"	"<pre>gzcon(con, level = 6, allowNonCompressed = TRUE, text = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>con</code></td> <td> <p>a connection.</p> </td> </tr> <tr valign='top'> <td><code>level</code></td> <td> <p>integer between 0 and 9, the compression level when writing.</p> </td> </tr> <tr valign='top'> <td><code>allowNonCompressed</code></td> <td> <p>logical.  When reading, should non-compressed input be allowed?</p> </td> </tr> <tr valign='top'> <td><code>text</code></td> <td> <p>logical. Should the connection be text-oriented? This is distinct from the mode of the connection (must always be binary). If <code>TRUE</code>, <code>pushBack</code> works on the connection, otherwise <code>readBin</code> and friends apply.</p> </td> </tr> </table> "	FALSE
"iconv"	"base"	"Convert Character Vector between Encodings"	"<p>This uses system facilities to convert a character vector between encodings: the ‘i’ stands for ‘internationalization’. </p>"	"<pre>iconv(x, from = '', to = '', sub = NA, mark = TRUE, toRaw = FALSE)<br />iconvlist() </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>A character vector, or an object to be converted to a character vector by <code>as.character</code>, or a list with <code>NULL</code> and <code>raw</code> elements as returned by <code>iconv(toRaw = TRUE)</code>.</p> </td> </tr> <tr valign='top'> <td><code>from</code></td> <td> <p>A character string describing the current encoding.</p> </td> </tr> <tr valign='top'> <td><code>to</code></td> <td> <p>A character string describing the target encoding.</p> </td> </tr> <tr valign='top'> <td><code>sub</code></td> <td> <p>character string.  If not <code>NA</code> it is used to replace any non-convertible bytes in the input.  (This would normally be a single character, but can be more.)  If <code>'byte'</code>, the indication is <code>'&lt;xx&gt;'</code> with the hex code of the byte.</p> </td> </tr> <tr valign='top'> <td><code>mark</code></td> <td> <p>logical, for expert use.  Should encodings be marked?</p> </td> </tr> <tr valign='top'> <td><code>toRaw</code></td> <td> <p>logical.  Should a list of raw vectors be returned rather than a character vector?</p> </td> </tr> </table> "	FALSE
"icuSetCollate"	"base"	" Setup Collation by ICU "	"<p>Controls the way collation is done by ICU (an optional part of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> build). </p>"	"<pre>icuSetCollate(...)<br />icuGetCollate(type = c('actual', 'valid')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>Named arguments, see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string: can be abbreviated.  Either the actual locale in use for collation or the most specific locale which would be valid.</p> </td> </tr> </table> "	FALSE
"identical"	"base"	"Test Objects for Exact Equality"	"<p>The safe and reliable way to test two objects for being <em>exactly</em> equal.  It returns <code>TRUE</code> in this case, <code>FALSE</code> in every other case. </p>"	"<pre>identical(x, y, num.eq = TRUE, single.NA = TRUE, attrib.as.set = TRUE,<br />           ignore.bytecode = TRUE, ignore.environment = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects.</p> </td> </tr> <tr valign='top'> <td><code>num.eq</code></td> <td> <p>logical indicating if (<code>double</code> and <code>complex</code> non-<code>NA</code>) numbers should be compared using <code>==</code> (‘equal’), or by bitwise comparison.  The latter (non-default) differentiates between <code>-0</code> and <code>+0</code>.</p> </td> </tr> <tr valign='top'> <td><code>single.NA</code></td> <td> <p>logical indicating if there is conceptually just one numeric <code>NA</code> and one <code>NaN</code>;  <code>single.NA = FALSE</code> differentiates bit patterns.</p> </td> </tr> <tr valign='top'> <td><code>attrib.as.set</code></td> <td> <p>logical indicating if <code>attributes</code> of <code>x</code> and <code>y</code> should be treated as <em>unordered</em> tagged pairlists (“sets”); this currently also applies to <code>slot</code>s of S4 objects.  It may well be too strict to set <code>attrib.as.set = FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>ignore.bytecode</code></td> <td> <p>logical indicating if byte code should be ignored when comparing closures.</p> </td> </tr> <tr valign='top'> <td><code>ignore.environment</code></td> <td> <p>logical indicating if their environments should be ignored when comparing closures.</p> </td> </tr> </table> "	FALSE
"identity"	"base"	"Identity Function"	"<p>A trivial identity function returning its argument. </p>"	"<pre>identity(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr></table> "	FALSE
"ifelse"	"base"	"Conditional Element Selection"	"<p><code>ifelse</code> returns a value with the same shape as <code>test</code> which is filled with elements selected from either <code>yes</code> or <code>no</code> depending on whether the element of <code>test</code> is <code>TRUE</code> or <code>FALSE</code>. </p>"	"<pre>ifelse(test, yes, no) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>test</code></td> <td> <p>an object which can be coerced to logical mode.</p> </td> </tr> <tr valign='top'> <td><code>yes</code></td> <td> <p>return values for true elements of <code>test</code>.</p> </td> </tr> <tr valign='top'> <td><code>no</code></td> <td> <p>return values for false elements of <code>test</code>.</p> </td> </tr> </table> "	FALSE
"interaction"	"base"	"Compute Factor Interactions"	"<p><code>interaction</code> computes a factor which represents the interaction of the given factors.  The result of <code>interaction</code> is always unordered. </p>"	"<pre>interaction(..., drop = FALSE, sep = '.', lex.order = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>the factors for which interaction is to be computed, or a single list giving those factors.</p> </td> </tr> <tr valign='top'> <td><code>drop</code></td> <td> <p>if <code>drop</code> is <code>TRUE</code>, unused factor levels are dropped from the result.  The default is to retain all factor levels.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>string to construct the new level labels by joining the constituent ones.</p> </td> </tr> <tr valign='top'> <td><code>lex.order</code></td> <td> <p>logical indicating if the order of factor concatenation should be lexically ordered.</p> </td> </tr> </table> "	FALSE
"interactive"	"base"	"Is R Running Interactively?"	"<p>Return <code>TRUE</code> when <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> is being used interactively and <code>FALSE</code> otherwise. </p>"	"<pre>interactive() </pre>"	NA	FALSE
"InternalMethods"	"base"	"Internal Generic Functions"	"<p>Many <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>-internal functions are <em>generic</em> and allow methods to be written for. </p>"	NA	NA	FALSE
"sets"	"base"	"Set Operations"	"<p>Performs <b>set</b> union, intersection, (asymmetric!) difference, equality and membership on two vectors. </p>"	"<pre>union(x, y) intersect(x, y) setdiff(x, y) setequal(x, y)<br />is.element(el, set) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x, y, el, set</code></td> <td> <p>vectors (of the same mode) containing a sequence of items (conceptually) with no duplicated values.</p> </td> </tr></table> "	FALSE
"rle"	"base"	"Run Length Encoding"	"<p>Compute the lengths and values of runs of equal values in a vector – or the reverse operation. </p>"	"<pre>rle(x) inverse.rle(x, ...)<br />## S3 method for class 'rle' print(x, digits = getOption('digits'), prefix = '', ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector (atomic, not a list) for <code>rle()</code>; an object of class <code>'rle'</code> for <code>inverse.rle()</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments; ignored here.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>number of significant digits for printing, see <code>print.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>prefix</code></td> <td> <p>character string, prepended to each printed line.</p> </td> </tr> </table> "	FALSE
"invisible"	"base"	"Change the Print Mode to Invisible"	"<p>Return a (temporarily) invisible copy of an object. </p>"	"<pre>invisible(x)</pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an arbitrary <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr></table> "	FALSE
"is.recursive"	"base"	"Is an Object Atomic or Recursive?"	"<p><code>is.atomic</code> returns <code>TRUE</code> if <code>x</code> is of an atomic type (or <code>NULL</code>) and <code>FALSE</code> otherwise. </p> <p><code>is.recursive</code> returns <code>TRUE</code> if <code>x</code> has a recursive (list-like) structure and <code>FALSE</code> otherwise. </p>"	"<pre>is.atomic(x) is.recursive(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>object to be tested.</p> </td> </tr></table> "	FALSE
"is.function"	"base"	"Is an Object of Type (Primitive) Function?"	"<p>Checks whether its argument is a (primitive) function.</p>"	"<pre>is.function(x) is.primitive(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr></table> "	FALSE
"is.language"	"base"	"Is an Object a Language Object?"	"<p><code>is.language</code> returns <code>TRUE</code> if <code>x</code> is a variable <code>name</code>, a <code>call</code>, or an <code>expression</code>. </p>"	"<pre>is.language(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>object to be tested.</p> </td> </tr></table> "	FALSE
"is.object"	"base"	"Is an Object ‘internally classed’?"	"<p>A function rather for internal use.  It returns <code>TRUE</code> if the object <code>x</code> has the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> internal <code>OBJECT</code> bit set, and <code>FALSE</code> otherwise.  The <code>OBJECT</code> bit is set when a <code>'class'</code> attribute is added and removed when that attribute is removed, so this is a very efficient way to check if an object has a class attribute.  (S4 objects always should.) </p>"	"<pre>is.object(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>object to be tested.</p> </td> </tr></table> "	FALSE
"isR"	"base"	"Are we using R, rather than S?"	"<p>Test if running under <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p>"	"<pre>is.R() </pre>"	NA	FALSE
"is.single"	"base"	"Is an Object of Single Precision Type?"	"<p><code>is.single</code> reports an error.  There are no single precision values in R. </p>"	"<pre>is.single(x)</pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>object to be tested.</p> </td> </tr></table> "	FALSE
"is.unsorted"	"base"	"Test if an Object is Not Sorted"	"<p>Test if an object is not sorted (in increasing order), without the cost of sorting it. </p>"	"<pre>is.unsorted(x, na.rm = FALSE, strictly = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object with a class or a numeric, complex, character, logical or raw vector.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical.  Should missing values be removed before checking?</p> </td> </tr> <tr valign='top'> <td><code>strictly</code></td> <td> <p>logical indicating if the check should be for <em>strictly</em> increasing values.</p> </td> </tr> </table> "	FALSE
"ISOdatetime"	"base"	"Date-time Conversion Functions from Numeric Representations"	"<p>Convenience wrappers to create date-times from numeric representations. </p>"	"<pre>ISOdatetime(year, month, day, hour, min, sec, tz = '') ISOdate(year, month, day, hour = 12, min = 0, sec = 0, tz = 'GMT') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>year, month, day</code></td> <td> <p>numerical values to specify a day.</p> </td> </tr> <tr valign='top'> <td><code>hour, min, sec</code></td> <td> <p>numerical values for a time within a day. Fractional seconds are allowed.</p> </td> </tr> <tr valign='top'> <td><code>tz</code></td> <td> <p>A time zone specification to be used for the conversion. <code>''</code> is the current time zone and <code>'GMT'</code> is UTC.  Invalid values are most commonly treated as UTC, on some platforms with a warning.</p> </td> </tr> </table> "	FALSE
"seek"	"base"	"Functions to Reposition Connections"	"<p>Functions to re-position connections. </p>"	"<pre>seek(con, ...) ## S3 method for class 'connection' seek(con, where = NA, origin = 'start', rw = '', ...)<br />isSeekable(con)<br />truncate(con, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>con</code></td> <td> <p>a connection.</p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>numeric.  A file position (relative to the origin specified by <code>origin</code>), or <code>NA</code>.</p> </td> </tr> <tr valign='top'> <td><code>rw</code></td> <td> <p>character string.  Empty or <code>'read'</code> or <code>'write'</code>, partial matches allowed.</p> </td> </tr> <tr valign='top'> <td><code>origin</code></td> <td> <p>character string.  One of <code>'start'</code>, <code>'current'</code>, <code>'end'</code>: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"isSymmetric"	"base"	"Test if a Matrix or other Object is Symmetric (Hermitian)"	"<p>Generic function to test if <code>object</code> is symmetric or not. Currently only a matrix method is implemented, where a <code>complex</code> matrix <code>Z</code> must be “Hermitian” for <code>isSymmetric(Z)</code> to be true. </p>"	"<pre>isSymmetric(object, ...) ## S3 method for class 'matrix' isSymmetric(object, tol = 100 * .Machine$double.eps, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object; a <code>matrix</code> for the matrix method.</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>numeric scalar &gt;= 0.  Smaller differences are not considered, see <code>all.equal.numeric</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to methods; the matrix method passes these to <code>all.equal</code>.</p> </td> </tr> </table> "	FALSE
"Logic"	"base"	"Logical Operators"	"<p>These operators act on raw, logical and number-like vectors. </p>"	"<pre>! x x &amp; y x &amp;&amp; y x | y x || y xor(x, y)<br />isTRUE(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x, y</code></td> <td> <p>raw or logical or ‘number-like’ vectors (i.e., of types <code>double</code> (class <code>numeric</code>), <code>integer</code> and <code>complex</code>)), or objects for which methods have been written.</p> </td> </tr></table> "	FALSE
"jitter"	"base"	"‘Jitter’ (Add Noise) to Numbers"	"<p>Add a small amount of noise to a numeric vector. </p>"	"<pre>jitter(x, factor = 1, amount = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric vector to which <em>jitter</em> should be added.</p> </td> </tr> <tr valign='top'> <td><code>factor</code></td> <td> <p>numeric.</p> </td> </tr> <tr valign='top'> <td><code>amount</code></td> <td> <p>numeric; if positive, used as <em>amount</em> (see below), otherwise, if <code>= 0</code> the default is <code>factor * z/50</code>. </p> <p>Default (<code>NULL</code>): <code>factor * d/5</code> where <code>d</code> is about the smallest difference between <code>x</code> values.</p> </td> </tr> </table> "	FALSE
"weekday.POSIXt"	"base"	"Extract Parts of a POSIXt or Date Object"	"<p>Extract the weekday, month or quarter, or the Julian time (days since some origin).  These are generic functions: the methods for the internal date-time classes are documented here. </p>"	"<pre>weekdays(x, abbreviate) ## S3 method for class 'POSIXt' weekdays(x, abbreviate = FALSE) ## S3 method for class 'Date' weekdays(x, abbreviate = FALSE)<br />months(x, abbreviate) ## S3 method for class 'POSIXt' months(x, abbreviate = FALSE) ## S3 method for class 'Date' months(x, abbreviate = FALSE)<br />quarters(x, abbreviate) ## S3 method for class 'POSIXt' quarters(x, ...) ## S3 method for class 'Date' quarters(x, ...)<br />julian(x, ...) ## S3 method for class 'POSIXt' julian(x, origin = as.POSIXct('1970-01-01', tz = 'GMT'), ...) ## S3 method for class 'Date' julian(x, origin = as.Date('1970-01-01'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object inheriting from class <code>'POSIXt'</code> or <code>'Date'</code>.</p> </td> </tr> <tr valign='top'> <td><code>abbreviate</code></td> <td> <p>logical vector (possibly recycled).  Should the names be abbreviated?</p> </td> </tr> <tr valign='top'> <td><code>origin</code></td> <td> <p>an length-one object inheriting from class <code>'POSIXt'</code> or <code>'Date'</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments for other methods.</p> </td> </tr> </table> "	FALSE
"kappa"	"base"	"Compute or Estimate the Condition Number of a Matrix"	"<p>The condition number of a regular (square) matrix is the product of the <em>norm</em> of the matrix and the norm of its inverse (or pseudo-inverse), and hence depends on the kind of matrix-norm. </p> <p><code>kappa()</code> computes by default (an estimate of) the 2-norm condition number of a matrix or of the <i>R</i> matrix of a <i>QR</i> decomposition, perhaps of a linear fit.  The 2-norm condition number can be shown to be the ratio of the largest to the smallest <em>non-zero</em> singular value of the matrix. </p> <p><code>rcond()</code> computes an approximation of the <b>r</b>eciprocal <b>cond</b>ition number, see the details. </p>"	"<pre>kappa(z, ...) ## Default S3 method: kappa(z, exact = FALSE,<br />       norm = NULL, method = c('qr', 'direct'), ...) ## S3 method for class 'lm' kappa(z, ...) ## S3 method for class 'qr' kappa(z, ...)<br />.kappa_tri(z, exact = FALSE, LINPACK = TRUE, norm = NULL, ...)<br />rcond(x, norm = c('O','I','1'), triangular = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>z, x</code></td> <td> <p>A matrix or a the result of <code>qr</code> or a fit from a class inheriting from <code>'lm'</code>.</p> </td> </tr> <tr valign='top'> <td><code>exact</code></td> <td> <p>logical.  Should the result be exact?</p> </td> </tr> <tr valign='top'> <td><code>norm</code></td> <td> <p>character string, specifying the matrix norm with respect to which the condition number is to be computed, see also <code>norm</code>.  For <code>rcond</code>, the default is <code>'O'</code>, meaning the <b>O</b>ne- or 1-norm.  The (currently only) other possible value is <code>'I'</code> for the infinity norm.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>a partially matched character string specifying the method to be used; <code>'qr'</code> is the default for back-compatibility, mainly.</p> </td> </tr> <tr valign='top'> <td><code>triangular</code></td> <td> <p>logical.  If true, the matrix used is just the lower triangular part of <code>z</code>.</p> </td> </tr> <tr valign='top'> <td><code>LINPACK</code></td> <td> <p>logical.  If true and <code>z</code> is not complex, the LINPACK routine <code>dtrco()</code> is called; otherwise the relevant LAPACK routine is.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods; for <code>kappa.*()</code>, notably <code>LINPACK</code> when <code>norm</code> is not <code>'2'</code>.</p> </td> </tr> </table> "	FALSE
"kronecker"	"base"	"Kronecker Products on Arrays"	"<p>Computes the generalised kronecker product of two arrays, <code>X</code> and <code>Y</code>. </p>"	"<pre>kronecker(X, Y, FUN = '*', make.dimnames = FALSE, ...) X %x% Y </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>X</code></td> <td> <p>A vector or array.</p> </td> </tr> <tr valign='top'> <td><code>Y</code></td> <td> <p>A vector or array.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>a function; it may be a quoted string.</p> </td> </tr> <tr valign='top'> <td><code>make.dimnames</code></td> <td> <p>Provide dimnames that are the product of the dimnames of <code>X</code> and <code>Y</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional arguments to be passed to <code>FUN</code>.</p> </td> </tr> </table> "	FALSE
"l10n_info"	"base"	"Localization Information"	"<p>Report on localization information. </p>"	"<pre>l10n_info() </pre>"	NA	FALSE
"svd"	"base"	"Singular Value Decomposition of a Matrix"	"<p>Compute the singular-value decomposition of a rectangular matrix. </p>"	"<pre>svd(x, nu = min(n, p), nv = min(n, p), LINPACK = FALSE)<br />La.svd(x, nu = min(n, p), nv = min(n, p)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric or complex matrix whose SVD decomposition is to be computed.  Logical matrices are coerced to numeric.</p> </td> </tr> <tr valign='top'> <td><code>nu</code></td> <td> <p>the number of left  singular vectors to be computed. This must between <code>0</code> and <code>n = nrow(x)</code>.</p> </td> </tr> <tr valign='top'> <td><code>nv</code></td> <td> <p>the number of right singular vectors to be computed. This must be between <code>0</code> and <code>p = ncol(x)</code>.</p> </td> </tr> <tr valign='top'> <td><code>LINPACK</code></td> <td> <p>logical.  Defunct and ignored.</p> </td> </tr> </table> "	FALSE
"labels"	"base"	"Find Labels from Object"	"<p>Find a suitable set of labels from an object for use in printing or plotting, for example.  A generic function. </p>"	"<pre>labels(object, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>Any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object: the function is generic.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"lapply"	"base"	"Apply a Function over a List or Vector"	"<p><code>lapply</code> returns a list of the same length as <code>X</code>, each element of which is the result of applying <code>FUN</code> to the corresponding element of <code>X</code>. </p> <p><code>sapply</code> is a user-friendly version and wrapper of <code>lapply</code> by default returning a vector, matrix or, if <code>simplify = 'array'</code>, an array if appropriate, by applying <code>simplify2array()</code>. <code>sapply(x, f, simplify = FALSE, USE.NAMES = FALSE)</code> is the same as <code>lapply(x, f)</code>. </p> <p><code>vapply</code> is similar to <code>sapply</code>, but has a pre-specified type of return value, so it can be safer (and sometimes faster) to use. </p> <p><code>replicate</code> is a wrapper for the common use of <code>sapply</code> for repeated evaluation of an expression (which will usually involve random number generation). </p> <p><code>simplify2array()</code> is the utility called from <code>sapply()</code> when <code>simplify</code> is not false and is similarly called from <code>mapply()</code>. </p>"	"<pre>lapply(X, FUN, ...)<br />sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)<br />vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)<br />replicate(n, expr, simplify = 'array')<br />simplify2array(x, higher = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>X</code></td> <td> <p>a vector (atomic or list) or an <code>expression</code> object.  Other objects (including classed objects) will be coerced by <code>base::as.list</code>.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>the function to be applied to each element of <code>X</code>: see ‘Details’.  In the case of functions like <code>+</code>, <code>%*%</code>, the function name must be backquoted or quoted.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional arguments to <code>FUN</code>.</p> </td> </tr> <tr valign='top'> <td><code>simplify</code></td> <td> <p>logical or character string; should the result be simplified to a vector, matrix or higher dimensional array if possible?  For <code>sapply</code> it must be named and not abbreviated. The default value, <code>TRUE</code>, returns a vector or matrix if appropriate, whereas if <code>simplify = 'array'</code> the result may be an <code>array</code> of “rank” (<i>=</i><code>length(dim(.))</code>) one higher than the result of <code>FUN(X[[i]])</code>.</p> </td> </tr> <tr valign='top'> <td><code>USE.NAMES</code></td> <td> <p>logical; if <code>TRUE</code> and if <code>X</code> is character, use <code>X</code> as <code>names</code> for the result unless it had names already.  Since this argument follows <code>...</code> its name cannot be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>FUN.VALUE</code></td> <td> <p>a (generalized) vector; a template for the return value from FUN.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>integer: the number of replications.</p> </td> </tr> <tr valign='top'> <td><code>expr</code></td> <td> <p>the expression (a language object, usually a call) to evaluate repeatedly.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a list, typically returned from <code>lapply()</code>.</p> </td> </tr> <tr valign='top'> <td><code>higher</code></td> <td> <p>logical; if true, <code>simplify2array()</code> will produce a (“higher rank”) array when appropriate, whereas <code>higher = FALSE</code> would return a matrix (or vector) only. These two cases correspond to <code>sapply(*, simplify = 'array')</code> or <code>simplify = TRUE</code>, respectively.</p> </td> </tr> </table> "	FALSE
"La_version"	"base"	"LAPACK Version"	"<p>Report the version of LAPACK in use. </p>"	"<pre>La_version() </pre>"	NA	FALSE
"locales"	"base"	"Query or Set Aspects of the Locale"	"<p>Get details of or set aspects of the locale for the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> process. </p>"	"<pre>Sys.getlocale(category = 'LC_ALL') Sys.setlocale(category = 'LC_ALL', locale = '') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>category</code></td> <td> <p>character string.  The following categories should always be supported: <code>'LC_ALL'</code>, <code>'LC_COLLATE'</code>, <code>'LC_CTYPE'</code>, <code>'LC_MONETARY'</code>, <code>'LC_NUMERIC'</code> and <code>'LC_TIME'</code>.  Some systems (not Windows) will also support <code>'LC_MESSAGES'</code>, <code>'LC_PAPER'</code> and <code>'LC_MEASUREMENT'</code>. </p> </td> </tr> <tr valign='top'> <td><code>locale</code></td> <td> <p>character string.  A valid locale name on the system in use.  Normally <code>''</code> (the default) will pick up the default locale for the system.</p> </td> </tr> </table> "	FALSE
"length"	"base"	"Length of an Object"	"<p>Get or set the length of vectors (including lists) and factors, and of any other <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object for which a method has been defined. </p>"	"<pre>length(x) length(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.  For replacement, a vector or factor.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a non-negative integer or double (which will be rounded down).</p> </td> </tr> </table> "	FALSE
"lengths"	"base"	"Lengths of List or Vector Elements"	"<p>Get the length of each element of a <code>list</code> or atomic vector (<code>is.atomic</code>) as an integer or numeric vector. </p>"	"<pre>lengths(x, use.names = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a <code>list</code>, list-like such as an <code>expression</code> or an atomic vector (for which the result is trivial).</p> </td> </tr> <tr valign='top'> <td><code>use.names</code></td> <td> <p>logical indicating if the result should inherit the <code>names</code> from <code>x</code>.</p> </td> </tr> </table> "	FALSE
"levels"	"base"	"Levels Attributes"	"<p><code>levels</code> provides access to the levels attribute of a variable. The first form returns the value of the levels of its argument and the second sets the attribute. </p>"	"<pre>levels(x) levels(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object, for example a factor.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>A valid value for <code>levels(x)</code>. For the default method, <code>NULL</code> or a character vector.  For the <code>factor</code> method, a vector of character strings with length at least the number of levels of <code>x</code>, or a named list specifying how to rename the levels.</p> </td> </tr> </table> "	FALSE
"libcurlVersion"	"base"	"Report Version of libcurl"	"<p>Report version of <code>libcurl</code> in use. </p>"	"<pre>libcurlVersion() </pre>"	NA	FALSE
"library.dynam"	"base"	"Loading DLLs from Packages"	"<p>Load the specified file of compiled code if it has not been loaded already, or unloads it. </p>"	"<pre>library.dynam(chname, package, lib.loc,<br />               verbose = getOption('verbose'),<br />               file.ext = .Platform$dynlib.ext, ...)<br />library.dynam.unload(chname, libpath,<br />               verbose = getOption('verbose'),<br />               file.ext = .Platform$dynlib.ext)<br />.dynLibs(new) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>chname</code></td> <td> <p>a character string naming a DLL (also known as a dynamic shared object or library) to load.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>a character vector with the name of package.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees to search through.</p> </td> </tr> <tr valign='top'> <td><code>libpath</code></td> <td> <p>the path to the loaded package whose DLL is to be unloaded.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>a logical value indicating whether an announcement is printed on the console before loading the DLL.  The default value is taken from the verbose entry in the system <code>options</code>.</p> </td> </tr> <tr valign='top'> <td><code>file.ext</code></td> <td> <p>the extension (including <span class='samp'>.</span> if used) to append to the file name to specify the library to be loaded.  This defaults to the appropriate value for the operating system.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments needed by some libraries that are passed to the call to <code>dyn.load</code> to control how the library and its dependencies are loaded.</p> </td> </tr> <tr valign='top'> <td><code>new</code></td> <td> <p>a list of <code>'DLLInfo'</code> objects corresponding to the DLLs loaded by packages.  Can be missing.</p> </td> </tr> </table> "	FALSE
"license"	"base"	"The R License Terms"	"<p>The license terms under which <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> is distributed. </p>"	"<pre>license() licence() </pre>"	NA	FALSE
"list2env"	"base"	"From A List, Build or Add To an Environment"	"<p>From a <em>named</em> <code>list x</code>, create an <code>environment</code> containing all list components as objects, or “multi-assign” from <code>x</code> into a pre-existing environment. </p>"	"<pre>list2env(x, envir = NULL, parent = parent.frame(),<br />          hash = (length(x) &gt; 100), size = max(29L, length(x))) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a <code>list</code>, where <code>names(x)</code> must not contain empty (<code>''</code>) elements.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>an <code>environment</code> or <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>parent</code></td> <td> <p>(for the case <code>envir = NULL</code>): a parent frame aka enclosing environment, see <code>new.env</code>.</p> </td> </tr> <tr valign='top'> <td><code>hash</code></td> <td> <p>(for the case <code>envir = NULL</code>): logical indicating if the created environment should use hashing, see <code>new.env</code>.</p> </td> </tr> <tr valign='top'> <td><code>size</code></td> <td> <p>(in the case <code>envir = NULL, hash = TRUE</code>): hash size, see <code>new.env</code>.</p> </td> </tr> </table> "	FALSE
"load"	"base"	"Reload Saved Datasets"	"<p>Reload datasets written with the function <code>save</code>. </p>"	"<pre>load(file, envir = parent.frame(), verbose = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>a (readable binary-mode) connection or a character string giving the name of the file to load (when tilde expansion is done).</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the environment where the data should be loaded.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>should item names be printed during loading?</p> </td> </tr> </table> "	FALSE
"Sys.localeconv"	"base"	"Find Details of the Numerical and Monetary Representationsin the Current Locale"	"<p>Get details of the numerical and monetary representations in the current locale. </p>"	"<pre>Sys.localeconv() </pre>"	NA	FALSE
"LongVectors"	"base"	"Long Vectors"	"<p>Vectors of <i>2^31</i> or more elements were added in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> 3.0.0. </p>"	NA	NA	FALSE
"lower.tri"	"base"	"Lower and Upper Triangular Part of a Matrix"	"<p>Returns a matrix of logicals the same size of a given matrix with entries <code>TRUE</code> in the lower or upper triangle. </p>"	"<pre>lower.tri(x, diag = FALSE) upper.tri(x, diag = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a matrix.</p> </td> </tr> <tr valign='top'> <td><code>diag</code></td> <td> <p>logical.  Should the diagonal be included?</p> </td> </tr> </table> "	FALSE
"ls"	"base"	"List Objects"	"<p><code>ls</code> and <code>objects</code> return a vector of character strings giving the names of the objects in the specified environment.  When invoked with no argument at the top level prompt, <code>ls</code> shows what data sets and functions a user has defined.  When invoked with no argument inside a function, <code>ls</code> returns the names of the function's local variables: this is useful in conjunction with <code>browser</code>. </p>"	"<pre>ls(name, pos = -1L, envir = as.environment(pos),<br />    all.names = FALSE, pattern, sorted = TRUE) objects(name, pos= -1L, envir = as.environment(pos),<br />         all.names = FALSE, pattern, sorted = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>name</code></td> <td> <p>which environment to use in listing the available objects. Defaults to the <em>current</em> environment.  Although called <code>name</code> for back compatibility, in fact this argument can specify the environment in any form; see the ‘Details’ section.</p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td> <p>an alternative argument to <code>name</code> for specifying the environment as a position in the search list.  Mostly there for back compatibility.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>an alternative argument to <code>name</code> for specifying the environment.  Mostly there for back compatibility.</p> </td> </tr> <tr valign='top'> <td><code>all.names</code></td> <td> <p>a logical value.  If <code>TRUE</code>, all object names are returned.  If <code>FALSE</code>, names which begin with a <span class='samp'>.</span> are omitted.</p> </td> </tr> <tr valign='top'> <td><code>pattern</code></td> <td> <p>an optional regular expression.  Only names matching <code>pattern</code> are returned.  <code>glob2rx</code> can be used to convert wildcard patterns to regular expressions.</p> </td> </tr> <tr valign='top'> <td><code>sorted</code></td> <td> <p>logical indicating if the resulting <code>character</code> should be sorted alphabetically.  Note that this is part of <code>ls()</code> may take most of the time.</p> </td> </tr> </table> "	FALSE
"make.names"	"base"	"Make Syntactically Valid Names"	"<p>Make syntactically valid names out of character vectors. </p>"	"<pre>make.names(names, unique = FALSE, allow_ = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>names</code></td> <td> <p>character vector to be coerced to syntactically valid names.  This is coerced to character if necessary.</p> </td> </tr> <tr valign='top'> <td><code>unique</code></td> <td> <p>logical; if <code>TRUE</code>, the resulting elements are unique.  This may be desired for, e.g., column names.</p> </td> </tr> <tr valign='top'> <td><code>allow_</code></td> <td> <p>logical.  For compatibility with <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> prior to 1.9.0.</p> </td> </tr> </table> "	FALSE
"make.unique"	"base"	"Make Character Strings Unique"	"<p>Makes the elements of a character vector unique by appending sequence numbers to duplicates. </p>"	"<pre>make.unique(names, sep = '.') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>names</code></td> <td> <p>a character vector</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>a character string used to separate a duplicate name from its sequence number.</p> </td> </tr> </table> "	FALSE
"mapply"	"base"	"Apply a Function to Multiple List or Vector Arguments"	"<p><code>mapply</code> is a multivariate version of <code>sapply</code>. <code>mapply</code> applies <code>FUN</code> to the first elements of each ... argument, the second elements, the third elements, and so on. Arguments are recycled if necessary. </p>"	"<pre>mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE,<br />        USE.NAMES = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>FUN</code></td> <td> <p>function to apply, found via <code>match.fun</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to vectorize over (vectors or lists of strictly positive length, or all of zero length).  See also ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>MoreArgs</code></td> <td> <p>a list of other arguments to <code>FUN</code>.</p> </td> </tr> <tr valign='top'> <td><code>SIMPLIFY</code></td> <td> <p>logical or character string; attempt to reduce the result to a vector, matrix or higher dimensional array; see the <code>simplify</code> argument of <code>sapply</code>.</p> </td> </tr> <tr valign='top'> <td><code>USE.NAMES</code></td> <td> <p>logical; use names if the first ... argument has names, or if it is a character vector, use that character vector as the names.</p> </td> </tr> </table> "	FALSE
"margin.table"	"base"	"Compute table margin"	"<p>For a contingency table in array form, compute the sum of table entries for a given index. </p>"	"<pre>margin.table(x, margin = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an array</p> </td> </tr> <tr valign='top'> <td><code>margin</code></td> <td> <p>index number (1 for rows, etc.) </p> </td> </tr> </table> "	FALSE
"mat.or.vec"	"base"	"Create a Matrix or a Vector"	"<p><code>mat.or.vec</code> creates an <code>nr</code> by <code>nc</code> zero matrix if <code>nc</code> is greater than 1, and a zero vector of length <code>nr</code> if <code>nc</code> equals 1. </p>"	"<pre>mat.or.vec(nr, nc) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>nr, nc</code></td> <td> <p>numbers of rows and columns.</p> </td> </tr></table> "	FALSE
"match"	"base"	"Value Matching"	"<p><code>match</code> returns a vector of the positions of (first) matches of its first argument in its second. </p> <p><code>%in%</code> is a more intuitive interface as a binary operator, which returns a logical vector indicating if there is a match or not for its left operand. </p>"	"<pre>match(x, table, nomatch = NA_integer_, incomparables = NULL)<br />x %in% table </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>vector or <code>NULL</code>: the values to be matched. Long vectors are supported.</p> </td> </tr> <tr valign='top'> <td><code>table</code></td> <td> <p>vector or <code>NULL</code>: the values to be matched against. Long vectors are not supported.</p> </td> </tr> <tr valign='top'> <td><code>nomatch</code></td> <td> <p>the value to be returned in the case when no match is found.  Note that it is coerced to <code>integer</code>.</p> </td> </tr> <tr valign='top'> <td><code>incomparables</code></td> <td> <p>a vector of values that cannot be matched.  Any value in <code>x</code> matching a value in this vector is assigned the <code>nomatch</code> value.  For historical reasons, <code>FALSE</code> is equivalent to <code>NULL</code>.</p> </td> </tr> </table> "	FALSE
"match.arg"	"base"	"Argument Verification Using Partial Matching"	"<p><code>match.arg</code> matches <code>arg</code> against a table of candidate values as specified by <code>choices</code>, where <code>NULL</code> means to take the first one. </p>"	"<pre>match.arg(arg, choices, several.ok = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>arg</code></td> <td> <p>a character vector (of length one unless <code>several.ok</code> is <code>TRUE</code>) or <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>choices</code></td> <td> <p>a character vector of candidate values</p> </td> </tr> <tr valign='top'> <td><code>several.ok</code></td> <td> <p>logical specifying if <code>arg</code> should be allowed to have more than one element.</p> </td> </tr> </table> "	FALSE
"match.call"	"base"	"Argument Matching"	"<p><code>match.call</code> returns a call in which all of the specified arguments are specified by their full names. </p>"	"<pre>match.call(definition = sys.function(sys.parent()),<br />            call = sys.call(sys.parent()),<br />            expand.dots = TRUE,<br />            envir = parent.frame(2L)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>definition</code></td> <td> <p>a function, by default the function from which <code>match.call</code> is called.  See details.</p> </td> </tr> <tr valign='top'> <td><code>call</code></td> <td> <p>an unevaluated call to the function specified by <code>definition</code>, as generated by <code>call</code>.</p> </td> </tr> <tr valign='top'> <td><code>expand.dots</code></td> <td> <p>logical.  Should arguments matching <code>...</code> in the call be included or left as a <code>...</code> argument?</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>an environment, from which the <code>...</code> in <code>call</code> are retrieved, if any.</p> </td> </tr> </table> "	FALSE
"match.fun"	"base"	"Extract a Function Specified by Name"	"<p>When called inside functions that take a function as argument, extract the desired function object while avoiding undesired matching to objects of other types. </p>"	"<pre>match.fun(FUN, descend = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>FUN</code></td> <td> <p>item to match as function: a function, symbol or character string.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>descend</code></td> <td> <p>logical; control whether to search past non-function objects.</p> </td> </tr> </table> "	FALSE
"matmult"	"base"	"Matrix Multiplication"	"<p>Multiplies two matrices, if they are conformable.  If one argument is a vector, it will be promoted to either a row or column matrix to make the two arguments conformable.  If both are vectors of the same length, it will return the inner product (as a matrix). </p>"	"<pre>x %*% y </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x, y</code></td> <td> <p>numeric or complex matrices or vectors.</p> </td> </tr></table> "	FALSE
"Extremes"	"base"	"Maxima and Minima"	"<p>Returns the (regular or <b>p</b>arallel) maxima and minima of the input values. </p> <p><code>pmax*()</code> and <code>pmin*()</code> take one or more vectors as arguments, recycle them to common length and return a single vector giving the <em>‘parallel’</em> maxima (or minima) of the argument vectors. </p>"	"<pre>max(..., na.rm = FALSE) min(..., na.rm = FALSE)<br />pmax(..., na.rm = FALSE) pmin(..., na.rm = FALSE)<br />pmax.int(..., na.rm = FALSE) pmin.int(..., na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>numeric or character arguments (see Note).</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>a logical indicating whether missing values should be removed.</p> </td> </tr> </table> "	FALSE
"maxCol"	"base"	"Find Maximum Position in Matrix"	"<p>Find the maximum position for each row of a matrix, breaking ties at random. </p>"	"<pre>max.col(m, ties.method = c('random', 'first', 'last')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>m</code></td> <td> <p>numerical matrix</p> </td> </tr> <tr valign='top'> <td><code>ties.method</code></td> <td> <p>a character string specifying how ties are handled, <code>'random'</code> by default; can be abbreviated; see ‘Details’.</p> </td> </tr> </table> "	FALSE
"mean"	"base"	"Arithmetic Mean"	"<p>Generic function for the (trimmed) arithmetic mean. </p>"	"<pre>mean(x, ...)<br />## Default S3 method: mean(x, trim = 0, na.rm = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>An <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.  Currently there are methods for numeric/logical vectors and date, date-time and time interval objects.  Complex vectors are allowed for <code>trim = 0</code>, only.</p> </td> </tr> <tr valign='top'> <td><code>trim</code></td> <td> <p>the fraction (0 to 0.5) of observations to be trimmed from each end of <code>x</code> before the mean is computed. Values of trim outside that range are taken as the nearest endpoint. </p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>a logical value indicating whether <code>NA</code> values should be stripped before the computation proceeds.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"memCompress"	"base"	"In-memory Compression and Decompression"	"<p>In-memory compression or decompression for raw vectors. </p>"	"<pre>memCompress(from, type = c('gzip', 'bzip2', 'xz', 'none'))<br />memDecompress(from,<br />               type = c('unknown', 'gzip', 'bzip2', 'xz', 'none'),<br />               asChar = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>from</code></td> <td> <p>A raw vector.  For <code>memCompress</code> a character vector will be converted to a raw vector with character strings separated by <code>'\n'</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string, the type of compression.  May be abbreviated to a single letter, defaults to the first of the alternatives.</p> </td> </tr> <tr valign='top'> <td><code>asChar</code></td> <td> <p>logical: should the result be converted to a character string?</p> </td> </tr> </table> "	FALSE
"Memory"	"base"	"Memory Available for Data Storage"	"<p>How <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> manages its workspace. </p>"	NA	NA	FALSE
"Memory-limits"	"base"	"Memory Limits in R"	"<p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> holds objects it is using in virtual memory.  This help file documents the current design limitations on large objects: these differ between 32-bit and 64-bit builds of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p>"	NA	NA	FALSE
"memory.profile"	"base"	"Profile the Usage of Cons Cells"	"<p>Lists the usage of the cons cells by <code>SEXPREC</code> type. </p>"	"<pre>memory.profile() </pre>"	NA	FALSE
"merge"	"base"	"Merge Two Data Frames"	"<p>Merge two data frames by common columns or row names, or do other versions of database <em>join</em> operations. </p>"	"<pre>merge(x, y, ...)<br />## Default S3 method: merge(x, y, ...)<br />## S3 method for class 'data.frame' merge(x, y, by = intersect(names(x), names(y)),<br />       by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,<br />       sort = TRUE, suffixes = c('.x','.y'),<br />       incomparables = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, y</code></td> <td> <p>data frames, or objects to be coerced to one.</p> </td> </tr> <tr valign='top'> <td><code>by, by.x, by.y</code></td> <td> <p>specifications of the columns used for merging. See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>all</code></td> <td> <p>logical; <code>all = L</code> is shorthand for <code>all.x = L</code> and <code>all.y = L</code>, where <code>L</code> is either <code>TRUE</code> or <code>FALSE</code>.</p> </td> </tr> <tr valign='top'> <td><code>all.x</code></td> <td> <p>logical; if <code>TRUE</code>, then extra rows will be added to the output, one for each row in <code>x</code> that has no matching row in <code>y</code>.  These rows will have <code>NA</code>s in those columns that are usually filled with values from <code>y</code>.  The default is <code>FALSE</code>, so that only rows with data from both <code>x</code> and <code>y</code> are included in the output.</p> </td> </tr> <tr valign='top'> <td><code>all.y</code></td> <td> <p>logical; analogous to <code>all.x</code>.</p> </td> </tr> <tr valign='top'> <td><code>sort</code></td> <td> <p>logical.  Should the result be sorted on the <code>by</code> columns?</p> </td> </tr> <tr valign='top'> <td><code>suffixes</code></td> <td> <p>a character vector of length 2 specifying the suffixes to be used for making unique the names of columns in the result which are not used for merging (appearing in <code>by</code> etc).</p> </td> </tr> <tr valign='top'> <td><code>incomparables</code></td> <td> <p>values which cannot be matched.  See <code>match</code>.  This is intended to be used for merging on one column, so these are incomparable values of that column.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from methods.</p> </td> </tr> </table> "	FALSE
"message"	"base"	"Diagnostic Messages"	"<p>Generate a diagnostic message from its arguments. </p>"	"<pre>message(..., domain = NULL, appendLF = TRUE) suppressMessages(expr)<br />packageStartupMessage(..., domain = NULL, appendLF = TRUE) suppressPackageStartupMessages(expr)<br />.makeMessage(..., domain = NULL, appendLF = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>zero or more objects which can be coerced to character (and which are pasted together with no separator) or (for <code>message</code> only) a single condition object.</p> </td> </tr> <tr valign='top'> <td><code>domain</code></td> <td> <p>see <code>gettext</code>.  If <code>NA</code>, messages will not be translated, see also the note in <code>stop</code>.</p> </td> </tr> <tr valign='top'> <td><code>appendLF</code></td> <td> <p>logical: should messages given as a character string have a newline appended?</p> </td> </tr> <tr valign='top'> <td><code>expr</code></td> <td> <p>expression to evaluate.</p> </td> </tr> </table> "	FALSE
"missing"	"base"	"Does a Formal Argument have a Value?"	"<p><code>missing</code> can be used to test whether a value was specified as an argument to a function. </p>"	"<pre>missing(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a formal argument.</p> </td> </tr></table> "	FALSE
"mode"	"base"	"The (Storage) Mode of an Object"	"<p>Get or set the type or storage mode of an object. </p>"	"<pre>mode(x) mode(x) &lt;- value storage.mode(x) storage.mode(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a character string giving the desired mode or ‘storage mode’ (type) of the object.</p> </td> </tr> </table> "	FALSE
"names"	"base"	"The Names of an Object"	"<p>Functions to get or set the names of an object. </p>"	"<pre>names(x) names(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a character vector of up to the same length as <code>x</code>, or <code>NULL</code>.</p> </td> </tr> </table> "	FALSE
"nargs"	"base"	"The Number of Arguments to a Function"	"<p>When used inside a function body, <code>nargs</code> returns the number of arguments supplied to that function, <em>including</em> positional arguments left blank. </p>"	"<pre>nargs()</pre>"	NA	FALSE
"nchar"	"base"	"Count the Number of Characters (or Bytes or Width)"	"<p><code>nchar</code> takes a character vector as an argument and returns a vector whose elements contain the sizes of the corresponding elements of <code>x</code>. </p> <p><code>nzchar</code> is a fast way to find out if elements of a character vector are non-empty strings. </p>"	"<pre>nchar(x, type = 'chars', allowNA = FALSE, keepNA = NA)<br />nzchar(x, keepNA = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>character vector, or a vector to be coerced to a character vector.  Giving a factor is an error.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string: partial matching to one of <code>c('bytes', 'chars', 'width')</code>.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>allowNA</code></td> <td> <p>logical: should <code>NA</code> be returned for invalid multibyte strings or <code>'bytes'</code>-encoded strings (rather than throwing an error)?</p> </td> </tr> <tr valign='top'> <td><code>keepNA</code></td> <td> <p>logical: should <code>NA</code> be returned where ever <code>x</code> is <code>NA</code>?  If false, <code>nchar()</code> returns <code>2</code>, as that is the number of printing characters used when strings are written to output, and <code>nzchar()</code> is <code>TRUE</code>.  The default for <code>nchar()</code>, <code>NA</code>, means to use <code>keepNA = TRUE</code> unless <code>type</code> is <code>'width'</code>.  Used to be (implicitly) hard coded to <code>FALSE</code> in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> versions <i>&lt;=</i> 3.2.0.</p> </td> </tr> </table> "	FALSE
"nrow"	"base"	"The Number of Rows/Columns of an Array"	"<p><code>nrow</code> and <code>ncol</code> return the number of rows or columns present in <code>x</code>. <code>NCOL</code> and <code>NROW</code> do the same treating a vector as 1-column matrix. </p>"	"<pre>nrow(x) ncol(x) NCOL(x) NROW(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a vector, array or data frame</p> </td> </tr></table> "	FALSE
"UseMethod"	"base"	"Class Methods"	"<p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> possesses a simple generic function mechanism which can be used for an object-oriented style of programming.  Method dispatch takes place based on the class(es) of the first argument to the generic function or of the object supplied as an argument to <code>UseMethod</code> or <code>NextMethod</code>. </p>"	"<pre>UseMethod(generic, object)<br />NextMethod(generic = NULL, object = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>generic</code></td> <td> <p>a character string naming a function (and not a built-in operator).  Required for <code>UseMethod</code>.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>for <code>UseMethod</code>: an object whose class will determine the method to be dispatched.  Defaults to the first argument of the enclosing function.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to the next method.</p> </td> </tr> </table> "	FALSE
"nlevels"	"base"	"The Number of Levels of a Factor"	"<p>Return the number of levels which its argument has. </p>"	"<pre>nlevels(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an object, usually a factor.</p> </td> </tr></table> "	FALSE
"norm"	"base"	"Compute the Norm of a Matrix"	"<p>Computes a matrix norm of <code>x</code> using LAPACK.  The norm can be the one (<code>'O'</code>) norm, the infinity (<code>'I'</code>) norm, the Frobenius (<code>'F'</code>) norm, the maximum modulus (<code>'M'</code>) among elements of a matrix, or the “spectral” or <code>'2'</code>-norm, as determined by the value of <code>type</code>. </p>"	"<pre>norm(x, type = c('O', 'I', 'F', 'M', '2')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric matrix; note that packages such as <a href='https://CRAN.R-project.org/package=Matrix'><span class='pkg'>Matrix</span></a> define more <code>norm()</code> methods.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string, specifying the <em>type</em> of matrix norm to be computed. A character indicating the type of norm desired. </p><br /><dl> <dt> <code>'O'</code>, <code>'o'</code> or <code>'1'</code> </dt> <dd> <p>specifies the <b>o</b>ne norm, (maximum absolute column sum);</p> </dd> <dt> <code>'I'</code> or <code>'i'</code> </dt> <dd> <p>specifies the <b>i</b>nfinity norm (maximum absolute row sum);</p> </dd> <dt> <code>'F'</code> or <code>'f'</code> </dt> <dd> <p>specifies the <b>F</b>robenius norm (the Euclidean norm of <code>x</code> treated as if it were a vector);</p> </dd> <dt> <code>'M'</code> or <code>'m'</code> </dt> <dd> <p>specifies the <b>m</b>aximum modulus of all the elements in <code>x</code>; and</p> </dd> <dt><code>'2'</code></dt> <dd> <p>specifies the “spectral” or 2-norm, which is the largest singular value (<code>svd</code>) of <code>x</code>.</p> </dd> </dl> <p>The default is <code>'O'</code>.  Only the first character of <code>type[1]</code> is used.</p> </td> </tr> </table> "	FALSE
"normalizePath"	"base"	"Express File Paths in Canonical Form"	"<p>Convert file paths to canonical form for the platform, to display them in a user-understandable form and so that relative and absolute paths can be compared. </p>"	"<pre>normalizePath(path, winslash = '\\', mustWork = NA) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>path</code></td> <td> <p>character vector of file paths.</p> </td> </tr> <tr valign='top'> <td><code>winslash</code></td> <td> <p>the separator to be used on Windows – ignored elsewhere.  Must be one of <code>c('/', '\\')</code>.</p> </td> </tr> <tr valign='top'> <td><code>mustWork</code></td> <td> <p>logical: if <code>TRUE</code> then an error is given if the result cannot be determined; if <code>NA</code> then a warning.</p> </td> </tr> </table> "	FALSE
"notyet"	"base"	"Not Yet Implemented Functions and Unused Arguments"	"<p>In order to pinpoint missing functionality, the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> core team uses these functions for missing <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> functions and not yet used arguments of existing <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> functions (which are typically there for compatibility purposes). </p> <p>You are very welcome to contribute your code ... </p>"	"<pre>.NotYetImplemented() .NotYetUsed(arg, error = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>arg</code></td> <td> <p>an argument of a function that is not yet used.</p> </td> </tr> <tr valign='top'> <td><code>error</code></td> <td> <p>a logical.  If <code>TRUE</code>, an error is signalled; if <code>FALSE</code>; only a warning is given.</p> </td> </tr> </table> "	FALSE
"NumericConstants"	"base"	"Numeric Constants"	"<p>How <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> parses numeric constants. </p>"	NA	NA	FALSE
"timezones"	"base"	"Time Zones"	"<p>Information about time zones in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>.  <code>Sys.timezone</code> returns the name of the current time zone. </p>"	"<pre>Sys.timezone(location = TRUE)<br />OlsonNames() </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>location</code></td> <td> <p>logical: should an attempt be made to find the location name as used in the Olson/IANA database? (See ‘Time zone names’ below.)</p> </td> </tr></table> "	FALSE
"on.exit"	"base"	"Function Exit Code"	"<p><code>on.exit</code> records the expression given as its argument as needing to be executed when the current function exits (either naturally or as the result of an error).  This is useful for resetting graphical parameters or performing other cleanup actions. </p> <p>If no expression is provided, i.e., the call is <code>on.exit()</code>, then the current <code>on.exit</code> code is removed. </p>"	"<pre>on.exit(expr = NULL, add = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>an expression to be executed.</p> </td> </tr> <tr valign='top'> <td><code>add</code></td> <td> <p>if TRUE, add <code>expr</code> to be executed after any previously set expressions; otherwise (the default) <code>expr</code> will overwrite any previously set expressions.</p> </td> </tr> </table> "	FALSE
"Ops.Date"	"base"	"Operators on the Date Class"	"<p>Operators for the <code>'Date'</code> class. </p> <p>There is an <code>Ops</code> method and specific methods for <code>+</code> and <code>-</code> for the <code>Date</code> class. </p>"	"<pre>date + x x + date date - x date1 lop date2 </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>date</code></td> <td> <p>date objects</p> </td> </tr> <tr valign='top'> <td><code>date1, date2</code></td> <td> <p>date objects or character vectors.  (Character vectors are converted by <code>as.Date</code>.)</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector (in days) <em>or</em> an object of class <code>'difftime'</code>, rounded to the nearest whole day.</p> </td> </tr> <tr valign='top'> <td><code>lop</code></td> <td> <p>One of <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> or <code>&gt;=</code>.</p> </td> </tr> </table> "	FALSE
"order"	"base"	"Ordering Permutation"	"<p><code>order</code> returns a permutation which rearranges its first argument into ascending or descending order, breaking ties by further arguments. <code>sort.list</code> is the same, using only one argument.<br> See the examples for how to use these functions to sort data frames, etc. </p>"	"<pre>order(..., na.last = TRUE, decreasing = FALSE,<br />       method = c('shell', 'radix'))<br />sort.list(x, partial = NULL, na.last = TRUE, decreasing = FALSE,<br />           method = c('shell', 'quick', 'radix')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>a sequence of numeric, complex, character or logical vectors, all of the same length, or a classed <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>an atomic vector.</p> </td> </tr> <tr valign='top'> <td><code>partial</code></td> <td> <p>vector of indices for partial sorting. (Non-<code>NULL</code> values are not implemented.)</p> </td> </tr> <tr valign='top'> <td><code>decreasing</code></td> <td> <p>logical.  Should the sort order be increasing or decreasing? For the <code>'radix'</code> method, this can be a vector of length equal to the number of arguments in <code>...</code>. For the other methods, it must be length one.</p> </td> </tr> <tr valign='top'> <td><code>na.last</code></td> <td> <p>for controlling the treatment of <code>NA</code>s. If <code>TRUE</code>, missing values in the data are put last; if <code>FALSE</code>, they are put first; if <code>NA</code>, they are removed (see ‘Note’.)</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>the method to be used: partial matches are allowed.  The default is <code>'shell'</code> except for some special cases: see ‘Details’.  For details of methods <code>'shell'</code>,  <code>'quick'</code>, and <code>'radix'</code>, see the help for <code>sort</code>.</p> </td> </tr> </table> "	FALSE
"outer"	"base"	"Outer Product of Arrays"	"<p>The outer product of the arrays <code>X</code> and <code>Y</code> is the array <code>A</code> with dimension <code>c(dim(X), dim(Y))</code> where element <code>A[c(arrayindex.x, arrayindex.y)]<br />     = FUN(X[arrayindex.x], Y[arrayindex.y], ...)</code>. </p>"	"<pre>outer(X, Y, FUN = '*', ...) X %o% Y </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>X, Y</code></td> <td> <p>First and second arguments for function <code>FUN</code>. Typically a vector or array.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>a function to use on the outer products, found <em>via</em> <code>match.fun</code> (except for the special case <code>'*'</code>).</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional arguments to be passed to <code>FUN</code>.</p> </td> </tr> </table> "	FALSE
"Paren"	"base"	"Parentheses and Braces"	"<p>Open parenthesis, <code>(</code>, and open brace, <code>{</code>, are <code>.Primitive</code> functions in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p> <p>Effectively, <code>(</code> is semantically equivalent to the identity <code>function(x) x</code>, whereas <code>{</code> is slightly more interesting, see examples. </p>"	"<pre>( \dots )<br />{ \dots } </pre>"	NA	FALSE
"sys.parent"	"base"	"Functions to Access the Function Call Stack"	"<p>These functions provide access to <code>environment</code>s (‘frames’ in S terminology) associated with functions further up the calling stack. </p>"	"<pre>sys.call(which = 0) sys.frame(which = 0) sys.nframe() sys.function(which = 0) sys.parent(n = 1)<br />sys.calls() sys.frames() sys.parents() sys.on.exit() sys.status() parent.frame(n = 1) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>which</code></td> <td> <p>the frame number if non-negative, the number of frames to go back if negative.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>the number of generations to go back.  (See the ‘Details’ section.)</p> </td> </tr> </table> "	FALSE
"parse"	"base"	"Parse Expressions"	"<p><code>parse</code> returns the parsed but unevaluated expressions in a list. </p>"	"<pre>parse(file = '', n = NULL, text = NULL, prompt = '?',<br />       keep.source = getOption('keep.source'), srcfile,<br />       encoding = 'unknown') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>a connection, or a character string giving the name of a file or a URL to read the expressions from. If <code>file</code> is <code>''</code> and <code>text</code> is missing or <code>NULL</code> then input is taken from the console.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>integer (or coerced to integer).  The maximum number of expressions to parse.  If <code>n</code> is <code>NULL</code> or negative or <code>NA</code> the input is parsed in its entirety.</p> </td> </tr> <tr valign='top'> <td><code>text</code></td> <td> <p>character vector.  The text to parse.  Elements are treated as if they were lines of a file.  Other <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects will be coerced to character if possible.</p> </td> </tr> <tr valign='top'> <td><code>prompt</code></td> <td> <p>the prompt to print when parsing from the keyboard. <code>NULL</code> means to use <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>'s prompt, <code>getOption('prompt')</code>.</p> </td> </tr> <tr valign='top'> <td><code>keep.source</code></td> <td> <p>a logical value; if <code>TRUE</code>, keep  source reference information.</p> </td> </tr> <tr valign='top'> <td><code>srcfile</code></td> <td> <p><code>NULL</code>, a character vector, or a <code>srcfile</code> object.  See the ‘Details’ section.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>encoding to be assumed for input strings.  If the value is <code>'latin1'</code> or <code>'UTF-8'</code> it is used to mark character strings as known to be in Latin-1 or UTF-8: it is not used to re-encode the input.  To do the latter, specify the encoding as part of the connection <code>con</code> or <em>via</em> <code>options(encoding=)</code>: see the example under <code>file</code>.</p> </td> </tr> </table> "	FALSE
"paste"	"base"	"Concatenate Strings"	"<p>Concatenate vectors after converting to character. </p>"	"<pre>paste (..., sep = ' ', collapse = NULL) paste0(..., collapse = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>one or more <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects, to be converted to character vectors.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>a character string to separate the terms.  Not <code>NA_character_</code>.</p> </td> </tr> <tr valign='top'> <td><code>collapse</code></td> <td> <p>an optional character string to separate the results.  Not <code>NA_character_</code>.</p> </td> </tr> </table> "	FALSE
"path.expand"	"base"	"Expand File Paths"	"<p>Expand a path name, for example by replacing a leading tilde by the user's home directory (if defined on that platform). </p>"	"<pre>path.expand(path) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>path</code></td> <td> <p>character vector containing one or more path names.</p> </td> </tr></table> "	FALSE
"pcre_config"	"base"	"Report Configuration Options for PCRE"	"<p>Report some of the configuration options of the version of PCRE in use in this <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> session. </p>"	"<pre>pcre_config() </pre>"	NA	FALSE
"pmatch"	"base"	"Partial String Matching"	"<p><code>pmatch</code> seeks matches for the elements of its first argument among those of its second. </p>"	"<pre>pmatch(x, table, nomatch = NA_integer_, duplicates.ok = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the values to be matched: converted to a character vector by <code>as.character</code>.  Long vectors are supported.</p> </td> </tr> <tr valign='top'> <td><code>table</code></td> <td> <p>the values to be matched against: converted to a character vector.  Long vectors are not supported.</p> </td> </tr> <tr valign='top'> <td><code>nomatch</code></td> <td> <p>the value to be returned at non-matching or multiply partially matching positions.  Note that it is coerced to <code>integer</code>.</p> </td> </tr> <tr valign='top'> <td><code>duplicates.ok</code></td> <td> <p>should elements be in <code>table</code> be used more than once?</p> </td> </tr> </table> "	FALSE
"polyroot"	"base"	"Find Zeros of a Real or Complex Polynomial"	"<p>Find zeros of a real or complex polynomial. </p>"	"<pre>polyroot(z) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>z</code></td> <td> <p>the vector of polynomial coefficients in increasing order.</p> </td> </tr></table> "	FALSE
"pos.to.env"	"base"	"Convert Positions in the Search Path to Environments"	"<p>Returns the environment at a specified position in the search path. </p>"	"<pre>pos.to.env(x)</pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an integer between <code>1</code> and <code>length(search())</code>, the length of the search path, or <code>-1</code>.</p> </td> </tr></table> "	FALSE
"pretty"	"base"	"Pretty Breakpoints"	"<p>Compute a  sequence of about <code>n+1</code> equally spaced ‘round’ values which cover the range of the values in <code>x</code>. The values are chosen so that they are 1, 2 or 5 times a power of 10. </p>"	"<pre>pretty(x, ...)<br />## Default S3 method: pretty(x, n = 5, min.n = n %/% 3,  shrink.sml = 0.75,<br />        high.u.bias = 1.5, u5.bias = .5 + 1.5*high.u.bias,<br />        eps.correct = 0, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object coercible to numeric by <code>as.numeric</code>.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>integer giving the <em>desired</em> number of intervals.  Non-integer values are rounded down.</p> </td> </tr> <tr valign='top'> <td><code>min.n</code></td> <td> <p>nonnegative integer giving the <em>minimal</em> number of intervals.  If <code>min.n == 0</code>, <code>pretty(.)</code> may return a single value.</p> </td> </tr> <tr valign='top'> <td><code>shrink.sml</code></td> <td> <p>positive numeric by a which a default scale is shrunk in the case when <code>range(x)</code> is very small (usually 0).</p> </td> </tr> <tr valign='top'> <td><code>high.u.bias</code></td> <td> <p>non-negative numeric, typically <i>&gt; 1</i>. The interval unit is determined as {1,2,5,10} times <code>b</code>, a power of 10.  Larger <code>high.u.bias</code> values favor larger units.</p> </td> </tr> <tr valign='top'> <td><code>u5.bias</code></td> <td> <p>non-negative numeric multiplier favoring factor 5 over 2.  Default and ‘optimal’: <code>u5.bias = .5 + 1.5*high.u.bias</code>.</p> </td> </tr> <tr valign='top'> <td><code>eps.correct</code></td> <td> <p>integer code, one of {0,1,2}. If non-0, an <em>epsilon correction</em> is made at the boundaries such that the result boundaries will be outside <code>range(x)</code>; in the <em>small</em> case, the correction is only done if <code>eps.correct<br />        &gt;= 2</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments for methods.</p> </td> </tr> </table> "	FALSE
"Primitive"	"base"	"Look Up a Primitive Function"	"<p><code>.Primitive</code> looks up by name a ‘primitive’ (internally implemented) function. </p>"	"<pre>.Primitive(name) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>name</code></td> <td> <p>name of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> function.</p> </td> </tr></table> "	FALSE
"print"	"base"	"Print Values"	"<p><code>print</code> prints its argument and returns it <em>invisibly</em> (via <code>invisible(x)</code>).  It is a generic function which means that new printing methods can be easily added for new <code>class</code>es. </p>"	"<pre>print(x, ...)<br />## S3 method for class 'factor' print(x, quote = FALSE, max.levels = NULL,<br />       width = getOption('width'), ...)<br />## S3 method for class 'table' print(x, digits = getOption('digits'), quote = FALSE,<br />       na.print = '', zero.print = '0', justify = 'none', ...)<br />## S3 method for class 'function' print(x, useSource = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object used to select a method.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods.</p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>logical, indicating whether or not strings should be printed with surrounding quotes.</p> </td> </tr> <tr valign='top'> <td><code>max.levels</code></td> <td> <p>integer, indicating how many levels should be printed for a factor; if <code>0</code>, no extra 'Levels' line will be printed.  The default, <code>NULL</code>, entails choosing <code>max.levels</code> such that the levels print on one line of width <code>width</code>.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>only used when <code>max.levels</code> is NULL, see above.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>minimal number of <em>significant</em> digits, see <code>print.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>na.print</code></td> <td> <p>character string (or <code>NULL</code>) indicating <code>NA</code> values in printed output, see <code>print.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>zero.print</code></td> <td> <p>character specifying how zeros (<code>0</code>) should be printed; for sparse tables, using <code>'.'</code> can produce more readable results, similar to printing sparse matrices in <a href='https://CRAN.R-project.org/package=Matrix'><span class='pkg'>Matrix</span></a>.</p> </td> </tr> <tr valign='top'> <td><code>justify</code></td> <td> <p>character indicating if strings should left- or right-justified or left alone, passed to <code>format</code>.</p> </td> </tr> <tr valign='top'> <td><code>useSource</code></td> <td> <p>logical indicating if internally stored source should be used for printing when present, e.g., if <code>options(keep.source = TRUE)</code> has been in use.</p> </td> </tr> </table> "	FALSE
"print.dataframe"	"base"	"Printing Data Frames"	"<p>Print a data frame. </p>"	"<pre>## S3 method for class 'data.frame' print(x, ..., digits = NULL,<br />       quote = FALSE, right = TRUE, row.names = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>object of class <code>data.frame</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional arguments to <code>print</code> or <code>plot</code> methods.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>the minimum number of significant digits to be used: see <code>print.default</code>.</p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>logical, indicating whether or not entries should be printed with surrounding quotes.</p> </td> </tr> <tr valign='top'> <td><code>right</code></td> <td> <p>logical, indicating whether or not strings should be right-aligned.  The default is right-alignment.</p> </td> </tr> <tr valign='top'> <td><code>row.names</code></td> <td> <p>logical (or character vector), indicating whether (or what) row names should be printed.</p> </td> </tr> </table> "	FALSE
"print.default"	"base"	"Default Printing"	"<p><code>print.default</code> is the <em>default</em> method of the generic <code>print</code> function which prints its argument. </p>"	"<pre>## Default S3 method: print(x, digits = NULL, quote = TRUE,<br />       na.print = NULL, print.gap = NULL, right = FALSE,<br />       max = NULL, useSource = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the object to be printed.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>a non-null value for <code>digits</code> specifies the minimum number of significant digits to be printed in values.  The default, <code>NULL</code>, uses <code>getOption('digits')</code>.  (For the interpretation for complex numbers see <code>signif</code>.) Non-integer values will be rounded down, and only values greater than or equal to 1 and no greater than 22 are accepted. </p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>logical, indicating whether or not strings (<code>character</code>s) should be printed with surrounding quotes.</p> </td> </tr> <tr valign='top'> <td><code>na.print</code></td> <td> <p>a character string which is used to indicate <code>NA</code> values in printed output, or <code>NULL</code> (see ‘Details’).</p> </td> </tr> <tr valign='top'> <td><code>print.gap</code></td> <td> <p>a non-negative integer <i>≤ 1024</i>, or <code>NULL</code> (meaning 1), giving the spacing between adjacent columns in printed vectors, matrices and arrays.</p> </td> </tr> <tr valign='top'> <td><code>right</code></td> <td> <p>logical, indicating whether or not strings should be right aligned.  The default is left alignment.</p> </td> </tr> <tr valign='top'> <td><code>max</code></td> <td> <p>a non-null value for <code>max</code> specifies the approximate maximum number of entries to be printed.  The default, <code>NULL</code>, uses <code>getOption('max.print')</code>; see that help page for more details.</p> </td> </tr> <tr valign='top'> <td><code>useSource</code></td> <td> <p>logical, indicating whether to use source references or copies rather than deparsing language objects. The default is to use the original source if it is available.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from other methods.  They are ignored in this function.</p> </td> </tr> </table> "	FALSE
"proc.time"	"base"	"Running Time of R"	"<p><code>proc.time</code> determines how much real and CPU time (in seconds) the currently running <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> process has already taken. </p>"	"<pre>proc.time() </pre>"	NA	FALSE
"prmatrix"	"base"	"Print Matrices, Old-style"	"<p>An earlier method for printing matrices, provided for S compatibility. </p>"	"<pre>prmatrix(x, rowlab =, collab =,<br />          quote = TRUE, right = FALSE, na.print = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>numeric or character matrix.</p> </td> </tr> <tr valign='top'> <td><code>rowlab, collab</code></td> <td> <p>(optional) character vectors giving row or column names respectively.  By default, these are taken from <code>dimnames(x)</code>.</p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>logical; if <code>TRUE</code> and <code>x</code> is of mode <code>'character'</code>, <em>quotes</em> (<span class='samp'>'</span>) are used.</p> </td> </tr> </table>  <table summary='R argblock'> <tr valign='top'> <td><code>right</code></td> <td> <p> if <code>TRUE</code> and <code>x</code> is of mode <code>'character'</code>, the output columns are <em>right</em>-justified.</p> </td> </tr> <tr valign='top'> <td><code>na.print</code></td> <td> <p>how <code>NA</code>s are printed.  If this is non-null, its value is used to represent <code>NA</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments for <code>print</code> methods.</p> </td> </tr> </table> "	FALSE
"prod"	"base"	"Product of Vector Elements"	"<p><code>prod</code> returns the product of all the values present in its arguments. </p>"	"<pre>prod(..., na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>numeric or complex or logical vectors.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical.  Should missing values be removed?</p> </td> </tr> </table> "	FALSE
"prop.table"	"base"	"Express Table Entries as Fraction of Marginal Table"	"<p>This is really <code>sweep(x, margin, margin.table(x, margin), '/')</code> for newbies, except that if <code>margin</code> has length zero, then one gets <code>x/sum(x)</code>. </p>"	"<pre>prop.table(x, margin = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p> table </p> </td> </tr> <tr valign='top'> <td><code>margin</code></td> <td> <p> index, or vector of indices to generate margin for</p> </td> </tr> </table> "	FALSE
"quit"	"base"	"Terminate an R Session"	"<p>The function <code>quit</code> or its alias <code>q</code> terminate the current <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> session. </p>"	"<pre>quit(save = 'default', status = 0, runLast = TRUE)<br />    q(save = 'default', status = 0, runLast = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>save</code></td> <td> <p>a character string indicating whether the environment (workspace) should be saved, one of <code>'no'</code>, <code>'yes'</code>, <code>'ask'</code> or <code>'default'</code>.</p> </td> </tr> <tr valign='top'> <td><code>status</code></td> <td> <p>the (numerical) error status to be returned to the operating system, where relevant.  Conventionally <code>0</code> indicates successful completion.</p> </td> </tr> <tr valign='top'> <td><code>runLast</code></td> <td> <p>should <code>.Last()</code> be executed?</p> </td> </tr> </table> "	FALSE
"qraux"	"base"	"Reconstruct the Q, R, or X Matrices from a QR Object"	"<p>Returns the original matrix from which the object was constructed or the components of the decomposition. </p>"	"<pre>qr.X(qr, complete = FALSE, ncol =) qr.Q(qr, complete = FALSE, Dvec =) qr.R(qr, complete = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>qr</code></td> <td> <p>object representing a QR decomposition.  This will typically have come from a previous call to <code>qr</code> or <code>lsfit</code>.</p> </td> </tr> <tr valign='top'> <td><code>complete</code></td> <td> <p>logical expression of length 1.  Indicates whether an arbitrary  orthogonal completion of the <i>\bold{Q}</i> or <i>\bold{X}</i> matrices is to be made, or whether the <i>\bold{R}</i> matrix is to be completed  by binding zero-value rows beneath the square upper triangle.</p> </td> </tr> <tr valign='top'> <td><code>ncol</code></td> <td> <p>integer in the range <code>1:nrow(qr$qr)</code>.  The number of columns to be in the reconstructed <i>\bold{X}</i>.  The default when <code>complete</code> is <code>FALSE</code> is the first <code>min(ncol(X), nrow(X))</code> columns of the original <i>\bold{X}</i> from which the qr object was constructed.  The default when <code>complete</code> is <code>TRUE</code> is a square matrix with the original <i>\bold{X}</i> in the first <code>ncol(X)</code> columns and an arbitrary orthogonal completion (unitary completion in the complex case) in the remaining columns.</p> </td> </tr> <tr valign='top'> <td><code>Dvec</code></td> <td> <p>vector (not matrix) of diagonal values.  Each column of the returned <i>\bold{Q}</i> will be multiplied by the corresponding diagonal value.  Defaults to all <code>1</code>s.</p> </td> </tr> </table> "	FALSE
"Rhome"	"base"	"Return the R Home Directory"	"<p>Return the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> home directory, or the full path to a component of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> installation. </p>"	"<pre>R.home(component = 'home') </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>component</code></td> <td> <p>As well as <code>'home'</code> which gives the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> home directory, other known values are <code>'bin'</code>, <code>'doc'</code>, <code>'etc'</code>, <code>'include'</code>, <code>'modules'</code> and <code>'share'</code> giving the paths to the corresponding parts of an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> installation.</p> </td> </tr></table> "	FALSE
"Version"	"base"	"Version Information"	"<p><code>R.Version()</code> provides detailed information about the version of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> running. </p> <p><code>R.version</code> is a variable (a <code>list</code>) holding this information (and <code>version</code> is a copy of it for S compatibility). </p>"	"<pre>R.Version() R.version R.version.string version </pre>"	NA	FALSE
"Random"	"base"	"Random Number Generation"	"<p><code>.Random.seed</code> is an integer vector, containing the random number generator (RNG) <b>state</b> for random number generation in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>.  It can be saved and restored, but should not be altered by the user. </p> <p><code>RNGkind</code> is a more friendly interface to query or set the kind of RNG in use. </p> <p><code>RNGversion</code> can be used to set the random generators as they were in an earlier <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> version (for reproducibility). </p> <p><code>set.seed</code> is the recommended way to specify seeds. </p>"	"<pre>.Random.seed &lt;- c(rng.kind, n1, n2, \dots)<br />RNGkind(kind = NULL, normal.kind = NULL) RNGversion(vstr) set.seed(seed, kind = NULL, normal.kind = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>kind</code></td> <td> <p>character or <code>NULL</code>.  If <code>kind</code> is a character string, set <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>'s RNG to the kind desired.  Use <code>'default'</code> to return to the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> default.  See ‘Details’ for the interpretation of <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>normal.kind</code></td> <td> <p>character string or <code>NULL</code>.  If it is a character string, set the method of Normal generation.  Use <code>'default'</code> to return to the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> default.  <code>NULL</code> makes no change.</p> </td> </tr> <tr valign='top'> <td><code>seed</code></td> <td> <p>a single value, interpreted as an integer, or <code>NULL</code> (see ‘Details’).</p> </td> </tr> <tr valign='top'> <td><code>vstr</code></td> <td> <p>a character string containing a version number, e.g., <code>'1.6.2'</code></p> </td> </tr> <tr valign='top'> <td><code>rng.kind</code></td> <td> <p>integer code in <code>0:k</code> for the above <code>kind</code>.</p> </td> </tr> <tr valign='top'> <td><code>n1, n2, ...</code></td> <td> <p>integers.  See the details for how many are required (which depends on <code>rng.kind</code>).</p> </td> </tr> </table> "	FALSE
"Random-user"	"base"	"User-supplied Random Number Generation"	"<p>Function <code>RNGkind</code> allows user-coded uniform and normal random number generators to be supplied.  The details are given here. </p>"	NA	NA	FALSE
"range"	"base"	"Range of Values"	"<p><code>range</code> returns a vector containing the minimum and maximum of all the given arguments. </p>"	"<pre>range(..., na.rm = FALSE)<br />## Default S3 method: range(..., na.rm = FALSE, finite = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>any <code>numeric</code> or character objects.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical, indicating if <code>NA</code>'s should be omitted.</p> </td> </tr> <tr valign='top'> <td><code>finite</code></td> <td> <p>logical, indicating if all non-finite elements should be omitted.</p> </td> </tr> </table> "	FALSE
"rank"	"base"	"Sample Ranks"	"<p>Returns the sample ranks of the values in a vector.  Ties (i.e., equal values) and missing values can be handled in several ways. </p>"	"<pre>rank(x, na.last = TRUE,<br />      ties.method = c('average', 'first', 'last', 'random', 'max', 'min')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric, complex, character or logical vector.</p> </td> </tr> <tr valign='top'> <td><code>na.last</code></td> <td> <p>for controlling the treatment of <code>NA</code>s. If <code>TRUE</code>, missing values in the data are put last; if <code>FALSE</code>, they are put first; if <code>NA</code>, they are removed; if <code>'keep'</code> they are kept with rank <code>NA</code>.</p> </td> </tr> <tr valign='top'> <td><code>ties.method</code></td> <td> <p>a character string specifying how ties are treated, see ‘Details’; can be abbreviated.</p> </td> </tr> </table> "	FALSE
"rapply"	"base"	"Recursively Apply a Function to a List"	"<p><code>rapply</code> is a recursive version of <code>lapply</code>. </p>"	"<pre>rapply(object, f, classes = 'ANY', deflt = NULL,<br />        how = c('unlist', 'replace', 'list'), ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>A list.</p> </td> </tr> <tr valign='top'> <td><code>f</code></td> <td> <p>A function of a single argument.</p> </td> </tr> <tr valign='top'> <td><code>classes</code></td> <td> <p>A character vector of <code>class</code> names, or <code>'ANY'</code> to match any class.</p> </td> </tr> <tr valign='top'> <td><code>deflt</code></td> <td> <p>The default result (not used if <code>how = 'replace'</code>).</p> </td> </tr> <tr valign='top'> <td><code>how</code></td> <td> <p>A character string partially matching the three possibilities given: see ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>additional arguments passed to the call to <code>f</code>.</p> </td> </tr> </table> "	FALSE
"rawConnection"	"base"	"Raw Connections"	"<p>Input and output raw connections. </p>"	"<pre>rawConnection(object, open = 'r')<br />rawConnectionValue(con) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>character or raw vector.  A description of the connection. For an input this is an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> raw vector object, and for an output connection the name for the connection. </p> </td> </tr> <tr valign='top'> <td><code>open</code></td> <td> <p>character.  Any of the standard connection open modes.</p> </td> </tr> <tr valign='top'> <td><code>con</code></td> <td> <p>An output raw connection.</p> </td> </tr> </table> "	FALSE
"RdUtils"	"base"	"Utilities for Processing Rd Files"	"<p>Utilities for converting files in R documentation (Rd) format to other formats or create indices from them, and for converting documentation in other formats to Rd format. </p>"	"<pre>R CMD Rdconv [options] file R CMD Rd2pdf [options] files </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>the path to a file to be processed.</p> </td> </tr> <tr valign='top'> <td><code>files</code></td> <td> <p>a list of file names specifying the R documentation sources to use, by either giving the paths to the files, or the path to a directory with the sources of a package.</p> </td> </tr> <tr valign='top'> <td><code>options</code></td> <td> <p>further options to control the processing, or for obtaining information about usage and version of the utility.</p> </td> </tr> </table> "	FALSE
"dcf"	"base"	"Read and Write Data in DCF Format"	"<p>Reads or writes an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object from/to a file in Debian Control File format. </p>"	"<pre>read.dcf(file, fields = NULL, all = FALSE, keep.white = NULL)<br />write.dcf(x, file = '', append = FALSE,<br />           indent = 0.1 * getOption('width'),<br />           width = 0.9 * getOption('width'),<br />           keep.white = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>either a character string naming a file or a connection. <code>''</code> indicates output to the console.  For <code>read.dcf</code> this can name a compressed file (see <code>gzfile</code>).</p> </td> </tr> <tr valign='top'> <td><code>fields</code></td> <td> <p>Fields to read from the DCF file.  Default is to read all fields.</p> </td> </tr> <tr valign='top'> <td><code>all</code></td> <td> <p>a logical indicating whether in case of multiple occurrences of a field in a record, all these should be gathered. If <code>all</code> is false (default), only the last such occurrence is used.</p> </td> </tr> <tr valign='top'> <td><code>keep.white</code></td> <td> <p>a character string with the names of the fields for which whitespace should be kept as is, or <code>NULL</code> (default) indicating that there are no such fields.  Coerced to character if possible.  For fields where whitespace is not to be kept as is, <code>read.dcf</code> removes leading and trailing whitespace, and <code>write.dcf</code> folds using <code>strwrap</code>. </p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>the object to be written, typically a data frame.  If not, it is attempted to coerce <code>x</code> to a data frame.</p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td> <p>logical.  If <code>TRUE</code>, the output is appended to the file.  If <code>FALSE</code>, any existing file of the name is destroyed.</p> </td> </tr> <tr valign='top'> <td><code>indent</code></td> <td> <p>a positive integer specifying the indentation for continuation lines in output entries.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>a positive integer giving the target column for wrapping lines in the output.</p> </td> </tr> </table> "	FALSE
"readBin"	"base"	"Transfer Binary Data To and From Connections"	"<p>Read binary data from or write binary data to a connection or raw vector. </p>"	"<pre>readBin(con, what, n = 1L, size = NA_integer_, signed = TRUE,<br />         endian = .Platform$endian)<br />writeBin(object, con, size = NA_integer_,<br />          endian = .Platform$endian, useBytes = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>con</code></td> <td> <p>A connection object or a character string naming a file or a raw vector.</p> </td> </tr> <tr valign='top'> <td><code>what</code></td> <td> <p>Either an object whose mode will give the mode of the vector to be read, or a character vector of length one describing the mode: one of <code>'numeric'</code>, <code>'double'</code>, <code>'integer'</code>, <code>'int'</code>, <code>'logical'</code>, <code>'complex'</code>, <code>'character'</code>, <code>'raw'</code>.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>integer.  The (maximal) number of records to be read.  You can use an over-estimate here, but not too large as storage is reserved for <code>n</code> items.</p> </td> </tr> <tr valign='top'> <td><code>size</code></td> <td> <p>integer.  The number of bytes per element in the byte stream.  The default, <code>NA_integer_</code>, uses the natural size. Size changing is not supported for raw and complex vectors.</p> </td> </tr> <tr valign='top'> <td><code>signed</code></td> <td> <p>logical.  Only used for integers of sizes 1 and 2, when it determines if the quantity on file should be regarded as a signed or unsigned integer.</p> </td> </tr> <tr valign='top'> <td><code>endian</code></td> <td> <p>The endian-ness (<code>'big'</code> or <code>'little'</code>) of the target system for the file.  Using <code>'swap'</code> will force swapping endian-ness.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>An <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object to be written to the connection.</p> </td> </tr> <tr valign='top'> <td><code>useBytes</code></td> <td> <p>See <code>writeLines</code>.</p> </td> </tr> </table> "	FALSE
"readChar"	"base"	"Transfer Character Strings To and From Connections"	"<p>Transfer character strings to and from connections, without assuming they are null-terminated on the connection. </p>"	"<pre>readChar(con, nchars, useBytes = FALSE)<br />writeChar(object, con, nchars = nchar(object, type = 'chars'),<br />           eos = '', useBytes = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>con</code></td> <td> <p>A connection object, or a character string naming a file, or a raw vector.</p> </td> </tr> <tr valign='top'> <td><code>nchars</code></td> <td> <p>integer vector, giving the lengths in characters of (unterminated) character strings to be read or written.  Elements must be &gt;= 0 and not <code>NA</code>.</p> </td> </tr> <tr valign='top'> <td><code>useBytes</code></td> <td> <p>logical: For <code>readChar</code>, should <code>nchars</code> be regarded as a number of bytes not characters in a multi-byte locale?  For <code>writeChar</code>, see <code>writeLines</code>.</p> </td> </tr> <tr valign='top'> <td><code>object</code></td> <td> <p>A character vector to be written to the connection, at least as long as <code>nchars</code>.</p> </td> </tr> <tr valign='top'> <td><code>eos</code></td> <td> <p>‘end of string’: character string .  The terminator to be written after each string, followed by an ASCII <code>nul</code>; use <code>NULL</code> for no terminator at all.</p> </td> </tr> </table> "	FALSE
"readline"	"base"	"Read a Line from the Terminal"	"<p><code>readline</code> reads a line from the terminal (in interactive use). </p>"	"<pre>readline(prompt = '') </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>prompt</code></td> <td> <p>the string printed when prompting the user for input. Should usually end with a space <code>' '</code>.</p> </td> </tr></table> "	FALSE
"readLines"	"base"	"Read Text Lines from a Connection"	"<p>Read some or all text lines from a connection. </p>"	"<pre>readLines(con = stdin(), n = -1L, ok = TRUE, warn = TRUE,<br />           encoding = 'unknown', skipNul = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>con</code></td> <td> <p>a connection object or a character string.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>integer.  The (maximal) number of lines to read.  Negative values indicate that one should read up to the end of input on the connection.</p> </td> </tr> <tr valign='top'> <td><code>ok</code></td> <td> <p>logical.  Is it OK to reach the end of the connection before <code>n &gt; 0</code> lines are read?  If not, an error will be generated.</p> </td> </tr> <tr valign='top'> <td><code>warn</code></td> <td> <p>logical.  Warn if a text file is missing a final EOL or if there are embedded nuls in the file.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>encoding to be assumed for input strings.  It is used to mark character strings as known to be in Latin-1 or UTF-8: it is not used to re-encode the input.  To do the latter, specify the encoding as part of the connection <code>con</code> or via <code>options(encoding=)</code>: see the examples. </p> </td> </tr> <tr valign='top'> <td><code>skipNul</code></td> <td> <p>logical: should nuls be skipped?</p> </td> </tr> </table> "	FALSE
"readRDS"	"base"	"Serialization Interface for Single Objects"	"<p>Functions to write a single <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object to a file, and to restore it. </p>"	"<pre>saveRDS(object, file = '', ascii = FALSE, version = NULL,<br />         compress = TRUE, refhook = NULL)<br />readRDS(file, refhook = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object to serialize.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>a connection or the name of the file where the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object is saved to or read from.</p> </td> </tr> <tr valign='top'> <td><code>ascii</code></td> <td> <p>a logical.  If <code>TRUE</code> or <code>NA</code>, an ASCII representation is written; otherwise (default), a binary one is used. See the comments in the help for <code>save</code>.</p> </td> </tr> <tr valign='top'> <td><code>version</code></td> <td> <p>the workspace format version to use.  <code>NULL</code> specifies the current default version (2).  Versions prior to 2 are not supported, so this will only be relevant when there are later versions.</p> </td> </tr> <tr valign='top'> <td><code>compress</code></td> <td> <p>a logical specifying whether saving to a named file is to use <code>'gzip'</code> compression, or one of <code>'gzip'</code>, <code>'bzip2'</code> or <code>'xz'</code> to indicate the type of compression to be used.  Ignored if <code>file</code> is a connection.</p> </td> </tr> <tr valign='top'> <td><code>refhook</code></td> <td> <p>a hook function for handling reference objects.</p> </td> </tr> </table> "	FALSE
"readRenviron"	"base"	"Set Environment Variables from a File"	"<p>Read as file such as ‘<span class='file'>.Renviron</span>’ or ‘<span class='file'>Renviron.site</span>’ in the format described in the help for Startup, and set environment variables as defined in the file. </p>"	"<pre>readRenviron(path) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>path</code></td> <td> <p>A length-one character vector giving the path to the file.  Tilde-expansion is performed where supported.</p> </td> </tr></table> "	FALSE
"Recall"	"base"	"Recursive Calling"	"<p><code>Recall</code> is used as a placeholder for the name of the function in which it is called.  It allows the definition of recursive functions which still work after being renamed, see example below. </p>"	"<pre>Recall(...) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>...</code></td> <td> <p>all the arguments to be passed.</p> </td> </tr></table> "	FALSE
"regex"	"base"	"Regular Expressions as used in R"	"<p>This help page documents the regular expression patterns supported by <code>grep</code> and related functions <code>grepl</code>, <code>regexpr</code>, <code>gregexpr</code>, <code>sub</code> and <code>gsub</code>, as well as by <code>strsplit</code>. </p>"	NA	NA	FALSE
"regmatches"	"base"	"Extract or Replace Matched Substrings"	"<p>Extract or replace matched substrings from match data obtained by <code>regexpr</code>, <code>gregexpr</code> or <code>regexec</code>. </p>"	"<pre>regmatches(x, m, invert = FALSE) regmatches(x, m, invert = FALSE) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector</p> </td> </tr> <tr valign='top'> <td><code>m</code></td> <td> <p>an object with match data</p> </td> </tr> <tr valign='top'> <td><code>invert</code></td> <td> <p>a logical: if <code>TRUE</code>, extract or replace the non-matched substrings.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>an object with suitable replacement values for the matched or non-matched substrings (see <code>Details</code>).</p> </td> </tr> </table> "	FALSE
"rm"	"base"	"Remove Objects from a Specified Environment"	"<p><code>remove</code> and <code>rm</code> can be used to remove objects.  These can be specified successively as character strings, or in the character vector <code>list</code>, or through a combination of both.  All objects thus specified will be removed. </p> <p>If <code>envir</code> is NULL then the currently active environment is searched first. </p> <p>If <code>inherits</code> is <code>TRUE</code> then parents of the supplied directory are searched until a variable with the given name is encountered.  A warning is printed for each variable that is not found. </p>"	"<pre>remove(..., list = character(), pos = -1,<br />        envir = as.environment(pos), inherits = FALSE)<br />rm<br />    (..., list = character(), pos = -1,<br />        envir = as.environment(pos), inherits = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>the objects to be removed, as names (unquoted) or character strings (quoted).</p> </td> </tr> <tr valign='top'> <td><code>list</code></td> <td> <p>a character vector naming objects to be removed.</p> </td> </tr> <tr valign='top'> <td><code>pos</code></td> <td> <p>where to do the removal.  By default, uses the current environment.  See ‘details’ for other possibilities.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>the <code>environment</code> to use.  See ‘details’.</p> </td> </tr> <tr valign='top'> <td><code>inherits</code></td> <td> <p>should the enclosing frames of the environment be inspected?</p> </td> </tr> </table> "	FALSE
"Startup"	"base"	"Initialization at Start of an R Session"	"<p>In <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>, the startup mechanism is as follows. </p> <p>Unless <span class='option'>--no-environ</span> was given on the command line, <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> searches for site and user files to process for setting environment variables.  The name of the site file is the one pointed to by the environment variable <span class='env'>R_ENVIRON</span>; if this is unset, ‘<span class='file'><var>R_HOME</var>/etc/Renviron.site</span>’ is used (if it exists, which it does not in a ‘factory-fresh’ installation).  The name of the user file can be specified by the <span class='env'>R_ENVIRON_USER</span> environment variable; if this is unset, the files searched for are ‘<span class='file'>.Renviron</span>’ in the current or in the user's home directory (in that order).  See ‘Details’ for how the files are read. </p> <p>Then <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> searches for the site-wide startup profile file of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> code unless the command line option <span class='option'>--no-site-file</span> was given.  The path of this file is taken from the value of the <span class='env'>R_PROFILE</span> environment variable (after tilde expansion).  If this variable is unset, the default is ‘<span class='file'><var>R_HOME</var>/etc/Rprofile.site</span>’, which is used if it exists (which it does not in a ‘factory-fresh’ installation). This code is sourced into the <span class='pkg'>base</span> package.  Users need to be careful not to unintentionally overwrite objects in <span class='pkg'>base</span>, and it is normally advisable to use <code>local</code> if code needs to be executed: see the examples. </p> <p>Then, unless <span class='option'>--no-init-file</span> was given, <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> searches for a user profile, a file of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> code.  The path of this file can be specified by the <span class='env'>R_PROFILE_USER</span> environment variable (and tilde expansion will be performed).  If this is unset, a file called ‘<span class='file'>.Rprofile</span>’ is searched for in the current directory or in the user's home directory (in that order).  The user profile file is sourced into the workspace. </p> <p>Note that when the site and user profile files are sourced only the <span class='pkg'>base</span> package is loaded, so objects in other packages need to be referred to by e.g. <code>utils::dump.frames</code> or after explicitly loading the package concerned. </p> <p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> then loads a saved image of the user workspace from ‘<span class='file'>.RData</span>’ in the current directory if there is one (unless <span class='option'>--no-restore-data</span> or <span class='option'>--no-restore</span> was specified on the command line). </p> <p>Next, if a function <code>.First</code> is found on the search path, it is executed as <code>.First()</code>.  Finally, function <code>.First.sys()</code> in the <span class='pkg'>base</span> package is run.  This calls <code>require</code> to attach the default packages specified by <code>options('defaultPackages')</code>.  If the <span class='pkg'>methods</span> package is included, this will have been attached earlier (by function <code>.OptRequireMethods()</code>) so that namespace initializations such as those from the user workspace will proceed correctly. </p> <p>A function <code>.First</code> (and <code>.Last</code>) can be defined in appropriate ‘<span class='file'>.Rprofile</span>’ or ‘<span class='file'>Rprofile.site</span>’ files or have been saved in ‘<span class='file'>.RData</span>’.  If you want a different set of packages than the default ones when you start, insert a call to <code>options</code> in the ‘<span class='file'>.Rprofile</span>’ or ‘<span class='file'>Rprofile.site</span>’ file.  For example, <code>options(defaultPackages = character())</code> will attach no extra packages on startup (only the <span class='pkg'>base</span> package) (or set <code>R_DEFAULT_PACKAGES=NULL</code> as an environment variable before running <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>).  Using <code>options(defaultPackages = '')</code> or <code>R_DEFAULT_PACKAGES=''</code> enforces the R <em>system</em> default. </p> <p>On front-ends which support it, the commands history is read from the file specified by the environment variable <span class='env'>R_HISTFILE</span> (default ‘<span class='file'>.Rhistory</span>’ in the current directory) unless <span class='option'>--no-restore-history</span> or <span class='option'>--no-restore</span> was specified. </p> <p>The command-line option <span class='option'>--vanilla</span> implies <span class='option'>--no-site-file</span>, <span class='option'>--no-init-file</span>, <span class='option'>--no-environ</span> and (except for <code>R CMD</code>) <span class='option'>--no-restore</span> </p>"	NA	NA	FALSE
"rep"	"base"	"Replicate Elements of Vectors and Lists"	"<p><code>rep</code> replicates the values in <code>x</code>.  It is a generic function, and the (internal) default method is described here. </p> <p><code>rep.int</code> and <code>rep_len</code> are faster simplified versions for two common cases.  They are not generic. </p>"	"<pre>rep(x, ...)<br />rep.int(x, times)<br />rep_len(x, length.out) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector (of any mode including a list) or a factor or (for <code>rep</code> only) a <code>POSIXct</code> or <code>POSIXlt</code> or <code>Date</code> object; or an S4 object containing such an object.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from other methods. For the internal default method these can include: </p><br /><dl> <dt><code>times</code></dt> <dd> <p>A integer vector giving the (non-negative) number of times to repeat each element if of length <code>length(x)</code>, or to repeat the whole vector if of length 1.  Negative or <code>NA</code> values are an error.</p> </dd> <dt><code>length.out</code></dt> <dd> <p>non-negative integer.  The desired length of the output vector.  Other inputs will be coerced to an integer vector and the first element taken.  Ignored if <code>NA</code> or invalid.</p> </dd> <dt><code>each</code></dt> <dd> <p>non-negative integer.  Each element of <code>x</code> is repeated <code>each</code> times.  Other inputs will be coerced to an integer vector and the first element taken.  Treated as <code>1</code> if <code>NA</code> or invalid.</p> </dd> </dl> </td> </tr> <tr valign='top'> <td><code>times</code></td> <td> <p>see <code>...</code>.</p> </td> </tr> <tr valign='top'> <td><code>length.out</code></td> <td> <p>non-negative integer: the desired length of the output vector.</p> </td> </tr> </table> "	FALSE
"replace"	"base"	"Replace Values in a Vector"	"<p><code>replace</code> replaces the values in <code>x</code> with indices given in <code>list</code> by those given in <code>values</code>. If necessary, the values in <code>values</code> are recycled. </p>"	"<pre>replace(x, list, values) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>vector</p> </td> </tr> <tr valign='top'> <td><code>list</code></td> <td> <p>an index vector</p> </td> </tr> <tr valign='top'> <td><code>values</code></td> <td> <p>replacement values</p> </td> </tr> </table> "	FALSE
"Reserved"	"base"	"Reserved Words in R"	"<p>The reserved words in <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>'s parser are </p> <p><code>if</code> <code>else</code> <code>repeat</code> <code>while</code> <code>function</code> <code>for</code> <code>in</code> <code>next</code> <code>break</code> </p> <p><code>TRUE</code> <code>FALSE</code> <code>NULL</code> <code>Inf</code> <code>NaN</code> <code>NA</code> <code>NA_integer_</code> <code>NA_real_</code> <code>NA_complex_</code> <code>NA_character_</code> </p> <p><code>...</code> and <code>..1</code>, <code>..2</code> etc, which are used to refer to arguments passed down from a calling function.  See the <a href='/doc/manual/R-intro.html#The-three-dots-argument'>Introduction to R</a> manual for usage of these syntactic elements, and dotsMethods for their use in formal methods. </p>"	NA	NA	FALSE
"tracemem"	"base"	"Trace Copying of Objects"	"<p>This function marks an object so that a message is printed whenever the internal code copies the object.  It is a major cause of hard-to-predict memory use in R. </p>"	"<pre>tracemem(x) untracemem(x) retracemem(x, previous = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>An R object, not a function or environment or <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>previous</code></td> <td> <p>A value as returned by <code>tracemem</code> or <code>retracemem</code>.</p> </td> </tr> </table> "	FALSE
"trace"	"base"	"Interactive Tracing and Debugging of Calls to a Function or Method"	"<p>A call to <code>trace</code> allows you to insert debugging code (e.g., a call to <code>browser</code> or <code>recover</code>) at chosen places in any function.  A call to <code>untrace</code> cancels the tracing. Specified methods can be traced the same way, without tracing all calls to the generic function.  Trace code (<code>tracer</code>) can be any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expression.  Tracing can be temporarily turned on or off globally by calling <code>tracingState</code>. </p>"	"<pre>trace(what, tracer, exit, at, print, signature,<br />       where = topenv(parent.frame()), edit = FALSE) untrace(what, signature = NULL, where = topenv(parent.frame()))<br />tracingState(on = NULL) .doTrace(expr, msg) returnValue(default = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>what</code></td> <td> <p>The name (quoted or not) of a function to be traced or untraced.  For <code>untrace</code> or for <code>trace</code> with more than one argument, more than one name can be given in the quoted form, and the same action will be applied to each one.</p> </td> </tr> <tr valign='top'> <td><code>tracer</code></td> <td> <p>either a function or an unevaluated expression.  The function will be called or the expression will be evaluated either at the beginning of the call, or before those steps in the call specified by the argument <code>at</code>. See the details section.</p> </td> </tr> <tr valign='top'> <td><code>exit</code></td> <td> <p>either a <code>function</code> or an unevaluated expression.  The function will be called or the expression will be evaluated on exiting the function. See the details section.</p> </td> </tr> <tr valign='top'> <td><code>at</code></td> <td> <p>optional numeric vector or list.  If supplied, <code>tracer</code> will be called just before the corresponding step in the body of the function. See the details section. </p> </td> </tr> <tr valign='top'> <td><code>print</code></td> <td> <p>If <code>TRUE</code> (as per default), a descriptive line is printed before any trace expression is evaluated.</p> </td> </tr> <tr valign='top'> <td><code>signature</code></td> <td> <p> If this argument is supplied, it should be a signature for a method for function <code>what</code>.  In this case, the method, and <em>not</em> the function itself, is traced.</p> </td> </tr> <tr valign='top'> <td><code>edit</code></td> <td> <p> For complicated tracing, such as tracing within a loop inside the function, you will need to insert the desired calls by editing the body of the function.  If so, supply the <code>edit</code> argument either as <code>TRUE</code>, or as the name of the editor you want to use.  Then <code>trace()</code> will call <code>edit</code> and use the version of the function after you edit it.  See the details section for additional information. </p> </td> </tr> <tr valign='top'> <td><code>where</code></td> <td> <p>where to look for the function to be traced; by default, the top-level environment of the call to <code>trace</code>. </p> <p>An important use of this argument is to trace a function when it is called from a package with a namespace.  The current namespace mechanism imports the functions to be called (with the exception of functions in the base package).  The functions being called are <em>not</em> the same objects seen from the top-level (in general, the imported packages may not even be attached).  Therefore, you must ensure that the correct versions are being traced.  The way to do this is to set argument <code>where</code> to a function in the namespace.  The tracing computations will then start looking in the environment of that function (which will be the namespace of the corresponding package). (Yes, it's subtle, but the semantics here are central to how namespaces work in R.) </p> </td> </tr> <tr valign='top'> <td><code>on</code></td> <td> <p>logical; a call to the support function <code>tracingState</code> returns <code>TRUE</code> if tracing is globally turned on, <code>FALSE</code> otherwise.  An argument of one or the other of those values sets the state.  If the tracing state is <code>FALSE</code>, none of the trace actions will actually occur (used, for example, by debugging functions to shut off tracing during debugging).</p> </td> </tr> <tr valign='top'> <td><code>expr, msg</code></td> <td> <p>arguments to the support function <code>.doTrace</code>, calls to which are inserted into the modified function or method: <code>expr</code> is the tracing action (such as a call to <code>browser()</code>, and <code>msg</code> is a string identifying the place where the trace action occurs. </p> </td> </tr> <tr valign='top'> <td><code>default</code></td> <td> <p>If <code>returnValue</code> finds no return value (e.g. a function exited because of an error, not a normal exit), it will return <code>default</code> instead. </p> </td> </tr> </table> "	FALSE
"rev"	"base"	"Reverse Elements"	"<p><code>rev</code> provides a reversed version of its argument.  It is generic function with a default method for vectors and one for <code>dendrogram</code>s. </p> <p>Note that this is no longer needed (nor efficient) for obtaining vectors sorted into descending order, since that is now rather more directly achievable by <code>sort(x, decreasing = TRUE)</code>. </p>"	"<pre>rev(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a vector or another object for which reversal is defined.</p> </td> </tr></table> "	FALSE
"round.POSIXt"	"base"	"Round / Truncate Data-Time Objects"	"<p>Round or truncate date-time objects. </p>"	"<pre>## S3 method for class 'POSIXt' round(x, units = c('secs', 'mins', 'hours', 'days')) ## S3 method for class 'POSIXt' trunc(x, units = c('secs', 'mins', 'hours', 'days'), ...)<br />## S3 method for class 'Date' round(x, ...) ## S3 method for class 'Date' trunc(x, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an object inheriting from <code>'POSIXt'</code> or <code>'Date'</code>.</p> </td> </tr> <tr valign='top'> <td><code>units</code></td> <td> <p>one of the units listed.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from other methods, notably <code>digits</code> for <code>round</code>.</p> </td> </tr> </table> "	FALSE
"row"	"base"	"Row Indexes"	"<p>Returns a matrix of integers indicating their row number in a matrix-like object, or a factor indicating the row labels. </p>"	"<pre>row(x, as.factor = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a matrix-like object, that is one with a two-dimensional <code>dim</code>.</p> </td> </tr> <tr valign='top'> <td><code>as.factor</code></td> <td> <p>a logical value indicating whether the value should be returned as a factor of row labels (created if necessary) rather than as numbers.</p> </td> </tr> </table> "	FALSE
"row.names"	"base"	"Get and Set Row Names for Data Frames"	"<p>All data frames have a row names attribute, a character vector of length the number of rows with no duplicates nor missing values. </p> <p>For convenience, these are generic functions for which users can write other methods, and there are default methods for arrays.  The description here is for the <code>data.frame</code> method. </p>"	"<pre>row.names(x) row.names(x) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>object of class <code>'data.frame'</code>, or any other class for which a method has been defined.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>an object to be coerced to character unless an integer vector.  It should have (after coercion) the same length as the number of rows of <code>x</code> with no duplicated nor missing values. <code>NULL</code> is also allowed: see ‘Details’.</p> </td> </tr> </table> "	FALSE
"rowsum"	"base"	"Give Column Sums of a Matrix or Data Frame, Based on a Grouping Variable"	"<p>Compute column sums across rows of a numeric matrix-like object for each level of a grouping variable.  <code>rowsum</code> is generic, with a method for data frames and a default method for vectors and matrices. </p>"	"<pre>rowsum(x, group, reorder = TRUE, ...)<br />## S3 method for class 'data.frame' rowsum(x, group, reorder = TRUE, na.rm = FALSE, ...)<br />## Default S3 method: rowsum(x, group, reorder = TRUE, na.rm = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a matrix, data frame or vector of numeric data.  Missing values are allowed.  A numeric vector will be treated as a column vector.</p> </td> </tr> <tr valign='top'> <td><code>group</code></td> <td> <p>a vector or factor giving the grouping, with one element per row of <code>x</code>.  Missing values will be treated as another group and a warning will be given.</p> </td> </tr> <tr valign='top'> <td><code>reorder</code></td> <td> <p>if <code>TRUE</code>, then the result will be in order of <code>sort(unique(group))</code>, if <code>FALSE</code>, it will be in the order that groups were encountered.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical (<code>TRUE</code> or <code>FALSE</code>).  Should <code>NA</code> (including <code>NaN</code>) values be discarded?</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>other arguments to be passed to or from methods</p> </td> </tr> </table> "	FALSE
"libPaths"	"base"	"Search Paths for Packages"	"<p><code>.libPaths</code> gets/sets the library trees within which packages are looked for. </p>"	"<pre>.libPaths(new)<br />.Library .Library.site </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>new</code></td> <td> <p>a character vector with the locations of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees.  Tilde expansion (<code>path.expand</code>) is done, and if any element contains one of <code>*?[</code>, globbing is done where supported by the platform: see <code>Sys.glob</code>.</p> </td> </tr></table> "	FALSE
"sample"	"base"	"Random Samples and Permutations"	"<p><code>sample</code> takes a sample of the specified size from the elements of <code>x</code> using either with or without replacement. </p>"	"<pre>sample(x, size, replace = FALSE, prob = NULL)<br />sample.int(n, size = n, replace = FALSE, prob = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>Either a vector of one or more elements from which to choose, or a positive integer.  See ‘Details.’</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>a positive number, the number of items to choose from.  See ‘Details.’</p> </td> </tr> <tr valign='top'> <td><code>size</code></td> <td> <p>a non-negative integer giving the number of items to choose.</p> </td> </tr> <tr valign='top'> <td><code>replace</code></td> <td> <p>Should sampling be with replacement?</p> </td> </tr> <tr valign='top'> <td><code>prob</code></td> <td> <p>A vector of probability weights for obtaining the elements of the vector being sampled.</p> </td> </tr> </table> "	FALSE
"save"	"base"	"Save R Objects"	"<p><code>save</code> writes an external representation of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects to the specified file.  The objects can be read back from the file at a later date by using the function <code>load</code> or <code>attach</code> (or <code>data</code> in some cases). </p> <p><code>save.image()</code> is just a short-cut for ‘save my current workspace’, i.e., <code>save(list = ls(all.names = TRUE), file =<br />     '.RData', envir = .GlobalEnv)</code>. It is also what happens with <code>q('yes')</code>. </p>"	"<pre>save(..., list = character(),<br />      file = stop(''file' must be specified'),<br />      ascii = FALSE, version = NULL, envir = parent.frame(),<br />      compress = isTRUE(!ascii), compression_level,<br />      eval.promises = TRUE, precheck = TRUE)<br />save.image(file = '.RData', version = NULL, ascii = FALSE,<br />            compress = !ascii, safe = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>the names of the objects to be saved (as symbols or character strings).</p> </td> </tr> <tr valign='top'> <td><code>list</code></td> <td> <p>A character vector containing the names of objects to be saved.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>a (writable binary-mode) connection or the name of the file where the data will be saved (when tilde expansion is done).  Must be a file name for <code>save.image</code> or <code>version = 1</code>.</p> </td> </tr> <tr valign='top'> <td><code>ascii</code></td> <td> <p>if <code>TRUE</code>, an ASCII representation of the data is written.  The default value of <code>ascii</code> is <code>FALSE</code> which leads to a binary file being written.  If <code>NA</code> and <code>version &gt;= 2</code>, a different ASCII representation is used which writes double/complex numbers as binary fractions.</p> </td> </tr> <tr valign='top'> <td><code>version</code></td> <td> <p>the workspace format version to use.  <code>NULL</code> specifies the current default format.  The version used from <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> 0.99.0 to <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> 1.3.1 was version 1.  The default format as from <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> 1.4.0 is version 2.</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>environment to search for objects to be saved.</p> </td> </tr> <tr valign='top'> <td><code>compress</code></td> <td> <p>logical or character string specifying whether saving to a named file is to use compression.  <code>TRUE</code> corresponds to <code>gzip</code> compression, and character strings <code>'gzip'</code>, <code>'bzip2'</code> or <code>'xz'</code> specify the type of compression.  Ignored when <code>file</code> is a connection and for workspace format version 1.</p> </td> </tr> <tr valign='top'> <td><code>compression_level</code></td> <td> <p>integer: the level of compression to be used.  Defaults to <code>6</code> for <code>gzip</code> compression and to <code>9</code> for <code>bzip2</code> or <code>xz</code> compression.</p> </td> </tr> <tr valign='top'> <td><code>eval.promises</code></td> <td> <p>logical: should objects which are promises be forced before saving?</p> </td> </tr> <tr valign='top'> <td><code>precheck</code></td> <td> <p>logical: should the existence of the objects be checked before starting to save (and in particular before opening the file/connection)?  Does not apply to version 1 saves.</p> </td> </tr> <tr valign='top'> <td><code>safe</code></td> <td> <p>logical.  If <code>TRUE</code>, a temporary file is used for creating the saved workspace.  The temporary file is renamed to <code>file</code> if the save succeeds.  This preserves an existing workspace <code>file</code> if the save fails, but at the cost of using extra disk space during the save.</p> </td> </tr> </table> "	FALSE
"scale"	"base"	"Scaling and Centering of Matrix-like Objects"	"<p><code>scale</code> is generic function whose default method centers and/or scales the columns of a numeric matrix. </p>"	"<pre>scale(x, center = TRUE, scale = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric matrix(like object).</p> </td> </tr> <tr valign='top'> <td><code>center</code></td> <td> <p>either a logical value or a numeric vector of length equal to the number of columns of <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>scale</code></td> <td> <p>either a logical value or a numeric vector of length equal to the number of columns of <code>x</code>.</p> </td> </tr> </table> "	FALSE
"scan"	"base"	"Read Data Values"	"<p>Read data into a vector or list from the console or file. </p>"	"<pre>scan(file = '', what = double(), nmax = -1, n = -1, sep = '',<br />      quote = if(identical(sep, '\n')) '' else ''\'', dec = '.',<br />      skip = 0, nlines = 0, na.strings = 'NA',<br />      flush = FALSE, fill = FALSE, strip.white = FALSE,<br />      quiet = FALSE, blank.lines.skip = TRUE, multi.line = TRUE,<br />      comment.char = '', allowEscapes = FALSE,<br />      fileEncoding = '', encoding = 'unknown', text, skipNul = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>the name of a file to read data values from.  If the specified file is <code>''</code>, then input is taken from the keyboard (or whatever <code>stdin()</code> reads if input is redirected or <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> is embedded). (In this case input can be terminated by a blank line or an EOF signal, <span class='samp'>Ctrl-D</span> on Unix and <span class='samp'>Ctrl-Z</span> on Windows.) </p> <p>Otherwise, the file name is interpreted <em>relative</em> to the current working directory (given by <code>getwd()</code>), unless it specifies an <em>absolute</em> path. Tilde-expansion is performed where supported. When running <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> from a script, <code>file = 'stdin'</code> can be used to refer to the process's <code>stdin</code> file stream. </p> <p>This can be a compressed file (see <code>file</code>). </p> <p>Alternatively, <code>file</code> can be a <code>connection</code>, which will be opened if necessary, and if so closed at the end of the function call.  Whatever mode the connection is opened in, any of LF, CRLF or CR will be accepted as the EOL marker for a line and so will match <code>sep = '\n'</code>. </p> <p><code>file</code> can also be a complete URL.  (For the supported URL schemes, see the ‘URLs’ section of the help for <code>url</code>.) </p> <p>To read a data file not in the current encoding (for example a Latin-1 file in a UTF-8 locale or conversely) use a <code>file</code> connection setting its <code>encoding</code> argument (or <code>scan</code>'s <code>fileEncoding</code> argument). </p> </td> </tr> <tr valign='top'> <td><code>what</code></td> <td> <p>the type of <code>what</code> gives the type of data to be read.  (Here ‘type’ is used in the sense of <code>typeof</code>.)  The supported types are <code>logical</code>, <code>integer</code>, <code>numeric</code>, <code>complex</code>, <code>character</code>, <code>raw</code> and <code>list</code>.  If <code>what</code> is a list, it is assumed that the lines of the data file are records each containing <code>length(what)</code> items (‘fields’) and the list components should have elements which are one of the first six (atomic) types listed or <code>NULL</code>, see section ‘Details’ below.</p> </td> </tr> <tr valign='top'> <td><code>nmax</code></td> <td> <p>integer: the maximum number of data values to be read, or if <code>what</code> is a list, the maximum number of records to be read.  If omitted or not positive or an invalid value for an integer (and <code>nlines</code> is not set to a positive value), <code>scan</code> will read to the end of <code>file</code>.</p> </td> </tr> <tr valign='top'> <td><code>n</code></td> <td> <p>integer: the maximum number of data values to be read, defaulting to no limit.  Invalid values will be ignored.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>by default, scan expects to read ‘white-space’ delimited input fields.  Alternatively, <code>sep</code> can be used to specify a character which delimits fields.  A field is always delimited by an end-of-line marker unless it is quoted. </p> <p>If specified this should be the empty character string (the default) or <code>NULL</code> or a character string containing just one single-byte character. </p> </td> </tr> <tr valign='top'> <td><code>quote</code></td> <td> <p>the set of quoting characters as a single character string or <code>NULL</code>.  In a multibyte locale the quoting characters must be ASCII (single-byte).</p> </td> </tr> <tr valign='top'> <td><code>dec</code></td> <td> <p>decimal point character.  This should be a character string containing just one single-byte character.  (<code>NULL</code> and a zero-length character vector are also accepted, and taken as the default.)</p> </td> </tr> <tr valign='top'> <td><code>skip</code></td> <td> <p>the number of  lines of the input file to skip before beginning to read data values.</p> </td> </tr> <tr valign='top'> <td><code>nlines</code></td> <td> <p>if positive, the maximum number of lines of data to be read.</p> </td> </tr> <tr valign='top'> <td><code>na.strings</code></td> <td> <p>character vector.  Elements of this vector are to be interpreted as missing (<code>NA</code>) values.  Blank fields are also considered to be missing values in logical, integer, numeric and complex fields.  Note that the test happens <em>after</em>  white space is stripped from the input, so <code>na.strings</code> values  may need their own white space stripped in advance.</p> </td> </tr> <tr valign='top'> <td><code>flush</code></td> <td> <p>logical: if <code>TRUE</code>, <code>scan</code> will flush to the end of the line after reading the last of the fields requested. This allows putting comments after the last field, but precludes putting more that one record on a line.</p> </td> </tr> <tr valign='top'> <td><code>fill</code></td> <td> <p>logical: if <code>TRUE</code>, <code>scan</code> will implicitly add empty fields to any lines with fewer fields than implied by <code>what</code>.</p> </td> </tr> <tr valign='top'> <td><code>strip.white</code></td> <td> <p>vector of logical value(s) corresponding to items in the <code>what</code> argument.  It is used only when <code>sep</code> has been specified, and allows the stripping of leading and trailing ‘white space’ from <code>character</code> fields (<code>numeric</code> fields are always stripped).  Note: white space inside quoted strings is not stripped. </p> <p>If <code>strip.white</code> is of length 1, it applies to all fields; otherwise, if <code>strip.white[i]</code> is <code>TRUE</code> <em>and</em> the <code>i</code>-th field is of mode character (because <code>what[i]</code> is) then the leading and trailing unquoted white space from field <code>i</code> is stripped. </p> </td> </tr> <tr valign='top'> <td><code>quiet</code></td> <td> <p>logical: if <code>FALSE</code> (default), scan() will print a line, saying how many items have been read.</p> </td> </tr> <tr valign='top'> <td><code>blank.lines.skip</code></td> <td> <p>logical: if <code>TRUE</code> blank lines in the input are ignored, except when counting <code>skip</code> and <code>nlines</code>.</p> </td> </tr> <tr valign='top'> <td><code>multi.line</code></td> <td> <p>logical.  Only used if <code>what</code> is a list.  If <code>FALSE</code>, all of a record must appear on one line (but more than one record can appear on a single line).  Note that using <code>fill = TRUE</code> implies that a record will be terminated at the end of a line.</p> </td> </tr> <tr valign='top'> <td><code>comment.char</code></td> <td> <p>character: a character vector of length one containing a single character or an empty string.  Use <code>''</code> to turn off the interpretation of comments altogether (the default).</p> </td> </tr> <tr valign='top'> <td><code>allowEscapes</code></td> <td> <p>logical.  Should C-style escapes such as <span class='samp'>\n</span> be processed (the default) or read verbatim?<br />   Note that if not within quotes these could be interpreted as a delimiter (but not as a comment character). </p> <p>The escapes which are interpreted are the control characters <span class='samp'>\a, \b, \f, \n, \r, \t, \v</span> and octal and hexadecimal representations like <span class='samp'>\040</span> and <span class='samp'>\0x2A</span>.  Any other escaped character is treated as itself, including backslash. Note that Unicode escapes (starting <span class='samp'>\u</span> or <span class='samp'>\U</span>: see Quotes) are never processed. </p> </td> </tr> <tr valign='top'> <td><code>fileEncoding</code></td> <td> <p>character string: if non-empty declares the encoding used on a file (not a connection nor the keyboard) so the character data can be re-encoded.  See the ‘Encoding’ section of the help for <code>file</code>, and the ‘R Data Import/Export Manual’. </p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>encoding to be assumed for input strings.  If the value is <code>'latin1'</code> or <code>'UTF-8'</code> it is used to mark character strings as known to be in Latin-1 or UTF-8: it is not used to re-encode the input (see <code>fileEncoding</code>). See also ‘Details’. </p> </td> </tr> <tr valign='top'> <td><code>text</code></td> <td> <p>character string: if <code>file</code> is not supplied and this is, then data are read from the value of <code>text</code> via a text connection. </p> </td> </tr> <tr valign='top'> <td><code>skipNul</code></td> <td> <p>logical: should nuls be skipped when reading character fields?</p> </td> </tr> </table> "	FALSE
"search"	"base"	"Give Search Path for R Objects"	"<p>Gives a list of <code>attach</code>ed <em>packages</em> (see <code>library</code>), and <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects, usually <code>data.frames</code>. </p>"	"<pre>search() searchpaths() </pre>"	NA	FALSE
"seq"	"base"	"Sequence Generation"	"<p>Generate regular sequences.  <code>seq</code> is a standard generic with a default method.  <code>seq.int</code> is a primitive which can be much faster but has a few restrictions.  <code>seq_along</code> and <code>seq_len</code> are very fast primitives for two common cases. </p>"	"<pre>seq(...)<br />## Default S3 method: seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),<br />     length.out = NULL, along.with = NULL, ...)<br />seq.int(from, to, by, length.out, along.with, ...)<br />seq_along(along.with) seq_len(length.out) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from methods.</p> </td> </tr> <tr valign='top'> <td><code>from, to</code></td> <td> <p>the starting and (maximal) end values of the sequence.  Of length <code>1</code> unless just <code>from</code> is supplied as an unnamed argument.</p> </td> </tr> <tr valign='top'> <td><code>by</code></td> <td> <p>number: increment of the sequence.</p> </td> </tr> <tr valign='top'> <td><code>length.out</code></td> <td> <p>desired length of the sequence.  A non-negative number, which for <code>seq</code> and <code>seq.int</code> will be rounded up if fractional.</p> </td> </tr> <tr valign='top'> <td><code>along.with</code></td> <td> <p>take the length from the length of this argument.</p> </td> </tr> </table> "	FALSE
"seq.Date"	"base"	"Generate Regular Sequences of Dates"	"<p>The method for <code>seq</code> for objects of class class <code>'Date'</code> representing calendar dates. </p>"	"<pre>## S3 method for class 'Date' seq(from, to, by, length.out = NULL, along.with = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>from</code></td> <td> <p>starting date.  Required</p> </td> </tr> <tr valign='top'> <td><code>to</code></td> <td> <p>end date.  Optional.</p> </td> </tr> <tr valign='top'> <td><code>by</code></td> <td> <p>increment of the sequence.  Optional.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>length.out</code></td> <td> <p>integer, optional.  Desired length of the sequence.</p> </td> </tr> <tr valign='top'> <td><code>along.with</code></td> <td> <p>take the length from the length of this argument.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"seq.POSIXt"	"base"	"Generate Regular Sequences of Times"	"<p>The method for <code>seq</code> for date-time classes. </p>"	"<pre>## S3 method for class 'POSIXt' seq(from, to, by, length.out = NULL, along.with = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>from</code></td> <td> <p>starting date.  Required.</p> </td> </tr> <tr valign='top'> <td><code>to</code></td> <td> <p>end date.  Optional.</p> </td> </tr> <tr valign='top'> <td><code>by</code></td> <td> <p>increment of the sequence.  Optional.  See ‘Details’.</p> </td> </tr> <tr valign='top'> <td><code>length.out</code></td> <td> <p>integer, optional.  Desired length of the sequence.</p> </td> </tr> <tr valign='top'> <td><code>along.with</code></td> <td> <p>take the length from the length of this argument.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"sequence"	"base"	"Create A Vector of Sequences"	"<p>For each element of <code>nvec</code> the sequence <code>seq_len(nvec[i])</code> is created.  These are concatenated and the result returned. </p>"	"<pre>sequence(nvec) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>nvec</code></td> <td> <p>a non-negative integer vector each element of which specifies the end point of a sequence.</p> </td> </tr></table> "	FALSE
"serialize"	"base"	"Simple Serialization Interface"	"<p>A simple low-level interface for serializing to connections. </p>"	"<pre>serialize(object, connection, ascii, xdr = TRUE,<br />           version = NULL, refhook = NULL)<br />unserialize(connection, refhook = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p><span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object to serialize.</p> </td> </tr> <tr valign='top'> <td><code>connection</code></td> <td> <p>an open connection or (for <code>serialize</code>) <code>NULL</code> or (for <code>unserialize</code>) a raw vector (see ‘Details’).</p> </td> </tr> <tr valign='top'> <td><code>ascii</code></td> <td> <p>a logical.  If <code>TRUE</code> or <code>NA</code>, an ASCII representation is written; otherwise (default) a binary one. See also the comments in the help for <code>save</code>.</p> </td> </tr> <tr valign='top'> <td><code>xdr</code></td> <td> <p>a logical: if a binary representation is used, should a big-endian one (XDR) be used?</p> </td> </tr> <tr valign='top'> <td><code>version</code></td> <td> <p>the workspace format version to use.  <code>NULL</code> specifies the current default version (2).  Versions prior to 2 are not supported, so this will only be relevant when there are later versions.</p> </td> </tr> <tr valign='top'> <td><code>refhook</code></td> <td> <p>a hook function for handling reference objects.</p> </td> </tr> </table> "	FALSE
"setTimeLimit"	"base"	"Set CPU and/or Elapsed Time Limits"	"<p>Functions to set CPU and/or elapsed time limits for top-level computations or the current session. </p>"	"<pre>setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE)<br />setSessionTimeLimit(cpu = Inf, elapsed = Inf) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>cpu, elapsed</code></td> <td> <p>double (of length one).  Set a limit on the total or elapsed cpu time in seconds, respectively.</p> </td> </tr> <tr valign='top'> <td><code>transient</code></td> <td> <p>logical.  If <code>TRUE</code>, the limits apply only to the rest of the current computation.</p> </td> </tr> </table> "	FALSE
"system"	"base"	"Invoke a System Command"	"<p><code>system</code> invokes the OS command specified by <code>command</code>. </p>"	"<pre>system(command, intern = FALSE,<br />        ignore.stdout = FALSE, ignore.stderr = FALSE,<br />        wait = TRUE, input = NULL, show.output.on.console = TRUE,<br />        minimized = FALSE, invisible = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>command</code></td> <td> <p>the system command to be invoked, as a character string.</p> </td> </tr> <tr valign='top'> <td><code>intern</code></td> <td> <p>a logical (not <code>NA</code>) which indicates whether to capture the output of the command as an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> character vector.</p> </td> </tr> <tr valign='top'> <td><code>ignore.stdout, ignore.stderr</code></td> <td> <p>a logical (not <code>NA</code>) indicating whether messages written to ‘<span class='file'>stdout</span>’ or ‘<span class='file'>stderr</span>’ should be ignored.</p> </td> </tr> <tr valign='top'> <td><code>wait</code></td> <td> <p>a logical (not <code>NA</code>) indicating whether the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> interpreter should wait for the command to finish, or run it asynchronously.  This will be ignored (and the interpreter will always wait) if <code>intern = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>input</code></td> <td> <p>if a character vector is supplied, this is copied one string per line to a temporary file, and the standard input of <code>command</code> is redirected to the file.</p> </td> </tr> <tr valign='top'> <td><code>show.output.on.console, minimized, invisible</code></td> <td> <p>arguments that are accepted on Windows but ignored on this platform, with a warning.</p> </td> </tr> </table> "	FALSE
"shQuote"	"base"	"Quote Strings for Use in OS Shells"	"<p>Quote a string to be passed to an operating system shell. </p>"	"<pre>shQuote(string, type = c('sh', 'csh', 'cmd', 'cmd2')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>string</code></td> <td> <p>a character vector, usually of length one.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character: the type of shell quoting.  Partial matching is supported.  <code>'cmd'</code> and <code>'cmd2'</code> refer to the Windows shell. <code>'cmd'</code> is the default under Windows.</p> </td> </tr> </table> "	FALSE
"sign"	"base"	"Sign Function"	"<p><code>sign</code> returns a vector with the signs of the corresponding elements of <code>x</code> (the sign of a real number is 1, 0, or <i>-1</i> if the number is positive, zero, or negative, respectively). </p> <p>Note that <code>sign</code> does not operate on complex vectors. </p>"	"<pre>sign(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector</p> </td> </tr></table> "	FALSE
"Signals"	"base"	"Interrupting Execution of R"	"<p>On receiving <code>SIGUSR1</code> <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> will save the workspace and quit. <code>SIGUSR2</code> has the same result except that the <code>.Last</code> function and <code>on.exit</code> expressions will not be called. </p>"	"<pre>kill -USR1 pid kill -USR2 pid </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>pid</code></td> <td> <p>The process ID of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> process.</p> </td> </tr></table> "	FALSE
"sink"	"base"	"Send R Output to a File"	"<p><code>sink</code> diverts <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> output to a connection (and stops such diversions). </p> <p><code>sink.number()</code> reports how many diversions are in use. </p> <p><code>sink.number(type = 'message')</code> reports the number of the connection currently being used for error messages. </p>"	"<pre>sink(file = NULL, append = FALSE, type = c('output', 'message'),<br />      split = FALSE)<br />sink.number(type = c('output', 'message')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>a writable connection or a character string naming the file to write to, or <code>NULL</code> to stop sink-ing.</p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td> <p>logical.  If <code>TRUE</code>, output will be appended to <code>file</code>; otherwise, it will overwrite the contents of <code>file</code>.</p> </td> </tr> <tr valign='top'> <td><code>type</code></td> <td> <p>character string.  Either the output stream or the messages stream.  The name will be partially matched so can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>split</code></td> <td> <p>logical: if <code>TRUE</code>, output will be sent to the new sink and to the current output stream, like the Unix program <code>tee</code>.</p> </td> </tr> </table> "	FALSE
"slice.index"	"base"	"Slice Indexes in an Array"	"<p>Returns a matrix of integers indicating the number of their slice in a given array. </p>"	"<pre>slice.index(x, MARGIN) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an array.  If <code>x</code> has no dimension attribute, it is considered a one-dimensional array.</p> </td> </tr> <tr valign='top'> <td><code>MARGIN</code></td> <td> <p>an integer giving the dimension number to slice by.</p> </td> </tr> </table> "	FALSE
"socketSelect"	"base"	"Wait on Socket Connections"	"<p>Waits for the first of several socket connections to become available. </p>"	"<pre>socketSelect(socklist, write = FALSE, timeout = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>socklist</code></td> <td> <p>list of open socket connections</p> </td> </tr> <tr valign='top'> <td><code>write</code></td> <td> <p>logical.  If <code>TRUE</code> wait for corresponding socket to become available for writing; otherwise wait for it to become available for reading.</p> </td> </tr> <tr valign='top'> <td><code>timeout</code></td> <td> <p>numeric or <code>NULL</code>. Time in seconds to wait for a socket to become available; <code>NULL</code> means wait indefinitely.</p> </td> </tr> </table> "	FALSE
"solve"	"base"	"Solve a System of Equations"	"<p>This generic function solves the equation <code>a %*% x = b</code> for <code>x</code>, where <code>b</code> can be either a vector or a matrix. </p>"	"<pre>solve(a, b, ...)<br />## Default S3 method: solve(a, b, tol, LINPACK = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>a</code></td> <td> <p>a square numeric or complex matrix containing the coefficients of the linear system.  Logical matrices are coerced to numeric.</p> </td> </tr> <tr valign='top'> <td><code>b</code></td> <td> <p>a numeric or complex vector or matrix giving the right-hand side(s) of the linear system.  If missing, <code>b</code> is taken to be an identity matrix and <code>solve</code> will return the inverse of <code>a</code>.</p> </td> </tr> <tr valign='top'> <td><code>tol</code></td> <td> <p>the tolerance for detecting linear dependencies in the columns of <code>a</code>.  The default is <code>.Machine$double.eps</code>. Not currently used with complex matrices <code>a</code>.</p> </td> </tr> <tr valign='top'> <td><code>LINPACK</code></td> <td> <p>logical.  Defunct and ignored.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments passed to or from other methods</p> </td> </tr> </table> "	FALSE
"sort"	"base"	"Sorting or Ordering Vectors"	"<p>Sort (or <em>order</em>) a vector or factor (partially) into ascending or descending order.  For ordering along more than one variable, e.g., for sorting data frames, see <code>order</code>. </p>"	"<pre>sort(x, decreasing = FALSE, ...)<br />## Default S3 method: sort(x, decreasing = FALSE, na.last = NA, ...)<br />sort.int(x, partial = NULL, na.last = NA, decreasing = FALSE,<br />          method = c('shell', 'quick', 'radix'), index.return = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>for <code>sort</code> an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object with a class or a numeric, complex, character or logical vector.  For <code>sort.int</code>, a numeric, complex, character or logical vector, or a factor.</p> </td> </tr> <tr valign='top'> <td><code>decreasing</code></td> <td> <p>logical.  Should the sort be increasing or decreasing? For the <code>'radix'</code> method, this can be a vector of length equal to the number of arguments in <code>...</code>. For the other methods, it must be length one. Not available for partial sorting.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to or from methods or (for the default methods and objects without a class) to <code>sort.int</code>.</p> </td> </tr> <tr valign='top'> <td><code>na.last</code></td> <td> <p>for controlling the treatment of <code>NA</code>s. If <code>TRUE</code>, missing values in the data are put last; if <code>FALSE</code>, they are put first; if <code>NA</code>, they are removed.</p> </td> </tr> <tr valign='top'> <td><code>partial</code></td> <td> <p><code>NULL</code> or a  vector of indices for partial sorting.</p> </td> </tr> <tr valign='top'> <td><code>method</code></td> <td> <p>character string specifying the algorithm used.  Not available for partial sorting.  Can be abbreviated.</p> </td> </tr> <tr valign='top'> <td><code>index.return</code></td> <td> <p>logical indicating if the ordering index vector should be returned as well. Supported by <code>method == 'radix'</code> for any <code>na.last</code> mode and data type, and the other methods when <code>na.last = NA</code> (the default) and fully sorting non-factors.</p> </td> </tr> </table> "	FALSE
"source"	"base"	"Read R Code from a File or a Connection"	"<p><code>source</code> causes <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> to accept its input from the named file or URL or connection.  Input is read and <code>parse</code>d from that file until the end of the file is reached, then the parsed expressions are evaluated sequentially in the chosen environment. </p>"	"<pre>source(file, local = FALSE, echo = verbose, print.eval = echo,<br />        verbose = getOption('verbose'),<br />        prompt.echo = getOption('prompt'),<br />        max.deparse.length = 150, chdir = FALSE,<br />        encoding = getOption('encoding'),<br />        continue.echo = getOption('continue'),<br />        skip.echo = 0, keep.source = getOption('keep.source')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>a connection or a character string giving the pathname of the file or URL to read from.  <code>''</code> indicates the connection <code>stdin()</code>.</p> </td> </tr> <tr valign='top'> <td><code>local</code></td> <td> <p><code>TRUE</code>, <code>FALSE</code> or an environment, determining where the parsed expressions are evaluated.  <code>FALSE</code> (the default) corresponds to the user's workspace (the global environment) and <code>TRUE</code> to the environment from which <code>source</code> is called.</p> </td> </tr> <tr valign='top'> <td><code>echo</code></td> <td> <p>logical; if <code>TRUE</code>, each expression is printed after parsing, before evaluation.</p> </td> </tr> <tr valign='top'> <td><code>print.eval</code></td> <td> <p>logical; if <code>TRUE</code>, the result of <code>eval(i)</code> is printed for each expression <code>i</code>; defaults to the value of <code>echo</code>.</p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>if <code>TRUE</code>, more diagnostics (than just <code>echo = TRUE</code>) are printed during parsing and evaluation of input, including extra info for <b>each</b> expression.</p> </td> </tr> <tr valign='top'> <td><code>prompt.echo</code></td> <td> <p>character; gives the prompt to be used if <code>echo = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>max.deparse.length</code></td> <td> <p>integer; is used only if <code>echo</code> is <code>TRUE</code> and gives the maximal number of characters output for the deparse of a single expression.</p> </td> </tr> <tr valign='top'> <td><code>chdir</code></td> <td> <p>logical; if <code>TRUE</code> and <code>file</code> is a pathname, the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> working directory is temporarily changed to the directory containing <code>file</code> for evaluating.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>character vector.  The encoding(s) to be assumed when <code>file</code> is a character string: see <code>file</code>.  A possible value is <code>'unknown'</code> when the encoding is guessed: see the ‘Encodings’ section.</p> </td> </tr> <tr valign='top'> <td><code>continue.echo</code></td> <td> <p>character; gives the prompt to use on continuation lines if <code>echo = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>skip.echo</code></td> <td> <p>integer; how many comment lines at the start of the file to skip if <code>echo = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>keep.source</code></td> <td> <p>logical: should the source formatting be retained when echoing expressions, if possible?</p> </td> </tr> </table> "	FALSE
"split"	"base"	"Divide into Groups and Reassemble"	"<p><code>split</code> divides the data in the vector <code>x</code> into the groups defined by <code>f</code>.  The replacement forms replace values corresponding to such a division.  <code>unsplit</code> reverses the effect of <code>split</code>. </p>"	"<pre>split(x, f, drop = FALSE, ...) split(x, f, drop = FALSE, ...) &lt;- value unsplit(value, f, drop = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>vector or data frame containing values to be divided into groups.</p> </td> </tr> <tr valign='top'> <td><code>f</code></td> <td> <p>a ‘factor’ in the sense that <code>as.factor(f)</code> defines the grouping, or a list of such factors in which case their interaction is used for the grouping.</p> </td> </tr> <tr valign='top'> <td><code>drop</code></td> <td> <p>logical indicating if levels that do not occur should be dropped (if <code>f</code> is a <code>factor</code> or a list).</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a list of vectors or data frames compatible with a splitting of <code>x</code>. Recycling applies if the lengths do not match.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further potential arguments passed to methods.</p> </td> </tr> </table> "	FALSE
"stopifnot"	"base"	"Ensure the Truth of R Expressions"	"<p>If any of the expressions in <code>...</code> are not <code>all</code> <code>TRUE</code>, <code>stop</code> is called, producing an error message indicating the <em>first</em> of the elements of <code>...</code> which were not true. </p>"	"<pre>stopifnot(...) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>...</code></td> <td> <p>any number of (<code>logical</code>) <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expressions, which should evaluate to <code>TRUE</code>.</p> </td> </tr></table> "	FALSE
"strrep"	"base"	"Repeat the Elements of a Character Vector"	"<p>Repeat the character strings in a character vector a given number of times (i.e., concatenate the respective numbers of copies of the strings). </p>"	"<pre>strrep(x, times) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector, or an object which can be coerced to a character vector using <code>as.character</code>.</p> </td> </tr> <tr valign='top'> <td><code>times</code></td> <td> <p>an integer vector giving the (non-negative) numbers of times to repeat the respective elements of <code>x</code>.</p> </td> </tr> </table> "	FALSE
"strsplit"	"base"	"Split the Elements of a Character Vector"	"<p>Split the elements of a character vector <code>x</code> into substrings according to the matches to substring <code>split</code> within them. </p>"	"<pre>strsplit(x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td><br /><p>character vector, each element of which is to be split.  Other inputs, including a factor, will give an error. </p> </td> </tr> <tr valign='top'> <td><code>split</code></td> <td><br /><p>character vector (or object which can be coerced to such) containing regular expression(s) (unless <code>fixed = TRUE</code>) to use for splitting.  If empty matches occur, in particular if <code>split</code> has length 0, <code>x</code> is split into single characters. If <code>split</code> has length greater than 1, it is re-cycled along <code>x</code>. </p> </td> </tr> <tr valign='top'> <td><code>fixed</code></td> <td><br /><p>logical.  If <code>TRUE</code> match <code>split</code> exactly, otherwise use regular expressions.  Has priority over <code>perl</code>. </p> </td> </tr> <tr valign='top'> <td><code>perl</code></td> <td> <p>logical.  Should Perl-compatible regexps be used?</p> </td> </tr> <tr valign='top'> <td><code>useBytes</code></td> <td> <p>logical.  If <code>TRUE</code> the matching is done byte-by-byte rather than character-by-character, and inputs with marked encodings are not converted.  This is forced (with a warning) if any input is found which is marked as <code>'bytes'</code> (see <code>Encoding</code>).</p> </td> </tr> </table> "	FALSE
"strtoi"	"base"	"Convert Strings to Integers"	"<p>Convert strings to integers according to the given base using the C function <code>strtol</code>, or choose a suitable base following the C rules. </p>"	"<pre>strtoi(x, base = 0L)</pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector, or something coercible to this by <code>as.character</code>.</p> </td> </tr> <tr valign='top'> <td><code>base</code></td> <td> <p>an integer which is between 2 and 36 inclusive, or zero (default).</p> </td> </tr> </table> "	FALSE
"strtrim"	"base"	"Trim Character Strings to Specified Display Widths"	"<p>Trim character strings to specified display widths. </p>"	"<pre>strtrim(x, width) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector, or an object which can be coerced to a character vector by <code>as.character</code>.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>Positive integer values: recycled to the length of <code>x</code>.</p> </td> </tr> </table> "	FALSE
"structure"	"base"	"Attribute Specification"	"<p><code>structure</code> returns the given object with further attributes set. </p>"	"<pre>structure(.Data, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>.Data</code></td> <td> <p>an object which will have various attributes attached to it.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>attributes, specified in <code>tag = value</code> form, which will be attached to data.</p> </td> </tr> </table> "	FALSE
"strwrap"	"base"	"Wrap Character Strings to Format Paragraphs"	"<p>Each character string in the input is first split into paragraphs (or lines containing whitespace only).  The paragraphs are then formatted by breaking lines at word boundaries.  The target columns for wrapping lines and the indentation of the first and all subsequent lines of a paragraph can be controlled independently. </p>"	"<pre>strwrap(x, width = 0.9 * getOption('width'), indent = 0,<br />         exdent = 0, prefix = '', simplify = TRUE, initial = prefix) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector, or an object which can be converted to a character vector by <code>as.character</code>.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>a positive integer giving the target column for wrapping lines in the output.</p> </td> </tr> <tr valign='top'> <td><code>indent</code></td> <td> <p>a non-negative integer giving the indentation of the first line in a paragraph.</p> </td> </tr> <tr valign='top'> <td><code>exdent</code></td> <td> <p>a non-negative integer specifying the indentation of subsequent lines in paragraphs.</p> </td> </tr> <tr valign='top'> <td><code>prefix, initial</code></td> <td> <p>a character string to be used as prefix for each line except the first, for which <code>initial</code> is used.</p> </td> </tr> <tr valign='top'> <td><code>simplify</code></td> <td> <p>a logical.  If <code>TRUE</code>, the result is a single character vector of line text; otherwise, it is a list of the same length as <code>x</code> the elements of which are character vectors of line text obtained from the corresponding element of <code>x</code>. (Hence, the result in the former case is obtained by unlisting that of the latter.)</p> </td> </tr> </table> "	FALSE
"subset"	"base"	"Subsetting Vectors, Matrices and Data Frames"	"<p>Return subsets of vectors, matrices or data frames which meet conditions. </p>"	"<pre>subset(x, ...)<br />## Default S3 method: subset(x, subset, ...)<br />## S3 method for class 'matrix' subset(x, subset, select, drop = FALSE, ...)<br />## S3 method for class 'data.frame' subset(x, subset, select, drop = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>object to be subsetted.</p> </td> </tr> <tr valign='top'> <td><code>subset</code></td> <td> <p>logical expression indicating elements or rows to keep: missing values are taken as false.</p> </td> </tr> <tr valign='top'> <td><code>select</code></td> <td> <p>expression, indicating columns to select from a data frame.</p> </td> </tr> <tr valign='top'> <td><code>drop</code></td> <td> <p>passed on to <code>[</code> indexing operator.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>further arguments to be passed to or from other methods.</p> </td> </tr> </table> "	FALSE
"substr"	"base"	"Substrings of a Character Vector"	"<p>Extract or replace substrings in a character vector. </p>"	"<pre>substr(x, start, stop) substring(text, first, last = 1000000L) substr(x, start, stop) &lt;- value substring(text, first, last = 1000000L) &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x, text</code></td> <td> <p>a character vector.</p> </td> </tr> <tr valign='top'> <td><code>start, first</code></td> <td> <p>integer.  The first element to be replaced.</p> </td> </tr> <tr valign='top'> <td><code>stop, last</code></td> <td> <p>integer.  The last element to be replaced.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>a character vector, recycled if necessary.</p> </td> </tr> </table> "	FALSE
"sum"	"base"	"Sum of Vector Elements"	"<p><code>sum</code> returns the sum of all the values present in its arguments. </p>"	"<pre>sum(..., na.rm = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>numeric or complex or logical vectors.</p> </td> </tr> <tr valign='top'> <td><code>na.rm</code></td> <td> <p>logical.  Should missing values (including <code>NaN</code>) be removed?</p> </td> </tr> </table> "	FALSE
"warning"	"base"	"Warning Messages"	"<p>Generates a warning message that corresponds to its argument(s) and (optionally) the expression or function from which it was called. </p>"	"<pre>warning(..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE,<br />         domain = NULL) suppressWarnings(expr) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>zero or more objects which can be coerced to character (and which are pasted together with no separator) or a single condition object.</p> </td> </tr> <tr valign='top'> <td><code>call.</code></td> <td> <p>logical, indicating if the call should become part of the warning message.</p> </td> </tr> <tr valign='top'> <td><code>immediate.</code></td> <td> <p>logical, indicating if the call should be output immediately, even if <code>getOption('warn') &lt;= 0</code>.</p> </td> </tr> <tr valign='top'> <td><code>noBreaks.</code></td> <td> <p>logical, indicating as far as possible the message should be output as a single line when <code>options(warn = 1)</code>.</p> </td> </tr> <tr valign='top'> <td><code>expr</code></td> <td> <p>expression to evaluate.</p> </td> </tr> <tr valign='top'> <td><code>domain</code></td> <td> <p>see <code>gettext</code>.  If <code>NA</code>, messages will not be translated, see also the note in <code>stop</code>.</p> </td> </tr> </table> "	FALSE
"sweep"	"base"	"Sweep out Array Summaries"	"<p>Return an array obtained from an input array by sweeping out a summary statistic. </p>"	"<pre>sweep(x, MARGIN, STATS, FUN = '-', check.margin = TRUE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an array.</p> </td> </tr> <tr valign='top'> <td><code>MARGIN</code></td> <td> <p>a vector of indices giving the extent(s) of <code>x</code> which correspond to <code>STATS</code>.</p> </td> </tr> <tr valign='top'> <td><code>STATS</code></td> <td> <p>the summary statistic which is to be swept out.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>the function to be used to carry out the sweep.</p> </td> </tr> <tr valign='top'> <td><code>check.margin</code></td> <td> <p>logical.  If <code>TRUE</code> (the default), warn if the length or dimensions of <code>STATS</code> do not match the specified dimensions of <code>x</code>.  Set to <code>FALSE</code> for a small speed gain when you <em>know</em> that dimensions match.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional arguments to <code>FUN</code>.</p> </td> </tr> </table> "	FALSE
"switch"	"base"	"Select One of a List of Alternatives"	"<p><code>switch</code> evaluates <code>EXPR</code> and accordingly chooses one of the further arguments (in <code>...</code>). </p>"	"<pre>switch(EXPR, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>EXPR</code></td> <td> <p>an expression evaluating to a number or a character string.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>the list of alternatives.  If it is intended that <code>EXPR</code> has a character-string value these will be named, perhaps except for one alternative to be used as a ‘default’ value.</p> </td> </tr> </table> "	FALSE
"Syntax"	"base"	"Operator Syntax and Precedence"	"<p>Outlines <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> syntax and gives the precedence of operators. </p>"	NA	NA	FALSE
"Sys.time"	"base"	"Get Current Date and Time"	"<p><code>Sys.time</code> and <code>Sys.Date</code> returns the system's idea of the current date with and without time. </p>"	"<pre>Sys.time() Sys.Date() </pre>"	NA	FALSE
"Sys.getenv"	"base"	"Get Environment Variables"	"<p><code>Sys.getenv</code> obtains the values of the environment variables. </p>"	"<pre>Sys.getenv(x = NULL, unset = '', names = NA) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector, or <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>unset</code></td> <td> <p>a character string.</p> </td> </tr> <tr valign='top'> <td><code>names</code></td> <td> <p>logical: should the result be named?  If <code>NA</code> (the default) single-element results are not named whereas multi-element results are.</p> </td> </tr> </table> "	FALSE
"Sys.getpid"	"base"	"Get the Process ID of the R Session"	"<p>Get the process ID of the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> Session.  It is guaranteed by the operating system that two <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> sessions running simultaneously will have different IDs, but it is possible that <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> sessions running at different times will have the same ID. </p>"	"<pre>Sys.getpid() </pre>"	NA	FALSE
"Sys.glob"	"base"	"Wildcard Expansion on File Paths"	"<p>Function to do wildcard expansion (also known as ‘globbing’) on file paths. </p>"	"<pre>Sys.glob(paths, dirmark = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>paths</code></td> <td> <p>character vector of patterns for relative or absolute filepaths.  Missing values will be ignored.</p> </td> </tr> <tr valign='top'> <td><code>dirmark</code></td> <td> <p>logical: should matches to directories from patterns that do not already end in <code>/</code> have a slash appended?  May not be supported on all platforms.</p> </td> </tr> </table> "	FALSE
"Sys.info"	"base"	"Extract System and User Information"	"<p>Reports system and user information. </p>"	"<pre>Sys.info() </pre>"	NA	FALSE
"Sys.readlink"	"base"	"Read File Symbolic Links"	"<p>Find out if a file path is a symbolic link, and if so what it is linked to, <em>via</em> the system call <code>readlink</code>. </p> <p>Symbolic links are a POSIX concept, not implemented on Windows but for most filesystems on Unix-alikes. </p>"	"<pre>Sys.readlink(paths) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>paths</code></td> <td> <p>character vector of file paths.  Tilde expansion is done: see <code>path.expand</code>.</p> </td> </tr></table> "	FALSE
"Sys.setenv"	"base"	"Set or Unset Environment Variables"	"<p><code>Sys.setenv</code> sets environment variables (for other processes called from within <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> or future calls to <code>Sys.getenv</code> from this <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> process). </p> <p><code>Sys.unsetenv</code> removes environment variables. </p>"	"<pre>Sys.setenv(...)<br />Sys.unsetenv(x) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>named arguments with values coercible to a character string.</p> </td> </tr> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector, or an object coercible to character.</p> </td> </tr> </table> "	FALSE
"Sys.setFileTime"	"base"	"Set File Time"	"<p>Uses system calls to set the times on a file or directory. </p>"	"<pre>Sys.setFileTime(path, time) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>path</code></td> <td><br /><p>A length-one character vector specifying the path to a file or directory. </p> </td> </tr> <tr valign='top'> <td><code>time</code></td> <td><br /><p>A date-time of class <code>'POSIXct'</code> or an object which can be coerced to one.  Fractions of a second are ignored (prior to <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> 3.4.0). </p> </td> </tr> </table> "	FALSE
"Sys.sleep"	"base"	"Suspend Execution for a Time Interval"	"<p>Suspend execution of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expressions for a specified time interval. </p>"	"<pre>Sys.sleep(time) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>time</code></td> <td> <p>The time interval to suspend execution for, in seconds.</p> </td> </tr></table> "	FALSE
"sys.source"	"base"	"Parse and Evaluate Expressions from a File"	"<p>Parses expressions in the given file, and then successively evaluates them in the specified environment. </p>"	"<pre>sys.source(file, envir = baseenv(), chdir = FALSE,<br />            keep.source = getOption('keep.source.pkgs')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>file</code></td> <td> <p>a character string naming the file to be read from</p> </td> </tr> <tr valign='top'> <td><code>envir</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object specifying the environment in which the expressions are to be evaluated.  May also be a list or an integer. The default value <code>NULL</code> corresponds to evaluation in the base environment.  This is probably not what you want; you should typically supply an explicit <code>envir</code> argument.</p> </td> </tr> <tr valign='top'> <td><code>chdir</code></td> <td> <p>logical; if <code>TRUE</code>, the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> working directory is changed to the directory containing <code>file</code> for evaluating.</p> </td> </tr> <tr valign='top'> <td><code>keep.source</code></td> <td> <p>logical.  If <code>TRUE</code>, functions keep their source including comments, see <code>options(keep.source = *)</code> for more details.</p> </td> </tr> </table> "	FALSE
"Sys.which"	"base"	"Find Full Paths to Executables"	"<p>This is an interface to the system command <code>which</code>, or to an emulation on Windows. </p>"	"<pre>Sys.which(names) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>names</code></td> <td> <p>Character vector of names or paths of possible executables.</p> </td> </tr></table> "	FALSE
"system.file"	"base"	"Find Names of R System Files"	"<p>Finds the full file names of files in packages etc. </p>"	"<pre>system.file(..., package = 'base', lib.loc = NULL,<br />             mustWork = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>...</code></td> <td> <p>character vectors, specifying subdirectory and file(s) within some package.  The default, none, returns the root of the package.  Wildcards are not supported.</p> </td> </tr> <tr valign='top'> <td><code>package</code></td> <td> <p>a character string with the name of a single package. An error occurs if more than one package name is given.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector with path names of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> libraries. See ‘Details’ for the meaning of the default value of <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>mustWork</code></td> <td> <p>logical.  If <code>TRUE</code>, an error is given if there are no matching files.</p> </td> </tr> </table> "	FALSE
"system.time"	"base"	"CPU Time Used"	"<p>Return CPU (and other) times that <code>expr</code> used. </p>"	"<pre>system.time(expr, gcFirst = TRUE) unix.time(expr, gcFirst = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>Valid <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expression to be timed.</p> </td> </tr> <tr valign='top'> <td><code>gcFirst</code></td> <td> <p>Logical - should a garbage collection be performed immediately before the timing?  Default is <code>TRUE</code>.</p> </td> </tr> </table> "	FALSE
"system2"	"base"	"Invoke a System Command"	"<p><code>system2</code> invokes the OS command specified by <code>command</code>. </p>"	"<pre>system2(command, args = character(),<br />         stdout = '', stderr = '', stdin = '', input = NULL,<br />         env = character(), wait = TRUE,<br />         minimized = FALSE, invisible = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>command</code></td> <td> <p>the system command to be invoked, as a character string.</p> </td> </tr> <tr valign='top'> <td><code>args</code></td> <td> <p>a character vector of arguments to <code>command</code>.</p> </td> </tr> <tr valign='top'> <td><code>stdout, stderr</code></td> <td> <p>where output to ‘<span class='file'>stdout</span>’ or ‘<span class='file'>stderr</span>’ should be sent.  Possible values are <code>''</code>, to the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> console (the default), <code>NULL</code> or <code>FALSE</code> (discard output), <code>TRUE</code> (capture the output in a character vector) or a character string naming a file.</p> </td> </tr> <tr valign='top'> <td><code>stdin</code></td> <td> <p>should input be diverted?  <code>''</code> means the default, alternatively a character string naming a file.  Ignored if <code>input</code> is supplied.</p> </td> </tr> <tr valign='top'> <td><code>input</code></td> <td> <p>if a character vector is supplied, this is copied one string per line to a temporary file, and the standard input of <code>command</code> is redirected to the file.</p> </td> </tr> <tr valign='top'> <td><code>env</code></td> <td> <p>character vector of name=value strings to set environment variables.</p> </td> </tr> <tr valign='top'> <td><code>wait</code></td> <td> <p>a logical (not <code>NA</code>) indicating whether the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> interpreter should wait for the command to finish, or run it asynchronously.  This will be ignored (and the interpreter will always wait) if <code>stdout = TRUE</code>.</p> </td> </tr> <tr valign='top'> <td><code>minimized, invisible</code></td> <td> <p>arguments that are accepted on Windows but ignored on this platform, with a warning.</p> </td> </tr> </table> "	FALSE
"t"	"base"	"Matrix Transpose"	"<p>Given a matrix or <code>data.frame</code> <code>x</code>, <code>t</code> returns the transpose of <code>x</code>. </p>"	"<pre>t(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>a matrix or data frame, typically.</p> </td> </tr></table> "	FALSE
"tabulate"	"base"	"Tabulation for Vectors"	"<p><code>tabulate</code> takes the integer-valued vector <code>bin</code> and counts the number of times each integer occurs in it. </p>"	"<pre>tabulate(bin, nbins = max(1, bin, na.rm = TRUE)) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>bin</code></td> <td> <p>a numeric vector (of positive integers), or a factor. Long vectors are supported.</p> </td> </tr> <tr valign='top'> <td><code>nbins</code></td> <td> <p>the number of bins to be used.</p> </td> </tr> </table> "	FALSE
"tapply"	"base"	"Apply a Function Over a Ragged Array"	"<p>Apply a function to each cell of a ragged array, that is to each (non-empty) group of values given by a unique combination of the levels of certain factors. </p>"	"<pre>tapply(X, INDEX, FUN = NULL, ..., simplify = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>X</code></td> <td> <p>an atomic object, typically a vector.</p> </td> </tr> <tr valign='top'> <td><code>INDEX</code></td> <td> <p>a <code>list</code> of one or more <code>factor</code>s, each of same length as <code>X</code>.  The elements are coerced to factors by <code>as.factor</code>.</p> </td> </tr> <tr valign='top'> <td><code>FUN</code></td> <td> <p>the function to be applied, or <code>NULL</code>.  In the case of functions like <code>+</code>, <code>%*%</code>, etc., the function name must be backquoted or quoted.  If <code>FUN</code> is <code>NULL</code>, tapply returns a vector which can be used to subscript the multi-way array <code>tapply</code> normally produces.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>optional arguments to <code>FUN</code>: the Note section.</p> </td> </tr> <tr valign='top'> <td><code>simplify</code></td> <td> <p>logical; if <code>FALSE</code>, <code>tapply</code> always returns an array of mode <code>'list'</code>; in other words, a <code>list</code> with a <code>dim</code> attribute.  If <code>TRUE</code> (the default), then if <code>FUN</code> always returns a scalar, <code>tapply</code> returns an array with the mode of the scalar.</p> </td> </tr> </table> "	FALSE
"taskCallbackManager"	"base"	"Create an R-level Task Callback Manager"	"<p>This provides an entirely S-language mechanism for managing callbacks or actions  that are invoked at the conclusion of each top-level task.  Essentially, we register a single R function from this manager with the underlying, native task-callback mechanism and this function handles invoking the other R callbacks under the control of the manager. The manager consists of a collection of functions that access shared variables to manage the list of user-level callbacks. </p>"	"<pre>taskCallbackManager(handlers = list(), registered = FALSE,<br />                     verbose = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>handlers</code></td> <td> <p>this can be a list of callbacks in which each element is a list with  an element  named <code>'f'</code> which is a callback function, and an optional element named <code>'data'</code> which is the 5-th argument to be supplied  to the callback when it is invoked. Typically this argument is not specified, and one uses <code>add</code> to register callbacks after the manager is created.</p> </td> </tr> <tr valign='top'> <td><code>registered</code></td> <td> <p>a logical value indicating whether the <code>evaluate</code> function has already been registered with the internal task callback mechanism. This is usually <code>FALSE</code> and the first time a callback is added via the <code>add</code> function, the <code>evaluate</code> function is automatically registered. One can control when the function is registered by specifying <code>TRUE</code> for this argument and calling <code>addTaskCallback</code> manually. </p> </td> </tr> <tr valign='top'> <td><code>verbose</code></td> <td> <p>a logical value, which if <code>TRUE</code>, causes information to be printed to the console about certain activities this dispatch manager performs. This is useful for debugging callbacks and the handler itself. </p> </td> </tr> </table> "	FALSE
"tempfile"	"base"	"Create Names for Temporary Files"	"<p><code>tempfile</code> returns a vector of character strings which can be used as names for temporary files. </p>"	"<pre>tempfile(pattern = 'file', tmpdir = tempdir(), fileext = '') tempdir() </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pattern</code></td> <td> <p>a non-empty character vector giving the initial part of the name.</p> </td> </tr> <tr valign='top'> <td><code>tmpdir</code></td> <td> <p>a non-empty character vector giving the directory name</p> </td> </tr> <tr valign='top'> <td><code>fileext</code></td> <td> <p>a non-empty character vector giving the file extension</p> </td> </tr> </table> "	FALSE
"textconnections"	"base"	"Text Connections"	"<p>Input and output text connections. </p>"	"<pre>textConnection(object, open = 'r', local = FALSE,<br />                encoding = c('', 'bytes', 'UTF-8'))<br />textConnectionValue(con) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>character.  A description of the connection. For an input this is an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> character vector object, and for an output connection the name for the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> character vector to receive the output, or <code>NULL</code> (for none). </p> </td> </tr> <tr valign='top'> <td><code>open</code></td> <td> <p>character string.  Either <code>'r'</code> (or equivalently <code>''</code>) for an input connection or <code>'w'</code> or <code>'a'</code> for an output connection.</p> </td> </tr> <tr valign='top'> <td><code>local</code></td> <td> <p>logical.  Used only for output connections.  If <code>TRUE</code>, output is assigned to a variable in the calling environment.  Otherwise the global environment is used.</p> </td> </tr> <tr valign='top'> <td><code>encoding</code></td> <td> <p>character string, partially matched.  Used only for input connections.  How marked strings in <code>object</code> should be handled: converted to the current locale, used byte-by-byte or translated to UTF-8.</p> </td> </tr> <tr valign='top'> <td><code>con</code></td> <td> <p>An output text connection.</p> </td> </tr> </table> "	FALSE
"tilde"	"base"	"Tilde Operator"	"<p>Tilde is used to separate the left- and right-hand sides in a model formula. </p>"	"<pre>y ~ model </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>y, model</code></td> <td> <p>symbolic expressions.</p> </td> </tr></table> "	FALSE
"ns-topenv"	"base"	"Top Level Environment"	"<p>Finding the top level <code>environment</code> from an environment <code>envir</code> and its enclosing environments. </p>"	"<pre>topenv(envir = parent.frame(),<br />        matchThisEnv = getOption('topLevelEnvironment')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>envir</code></td> <td> <p>environment.</p> </td> </tr> <tr valign='top'> <td><code>matchThisEnv</code></td> <td> <p>return this environment, if it matches before any other criterion is satisfied.  The default, the option <span class='samp'>topLevelEnvironment</span>, is set by <code>sys.source</code>, which treats a specific environment as the top level environment. Supplying the argument as <code>NULL</code> means it will never match.</p> </td> </tr> </table> "	FALSE
"toString"	"base"	"Convert an R Object to a Character String"	"<p>This is a helper function for <code>format</code> to produce a single character string describing an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object. </p>"	"<pre>toString(x, ...)<br />## Default S3 method: toString(x, width = NULL, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>The object to be converted.</p> </td> </tr> <tr valign='top'> <td><code>width</code></td> <td> <p>Suggestion for the maximum field width.  Values of <code>NULL</code> or <code>0</code> indicate no maximum. The minimum value accepted is 6 and smaller values are taken as 6.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Optional arguments passed to or from methods.</p> </td> </tr> </table> "	FALSE
"traceback"	"base"	"Get and Print Call Stacks"	"<p>By default <code>traceback()</code> prints the call stack of the last uncaught error, i.e., the sequence of calls that lead to the error. This is useful when an error occurs with an unidentifiable error message.  It can also be used to print the current stack or arbitrary lists of deparsed calls. </p> <p><code>.traceback()</code> now <em>returns</em> the above call stack (and <code>traceback(x, *)</code> can be regarded as convenience function for printing the result of <code>.traceback(x)</code>). </p>"	"<pre>traceback(x = NULL, max.lines = getOption('deparse.max.lines')) .traceback(x = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p><code>NULL</code> (default, meaning <code>.Traceback</code>), or an integer count of calls to skip in the current stack, or a list or pairlist of deparsed calls.  See the details.</p> </td> </tr> <tr valign='top'> <td><code>max.lines</code></td> <td> <p>The maximum number of lines to be printed <em>per call</em>.  The default is unlimited.</p> </td> </tr> </table> "	FALSE
"transform"	"base"	"Transform an Object, for Example a Data Frame"	"<p><code>transform</code> is a generic function, which—at least currently—only does anything useful with data frames.  <code>transform.default</code> converts its first argument to a data frame if possible and calls <code>transform.data.frame</code>. </p>"	"<pre>transform(`_data`, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>_data</code></td> <td> <p>The object to be transformed</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>Further arguments of the form <code>tag=value</code></p> </td> </tr> </table> "	FALSE
"trimws"	"base"	"Remove Leading/Trailing Whitespace"	"<p>Remove leading and/or trailing whitespace from character strings. </p>"	"<pre>trimws(x, which = c('both', 'left', 'right')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector</p> </td> </tr> <tr valign='top'> <td><code>which</code></td> <td> <p>a character string specifying whether to remove both leading and trailing whitespace (default), or only leading (<code>'left'</code>) or trailing (<code>'right'</code>).  Can be abbreviated.</p> </td> </tr> </table> "	FALSE
"try"	"base"	"Try an Expression Allowing Error Recovery"	"<p><code>try</code> is a wrapper to run an expression that might fail and allow the user's code to handle error-recovery. </p>"	"<pre>try(expr, silent = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>expr</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expression to try.</p> </td> </tr> <tr valign='top'> <td><code>silent</code></td> <td> <p>logical: should the report of error messages be suppressed?</p> </td> </tr> </table> "	FALSE
"typeof"	"base"	"The Type of an Object"	"<p><code>typeof</code> determines the (<span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> internal) type or storage mode of any object </p>"	"<pre>typeof(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>any <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr></table> "	FALSE
"unique"	"base"	"Extract Unique Elements"	"<p><code>unique</code> returns a vector, data frame or array like <code>x</code> but with duplicate elements/rows removed. </p>"	"<pre>unique(x, incomparables = FALSE, ...)<br />## Default S3 method: unique(x, incomparables = FALSE, fromLast = FALSE,<br />         nmax = NA, ...)<br />## S3 method for class 'matrix' unique(x, incomparables = FALSE, MARGIN = 1,<br />        fromLast = FALSE, ...)<br />## S3 method for class 'array' unique(x, incomparables = FALSE, MARGIN = 1,<br />        fromLast = FALSE, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a vector or a data frame or an array or <code>NULL</code>.</p> </td> </tr> <tr valign='top'> <td><code>incomparables</code></td> <td> <p>a vector of values that cannot be compared. <code>FALSE</code> is a special value, meaning that all values can be compared, and may be the only value accepted for methods other than the default.  It will be coerced internally to the same type as <code>x</code>.</p> </td> </tr> <tr valign='top'> <td><code>fromLast</code></td> <td> <p>logical indicating if duplication should be considered from the last, i.e., the last (or rightmost) of identical elements will be kept.  This only matters for <code>names</code> or <code>dimnames</code>.</p> </td> </tr> <tr valign='top'> <td><code>nmax</code></td> <td> <p>the maximum number of unique items expected (greater than one). See <code>duplicated</code>.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments for particular methods.</p> </td> </tr> <tr valign='top'> <td><code>MARGIN</code></td> <td> <p>the array margin to be held fixed: a single integer.</p> </td> </tr> </table> "	FALSE
"unlink"	"base"	"Delete Files and Directories"	"<p><code>unlink</code> deletes the file(s) or directories specified by <code>x</code>. </p>"	"<pre>unlink(x, recursive = FALSE, force = FALSE)</pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a character vector with the names of the file(s) or directories to be deleted. Wildcards (normally ‘<span class='file'>*</span>’ and ‘<span class='file'>?</span>’) are allowed.</p> </td> </tr> <tr valign='top'> <td><code>recursive</code></td> <td> <p>logical.  Should directories be deleted recursively?</p> </td> </tr> <tr valign='top'> <td><code>force</code></td> <td> <p>logical.  Should permissions be changed (if possible) to allow the file or directory to be removed?</p> </td> </tr> </table> "	FALSE
"unlist"	"base"	"Flatten Lists"	"<p>Given a list structure <code>x</code>, <code>unlist</code> simplifies it to produce a vector which contains all the atomic components which occur in <code>x</code>. </p>"	"<pre>unlist(x, recursive = TRUE, use.names = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object, typically a list or vector.</p> </td> </tr> <tr valign='top'> <td><code>recursive</code></td> <td> <p>logical.  Should unlisting be applied to list components of <code>x</code>?</p> </td> </tr> <tr valign='top'> <td><code>use.names</code></td> <td> <p>logical.  Should names be preserved?</p> </td> </tr> </table> "	FALSE
"unname"	"base"	"Remove names or dimnames"	"<p>Remove the <code>names</code> or <code>dimnames</code> attribute of an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object. </p>"	"<pre>unname(obj, force = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>obj</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr> <tr valign='top'> <td><code>force</code></td> <td> <p>logical; if true, the <code>dimnames</code> (names and row names) are removed even from <code>data.frame</code>s.</p> </td> </tr> </table> "	FALSE
"validUTF8"	"base"	"Check if a Character Vector is Validly Encoded"	"<p>Check if each element of a character vector is valid in its implied encoding. </p>"	"<pre>validUTF8(x)<br />validEnc(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>A character vector.</p> </td> </tr></table> "	FALSE
"Vectorize"	"base"	"Vectorize a Scalar Function"	"<p><code>Vectorize</code> creates a function wrapper that vectorizes the action of its argument <code>FUN</code>. </p>"	"<pre>Vectorize(FUN, vectorize.args = arg.names, SIMPLIFY = TRUE,<br />           USE.NAMES = TRUE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>FUN</code></td> <td> <p>function to apply, found via <code>match.fun</code>.</p> </td> </tr> <tr valign='top'> <td><code>vectorize.args</code></td> <td> <p>a character vector of arguments which should be vectorized.  Defaults to all arguments of <code>FUN</code>.</p> </td> </tr> <tr valign='top'> <td><code>SIMPLIFY</code></td> <td> <p>logical or character string; attempt to reduce the result to a vector, matrix or higher dimensional array; see the <code>simplify</code> argument of <code>sapply</code>.</p> </td> </tr> <tr valign='top'> <td><code>USE.NAMES</code></td> <td> <p>logical; use names if the first ... argument has names, or if it is a character vector, use that character vector as the names.</p> </td> </tr> </table> "	FALSE
"which.min"	"base"	"Where is the Min() or Max() or first TRUE or FALSE ?"	"<p>Determines the location, i.e., index of the (first) minimum or maximum of a numeric (or logical) vector. </p>"	"<pre>which.min(x) which.max(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>numeric (logical, integer or double) vector or an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object for which the internal coercion to <code>double</code> works whose <code>min</code> or <code>max</code> is searched for.</p> </td> </tr></table> "	FALSE
"with"	"base"	"Evaluate an Expression in a Data Environment"	"<p>Evaluate an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expression in an environment constructed from data, possibly modifying (a copy of) the original data. </p>"	"<pre>with(data, expr, ...) within(data, expr, ...) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>data</code></td> <td> <p>data to use for constructing an environment. For the default <code>with</code> method this may be an environment, a list, a data frame, or an integer as in <code>sys.call</code>. For <code>within</code>, it can be a list or a data frame.</p> </td> </tr> <tr valign='top'> <td><code>expr</code></td> <td> <p>expression to evaluate.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to future methods.</p> </td> </tr> </table> "	FALSE
"withVisible"	"base"	"Return both a value and its visibility"	"<p>This function evaluates an expression, returning it in a two element list containing its value and a flag showing whether it would automatically print. </p>"	"<pre>withVisible(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p> An expression to be evaluated. </p> </td> </tr></table> "	FALSE
"write"	"base"	"Write Data to a File"	"<p>The data (usually a matrix) <code>x</code> are written to file <code>file</code>. If <code>x</code> is a two-dimensional matrix you need to transpose it to get the columns in <code>file</code> the same as those in the internal representation. </p>"	"<pre>write(x, file = 'data',<br />       ncolumns = if(is.character(x)) 1 else 5,<br />       append = FALSE, sep = ' ') </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>the data to be written out, usually an atomic vector.</p> </td> </tr> <tr valign='top'> <td><code>file</code></td> <td> <p>A connection, or a character string naming the file to write to. If <code>''</code>, print to the standard output connection. If it is <code>'|cmd'</code>, the output is piped to the command given by ‘<span class='file'>cmd</span>’. </p> </td> </tr> <tr valign='top'> <td><code>ncolumns</code></td> <td> <p>the number of columns to write the data in.</p> </td> </tr> <tr valign='top'> <td><code>append</code></td> <td> <p>if <code>TRUE</code> the data <code>x</code> are appended to the connection.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>a string used to separate columns.  Using <code>sep = '\t'</code> gives tab delimited output; default is <code>' '</code>.</p> </td> </tr> </table> "	FALSE
"writeLines"	"base"	"Write Lines to a Connection"	"<p>Write text lines to a connection. </p>"	"<pre>writeLines(text, con = stdout(), sep = '\n', useBytes = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>text</code></td> <td> <p>A character vector</p> </td> </tr> <tr valign='top'> <td><code>con</code></td> <td> <p>A connection object or a character string.</p> </td> </tr> <tr valign='top'> <td><code>sep</code></td> <td> <p>character string.  A string to be written to the connection after each line of text.</p> </td> </tr> <tr valign='top'> <td><code>useBytes</code></td> <td> <p>logical.  See ‘Details’.</p> </td> </tr> </table> "	FALSE
"xtfrm"	"base"	"Auxiliary Function for Sorting and Ranking"	"<p>A generic auxiliary function that produces a numeric vector which will sort in the same order as <code>x</code>. </p>"	"<pre>xtfrm(x) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>x</code></td> <td> <p>an <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> object.</p> </td> </tr></table> "	FALSE
"zapsmall"	"base"	"Rounding of Numbers"	"<p><code>zapsmall</code> determines a <code>digits</code> argument <code>dr</code> for calling <code>round(x, digits = dr)</code> such that values close to zero (compared with the maximal absolute value) are ‘zapped’, i.e., treated as <code>0</code>. </p>"	"<pre>zapsmall(x, digits = getOption('digits')) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric or complex vector.</p> </td> </tr> <tr valign='top'> <td><code>digits</code></td> <td> <p>integer indicating the precision to be used.</p> </td> </tr> </table> "	FALSE
"Extract.data.frame"	"base"	"Extract or Replace Parts of a Data Frame"	"<p>Extract or replace subsets of data frames. </p>"	"<pre>## S3 method for class 'data.frame' x[i, j, drop = ] ## S3 replacement method for class 'data.frame' x[i, j] &lt;- value ## S3 method for class 'data.frame' x[[..., exact = TRUE]] ## S3 replacement method for class 'data.frame' x[[i, j]] &lt;- value ## S3 method for class 'data.frame' x$name ## S3 replacement method for class 'data.frame' x$name &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>data frame.</p> </td> </tr> <tr valign='top'> <td><code>i, j, ...</code></td> <td> <p>elements to extract or replace.  For <code>[</code> and <code>[[</code>, these are <code>numeric</code> or <code>character</code> or, for <code>[</code> only, empty.  Numeric values are coerced to integer as if by <code>as.integer</code>.  For replacement by <code>[</code>, a logical matrix is allowed.</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td><br /><p>A literal character string or a name (possibly backtick quoted).</p> </td> </tr> <tr valign='top'> <td><code>drop</code></td> <td> <p>logical.  If <code>TRUE</code> the result is coerced to the lowest possible dimension.  The default is to drop if only one column is left, but <b>not</b> to drop if only one row is left.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>A suitable replacement value: it will be repeated a whole number of times if necessary and it may be coerced: see the Coercion section.  If <code>NULL</code>, deletes the column if a single column is selected.</p> </td> </tr> <tr valign='top'> <td><code>exact</code></td> <td> <p>logical: see <code>[</code>, and applies to column names.</p> </td> </tr> </table> "	FALSE
"bincode"	"base"	"Bin a Numeric Vector"	"<p>Bin a numeric vector and return integer codes for the binning. </p>"	"<pre>.bincode(x, breaks, right = TRUE, include.lowest = FALSE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a numeric vector which is to be converted to integer codes by binning.</p> </td> </tr> <tr valign='top'> <td><code>breaks</code></td> <td> <p>a numeric vector of two or more cut points, sorted in increasing order.</p> </td> </tr> <tr valign='top'> <td><code>right</code></td> <td> <p>logical, indicating if the intervals should be closed on the right (and open on the left) or vice versa.</p> </td> </tr> <tr valign='top'> <td><code>include.lowest</code></td> <td> <p>logical, indicating if an ‘x[i]’ equal to the lowest (or highest, for <code>right = FALSE</code>) ‘breaks’ value should be included in the first (or last) bin.</p> </td> </tr> </table> "	FALSE
"CallExternal"	"base"	"Modern Interfaces to C/C++ code"	"<p>Functions to pass <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects to compiled C/C++ code that has been loaded into <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span>. </p>"	"<pre><br />     .Call(.NAME, ..., PACKAGE) .External(.NAME, ..., PACKAGE) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>.NAME</code></td> <td> <p>a character string giving the name of a C function, or an object of class <code>'NativeSymbolInfo'</code>, <code>'RegisteredNativeSymbol'</code> or <code>'NativeSymbol'</code> referring to such a name.</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>arguments to be passed to the compiled code. Up to 65 for <code>.Call</code>.</p> </td> </tr> <tr valign='top'> <td><code>PACKAGE</code></td> <td> <p>if supplied, confine the search for a character string <code>.NAME</code> to the DLL given by this argument (plus the conventional extension, ‘<span class='file'>.so</span>’, ‘<span class='file'>.dll</span>’, ...). </p> <p>This argument follows <code>...</code> and so its name cannot be abbreviated. </p> <p>This is intended to add safety for packages, which can ensure by using this argument that no other package can override their external symbols, and also speeds up the search (see ‘Note’).</p> </td> </tr> </table> "	FALSE
"deparseOpts"	"base"	"Options for Expression Deparsing"	"<p>Process the deparsing options for <code>deparse</code>, <code>dput</code> and <code>dump</code>. </p>"	"<pre>.deparseOpts(control) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>control</code></td> <td> <p>character vector of deparsing options.</p> </td> </tr></table> "	FALSE
"dev"	"base"	"Lists of Open/Active Graphics Devices"	"<p>A pairlist of the names of open graphics devices is stored in <code>.Devices</code>. The name of the active device (see <code>dev.cur</code>) is stored in <code>.Device</code>.  Both are symbols and so appear in the base namespace. </p>"	NA	NA	FALSE
"Internal"	"base"	"Call an Internal Function"	"<p><code>.Internal</code> performs a call to an internal code which is built in to the <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> interpreter. </p> <p>Only true <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> wizards should even consider using this function, and only <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> developers can add to the list of internal functions. </p>"	"<pre>.Internal(call) </pre>"	"<table summary='R argblock'><tr valign='top'> <td><code>call</code></td> <td> <p>a call expression</p> </td> </tr></table> "	FALSE
"ns-hooks"	"base"	"Hooks for Namespace Events"	"<p>Packages can supply functions to be called when loaded, attached, detached or unloaded. </p>"	"<pre>.onLoad(libname, pkgname) .onAttach(libname, pkgname) .onUnload(libpath) .onDetach(libpath) .Last.lib(libpath) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>libname</code></td> <td> <p>a character string giving the library directory where the package defining the namespace was found.</p> </td> </tr> <tr valign='top'> <td><code>pkgname</code></td> <td> <p>a character string giving the name of the package.</p> </td> </tr> <tr valign='top'> <td><code>libpath</code></td> <td> <p>a character string giving the complete path to the package.</p> </td> </tr> </table> "	FALSE
"Last.value"	"base"	"Value of Last Evaluated Expression"	"<p>The value of the internal evaluation of a top-level <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> expression is always assigned to <code>.Last.value</code> (in <code>package:base</code>) before further processing (e.g., printing). </p>"	"<pre>.Last.value </pre>"	NA	FALSE
"zMachine"	"base"	"Numerical Characteristics of the Machine"	"<p><code>.Machine</code> is a variable holding information on the numerical characteristics of the machine <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> is running on, such as the largest double or integer and the machine's precision. </p>"	"<pre>.Machine </pre>"	NA	FALSE
"zpackages"	"base"	"Listing of Packages"	"<p><code>.packages</code> returns information about package availability. </p>"	"<pre>.packages(all.available = FALSE, lib.loc = NULL) </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>all.available</code></td> <td> <p>logical; if <code>TRUE</code> return a character vector of all available packages in <code>lib.loc</code>.</p> </td> </tr> <tr valign='top'> <td><code>lib.loc</code></td> <td> <p>a character vector describing the location of <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> library trees to search through, or <code>NULL</code>.  The default value of <code>NULL</code> corresponds to <code>.libPaths()</code>.</p> </td> </tr> </table> "	FALSE
"Platform"	"base"	"Platform Specific Variables"	"<p><code>.Platform</code> is a list with some details of the platform under which <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> was built.  This provides means to write OS-portable <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> code. </p>"	"<pre>.Platform </pre>"	NA	FALSE
"zutils"	"base"	"Miscellaneous Internal/Programming Utilities"	"<p>Miscellaneous internal/programming utilities.</p>"	"<pre>.standard_regexps() </pre>"	NA	FALSE
"ns-dblcolon"	"base"	"Double Colon and Triple Colon Operators"	"<p>Accessing exported and internal variables, i.e. <span style='font-family: Courier New, Courier; color: #666666;'><b>R</b></span> objects (including lazy loaded data sets) in a namespace. </p>"	"<pre>pkg::name pkg:::name </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>pkg</code></td> <td> <p>package name: symbol or literal character string.</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>variable name: symbol or literal character string.</p> </td> </tr> </table> "	FALSE
"slotOp"	"base"	"Extract or Replace A Slot"	"<p>Extract or replace the contents of a slot in a object with a formal (S4) class structure. </p>"	"<pre>object@name object@name &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>object</code></td> <td> <p>An object from a formally defined (S4) class.</p> </td> </tr> <tr valign='top'> <td><code>name</code></td> <td> <p>The character-string name of the slot, quoted or not.  Must be the name of a slot in the definition of the class of <code>object</code>.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>A replacement value for the slot, which must be from a class compatible with the class defined for this slot in the definition of the class of  <code>object</code>.</p> </td> </tr> </table> "	FALSE
"Extract.factor"	"base"	"Extract or Replace Parts of a Factor"	"<p>Extract or replace subsets of factors. </p>"	"<pre>## S3 method for class 'factor' x[..., drop = FALSE] ## S3 method for class 'factor' x[[...]] ## S3 replacement method for class 'factor' x[...] &lt;- value ## S3 replacement method for class 'factor' x[[...]] &lt;- value </pre>"	"<table summary='R argblock'> <tr valign='top'> <td><code>x</code></td> <td> <p>a factor</p> </td> </tr> <tr valign='top'> <td><code>...</code></td> <td> <p>a specification of indices – see <code>Extract</code>.</p> </td> </tr> <tr valign='top'> <td><code>drop</code></td> <td> <p>logical.  If true, unused levels are dropped.</p> </td> </tr> <tr valign='top'> <td><code>value</code></td> <td> <p>character: a set of levels.  Factor values are coerced to character.</p> </td> </tr> </table> "	FALSE
